# This is a sample nginx config file for a web server
# We will copy this file to the nginx config and replace the placeholders and use certbot to generate the ssl certs

server {
  # server_name DOMAIN_PLACEHOLDER *.DOMAIN_PLACEHOLDER;
  #TODO:Unauthorized Subdomains temporary redirects
  server_name DOMAIN_PLACEHOLDER app.DOMAIN_PLACEHOLDER www.DOMAIN_PLACEHOLDER;

  # Allows handling incoming request with payload up to 15MB
  client_max_body_size 15M;

  # Homepage (/) → external Framer site
  location = / {
    proxy_pass https://HOMEPAGE_PLACEHOLDER/;
    proxy_set_header Host HOMEPAGE_PLACEHOLDER;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Original-Host $host;
    
    # Additional headers for better proxy compatibility 
    proxy_ssl_server_name on;
    proxy_ssl_verify off;
    proxy_redirect off;
  }

   location ^~ /info/ {
    proxy_pass https://HOMEPAGE_PLACEHOLDER$request_uri;
    proxy_set_header Host HOMEPAGE_PLACEHOLDER;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_ssl_server_name on;
    proxy_ssl_verify off;
    proxy_redirect off;
  }


  # API routes → local Next.js app
  location /api/ {
    proxy_pass http://127.0.0.1:PORT_PLACEHOLDER;
    proxy_set_header Host $host;   # keep original domain for session cookies
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  # Static icons → local app (with CORS)
  location /icons/ {
    proxy_pass http://127.0.0.1:PORT_PLACEHOLDER;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Add CORS headers
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
    add_header 'Access-Control-Allow-Headers' '*';
  }

  # Everything else → local app
  location / {
    proxy_pass http://127.0.0.1:PORT_PLACEHOLDER;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

#TODO:Unauthorized Subdomains temporary redirects
server {
  listen 443 ssl;
  server_name *.DOMAIN_PLACEHOLDER;

  # Catch-all for any subdomain except app and www
  if ($host !~* ^(app|www)\.DOMAIN_PLACEHOLDER$) {
    return 301 https://app.DOMAIN_PLACEHOLDER$request_uri;
  }

  ssl_certificate /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/DOMAIN_PLACEHOLDER/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

# HTTP → HTTPS Redirection
server {
  if ($host = DOMAIN_PLACEHOLDER) {
    return 301 https://$host$request_uri;
  } # managed by Certbot

  if ($host ~ ^[^.]+\.DOMAIN_PLACEHOLDER$) {
    return 301 https://$host$request_uri;
  } # managed by Certbot

  listen 80;
  server_name DOMAIN_PLACEHOLDER *.DOMAIN_PLACEHOLDER;
  return 404; # managed by Certbot
}