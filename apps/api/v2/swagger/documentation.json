{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "operationId": "AppController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Health - development only"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}/users": {
      "get": {
        "operationId": "OAuthClientUsersController_getManagedUsers",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUsersOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Managed users"
        ]
      },
      "post": {
        "operationId": "OAuthClientUsersController_createUser",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManagedUserInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateManagedUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Managed users"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}/users/{userId}": {
      "get": {
        "operationId": "OAuthClientUsersController_getUserById",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Managed users"
        ]
      },
      "patch": {
        "operationId": "OAuthClientUsersController_updateUser",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagedUserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Managed users"
        ]
      },
      "delete": {
        "operationId": "OAuthClientUsersController_deleteUser",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Managed users"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}/users/{userId}/force-refresh": {
      "post": {
        "operationId": "OAuthClientUsersController_forceRefresh",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Managed users"
        ]
      }
    },
    "/v2/oauth-clients": {
      "post": {
        "operationId": "OAuthClientsController_createOAuthClient",
        "summary": "",
        "description": "⚠️ First, this endpoint requires `Cookie: next-auth.session-token=eyJhbGciOiJ` header. Log into Cal web app using owner of organization that was created after visiting `/settings/organizations/new`, refresh swagger docs, and the cookie will be added to requests automatically to pass the NextAuthGuard.\nSecond, make sure that the logged in user has organizationId set to pass the OrganizationRolesGuard guard.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuthClientInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create an OAuth client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOAuthClientResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      },
      "get": {
        "operationId": "OAuthClientsController_getOAuthClients",
        "summary": "",
        "description": "⚠️ First, this endpoint requires `Cookie: next-auth.session-token=eyJhbGciOiJ` header. Log into Cal web app using owner of organization that was created after visiting `/settings/organizations/new`, refresh swagger docs, and the cookie will be added to requests automatically to pass the NextAuthGuard.\nSecond, make sure that the logged in user has organizationId set to pass the OrganizationRolesGuard guard.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthClientsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}": {
      "get": {
        "operationId": "OAuthClientsController_getOAuthClientById",
        "summary": "",
        "description": "⚠️ First, this endpoint requires `Cookie: next-auth.session-token=eyJhbGciOiJ` header. Log into Cal web app using owner of organization that was created after visiting `/settings/organizations/new`, refresh swagger docs, and the cookie will be added to requests automatically to pass the NextAuthGuard.\nSecond, make sure that the logged in user has organizationId set to pass the OrganizationRolesGuard guard.",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthClientResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      },
      "patch": {
        "operationId": "OAuthClientsController_updateOAuthClient",
        "summary": "",
        "description": "⚠️ First, this endpoint requires `Cookie: next-auth.session-token=eyJhbGciOiJ` header. Log into Cal web app using owner of organization that was created after visiting `/settings/organizations/new`, refresh swagger docs, and the cookie will be added to requests automatically to pass the NextAuthGuard.\nSecond, make sure that the logged in user has organizationId set to pass the OrganizationRolesGuard guard.",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOAuthClientInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthClientResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      },
      "delete": {
        "operationId": "OAuthClientsController_deleteOAuthClient",
        "summary": "",
        "description": "⚠️ First, this endpoint requires `Cookie: next-auth.session-token=eyJhbGciOiJ` header. Log into Cal web app using owner of organization that was created after visiting `/settings/organizations/new`, refresh swagger docs, and the cookie will be added to requests automatically to pass the NextAuthGuard.\nSecond, make sure that the logged in user has organizationId set to pass the OrganizationRolesGuard guard.",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthClientResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}/managed-users": {
      "get": {
        "operationId": "OAuthClientsController_getOAuthClientManagedUsersById",
        "summary": "",
        "description": "⚠️ First, this endpoint requires `Cookie: next-auth.session-token=eyJhbGciOiJ` header. Log into Cal web app using owner of organization that was created after visiting `/settings/organizations/new`, refresh swagger docs, and the cookie will be added to requests automatically to pass the NextAuthGuard.\nSecond, make sure that the logged in user has organizationId set to pass the OrganizationRolesGuard guard.",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUsersOutput"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      }
    },
    "/v2/oauth/{clientId}/authorize": {
      "post": {
        "operationId": "OAuthFlowController_authorize",
        "summary": "Authorize an OAuth client",
        "description": "Redirects the user to the specified 'redirect_uri' with an authorization code in query parameter if the client is authorized successfully. The code is then exchanged for access and refresh tokens via the `/exchange` endpoint.",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthAuthorizeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user is redirected to the 'redirect_uri' with an authorization code in query parameter e.g. `redirectUri?code=secretcode.`"
          },
          "400": {
            "description": "Bad request if the OAuth client is not found, if the redirect URI is invalid, or if the user has already authorized the client."
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      }
    },
    "/v2/oauth/{clientId}/exchange": {
      "post": {
        "operationId": "OAuthFlowController_exchange",
        "summary": "Exchange authorization code for access tokens",
        "description": "Exchanges the authorization code received from the `/authorize` endpoint for access and refresh tokens. The authorization code should be provided in the 'Authorization' header prefixed with 'Bearer '.",
        "parameters": [
          {
            "name": "Authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeAuthorizationCodeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully exchanged authorization code for access and refresh tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request if the authorization code is missing, invalid, or if the client ID and secret do not match."
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      }
    },
    "/v2/oauth/{clientId}/refresh": {
      "post": {
        "operationId": "OAuthFlowController_refreshAccessToken",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-cal-secret-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuth - development only"
        ]
      }
    },
    "/v2/event-types": {
      "post": {
        "operationId": "EventTypesController_2024_04_15_createEventType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventTypeInput_2024_04_15"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      },
      "get": {
        "operationId": "EventTypesController_2024_04_15_getEventTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventTypesOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      }
    },
    "/v2/event-types/{eventTypeId}": {
      "get": {
        "operationId": "EventTypesController_2024_04_15_getEventType",
        "parameters": [
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      },
      "patch": {
        "operationId": "EventTypesController_2024_04_15_updateEventType",
        "parameters": [
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventTypeInput_2024_04_15"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      },
      "delete": {
        "operationId": "EventTypesController_2024_04_15_deleteEventType",
        "parameters": [
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      }
    },
    "/v2/selected-calendars": {
      "post": {
        "operationId": "SelectedCalendarsController_addSelectedCalendar",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelectedCalendarsInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectedCalendarOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Selected-Calendars"
        ]
      },
      "delete": {
        "operationId": "SelectedCalendarsController_removeSelectedCalendar",
        "parameters": [
          {
            "name": "integration",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credentialId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectedCalendarOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Selected-Calendars"
        ]
      }
    },
    "/v2/event-types/{username}/{eventSlug}/public": {
      "get": {
        "operationId": "EventTypesController_2024_04_15_getPublicEventType",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isTeamEvent",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "org",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventTypePublicOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      }
    },
    "/v2/event-types/{username}/public": {
      "get": {
        "operationId": "EventTypesController_2024_04_15_getPublicEventTypes",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventTypesPublicOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Event types"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams": {
      "get": {
        "operationId": "OrganizationsTeamsController_getAllTeams",
        "summary": "Get all the teams of an organization.",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamsOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      },
      "post": {
        "operationId": "OrganizationsTeamsController_createTeam",
        "summary": "Create a team for an organization.",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x-cal-client-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgTeamDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/me": {
      "get": {
        "operationId": "OrganizationsTeamsController_getMyTeams",
        "summary": "Get the organization's teams user is a member of",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMeTeamsOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/{teamId}": {
      "get": {
        "operationId": "OrganizationsTeamsController_getTeam",
        "summary": "Get a team of the organization by ID.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      },
      "delete": {
        "operationId": "OrganizationsTeamsController_deleteTeam",
        "summary": "Delete a team of the organization by ID.",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      },
      "patch": {
        "operationId": "OrganizationsTeamsController_updateTeam",
        "summary": "Update a team of the organization by ID.",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgTeamDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      }
    },
    "/v2/organizations/{orgId}/schedules": {
      "get": {
        "operationId": "OrganizationsSchedulesController_getOrganizationSchedules",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSchedulesOutput_2024_06_11"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Schedules"
        ]
      }
    },
    "/v2/organizations/{orgId}/users/{userId}/schedules": {
      "post": {
        "operationId": "OrganizationsSchedulesController_createUserSchedule",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleInput_2024_06_11"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScheduleOutput_2024_06_11"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Schedules"
        ]
      },
      "get": {
        "operationId": "OrganizationsSchedulesController_getUserSchedules",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSchedulesOutput_2024_06_11"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Schedules"
        ]
      }
    },
    "/v2/organizations/{orgId}/users/{userId}/schedules/{scheduleId}": {
      "get": {
        "operationId": "OrganizationsSchedulesController_getUserSchedule",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScheduleOutput_2024_06_11"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Schedules"
        ]
      },
      "patch": {
        "operationId": "OrganizationsSchedulesController_updateUserSchedule",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleInput_2024_06_11"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateScheduleOutput_2024_06_11"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Schedules"
        ]
      },
      "delete": {
        "operationId": "OrganizationsSchedulesController_deleteUserSchedule",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteScheduleOutput_2024_06_11"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Schedules"
        ]
      }
    },
    "/v2/organizations/{orgId}/users": {
      "get": {
        "operationId": "OrganizationsUsersController_getOrganizationsUsers",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emails",
            "required": false,
            "in": "query",
            "description": "The email address or an array of email addresses to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationUsersOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Users"
        ]
      },
      "post": {
        "operationId": "OrganizationsUsersController_createOrganizationUser",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationUserInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Users"
        ]
      }
    },
    "/v2/organizations/{orgId}/users/{userId}": {
      "patch": {
        "operationId": "OrganizationsUsersController_updateOrganizationUser",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationUserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Users"
        ]
      },
      "delete": {
        "operationId": "OrganizationsUsersController_deleteOrganizationUser",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationUserOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Users"
        ]
      }
    },
    "/v2/organizations/{orgId}/memberships": {
      "get": {
        "operationId": "OrganizationsMembershipsController_getAllMemberships",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllOrgMemberships"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Memberships"
        ]
      },
      "post": {
        "operationId": "OrganizationsMembershipsController_createMembership",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgMembershipDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrgMembershipOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Memberships"
        ]
      }
    },
    "/v2/organizations/{orgId}/memberships/{membershipId}": {
      "get": {
        "operationId": "OrganizationsMembershipsController_getOrgMembership",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrgMembership"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Memberships"
        ]
      },
      "delete": {
        "operationId": "OrganizationsMembershipsController_deleteMembership",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteOrgMembership"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Memberships"
        ]
      },
      "patch": {
        "operationId": "OrganizationsMembershipsController_updateMembership",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgMembershipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrgMembership"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Memberships"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/{teamId}/event-types": {
      "post": {
        "operationId": "OrganizationsEventTypesController_createTeamEventType",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamEventTypeInput_2024_06_14"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTeamEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Event Types"
        ]
      },
      "get": {
        "operationId": "OrganizationsEventTypesController_getTeamEventTypes",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTeamEventTypesOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Event Types"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/{teamId}/event-types/{eventTypeId}": {
      "get": {
        "operationId": "OrganizationsEventTypesController_getTeamEventType",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTeamEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Event Types"
        ]
      },
      "patch": {
        "operationId": "OrganizationsEventTypesController_updateTeamEventType",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamEventTypeInput_2024_06_14"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTeamEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Event Types"
        ]
      },
      "delete": {
        "operationId": "OrganizationsEventTypesController_deleteTeamEventType",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTeamEventTypeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Event Types"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/event-types": {
      "get": {
        "operationId": "OrganizationsEventTypesController_getTeamsEventTypes",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTeamEventTypesOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Event Types"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/{teamId}/memberships": {
      "get": {
        "operationId": "OrganizationsTeamsMembershipsController_getAllOrgTeamMemberships",
        "summary": "Get all the memberships of a team of an organization.",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamMembershipsOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      },
      "post": {
        "operationId": "OrganizationsTeamsMembershipsController_createOrgTeamMembership",
        "summary": "Create a membership of an organization's team",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgTeamMembershipDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamMembershipOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      }
    },
    "/v2/organizations/{orgId}/teams/{teamId}/memberships/{membershipId}": {
      "get": {
        "operationId": "OrganizationsTeamsMembershipsController_getOrgTeamMembership",
        "summary": "Get the membership of an organization's team by ID",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamMembershipOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      },
      "delete": {
        "operationId": "OrganizationsTeamsMembershipsController_deleteOrgTeamMembership",
        "summary": "Delete the membership of an organization's team by ID",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamMembershipOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      },
      "patch": {
        "operationId": "OrganizationsTeamsMembershipsController_updateOrgTeamMembership",
        "summary": "Update the membership of an organization's team by ID",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "membershipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgTeamMembershipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTeamMembershipOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Teams"
        ]
      }
    },
    "/v2/organizations/{orgId}/webhooks": {
      "get": {
        "operationId": "OrganizationsWebhooksController_getAllWebhooks",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgWebhooksResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Webhooks"
        ]
      },
      "post": {
        "operationId": "OrganizationsWebhooksController_createWebhook",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgWebhooksResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Webhooks"
        ]
      }
    },
    "/v2/organizations/{orgId}/webhooks/{webhookId}": {
      "get": {
        "operationId": "OrganizationsWebhooksController_getOrgWebhook",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgWebhooksResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Webhooks"
        ]
      },
      "delete": {
        "operationId": "OrganizationsWebhooksController_deleteWebhook",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgWebhooksResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Webhooks"
        ]
      },
      "patch": {
        "operationId": "OrganizationsWebhooksController_updateWebhook",
        "parameters": [
          {
            "name": "orgId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgWebhooksResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations Webhooks"
        ]
      }
    },
    "/v2/schedules": {
      "post": {
        "operationId": "SchedulesController_2024_04_15_createSchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleInput_2024_04_15"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScheduleOutput_2024_04_15"
                }
              }
            }
          }
        },
        "tags": [
          "Schedules"
        ]
      },
      "get": {
        "operationId": "SchedulesController_2024_04_15_getSchedules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSchedulesOutput_2024_04_15"
                }
              }
            }
          }
        },
        "tags": [
          "Schedules"
        ]
      }
    },
    "/v2/schedules/default": {
      "get": {
        "operationId": "SchedulesController_2024_04_15_getDefaultSchedule",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the default schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDefaultScheduleOutput_2024_04_15"
                }
              }
            }
          }
        },
        "tags": [
          "Schedules"
        ]
      }
    },
    "/v2/schedules/{scheduleId}": {
      "get": {
        "operationId": "SchedulesController_2024_04_15_getSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScheduleOutput_2024_04_15"
                }
              }
            }
          }
        },
        "tags": [
          "Schedules"
        ]
      },
      "patch": {
        "operationId": "SchedulesController_2024_04_15_updateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleInput_2024_04_15"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateScheduleOutput_2024_04_15"
                }
              }
            }
          }
        },
        "tags": [
          "Schedules"
        ]
      },
      "delete": {
        "operationId": "SchedulesController_2024_04_15_deleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteScheduleOutput_2024_04_15"
                }
              }
            }
          }
        },
        "tags": [
          "Schedules"
        ]
      }
    },
    "/v2/gcal/oauth/auth-url": {
      "get": {
        "operationId": "GcalController_redirect",
        "parameters": [
          {
            "name": "Authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GcalAuthUrlOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Google Calendar"
        ]
      }
    },
    "/v2/gcal/oauth/save": {
      "get": {
        "operationId": "GcalController_save",
        "parameters": [
          {
            "name": "state",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GcalSaveRedirectOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Google Calendar"
        ]
      }
    },
    "/v2/gcal/check": {
      "get": {
        "operationId": "GcalController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GcalCheckOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Google Calendar"
        ]
      }
    },
    "/v2/provider/{clientId}": {
      "get": {
        "operationId": "CalProviderController_verifyClientId",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderVerifyClientOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Cal provider"
        ]
      }
    },
    "/v2/provider/{clientId}/access-token": {
      "get": {
        "operationId": "CalProviderController_verifyAccessToken",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderVerifyAccessTokenOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Cal provider"
        ]
      }
    },
    "/v2/me": {
      "get": {
        "operationId": "MeController_getMe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Me"
        ]
      },
      "patch": {
        "operationId": "MeController_updateMe",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagedUserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMeOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Me"
        ]
      }
    },
    "/v2/calendars/busy-times": {
      "get": {
        "operationId": "CalendarsController_getBusyTimes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBusyTimesOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/calendars": {
      "get": {
        "operationId": "CalendarsController_getCalendars",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedCalendarsOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/calendars/{calendar}/connect": {
      "get": {
        "operationId": "CalendarsController_redirect",
        "parameters": [
          {
            "name": "Authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calendar",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/calendars/{calendar}/save": {
      "get": {
        "operationId": "CalendarsController_save",
        "parameters": [
          {
            "name": "state",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calendar",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/calendars/{calendar}/credentials": {
      "post": {
        "operationId": "CalendarsController_syncCredentials",
        "parameters": [
          {
            "name": "calendar",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/calendars/{calendar}/check": {
      "get": {
        "operationId": "CalendarsController_check",
        "parameters": [
          {
            "name": "calendar",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/calendars/{calendar}/disconnect": {
      "post": {
        "operationId": "CalendarsController_deleteCalendarCredentials",
        "parameters": [
          {
            "name": "calendar",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCalendarCredentialsInputBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCalendarCredentialsOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v2/bookings": {
      "get": {
        "operationId": "BookingsController_getBookings",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filters[status]",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "upcoming",
                "recurring",
                "past",
                "cancelled",
                "unconfirmed"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingsOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      },
      "post": {
        "operationId": "BookingsController_createBooking",
        "parameters": [
          {
            "name": "x-cal-client-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/bookings/{bookingUid}": {
      "get": {
        "operationId": "BookingsController_getBooking",
        "parameters": [
          {
            "name": "bookingUid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/bookings/{bookingUid}/reschedule": {
      "get": {
        "operationId": "BookingsController_getBookingForReschedule",
        "parameters": [
          {
            "name": "bookingUid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/bookings/{bookingId}/cancel": {
      "post": {
        "operationId": "BookingsController_cancelBooking",
        "parameters": [
          {
            "name": "bookingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-cal-client-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelBookingInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/bookings/{bookingUid}/mark-no-show": {
      "post": {
        "operationId": "BookingsController_markNoShow",
        "parameters": [
          {
            "name": "bookingUid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkNoShowInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkNoShowOutput"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/bookings/recurring": {
      "post": {
        "operationId": "BookingsController_createRecurringBooking",
        "parameters": [
          {
            "name": "x-cal-client-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/bookings/instant": {
      "post": {
        "operationId": "BookingsController_createInstantBooking",
        "parameters": [
          {
            "name": "x-cal-client-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/v2/slots/reserve": {
      "post": {
        "operationId": "SlotsController_reserveSlot",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveSlotInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Slots"
        ]
      }
    },
    "/v2/slots/selected-slot": {
      "delete": {
        "operationId": "SlotsController_deleteSelectedSlot",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Slots"
        ]
      }
    },
    "/v2/slots/available": {
      "get": {
        "operationId": "SlotsController_getAvailableSlots",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Slots"
        ]
      }
    },
    "/v2/timezones": {
      "get": {
        "operationId": "TimezonesController_getTimeZones",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Timezones"
        ]
      }
    },
    "/v2/webhooks": {
      "post": {
        "operationId": "WebhooksController_createWebhook",
        "summary": "Create a webhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' Webhooks"
        ]
      },
      "get": {
        "operationId": "WebhooksController_getWebhooks",
        "summary": "Get all user webhooks paginated",
        "parameters": [
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWebhooksOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' Webhooks"
        ]
      }
    },
    "/v2/webhooks/{webhookId}": {
      "patch": {
        "operationId": "WebhooksController_updateWebhook",
        "summary": "Update a webhook",
        "parameters": [
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' Webhooks"
        ]
      },
      "get": {
        "operationId": "WebhooksController_getWebhook",
        "summary": "Get a webhook",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' Webhooks"
        ]
      },
      "delete": {
        "operationId": "WebhooksController_deleteWebhook",
        "summary": "Delete a webhook",
        "parameters": [
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' Webhooks"
        ]
      }
    },
    "/v2/event-types/{eventTypeId}/webhooks": {
      "post": {
        "operationId": "EventTypeWebhooksController_createEventTypeWebhook",
        "summary": "Create a webhook for an event-type",
        "parameters": [
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' EventTypes Webhooks"
        ]
      },
      "get": {
        "operationId": "EventTypeWebhooksController_getEventTypeWebhooks",
        "summary": "Get all webhooks of an event-type",
        "parameters": [
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeWebhooksOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' EventTypes Webhooks"
        ]
      },
      "delete": {
        "operationId": "EventTypeWebhooksController_deleteAllEventTypeWebhooks",
        "summary": "Delete all webhooks of an event-type",
        "parameters": [
          {
            "name": "eventTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteManyWebhooksOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' EventTypes Webhooks"
        ]
      }
    },
    "/v2/event-types/{eventTypeId}/webhooks/{webhookId}": {
      "patch": {
        "operationId": "EventTypeWebhooksController_updateEventTypeWebhook",
        "summary": "Update a webhook of an event-type",
        "parameters": [
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' EventTypes Webhooks"
        ]
      },
      "get": {
        "operationId": "EventTypeWebhooksController_getEventTypeWebhook",
        "summary": "Get a webhook of an event-type",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' EventTypes Webhooks"
        ]
      },
      "delete": {
        "operationId": "EventTypeWebhooksController_deleteEventTypeWebhook",
        "summary": "Delete a webhook of an event-type",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users' EventTypes Webhooks"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}/webhooks": {
      "post": {
        "operationId": "OAuthClientWebhooksController_createOAuthClientWebhook",
        "summary": "Create a webhook for an oAuthClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuthClients Webhooks"
        ]
      },
      "get": {
        "operationId": "OAuthClientWebhooksController_getOAuthClientWebhooks",
        "summary": "Get all webhooks of an oAuthClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "The number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhooksOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuthClients Webhooks"
        ]
      },
      "delete": {
        "operationId": "OAuthClientWebhooksController_deleteAllOAuthClientWebhooks",
        "summary": "Delete all webhooks of an oAuthClient",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteManyWebhooksOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuthClients Webhooks"
        ]
      }
    },
    "/v2/oauth-clients/{clientId}/webhooks/{webhookId}": {
      "patch": {
        "operationId": "OAuthClientWebhooksController_updateOAuthClientWebhook",
        "summary": "Update a webhook of an oAuthClient",
        "parameters": [
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuthClients Webhooks"
        ]
      },
      "get": {
        "operationId": "OAuthClientWebhooksController_getOAuthClientWebhook",
        "summary": "Get a webhook of an oAuthClient",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuthClients Webhooks"
        ]
      },
      "delete": {
        "operationId": "OAuthClientWebhooksController_deleteOAuthClientWebhook",
        "summary": "Delete a webhook of an oAuthClient",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "OAuthClients Webhooks"
        ]
      }
    },
    "/v2/destination-calendars": {
      "put": {
        "operationId": "DestinationCalendarsController_updateDestinationCalendars",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DestinationCalendarsInputBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationCalendarsOutputResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Destination-Calendars",
          "Select a third party destination calendar where events will be created"
        ]
      }
    }
  },
  "info": {
    "title": "Cal.com v2 API",
    "description": "",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "ManagedUserOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "alice+cluo37fwd0001khkzqqynkpj3@example.com"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "example": "alice"
          },
          "timeZone": {
            "type": "string",
            "example": "America/New_York"
          },
          "weekStart": {
            "type": "string",
            "example": "Sunday"
          },
          "createdDate": {
            "type": "string",
            "example": "2024-04-01T00:00:00.000Z"
          },
          "timeFormat": {
            "type": "number",
            "nullable": true,
            "example": 12
          },
          "defaultScheduleId": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "locale": {
            "enum": [
              "ar",
              "ca",
              "de",
              "es",
              "eu",
              "he",
              "id",
              "ja",
              "lv",
              "pl",
              "ro",
              "sr",
              "th",
              "vi",
              "az",
              "cs",
              "el",
              "es-419",
              "fi",
              "hr",
              "it",
              "km",
              "nl",
              "pt",
              "ru",
              "sv",
              "tr",
              "zh-CN",
              "bg",
              "da",
              "en",
              "et",
              "fr",
              "hu",
              "iw",
              "ko",
              "no",
              "pt-BR",
              "sk",
              "ta",
              "uk",
              "zh-TW"
            ],
            "type": "string",
            "example": "en"
          }
        },
        "required": [
          "id",
          "email",
          "username",
          "timeZone",
          "weekStart",
          "createdDate",
          "timeFormat",
          "defaultScheduleId"
        ]
      },
      "GetManagedUsersOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagedUserOutput"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateManagedUserInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "alice@example.com"
          },
          "timeFormat": {
            "type": "number",
            "example": 12,
            "enum": [
              12,
              24
            ],
            "description": "Must be 12 or 24"
          },
          "weekStart": {
            "type": "string",
            "example": "Monday",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "timeZone": {
            "type": "string",
            "example": "America/New_York"
          },
          "locale": {
            "enum": [
              "ar",
              "ca",
              "de",
              "es",
              "eu",
              "he",
              "id",
              "ja",
              "lv",
              "pl",
              "ro",
              "sr",
              "th",
              "vi",
              "az",
              "cs",
              "el",
              "es-419",
              "fi",
              "hr",
              "it",
              "km",
              "nl",
              "pt",
              "ru",
              "sv",
              "tr",
              "zh-CN",
              "bg",
              "da",
              "en",
              "et",
              "fr",
              "hu",
              "iw",
              "ko",
              "no",
              "pt-BR",
              "sk",
              "ta",
              "uk",
              "zh-TW"
            ],
            "type": "string",
            "example": "en"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "CreateManagedUserData": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/ManagedUserOutput"
          },
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "accessTokenExpiresAt": {
            "type": "number"
          }
        },
        "required": [
          "user",
          "accessToken",
          "refreshToken",
          "accessTokenExpiresAt"
        ]
      },
      "CreateManagedUserOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CreateManagedUserData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetManagedUserOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ManagedUserOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateManagedUserInput": {
        "type": "object",
        "properties": {
          "timeFormat": {
            "type": "number",
            "enum": [
              12,
              24
            ],
            "example": 12,
            "description": "Must be 12 or 24"
          },
          "weekStart": {
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ],
            "example": "Monday"
          },
          "locale": {
            "enum": [
              "ar",
              "ca",
              "de",
              "es",
              "eu",
              "he",
              "id",
              "ja",
              "lv",
              "pl",
              "ro",
              "sr",
              "th",
              "vi",
              "az",
              "cs",
              "el",
              "es-419",
              "fi",
              "hr",
              "it",
              "km",
              "nl",
              "pt",
              "ru",
              "sv",
              "tr",
              "zh-CN",
              "bg",
              "da",
              "en",
              "et",
              "fr",
              "hu",
              "iw",
              "ko",
              "no",
              "pt-BR",
              "sk",
              "ta",
              "uk",
              "zh-TW"
            ],
            "type": "string",
            "example": "en"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "defaultScheduleId": {
            "type": "number"
          },
          "timeZone": {
            "type": "string"
          }
        }
      },
      "KeysDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "accessTokenExpiresAt": {
            "type": "number"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "accessTokenExpiresAt"
        ]
      },
      "KeysResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/KeysDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateOAuthClientInput": {
        "type": "object",
        "properties": {}
      },
      "DataDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          "clientSecret": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoib2F1dGgtY2xpZW50Iiwi"
          }
        },
        "required": [
          "clientId",
          "clientSecret"
        ]
      },
      "CreateOAuthClientResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "example": {
              "clientId": "clsx38nbl0001vkhlwin9fmt0",
              "clientSecret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoib2F1dGgtY2xpZW50Iiwi"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/DataDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "PlatformOAuthClientDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          "name": {
            "type": "string",
            "example": "MyClient"
          },
          "secret": {
            "type": "string",
            "example": "secretValue"
          },
          "permissions": {
            "type": "number",
            "example": 3
          },
          "logo": {
            "type": "string",
            "nullable": true,
            "example": "https://example.com/logo.png"
          },
          "redirectUris": {
            "example": [
              "https://example.com/callback"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organizationId": {
            "type": "number",
            "example": 1
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-23T08:33:21.851Z"
          }
        },
        "required": [
          "id",
          "name",
          "secret",
          "permissions",
          "redirectUris",
          "organizationId",
          "createdAt"
        ]
      },
      "GetOAuthClientsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformOAuthClientDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetOAuthClientResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PlatformOAuthClientDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateOAuthClientInput": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "redirectUris": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bookingRedirectUri": {
            "type": "string"
          },
          "bookingCancelRedirectUri": {
            "type": "string"
          },
          "bookingRescheduleRedirectUri": {
            "type": "string"
          },
          "areEmailsEnabled": {
            "type": "boolean"
          }
        }
      },
      "OAuthAuthorizeInput": {
        "type": "object",
        "properties": {
          "redirectUri": {
            "type": "string"
          }
        },
        "required": [
          "redirectUri"
        ]
      },
      "ExchangeAuthorizationCodeInput": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string"
          }
        },
        "required": [
          "clientSecret"
        ]
      },
      "RefreshTokenInput": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "CreateEventTypeInput_2024_06_14": {
        "type": "object",
        "properties": {
          "lengthInMinutes": {
            "type": "number",
            "example": 60
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          },
          "description": {
            "type": "string",
            "example": "Discover the culinary wonders of the Argentina by making the best flan ever!"
          }
        },
        "required": [
          "lengthInMinutes",
          "title",
          "description"
        ]
      },
      "EventTypeOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateEventTypeOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/EventTypeOutput_2024_06_14"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetEventTypeOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventTypeOutput_2024_06_14"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetEventTypesOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeOutput_2024_06_14"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateEventTypeInput_2024_06_14": {
        "type": "object",
        "properties": {}
      },
      "UpdateEventTypeOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/EventTypeOutput_2024_06_14"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteData_2024_06_14": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "lengthInMinutes": {
            "type": "number",
            "example": 60
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "lengthInMinutes",
          "title",
          "slug"
        ]
      },
      "DeleteEventTypeOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/DeleteData_2024_06_14"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "SelectedCalendarsInputDto": {
        "type": "object",
        "properties": {
          "integration": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "credentialId": {
            "type": "number"
          }
        },
        "required": [
          "integration",
          "externalId",
          "credentialId"
        ]
      },
      "SelectedCalendarOutputDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number"
          },
          "integration": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "credentialId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "userId",
          "integration",
          "externalId",
          "credentialId"
        ]
      },
      "SelectedCalendarOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SelectedCalendarOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "EventTypeLocation_2024_04_15": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "link"
          },
          "link": {
            "type": "string",
            "example": "https://masterchief.com/argentina/flan/video/9129412"
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateEventTypeInput_2024_04_15": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "minimum": 1,
            "example": 60
          },
          "slug": {
            "type": "string",
            "example": "cooking-class"
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          },
          "description": {
            "type": "string",
            "example": "Discover the culinary wonders of the Argentina by making the best flan ever!"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeLocation_2024_04_15"
            }
          },
          "disableGuests": {
            "type": "boolean"
          },
          "slotInterval": {
            "type": "number",
            "minimum": 0
          },
          "minimumBookingNotice": {
            "type": "number",
            "minimum": 0
          },
          "beforeEventBuffer": {
            "type": "number",
            "minimum": 0
          },
          "afterEventBuffer": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": [
          "length",
          "slug",
          "title"
        ]
      },
      "EventTypeOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "length": {
            "type": "number",
            "example": 60
          },
          "slug": {
            "type": "string",
            "example": "cooking-class"
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Discover the culinary wonders of the Argentina by making the best flan ever!"
          },
          "locations": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeLocation_2024_04_15"
            }
          }
        },
        "required": [
          "id",
          "length",
          "slug",
          "title",
          "description",
          "locations"
        ]
      },
      "CreateEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EventTypeOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Data": {
        "type": "object",
        "properties": {
          "eventType": {
            "$ref": "#/components/schemas/EventTypeOutput"
          }
        },
        "required": [
          "eventType"
        ]
      },
      "GetEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "EventTypeGroup": {
        "type": "object",
        "properties": {
          "eventTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeOutput"
            }
          }
        },
        "required": [
          "eventTypes"
        ]
      },
      "GetEventTypesData": {
        "type": "object",
        "properties": {
          "eventTypeGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeGroup"
            }
          }
        },
        "required": [
          "eventTypeGroups"
        ]
      },
      "GetEventTypesOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GetEventTypesData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "label"
        ]
      },
      "BookingField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "defaultLabel": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "placeholder": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "getOptionsAt": {
            "type": "string"
          },
          "hideWhenJustOneOption": {
            "type": "boolean"
          },
          "editable": {
            "type": "string"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "disableOnPrefill": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "metadata"
        ]
      },
      "Profile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "number",
            "nullable": true
          },
          "userId": {
            "type": "number"
          },
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organizationId": {
            "type": "number",
            "nullable": true
          },
          "organization": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ]
          },
          "upId": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "brandColor": {
            "type": "string"
          },
          "darkBrandColor": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          },
          "bookerLayouts": {
            "type": "object"
          }
        },
        "required": [
          "username",
          "id",
          "organizationId",
          "upId"
        ]
      },
      "Owner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "weekStart": {
            "type": "string"
          },
          "brandColor": {
            "type": "string",
            "nullable": true
          },
          "darkBrandColor": {
            "type": "string",
            "nullable": true
          },
          "theme": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          },
          "defaultScheduleId": {
            "type": "number",
            "nullable": true
          },
          "nonProfileUsername": {
            "type": "string",
            "nullable": true
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "weekStart",
          "metadata",
          "nonProfileUsername",
          "profile"
        ]
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "timeZone"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "weekStart": {
            "type": "string"
          },
          "organizationId": {
            "type": "number"
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "bookerUrl": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "name",
          "weekStart",
          "profile",
          "bookerUrl"
        ]
      },
      "PublicEventTypeOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "eventName": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string"
          },
          "isInstantEvent": {
            "type": "boolean"
          },
          "aiPhoneCallConfig": {
            "type": "object"
          },
          "schedulingType": {
            "type": "object"
          },
          "length": {
            "type": "number"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "customInputs": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "disableGuests": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "lockTimeZoneToggleOnBookingPage": {
            "type": "boolean"
          },
          "requiresConfirmation": {
            "type": "boolean"
          },
          "requiresBookerEmailVerification": {
            "type": "boolean"
          },
          "recurringEvent": {
            "type": "object"
          },
          "price": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "seatsPerTimeSlot": {
            "type": "number",
            "nullable": true
          },
          "seatsShowAvailabilityCount": {
            "type": "boolean",
            "nullable": true
          },
          "bookingFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingField"
            }
          },
          "team": {
            "type": "object"
          },
          "successRedirectUrl": {
            "type": "string",
            "nullable": true
          },
          "workflows": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "hosts": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "owner": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              }
            ]
          },
          "schedule": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Schedule"
              }
            ]
          },
          "hidden": {
            "type": "boolean"
          },
          "assignAllTeamMembers": {
            "type": "boolean"
          },
          "bookerLayouts": {
            "type": "object"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "entity": {
            "type": "object"
          },
          "isDynamic": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "slug",
          "isInstantEvent",
          "length",
          "locations",
          "customInputs",
          "disableGuests",
          "metadata",
          "lockTimeZoneToggleOnBookingPage",
          "requiresConfirmation",
          "requiresBookerEmailVerification",
          "price",
          "currency",
          "seatsShowAvailabilityCount",
          "bookingFields",
          "workflows",
          "hosts",
          "owner",
          "schedule",
          "hidden",
          "assignAllTeamMembers",
          "users",
          "entity",
          "isDynamic"
        ]
      },
      "GetEventTypePublicOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicEventTypeOutput"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "PublicEventType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "length": {
            "type": "number",
            "example": 60
          },
          "slug": {
            "type": "string",
            "example": "cooking-class"
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "length",
          "slug",
          "title"
        ]
      },
      "GetEventTypesPublicOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicEventType"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Option": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "label"
        ]
      },
      "VariantsConfig": {
        "type": "object",
        "properties": {
          "variants": {
            "type": "object"
          }
        },
        "required": [
          "variants"
        ]
      },
      "View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "BookingField_2024_04_15": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "number",
              "boolean",
              "address",
              "name",
              "text",
              "textarea",
              "email",
              "phone",
              "multiemail",
              "select",
              "multiselect",
              "checkbox",
              "radio",
              "radioInput"
            ]
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          },
          "label": {
            "type": "string"
          },
          "labelAsSafeHtml": {
            "type": "string"
          },
          "defaultLabel": {
            "type": "string"
          },
          "placeholder": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "getOptionsAt": {
            "type": "string"
          },
          "optionsInputs": {
            "type": "object"
          },
          "variant": {
            "type": "string"
          },
          "variantsConfig": {
            "$ref": "#/components/schemas/VariantsConfig"
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/View"
            }
          },
          "hideWhenJustOneOption": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "editable": {
            "type": "string",
            "enum": [
              "system",
              "system-but-optional",
              "system-but-hidden",
              "user",
              "user-readonly"
            ]
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          },
          "disableOnPrefill": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "UpdateEventTypeInput_2024_04_15": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "minimum": 1
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeLocation_2024_04_15"
            }
          },
          "bookingFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingField_2024_04_15"
            }
          },
          "disableGuests": {
            "type": "boolean"
          },
          "minimumBookingNotice": {
            "type": "number",
            "minimum": 0
          },
          "beforeEventBuffer": {
            "type": "number",
            "minimum": 0
          },
          "afterEventBuffer": {
            "type": "number",
            "minimum": 0
          },
          "slotInterval": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "UpdateEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EventTypeOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "length": {
            "type": "number",
            "example": 60
          },
          "slug": {
            "type": "string",
            "example": "cooking-class"
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          }
        },
        "required": [
          "id",
          "length",
          "slug",
          "title"
        ]
      },
      "DeleteEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/DeleteData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OrgTeamOutputDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "parentId": {
            "type": "number"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "slug": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "calVideoLogo": {
            "type": "string"
          },
          "appLogo": {
            "type": "string"
          },
          "appIconLogo": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "hideBranding": {
            "type": "boolean"
          },
          "isOrganization": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "hideBookATeamMember": {
            "type": "boolean",
            "default": false
          },
          "metadata": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          },
          "brandColor": {
            "type": "string"
          },
          "darkBrandColor": {
            "type": "string"
          },
          "bannerUrl": {
            "type": "string"
          },
          "timeFormat": {
            "type": "number"
          },
          "timeZone": {
            "type": "string",
            "default": "Europe/London"
          },
          "weekStart": {
            "type": "string",
            "default": "Sunday"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "OrgTeamsOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgTeamOutputDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OrgMeTeamsOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgTeamOutputDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OrgTeamOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgTeamOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateOrgTeamDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "slug": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "calVideoLogo": {
            "type": "string"
          },
          "appLogo": {
            "type": "string"
          },
          "appIconLogo": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "hideBranding": {
            "type": "boolean",
            "default": false
          },
          "isPrivate": {
            "type": "boolean"
          },
          "hideBookATeamMember": {
            "type": "boolean"
          },
          "metadata": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          },
          "brandColor": {
            "type": "string"
          },
          "darkBrandColor": {
            "type": "string"
          },
          "bannerUrl": {
            "type": "string"
          },
          "timeFormat": {
            "type": "number"
          },
          "timeZone": {
            "type": "string",
            "default": "Europe/London"
          },
          "weekStart": {
            "type": "string",
            "default": "Sunday"
          }
        }
      },
      "CreateOrgTeamDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "slug": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "calVideoLogo": {
            "type": "string"
          },
          "appLogo": {
            "type": "string"
          },
          "appIconLogo": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "hideBranding": {
            "type": "boolean",
            "default": false
          },
          "isPrivate": {
            "type": "boolean"
          },
          "hideBookATeamMember": {
            "type": "boolean"
          },
          "metadata": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          },
          "brandColor": {
            "type": "string"
          },
          "darkBrandColor": {
            "type": "string"
          },
          "bannerUrl": {
            "type": "string"
          },
          "timeFormat": {
            "type": "number"
          },
          "timeZone": {
            "type": "string",
            "default": "Europe/London"
          },
          "weekStart": {
            "type": "string",
            "default": "Sunday"
          },
          "autoAcceptCreator": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "name"
        ]
      },
      "ScheduleAvailabilityInput_2024_06_11": {
        "type": "object",
        "properties": {
          "days": {
            "example": [
              "Monday",
              "Tuesday"
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "startTime": {
            "type": "string",
            "pattern": "TIME_FORMAT_HH_MM",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "pattern": "TIME_FORMAT_HH_MM",
            "example": "10:00"
          }
        },
        "required": [
          "days",
          "startTime",
          "endTime"
        ]
      },
      "ScheduleOverrideInput_2024_06_11": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "example": "2024-05-20"
          },
          "startTime": {
            "type": "string",
            "pattern": "TIME_FORMAT_HH_MM",
            "example": "12:00"
          },
          "endTime": {
            "type": "string",
            "pattern": "TIME_FORMAT_HH_MM",
            "example": "13:00"
          }
        },
        "required": [
          "date",
          "startTime",
          "endTime"
        ]
      },
      "ScheduleOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 254
          },
          "ownerId": {
            "type": "number",
            "example": 478
          },
          "name": {
            "type": "string",
            "example": "One-on-one coaching"
          },
          "timeZone": {
            "type": "string",
            "example": "Europe/Rome"
          },
          "availability": {
            "example": [
              {
                "days": [
                  "Monday",
                  "Tuesday"
                ],
                "startTime": "09:00",
                "endTime": "10:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleAvailabilityInput_2024_06_11"
            }
          },
          "isDefault": {
            "type": "boolean",
            "example": true
          },
          "overrides": {
            "example": [
              {
                "date": "2024-05-20",
                "startTime": "12:00",
                "endTime": "13:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleOverrideInput_2024_06_11"
            }
          }
        },
        "required": [
          "id",
          "ownerId",
          "name",
          "timeZone",
          "availability",
          "isDefault",
          "overrides"
        ]
      },
      "GetSchedulesOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleOutput_2024_06_11"
            }
          },
          "error": {
            "type": "object"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateScheduleInput_2024_06_11": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "One-on-one coaching"
          },
          "timeZone": {
            "type": "string",
            "example": "Europe/Rome"
          },
          "availability": {
            "example": [
              {
                "days": [
                  "Monday",
                  "Tuesday"
                ],
                "startTime": "09:00",
                "endTime": "10:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleAvailabilityInput_2024_06_11"
            }
          },
          "isDefault": {
            "type": "boolean",
            "example": true
          },
          "overrides": {
            "example": [
              {
                "date": "2024-05-20",
                "startTime": "12:00",
                "endTime": "14:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleOverrideInput_2024_06_11"
            }
          }
        },
        "required": [
          "name",
          "timeZone",
          "isDefault"
        ]
      },
      "CreateScheduleOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ScheduleOutput_2024_06_11"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetScheduleOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleOutput_2024_06_11"
              }
            ]
          },
          "error": {
            "type": "object"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateScheduleInput_2024_06_11": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "One-on-one coaching"
          },
          "timeZone": {
            "type": "string",
            "example": "Europe/Rome"
          },
          "availability": {
            "example": [
              {
                "days": [
                  "Monday",
                  "Tuesday"
                ],
                "startTime": "09:00",
                "endTime": "10:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleAvailabilityInput_2024_06_11"
            }
          },
          "isDefault": {
            "type": "boolean",
            "example": true
          },
          "overrides": {
            "example": [
              {
                "date": "2024-05-20",
                "startTime": "12:00",
                "endTime": "14:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleOverrideInput_2024_06_11"
            }
          }
        }
      },
      "UpdateScheduleOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ScheduleOutput_2024_06_11"
          },
          "error": {
            "type": "object"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteScheduleOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "GetUserOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The ID of the user",
            "example": 1
          },
          "username": {
            "type": "string",
            "nullable": true,
            "description": "The username of the user",
            "example": "john_doe"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "john@example.com"
          },
          "emailVerified": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "description": "The date when the email was verified",
            "example": "2022-01-01T00:00:00Z"
          },
          "bio": {
            "type": "string",
            "nullable": true,
            "description": "The bio of the user",
            "example": "I am a software developer"
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true,
            "description": "The URL of the user's avatar",
            "example": "https://example.com/avatar.jpg"
          },
          "timeZone": {
            "type": "string",
            "description": "The time zone of the user",
            "example": "America/New_York"
          },
          "weekStart": {
            "type": "string",
            "description": "The week start day of the user",
            "example": "Monday"
          },
          "appTheme": {
            "type": "string",
            "nullable": true,
            "description": "The app theme of the user",
            "example": "light"
          },
          "theme": {
            "type": "string",
            "nullable": true,
            "description": "The theme of the user",
            "example": "default"
          },
          "defaultScheduleId": {
            "type": "number",
            "nullable": true,
            "description": "The ID of the default schedule for the user",
            "example": 1
          },
          "locale": {
            "type": "string",
            "nullable": true,
            "description": "The locale of the user",
            "example": "en-US"
          },
          "timeFormat": {
            "type": "number",
            "nullable": true,
            "description": "The time format of the user",
            "example": 12
          },
          "hideBranding": {
            "type": "boolean",
            "description": "Whether to hide branding for the user",
            "example": false
          },
          "brandColor": {
            "type": "string",
            "nullable": true,
            "description": "The brand color of the user",
            "example": "#ffffff"
          },
          "darkBrandColor": {
            "type": "string",
            "nullable": true,
            "description": "The dark brand color of the user",
            "example": "#000000"
          },
          "allowDynamicBooking": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether dynamic booking is allowed for the user",
            "example": true
          },
          "createdDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the user was created",
            "example": "2022-01-01T00:00:00Z"
          },
          "verified": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether the user is verified",
            "example": true
          },
          "invitedTo": {
            "type": "number",
            "nullable": true,
            "description": "The ID of the user who invited this user",
            "example": 1
          }
        },
        "required": [
          "id",
          "email",
          "timeZone",
          "weekStart",
          "hideBranding",
          "createdDate"
        ]
      },
      "GetOrganizationUsersOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserOutput"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateOrganizationUserInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "user123"
          },
          "weekday": {
            "type": "string",
            "description": "Preferred weekday",
            "example": "Monday"
          },
          "brandColor": {
            "type": "string",
            "description": "Brand color in HEX format",
            "example": "#FFFFFF"
          },
          "darkBrandColor": {
            "type": "string",
            "description": "Dark brand color in HEX format",
            "example": "#000000"
          },
          "hideBranding": {
            "type": "boolean",
            "description": "Hide branding",
            "example": false
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "example": "America/New_York"
          },
          "theme": {
            "type": "string",
            "nullable": true,
            "description": "Theme",
            "example": "dark"
          },
          "appTheme": {
            "type": "string",
            "nullable": true,
            "description": "Application theme",
            "example": "light"
          },
          "timeFormat": {
            "type": "number",
            "description": "Time format",
            "example": 24
          },
          "defaultScheduleId": {
            "type": "number",
            "minimum": 0,
            "description": "Default schedule ID",
            "example": 1
          },
          "locale": {
            "type": "string",
            "nullable": true,
            "default": "en",
            "description": "Locale",
            "example": "en"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Avatar URL",
            "example": "https://example.com/avatar.jpg"
          },
          "organizationRole": {
            "type": "object",
            "default": "MEMBER"
          },
          "autoAccept": {
            "type": "object",
            "default": true
          }
        },
        "required": [
          "email",
          "organizationRole",
          "autoAccept"
        ]
      },
      "GetOrganizationUserOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GetUserOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateOrganizationUserInput": {
        "type": "object",
        "properties": {}
      },
      "OrgMembershipOutputDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "MEMBER",
              "OWNER",
              "ADMIN"
            ]
          },
          "id": {
            "type": "number"
          },
          "userId": {
            "type": "number"
          },
          "teamId": {
            "type": "number"
          },
          "accepted": {
            "type": "boolean"
          },
          "disableImpersonation": {
            "type": "boolean"
          }
        },
        "required": [
          "role",
          "id",
          "userId",
          "teamId",
          "accepted"
        ]
      },
      "GetAllOrgMemberships": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgMembershipOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateOrgMembershipDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "OWNER",
              "ADMIN"
            ]
          },
          "userId": {
            "type": "number"
          },
          "accepted": {
            "type": "boolean",
            "default": false
          },
          "disableImpersonation": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "role",
          "userId"
        ]
      },
      "CreateOrgMembershipOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgMembershipOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetOrgMembership": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgMembershipOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteOrgMembership": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgMembershipOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateOrgMembershipDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "OWNER",
              "ADMIN"
            ]
          },
          "accepted": {
            "type": "boolean",
            "default": false
          },
          "disableImpersonation": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "UpdateOrgMembership": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgMembershipOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateTeamEventTypeInput_2024_06_14": {
        "type": "object",
        "properties": {
          "lengthInMinutes": {
            "type": "number",
            "example": 60
          },
          "title": {
            "type": "string",
            "example": "Learn the secrets of masterchief!"
          },
          "description": {
            "type": "string",
            "example": "Discover the culinary wonders of the Argentina by making the best flan ever!"
          },
          "schedulingType": {
            "type": "object"
          },
          "hosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assignAllTeamMembers": {
            "type": "boolean"
          }
        },
        "required": [
          "lengthInMinutes",
          "title",
          "description",
          "schedulingType",
          "hosts",
          "assignAllTeamMembers"
        ]
      },
      "CreateTeamEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamEventTypeOutput_2024_06_14"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamEventTypeOutput_2024_06_14"
                }
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Recurrence_2024_06_14": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "number",
            "example": 10,
            "description": "Repeats every {count} week | month | year"
          },
          "occurrences": {
            "type": "number",
            "example": 10,
            "description": "Repeats for a maximum of {count} events"
          },
          "frequency": {
            "enum": [
              "yearly",
              "monthly",
              "weekly"
            ],
            "type": "string"
          }
        },
        "required": [
          "interval",
          "occurrences",
          "frequency"
        ]
      },
      "TeamEventTypeResponseHost": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "userId": {
            "type": "number"
          },
          "mandatory": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "type": "object",
            "default": "medium"
          }
        },
        "required": [
          "name",
          "userId"
        ]
      },
      "BookingLimitsCount_2024_06_14": {
        "type": "object",
        "properties": {
          "day": {
            "type": "number",
            "minimum": 1,
            "description": "The number of bookings per day",
            "example": 1
          },
          "week": {
            "type": "number",
            "minimum": 1,
            "description": "The number of bookings per week",
            "example": 2
          },
          "month": {
            "type": "number",
            "minimum": 1,
            "description": "The number of bookings per month",
            "example": 3
          },
          "year": {
            "type": "number",
            "minimum": 1,
            "description": "The number of bookings per year",
            "example": 4
          }
        }
      },
      "BookingLimitsDuration_2024_06_14": {
        "type": "object",
        "properties": {
          "day": {
            "type": "number",
            "minimum": 15,
            "description": "The duration of bookings per day (must be a multiple of 15)",
            "example": 60
          },
          "week": {
            "type": "number",
            "minimum": 15,
            "description": "The duration of bookings per week (must be a multiple of 15)",
            "example": 120
          },
          "month": {
            "type": "number",
            "minimum": 15,
            "description": "The duration of bookings per month (must be a multiple of 15)",
            "example": 180
          },
          "year": {
            "type": "number",
            "minimum": 15,
            "description": "The duration of bookings per year (must be a multiple of 15)",
            "example": 240
          }
        }
      },
      "TeamEventTypeOutput_2024_06_14": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "lengthInMinutes": {
            "type": "number",
            "minimum": 1
          },
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "bookingFields": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "disableGuests": {
            "type": "boolean"
          },
          "slotInterval": {
            "type": "number",
            "nullable": true
          },
          "minimumBookingNotice": {
            "type": "number",
            "minimum": 0
          },
          "beforeEventBuffer": {
            "type": "number"
          },
          "afterEventBuffer": {
            "type": "number"
          },
          "schedulingType": {
            "type": "object",
            "nullable": true
          },
          "recurrence": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Recurrence_2024_06_14"
              }
            ]
          },
          "metadata": {
            "type": "object"
          },
          "requiresConfirmation": {
            "type": "boolean"
          },
          "price": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "lockTimeZoneToggleOnBookingPage": {
            "type": "boolean"
          },
          "seatsPerTimeSlot": {
            "type": "number",
            "nullable": true
          },
          "forwardParamsSuccessRedirect": {
            "type": "boolean",
            "nullable": true
          },
          "successRedirectUrl": {
            "type": "string",
            "nullable": true
          },
          "seatsShowAvailabilityCount": {
            "type": "boolean",
            "nullable": true
          },
          "isInstantEvent": {
            "type": "boolean"
          },
          "scheduleId": {
            "type": "number",
            "nullable": true
          },
          "teamId": {
            "type": "number",
            "nullable": true
          },
          "ownerId": {
            "type": "number",
            "nullable": true
          },
          "parentEventTypeId": {
            "type": "number",
            "nullable": true
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamEventTypeResponseHost"
            }
          },
          "assignAllTeamMembers": {
            "type": "boolean"
          },
          "bookingLimitsCount": {
            "$ref": "#/components/schemas/BookingLimitsCount_2024_06_14"
          },
          "onlyShowFirstAvailableSlot": {
            "type": "boolean"
          },
          "bookingLimitsDuration": {
            "$ref": "#/components/schemas/BookingLimitsDuration_2024_06_14"
          },
          "bookingWindow": {
            "type": "object"
          },
          "offsetStart": {
            "type": "number",
            "minimum": 1
          }
        },
        "required": [
          "id",
          "lengthInMinutes",
          "title",
          "slug",
          "description",
          "locations",
          "bookingFields",
          "disableGuests",
          "schedulingType",
          "recurrence",
          "metadata",
          "requiresConfirmation",
          "price",
          "currency",
          "lockTimeZoneToggleOnBookingPage",
          "seatsPerTimeSlot",
          "forwardParamsSuccessRedirect",
          "successRedirectUrl",
          "seatsShowAvailabilityCount",
          "isInstantEvent",
          "scheduleId",
          "hosts"
        ]
      },
      "GetTeamEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TeamEventTypeOutput_2024_06_14"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetTeamEventTypesOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamEventTypeOutput_2024_06_14"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateTeamEventTypeInput_2024_06_14": {
        "type": "object",
        "properties": {
          "lengthInMinutes": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bookingFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disableGuests": {
            "type": "boolean"
          },
          "slotInterval": {
            "type": "number"
          },
          "minimumBookingNotice": {
            "type": "number"
          },
          "beforeEventBuffer": {
            "type": "number"
          },
          "afterEventBuffer": {
            "type": "number"
          },
          "hosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assignAllTeamMembers": {
            "type": "boolean"
          }
        },
        "required": [
          "lengthInMinutes",
          "title",
          "slug",
          "description",
          "locations",
          "bookingFields",
          "disableGuests",
          "slotInterval",
          "minimumBookingNotice",
          "beforeEventBuffer",
          "afterEventBuffer",
          "hosts",
          "assignAllTeamMembers"
        ]
      },
      "UpdateTeamEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamEventTypeOutput_2024_06_14"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamEventTypeOutput_2024_06_14"
                }
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteTeamEventTypeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OrgTeamMembershipOutputDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "MEMBER",
              "OWNER",
              "ADMIN"
            ]
          },
          "id": {
            "type": "number"
          },
          "userId": {
            "type": "number"
          },
          "teamId": {
            "type": "number"
          },
          "accepted": {
            "type": "boolean"
          },
          "disableImpersonation": {
            "type": "boolean"
          }
        },
        "required": [
          "role",
          "id",
          "userId",
          "teamId",
          "accepted"
        ]
      },
      "OrgTeamMembershipsOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgTeamMembershipOutputDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OrgTeamMembershipOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrgTeamMembershipOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateOrgTeamMembershipDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "OWNER",
              "ADMIN"
            ]
          },
          "accepted": {
            "type": "boolean",
            "default": false
          },
          "disableImpersonation": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "CreateOrgTeamMembershipDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "OWNER",
              "ADMIN"
            ]
          },
          "userId": {
            "type": "number"
          },
          "accepted": {
            "type": "boolean",
            "default": false
          },
          "disableImpersonation": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "role",
          "userId"
        ]
      },
      "GetDefaultScheduleOutput_2024_06_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ScheduleOutput_2024_06_11"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "CreateAvailabilityInput_2024_04_15": {
        "type": "object",
        "properties": {
          "days": {
            "example": [
              1,
              2
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "days",
          "startTime",
          "endTime"
        ]
      },
      "CreateScheduleInput_2024_04_15": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAvailabilityInput_2024_04_15"
            }
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "timeZone",
          "isDefault"
        ]
      },
      "WorkingHours": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "startTime": {
            "type": "number"
          },
          "endTime": {
            "type": "number"
          },
          "userId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "days",
          "startTime",
          "endTime"
        ]
      },
      "AvailabilityModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "userId": {
            "type": "number",
            "nullable": true
          },
          "eventTypeId": {
            "type": "number",
            "nullable": true
          },
          "days": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "scheduleId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "id",
          "days",
          "startTime",
          "endTime"
        ]
      },
      "TimeRange": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "nullable": true
          },
          "start": {
            "format": "date-time",
            "type": "string"
          },
          "end": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "ScheduleOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "isManaged": {
            "type": "boolean"
          },
          "workingHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkingHours"
            }
          },
          "schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailabilityModel"
            }
          },
          "availability": {
            "type": "array",
            "items": {
              "required": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          },
          "timeZone": {
            "type": "string"
          },
          "dateOverrides": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isLastSchedule": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "isManaged",
          "workingHours",
          "schedule",
          "availability",
          "timeZone",
          "dateOverrides",
          "isDefault",
          "isLastSchedule",
          "readOnly"
        ]
      },
      "CreateScheduleOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ScheduleOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetDefaultScheduleOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleOutput"
              }
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetScheduleOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ScheduleOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetSchedulesOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ScheduleOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateScheduleInput_2024_04_15": {
        "type": "object",
        "properties": {
          "timeZone": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "schedule": {
            "example": [
              [],
              [
                {
                  "start": "2022-01-01T00:00:00.000Z",
                  "end": "2022-01-02T00:00:00.000Z"
                }
              ],
              [],
              [],
              [],
              [],
              []
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "dateOverrides": {
            "example": [
              [],
              [
                {
                  "start": "2022-01-01T00:00:00.000Z",
                  "end": "2022-01-02T00:00:00.000Z"
                }
              ],
              [],
              [],
              [],
              [],
              []
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "timeZone",
          "name",
          "isDefault",
          "schedule"
        ]
      },
      "EventTypeModel_2024_04_15": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "eventName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "AvailabilityModel_2024_04_15": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "userId": {
            "type": "number",
            "nullable": true
          },
          "scheduleId": {
            "type": "number",
            "nullable": true
          },
          "eventTypeId": {
            "type": "number",
            "nullable": true
          },
          "days": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "days"
        ]
      },
      "ScheduleModel_2024_04_15": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "userId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeModel_2024_04_15"
            }
          },
          "availability": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailabilityModel_2024_04_15"
            }
          }
        },
        "required": [
          "id",
          "userId",
          "name"
        ]
      },
      "UpdatedScheduleOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/ScheduleModel_2024_04_15"
          },
          "isDefault": {
            "type": "boolean"
          },
          "timeZone": {
            "type": "string"
          },
          "prevDefaultId": {
            "type": "number",
            "nullable": true
          },
          "currentDefaultId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "schedule",
          "isDefault"
        ]
      },
      "UpdateScheduleOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UpdatedScheduleOutput_2024_04_15"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteScheduleOutput_2024_04_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "AuthUrlData": {
        "type": "object",
        "properties": {
          "authUrl": {
            "type": "string"
          }
        },
        "required": [
          "authUrl"
        ]
      },
      "GcalAuthUrlOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AuthUrlData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GcalSaveRedirectOutput": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "GcalCheckOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "ProviderVerifyClientOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "ProviderVerifyAccessTokenOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "MeOrgOutput": {
        "type": "object",
        "properties": {
          "isPlatform": {
            "type": "boolean"
          },
          "id": {
            "type": "number"
          }
        },
        "required": [
          "isPlatform",
          "id"
        ]
      },
      "MeOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "timeFormat": {
            "type": "number"
          },
          "defaultScheduleId": {
            "type": "number",
            "nullable": true
          },
          "weekStart": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "organizationId": {
            "type": "number",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/MeOrgOutput"
          }
        },
        "required": [
          "id",
          "username",
          "email",
          "timeFormat",
          "defaultScheduleId",
          "weekStart",
          "timeZone",
          "organizationId"
        ]
      },
      "GetMeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MeOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateMeOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MeOutput"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "BusyTimesOutput": {
        "type": "object",
        "properties": {
          "start": {
            "format": "date-time",
            "type": "string"
          },
          "end": {
            "format": "date-time",
            "type": "string"
          },
          "source": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "GetBusyTimesOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusyTimesOutput"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "appData": {
            "type": "object",
            "nullable": true
          },
          "dirName": {
            "type": "string"
          },
          "__template": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "installed": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "variant": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logo": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "locationOption": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "name",
          "description",
          "type",
          "variant",
          "categories",
          "logo",
          "publisher",
          "slug",
          "url",
          "email",
          "locationOption"
        ]
      },
      "Primary": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "primary": {
            "type": "boolean",
            "nullable": true
          },
          "readOnly": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "isSelected": {
            "type": "boolean"
          },
          "credentialId": {
            "type": "number"
          }
        },
        "required": [
          "externalId",
          "primary",
          "readOnly",
          "isSelected",
          "credentialId"
        ]
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "integration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "primary": {
            "type": "boolean",
            "nullable": true
          },
          "readOnly": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "isSelected": {
            "type": "boolean"
          },
          "credentialId": {
            "type": "number"
          }
        },
        "required": [
          "externalId",
          "readOnly",
          "isSelected",
          "credentialId"
        ]
      },
      "ConnectedCalendar": {
        "type": "object",
        "properties": {
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "credentialId": {
            "type": "number"
          },
          "primary": {
            "$ref": "#/components/schemas/Primary"
          },
          "calendars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            }
          }
        },
        "required": [
          "integration",
          "credentialId"
        ]
      },
      "DestinationCalendar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "integration": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "primaryEmail": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "number",
            "nullable": true
          },
          "eventTypeId": {
            "type": "number",
            "nullable": true
          },
          "credentialId": {
            "type": "number",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "primary": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "integrationTitle": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "integration",
          "externalId",
          "primaryEmail",
          "userId",
          "eventTypeId",
          "credentialId"
        ]
      },
      "ConnectedCalendarsData": {
        "type": "object",
        "properties": {
          "connectedCalendars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedCalendar"
            }
          },
          "destinationCalendar": {
            "$ref": "#/components/schemas/DestinationCalendar"
          }
        },
        "required": [
          "connectedCalendars",
          "destinationCalendar"
        ]
      },
      "ConnectedCalendarsOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConnectedCalendarsData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteCalendarCredentialsInputBodyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 10,
            "description": "Credential ID of the calendar to delete, as returned by the /calendars endpoint"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeletedCalendarCredentialsOutputDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "userId": {
            "type": "number",
            "nullable": true
          },
          "teamId": {
            "type": "number",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "nullable": true
          },
          "invalid": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "userId",
          "teamId",
          "appId",
          "invalid"
        ]
      },
      "DeletedCalendarCredentialsOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/DeletedCalendarCredentialsOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Attendee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "locale": {
            "type": "string",
            "nullable": true
          },
          "bookingId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "timeZone",
          "locale",
          "bookingId"
        ]
      },
      "EventType": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "eventName": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number"
          },
          "recurringEvent": {
            "type": "object"
          },
          "currency": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "seatsShowAttendees": {
            "type": "object"
          },
          "seatsShowAvailabilityCount": {
            "type": "object"
          },
          "team": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "price",
          "currency",
          "metadata"
        ]
      },
      "Reference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "meetingId": {
            "type": "string",
            "nullable": true
          },
          "thirdPartyRecurringEventId": {
            "type": "string",
            "nullable": true
          },
          "meetingPassword": {
            "type": "string",
            "nullable": true
          },
          "meetingUrl": {
            "type": "string",
            "nullable": true
          },
          "bookingId": {
            "type": "number",
            "nullable": true
          },
          "externalCalendarId": {
            "type": "string",
            "nullable": true
          },
          "deleted": {
            "type": "object"
          },
          "credentialId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "uid",
          "meetingPassword",
          "bookingId",
          "externalCalendarId",
          "credentialId"
        ]
      },
      "GetBookingsDataEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "userPrimaryEmail": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "customInputs": {
            "type": "object"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          },
          "metadata": {
            "type": "object"
          },
          "uid": {
            "type": "string"
          },
          "recurringEventId": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "status": {
            "type": "object"
          },
          "paid": {
            "type": "boolean"
          },
          "payment": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "isRecorded": {
            "type": "boolean"
          },
          "seatsReferences": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "user": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "rescheduled": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "customInputs",
          "startTime",
          "endTime",
          "attendees",
          "metadata",
          "uid",
          "recurringEventId",
          "location",
          "eventType",
          "status",
          "paid",
          "payment",
          "references",
          "isRecorded",
          "seatsReferences",
          "user"
        ]
      },
      "GetBookingsData": {
        "type": "object",
        "properties": {
          "bookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBookingsDataEntry"
            }
          },
          "recurringInfo": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "nextCursor": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "bookings",
          "recurringInfo",
          "nextCursor"
        ]
      },
      "GetBookingsOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GetBookingsData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetBookingData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "uid": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "customInputs": {
            "type": "object"
          },
          "smsReminderNumber": {
            "type": "string",
            "nullable": true
          },
          "recurringEventId": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "cancellationReason": {
            "type": "string",
            "nullable": true
          },
          "responses": {
            "type": "object"
          },
          "rejectionReason": {
            "type": "string",
            "nullable": true
          },
          "userPrimaryEmail": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          },
          "eventTypeId": {
            "type": "number",
            "nullable": true
          },
          "eventType": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ]
          }
        },
        "required": [
          "title",
          "id",
          "uid",
          "description",
          "customInputs",
          "smsReminderNumber",
          "recurringEventId",
          "startTime",
          "endTime",
          "location",
          "status",
          "metadata",
          "cancellationReason",
          "responses",
          "rejectionReason",
          "userPrimaryEmail",
          "user",
          "attendees",
          "eventTypeId",
          "eventType"
        ]
      },
      "GetBookingOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GetBookingData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "Response": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "guests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email",
          "guests"
        ]
      },
      "CreateBookingInput": {
        "type": "object",
        "properties": {
          "end": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "eventTypeId": {
            "type": "number"
          },
          "eventTypeSlug": {
            "type": "string"
          },
          "rescheduleUid": {
            "type": "string"
          },
          "recurringEventId": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "user": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "bookingUid": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "hasHashedBookingLink": {
            "type": "boolean"
          },
          "hashedLink": {
            "type": "string",
            "nullable": true
          },
          "seatReferenceUid": {
            "type": "string"
          },
          "responses": {
            "$ref": "#/components/schemas/Response"
          },
          "orgSlug": {
            "type": "string"
          },
          "locationUrl": {
            "type": "string"
          }
        },
        "required": [
          "start",
          "eventTypeId",
          "timeZone",
          "language",
          "metadata",
          "hashedLink",
          "responses"
        ]
      },
      "CancelBookingInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "uid": {
            "type": "string"
          },
          "allRemainingBookings": {
            "type": "boolean"
          },
          "cancellationReason": {
            "type": "string"
          },
          "seatReferenceUid": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "uid",
          "allRemainingBookings",
          "cancellationReason",
          "seatReferenceUid"
        ]
      },
      "MarkNoShowInput": {
        "type": "object",
        "properties": {
          "noShowHost": {
            "type": "boolean"
          },
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          }
        }
      },
      "HandleMarkNoShowData": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "noShowHost": {
            "type": "boolean"
          },
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          }
        },
        "required": [
          "message"
        ]
      },
      "MarkNoShowOutput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/HandleMarkNoShowData"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "ReserveSlotInput": {
        "type": "object",
        "properties": {}
      },
      "CreateWebhookInputDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "triggers": {
            "type": "string",
            "example": [
              "BOOKING_CREATED",
              "BOOKING_RESCHEDULED",
              "BOOKING_CANCELLED",
              "BOOKING_CONFIRMED",
              "BOOKING_REJECTED",
              "BOOKING_COMPLETED",
              "BOOKING_NO_SHOW",
              "BOOKING_REOPENED"
            ],
            "enum": [
              "BOOKING_CREATED",
              "BOOKING_PAYMENT_INITIATED",
              "BOOKING_PAID",
              "BOOKING_RESCHEDULED",
              "BOOKING_REQUESTED",
              "BOOKING_CANCELLED",
              "BOOKING_REJECTED",
              "BOOKING_NO_SHOW_UPDATED",
              "FORM_SUBMITTED",
              "MEETING_ENDED",
              "MEETING_STARTED",
              "RECORDING_READY",
              "INSTANT_MEETING",
              "RECORDING_TRANSCRIPTION_GENERATED"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "subscriberUrl": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "triggers",
          "active",
          "subscriberUrl"
        ]
      },
      "UserWebhookOutputDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "userId": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscriberUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "payloadTemplate",
          "userId",
          "id",
          "triggers",
          "subscriberUrl",
          "active"
        ]
      },
      "OrgWebhookOutputDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "teamId": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscriberUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "payloadTemplate",
          "userId",
          "id",
          "triggers",
          "subscriberUrl",
          "active"
        ]
      },
      "GetAllOrgWebhooksDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "teamId": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscriberUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "payloadTemplate",
          "userId",
          "id",
          "triggers",
          "subscriberUrl",
          "active"
        ]
      },
      "UserWebhookOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UserWebhookOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OrgWebhooksResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GetAllOrgWebhooksDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateWebhookInputDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "triggers": {
            "type": "string",
            "example": [
              "BOOKING_CREATED",
              "BOOKING_RESCHEDULED",
              "BOOKING_CANCELLED",
              "BOOKING_CONFIRMED",
              "BOOKING_REJECTED",
              "BOOKING_COMPLETED",
              "BOOKING_NO_SHOW",
              "BOOKING_REOPENED"
            ],
            "enum": [
              "BOOKING_CREATED",
              "BOOKING_PAYMENT_INITIATED",
              "BOOKING_PAID",
              "BOOKING_RESCHEDULED",
              "BOOKING_REQUESTED",
              "BOOKING_CANCELLED",
              "BOOKING_REJECTED",
              "BOOKING_NO_SHOW_UPDATED",
              "FORM_SUBMITTED",
              "MEETING_ENDED",
              "MEETING_STARTED",
              "RECORDING_READY",
              "INSTANT_MEETING",
              "RECORDING_TRANSCRIPTION_GENERATED"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "subscriberUrl": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        }
      },
      "UserWebhooksOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWebhookOutputDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "EventTypeWebhookOutputDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "eventTypeId": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscriberUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "payloadTemplate",
          "eventTypeId",
          "id",
          "triggers",
          "subscriberUrl",
          "active"
        ]
      },
      "EventTypeWebhookOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EventTypeWebhookOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "EventTypeWebhooksOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeWebhookOutputDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DeleteManyWebhooksOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OAuthClientWebhookOutputDto": {
        "type": "object",
        "properties": {
          "payloadTemplate": {
            "type": "string",
            "description": "The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information",
            "example": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
          },
          "oAuthClientId": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscriberUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "payloadTemplate",
          "oAuthClientId",
          "id",
          "triggers",
          "subscriberUrl",
          "active"
        ]
      },
      "OAuthClientWebhookOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OAuthClientWebhookOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "OAuthClientWebhooksOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthClientWebhookOutputDto"
            }
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "DestinationCalendarsInputBodyDto": {
        "type": "object",
        "properties": {
          "integration": {
            "type": "string",
            "example": "apple_calendar",
            "description": "The calendar service you want to integrate, as returned by the /calendars endpoint",
            "enum": [
              "apple_calendar",
              "google_calendar",
              "office365_calendar"
            ]
          },
          "externalId": {
            "type": "string",
            "example": "https://caldav.icloud.com/26962146906/calendars/1644422A-1945-4438-BBC0-4F0Q23A57R7S/",
            "description": "Unique identifier used to represent the specfic calendar, as returned by the /calendars endpoint"
          }
        },
        "required": [
          "integration",
          "externalId"
        ]
      },
      "DestinationCalendarsOutputDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number"
          },
          "integration": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "credentialId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "userId",
          "integration",
          "externalId",
          "credentialId"
        ]
      },
      "DestinationCalendarsOutputResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/DestinationCalendarsOutputDto"
          }
        },
        "required": [
          "status",
          "data"
        ]
      }
    }
  }
}