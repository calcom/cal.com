flowchart TD
    %% Define color scheme compatible with VS Code mermaid extension
    classDef userAction fill:#4A90E2,stroke:#2E5C8A,color:#FFFFFF
    classDef uiComponent fill:#50C878,stroke:#2E7D4E,color:#FFFFFF
    classDef trpcLayer fill:#9370DB,stroke:#5B3A8C,color:#FFFFFF
    classDef businessLogic fill:#FF8C42,stroke:#B8631F,color:#FFFFFF
    classDef repository fill:#E74C3C,stroke:#A93226,color:#FFFFFF
    classDef database fill:#34495E,stroke:#1C2833,color:#FFFFFF
    classDef decision fill:#F39C12,stroke:#B8760C,color:#000000
    classDef success fill:#27AE60,stroke:#1E8449,color:#FFFFFF

    %% User Flow and UI Layer
    START([User views booking]):::userAction
    START --> BOOKING_ITEM[BookingListItem Component]:::uiComponent
    
    BOOKING_ITEM --> CHECK_TYPE{Event Type?}:::decision
    CHECK_TYPE -->|Round Robin with<br/>no/one host group| SHOW_RR[Show Reassign Button]:::uiComponent
    CHECK_TYPE -->|Managed Event<br/>with flag enabled| SHOW_MANAGED[Show Reassign Button]:::uiComponent
    CHECK_TYPE -->|Other| HIDE[Hide Reassign Button]:::uiComponent
    
    SHOW_RR --> CLICK_REASSIGN[User clicks Reassign]:::userAction
    SHOW_MANAGED --> CLICK_REASSIGN
    
    CLICK_REASSIGN --> REASSIGN_DIALOG[ReassignDialog Component]:::uiComponent
    
    %% Dialog UI Logic
    REASSIGN_DIALOG --> DETERMINE_TYPE{Is Managed<br/>Event?}:::decision
    DETERMINE_TYPE -->|Yes| MANAGED_UI[Show: Managed Event UI<br/>- Managed-specific labels<br/>- Only Team Member option]:::uiComponent
    DETERMINE_TYPE -->|No| RR_UI[Show: Round Robin UI<br/>- RR-specific labels<br/>- Both RR and Team options]:::uiComponent
    
    MANAGED_UI --> FETCH_HOSTS_M[Fetch Available Hosts<br/>getRoundRobinHostsToReassign]:::trpcLayer
    RR_UI --> FETCH_HOSTS_R[Fetch Available Hosts<br/>getRoundRobinHostsToReassign]:::trpcLayer
    
    %% Get Hosts Handler Logic
    FETCH_HOSTS_M --> GET_HOSTS_HANDLER[getRoundRobinHostsToReassign Handler]:::trpcLayer
    FETCH_HOSTS_R --> GET_HOSTS_HANDLER
    
    GET_HOSTS_HANDLER --> FETCH_BOOKING[Fetch Booking with EventType]:::repository
    FETCH_BOOKING --> DB_BOOKING[(Database:<br/>Booking + EventType)]:::database
    DB_BOOKING --> MANAGED_CHECK{EventType has<br/>parentId?}:::decision
    
    MANAGED_CHECK -->|Yes<br/>Managed Event| USE_PARENT[Use Parent EventType ID]:::businessLogic
    MANAGED_CHECK -->|No<br/>Round Robin| USE_CURRENT[Use Current EventType ID]:::businessLogic
    
    USE_PARENT --> GET_HOSTS[getTeamHostsFromDB]:::repository
    USE_CURRENT --> GET_HOSTS
    
    GET_HOSTS --> DB_HOSTS[(Database:<br/>Fetch Hosts from<br/>Team/EventType)]:::database
    DB_HOSTS --> CHECK_AVAILABILITY[ensureAvailableUsers<br/>Check host availability<br/>for booking time]:::businessLogic
    
    CHECK_AVAILABILITY --> RETURN_HOSTS[Return Available Hosts]:::trpcLayer
    RETURN_HOSTS --> DISPLAY_HOSTS[Display Host List<br/>in Dialog]:::uiComponent
    
    DISPLAY_HOSTS --> SELECT_HOST[User Selects New Host]:::userAction
    SELECT_HOST --> SUBMIT[User Submits Reassignment]:::userAction
    
    %% Reassignment Process
    SUBMIT --> REASSIGN_HANDLER[roundRobinManualReassign Handler]:::trpcLayer
    REASSIGN_HANDLER --> AUTH_CHECK{User has access<br/>to booking?}:::decision
    
    AUTH_CHECK -->|Check| BOOKING_REPO[BookingRepository<br/>doesUserIdHaveAccessToBooking]:::repository
    BOOKING_REPO --> MANAGED_AUTH_CHECK{Is Managed<br/>EventType?}:::decision
    
    MANAGED_AUTH_CHECK -->|Yes| CHECK_PARENT_TEAM[Check Parent Team<br/>Membership/Admin]:::businessLogic
    MANAGED_AUTH_CHECK -->|No| CHECK_CURRENT_TEAM[Check Current Team<br/>Membership/Admin]:::businessLogic
    
    CHECK_PARENT_TEAM --> DB_AUTH[(Database:<br/>Team Membership<br/>via Parent)]:::database
    CHECK_CURRENT_TEAM --> DB_AUTH
    
    DB_AUTH --> AUTH_CHECK
    AUTH_CHECK -->|Denied| AUTH_ERROR[Return 403 Forbidden]:::repository
    AUTH_CHECK -->|Approved| REASSIGNMENT_LOGIC[roundRobinManualReassignment]:::businessLogic
    
    %% Core Reassignment Logic
    REASSIGNMENT_LOGIC --> FETCH_EVENT_DATA[Fetch EventType with Hosts]:::repository
    FETCH_EVENT_DATA --> DB_EVENT[(Database:<br/>EventType + Hosts)]:::database
    
    DB_EVENT --> IS_MANAGED_REASSIGN{EventType<br/>schedulingType<br/>= MANAGED?}:::decision
    
    IS_MANAGED_REASSIGN -->|Yes| FETCH_PARENT[Fetch Parent EventType]:::repository
    IS_MANAGED_REASSIGN -->|No| BUILD_HOSTS_CURRENT[Build Hosts List<br/>from Current EventType]:::businessLogic
    
    FETCH_PARENT --> DB_PARENT[(Database:<br/>Parent EventType)]:::database
    DB_PARENT --> BUILD_HOSTS_PARENT[Build Hosts List<br/>from Parent EventType]:::businessLogic
    
    BUILD_HOSTS_PARENT --> VALIDATE_HOST[Validate New Host<br/>is in hosts list]:::businessLogic
    BUILD_HOSTS_CURRENT --> VALIDATE_HOST
    
    VALIDATE_HOST --> VALID_HOST{Valid Host?}:::decision
    VALID_HOST -->|No| HOST_ERROR[Return Error:<br/>Invalid Host]:::repository
    VALID_HOST -->|Yes| DETERMINE_ORGANIZER{Has Fixed Host?}:::decision
    
    DETERMINE_ORGANIZER -->|Yes<br/>Fixed Host is Organizer| UPDATE_ATTENDEE[Update Attendee Record<br/>with New Host Info]:::businessLogic
    DETERMINE_ORGANIZER -->|No<br/>Round Robin Host| UPDATE_BOOKING[Update Booking<br/>userId, title, email]:::businessLogic
    
    UPDATE_ATTENDEE --> DB_UPDATE_ATT[(Database:<br/>Update Attendee)]:::database
    UPDATE_BOOKING --> DB_UPDATE_BOOKING[(Database:<br/>Update Booking)]:::database
    
    DB_UPDATE_ATT --> RECORD_REASON[Record Assignment Reason]:::businessLogic
    DB_UPDATE_BOOKING --> RECORD_REASON
    
    RECORD_REASON --> DB_REASON[(Database:<br/>AssignmentReason)]:::database
    DB_REASON --> UPDATE_CALENDAR[Update Calendar Events<br/>Cancel old, Create new]:::businessLogic
    
    UPDATE_CALENDAR --> SEND_EMAILS[Send Email Notifications<br/>to old and new hosts]:::businessLogic
    SEND_EMAILS --> UPDATE_WORKFLOWS[Update Workflows<br/>if organizer changed]:::businessLogic
    
    UPDATE_WORKFLOWS --> SUCCESS[Return Success]:::success
    
    %% Additional Flow: Event Type Creation with Managed Reassignment
    SUBGRAPH1[Event Type Creation Flow]:::businessLogic
    CREATE_EVENT[Admin Creates/Updates<br/>Managed Event Type]:::userAction
    CREATE_EVENT --> ENABLE_FLAG[Enable allowManagedEventReassignment<br/>in TeamEventTypeForm]:::uiComponent
    ENABLE_FLAG --> SAVE_EVENT[Save Event Type]:::trpcLayer
    SAVE_EVENT --> UPDATE_HANDLER[update.handler.ts]:::trpcLayer
    UPDATE_HANDLER --> HANDLE_CHILDREN[updateChildrenEventTypes]:::businessLogic
    
    HANDLE_CHILDREN --> CREATE_CHILDREN{New Users<br/>Added?}:::decision
    CREATE_CHILDREN -->|Yes| CREATE_CHILD_EVENTS[$transaction:<br/>Create Child Event Types<br/>with allowManagedEventReassignment]:::repository
    CREATE_CHILDREN -->|No| UPDATE_CHILDREN[Update Existing<br/>Child Event Types]:::repository
    
    CREATE_CHILD_EVENTS --> DB_CREATE[(Database:<br/>EventType Records)]:::database
    DB_CREATE --> UPSERT_HOSTS[Upsert Host Records<br/>on Parent EventType<br/>Chunked: 10 per txn]:::businessLogic
    
    UPSERT_HOSTS --> DB_HOSTS_CREATE[(Database:<br/>Host Records)]:::database
    DB_HOSTS_CREATE --> EVENT_COMPLETE[Event Type Ready<br/>for Reassignment]:::success
    
    UPDATE_CHILDREN --> DB_UPDATE[(Database:<br/>Update EventType)]:::database
    DB_UPDATE --> EVENT_COMPLETE
    
    %% Authorization Enhancement Explanation
    AUTH_NOTE[Authorization Enhancement:<br/>For managed events, checks<br/>parent team membership<br/>instead of child event team]:::businessLogic
    CHECK_PARENT_TEAM -.->|Fixes bug where<br/>team admins couldn't<br/>access child bookings| AUTH_NOTE
    
    %% Link subgraph to main flow
    EVENT_COMPLETE -.->|Enables| SHOW_MANAGED
    
    style SUBGRAPH1 fill:#F0F0F0,stroke:#999999,stroke-width:2px



