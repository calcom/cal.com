import { describe, it, expect } from "vitest";
import type { z } from "zod";

import type { eventTypeBookingFields } from "@calcom/prisma/zod-utils";

import { isFieldVisible } from "./fieldVisibility";

/**
 * A single booking-field record exactly as generated by
 * `@calcom/prisma/zod-utils`.
 */
type Field = z.infer<typeof eventTypeBookingFields>[number];

/**
 * Helper: returns a *fully-typed* Field object.
 * Tests can override only the properties they need.
 */
const makeField = (overrides: Partial<Field> = {}): Field =>
  ({
    name: "child",
    type: "text",
    ...overrides,
  } as Field);

describe("isFieldVisible()", () => {
  it("returns TRUE when field has no visibleIf rule", () => {
    const field = makeField(); // visibleIf â†’ undefined
    expect(isFieldVisible(field, {})).toBe(true);
  });

  it("returns TRUE when parent value (string) matches one of the permitted values", () => {
    const field = makeField({
      visibleIf: { parent: "color", values: ["red", "blue"] },
    });

    const responses = { color: "red" };
    expect(isFieldVisible(field, responses)).toBe(true);
  });

  it("returns FALSE when parent value (string) does NOT match", () => {
    const field = makeField({
      visibleIf: { parent: "color", values: ["red"] },
    });

    const responses = { color: "green" };
    expect(isFieldVisible(field, responses)).toBe(false);
  });

  it("returns TRUE when parent value (array) includes one of the permitted values", () => {
    const field = makeField({
      visibleIf: { parent: "hobbies", values: ["music"] },
    });

    const responses = { hobbies: ["sports", "music"] };
    expect(isFieldVisible(field, responses)).toBe(true);
  });

  it("returns FALSE when parent value (array) does NOT include any permitted value", () => {
    const field = makeField({
      visibleIf: { parent: "hobbies", values: ["music"] },
    });

    const responses = { hobbies: ["sports", "reading"] };
    expect(isFieldVisible(field, responses)).toBe(false);
  });
});
