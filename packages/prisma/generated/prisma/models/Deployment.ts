/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Deployment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Deployment
 *
 */
export type DeploymentModel = runtime.Types.Result.DefaultSelection<Prisma.$DeploymentPayload>;

export type AggregateDeployment = {
  _count: DeploymentCountAggregateOutputType | null;
  _avg: DeploymentAvgAggregateOutputType | null;
  _sum: DeploymentSumAggregateOutputType | null;
  _min: DeploymentMinAggregateOutputType | null;
  _max: DeploymentMaxAggregateOutputType | null;
};

export type DeploymentAvgAggregateOutputType = {
  id: number | null;
};

export type DeploymentSumAggregateOutputType = {
  id: number | null;
};

export type DeploymentMinAggregateOutputType = {
  id: number | null;
  logo: string | null;
  licenseKey: string | null;
  signatureTokenEncrypted: string | null;
  agreedLicenseAt: Date | null;
};

export type DeploymentMaxAggregateOutputType = {
  id: number | null;
  logo: string | null;
  licenseKey: string | null;
  signatureTokenEncrypted: string | null;
  agreedLicenseAt: Date | null;
};

export type DeploymentCountAggregateOutputType = {
  id: number;
  logo: number;
  theme: number;
  licenseKey: number;
  signatureTokenEncrypted: number;
  agreedLicenseAt: number;
  _all: number;
};

export type DeploymentAvgAggregateInputType = {
  id?: true;
};

export type DeploymentSumAggregateInputType = {
  id?: true;
};

export type DeploymentMinAggregateInputType = {
  id?: true;
  logo?: true;
  licenseKey?: true;
  signatureTokenEncrypted?: true;
  agreedLicenseAt?: true;
};

export type DeploymentMaxAggregateInputType = {
  id?: true;
  logo?: true;
  licenseKey?: true;
  signatureTokenEncrypted?: true;
  agreedLicenseAt?: true;
};

export type DeploymentCountAggregateInputType = {
  id?: true;
  logo?: true;
  theme?: true;
  licenseKey?: true;
  signatureTokenEncrypted?: true;
  agreedLicenseAt?: true;
  _all?: true;
};

export type DeploymentAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Deployment to aggregate.
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Deployments to fetch.
   */
  orderBy?: Prisma.DeploymentOrderByWithRelationInput | Prisma.DeploymentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DeploymentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Deployments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Deployments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Deployments
   **/
  _count?: true | DeploymentCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: DeploymentAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: DeploymentSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DeploymentMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DeploymentMaxAggregateInputType;
};

export type GetDeploymentAggregateType<T extends DeploymentAggregateArgs> = {
  [P in keyof T & keyof AggregateDeployment]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeployment[P]>
    : Prisma.GetScalarType<T[P], AggregateDeployment[P]>;
};

export type DeploymentGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.DeploymentWhereInput;
  orderBy?: Prisma.DeploymentOrderByWithAggregationInput | Prisma.DeploymentOrderByWithAggregationInput[];
  by: Prisma.DeploymentScalarFieldEnum[] | Prisma.DeploymentScalarFieldEnum;
  having?: Prisma.DeploymentScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DeploymentCountAggregateInputType | true;
  _avg?: DeploymentAvgAggregateInputType;
  _sum?: DeploymentSumAggregateInputType;
  _min?: DeploymentMinAggregateInputType;
  _max?: DeploymentMaxAggregateInputType;
};

export type DeploymentGroupByOutputType = {
  id: number;
  logo: string | null;
  theme: runtime.JsonValue | null;
  licenseKey: string | null;
  signatureTokenEncrypted: string | null;
  agreedLicenseAt: Date | null;
  _count: DeploymentCountAggregateOutputType | null;
  _avg: DeploymentAvgAggregateOutputType | null;
  _sum: DeploymentSumAggregateOutputType | null;
  _min: DeploymentMinAggregateOutputType | null;
  _max: DeploymentMaxAggregateOutputType | null;
};

type GetDeploymentGroupByPayload<T extends DeploymentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DeploymentGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof DeploymentGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], DeploymentGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], DeploymentGroupByOutputType[P]>;
    }
  >
>;

export type DeploymentWhereInput = {
  AND?: Prisma.DeploymentWhereInput | Prisma.DeploymentWhereInput[];
  OR?: Prisma.DeploymentWhereInput[];
  NOT?: Prisma.DeploymentWhereInput | Prisma.DeploymentWhereInput[];
  id?: Prisma.IntFilter<"Deployment"> | number;
  logo?: Prisma.StringNullableFilter<"Deployment"> | string | null;
  theme?: Prisma.JsonNullableFilter<"Deployment">;
  licenseKey?: Prisma.StringNullableFilter<"Deployment"> | string | null;
  signatureTokenEncrypted?: Prisma.StringNullableFilter<"Deployment"> | string | null;
  agreedLicenseAt?: Prisma.DateTimeNullableFilter<"Deployment"> | Date | string | null;
};

export type DeploymentOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  logo?: Prisma.SortOrderInput | Prisma.SortOrder;
  theme?: Prisma.SortOrderInput | Prisma.SortOrder;
  licenseKey?: Prisma.SortOrderInput | Prisma.SortOrder;
  signatureTokenEncrypted?: Prisma.SortOrderInput | Prisma.SortOrder;
  agreedLicenseAt?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type DeploymentWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.DeploymentWhereInput | Prisma.DeploymentWhereInput[];
    OR?: Prisma.DeploymentWhereInput[];
    NOT?: Prisma.DeploymentWhereInput | Prisma.DeploymentWhereInput[];
    logo?: Prisma.StringNullableFilter<"Deployment"> | string | null;
    theme?: Prisma.JsonNullableFilter<"Deployment">;
    licenseKey?: Prisma.StringNullableFilter<"Deployment"> | string | null;
    signatureTokenEncrypted?: Prisma.StringNullableFilter<"Deployment"> | string | null;
    agreedLicenseAt?: Prisma.DateTimeNullableFilter<"Deployment"> | Date | string | null;
  },
  "id"
>;

export type DeploymentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  logo?: Prisma.SortOrderInput | Prisma.SortOrder;
  theme?: Prisma.SortOrderInput | Prisma.SortOrder;
  licenseKey?: Prisma.SortOrderInput | Prisma.SortOrder;
  signatureTokenEncrypted?: Prisma.SortOrderInput | Prisma.SortOrder;
  agreedLicenseAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.DeploymentCountOrderByAggregateInput;
  _avg?: Prisma.DeploymentAvgOrderByAggregateInput;
  _max?: Prisma.DeploymentMaxOrderByAggregateInput;
  _min?: Prisma.DeploymentMinOrderByAggregateInput;
  _sum?: Prisma.DeploymentSumOrderByAggregateInput;
};

export type DeploymentScalarWhereWithAggregatesInput = {
  AND?: Prisma.DeploymentScalarWhereWithAggregatesInput | Prisma.DeploymentScalarWhereWithAggregatesInput[];
  OR?: Prisma.DeploymentScalarWhereWithAggregatesInput[];
  NOT?: Prisma.DeploymentScalarWhereWithAggregatesInput | Prisma.DeploymentScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Deployment"> | number;
  logo?: Prisma.StringNullableWithAggregatesFilter<"Deployment"> | string | null;
  theme?: Prisma.JsonNullableWithAggregatesFilter<"Deployment">;
  licenseKey?: Prisma.StringNullableWithAggregatesFilter<"Deployment"> | string | null;
  signatureTokenEncrypted?: Prisma.StringNullableWithAggregatesFilter<"Deployment"> | string | null;
  agreedLicenseAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Deployment"> | Date | string | null;
};

export type DeploymentCreateInput = {
  id?: number;
  logo?: string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: string | null;
  signatureTokenEncrypted?: string | null;
  agreedLicenseAt?: Date | string | null;
};

export type DeploymentUncheckedCreateInput = {
  id?: number;
  logo?: string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: string | null;
  signatureTokenEncrypted?: string | null;
  agreedLicenseAt?: Date | string | null;
};

export type DeploymentUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  signatureTokenEncrypted?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  agreedLicenseAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type DeploymentUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  signatureTokenEncrypted?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  agreedLicenseAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type DeploymentCreateManyInput = {
  id?: number;
  logo?: string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: string | null;
  signatureTokenEncrypted?: string | null;
  agreedLicenseAt?: Date | string | null;
};

export type DeploymentUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  signatureTokenEncrypted?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  agreedLicenseAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type DeploymentUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  theme?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  licenseKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  signatureTokenEncrypted?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  agreedLicenseAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type DeploymentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  logo?: Prisma.SortOrder;
  theme?: Prisma.SortOrder;
  licenseKey?: Prisma.SortOrder;
  signatureTokenEncrypted?: Prisma.SortOrder;
  agreedLicenseAt?: Prisma.SortOrder;
};

export type DeploymentAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type DeploymentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  logo?: Prisma.SortOrder;
  licenseKey?: Prisma.SortOrder;
  signatureTokenEncrypted?: Prisma.SortOrder;
  agreedLicenseAt?: Prisma.SortOrder;
};

export type DeploymentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  logo?: Prisma.SortOrder;
  licenseKey?: Prisma.SortOrder;
  signatureTokenEncrypted?: Prisma.SortOrder;
  agreedLicenseAt?: Prisma.SortOrder;
};

export type DeploymentSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type DeploymentSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    logo?: boolean;
    theme?: boolean;
    licenseKey?: boolean;
    signatureTokenEncrypted?: boolean;
    agreedLicenseAt?: boolean;
  },
  ExtArgs["result"]["deployment"]
>;

export type DeploymentSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    logo?: boolean;
    theme?: boolean;
    licenseKey?: boolean;
    signatureTokenEncrypted?: boolean;
    agreedLicenseAt?: boolean;
  },
  ExtArgs["result"]["deployment"]
>;

export type DeploymentSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    logo?: boolean;
    theme?: boolean;
    licenseKey?: boolean;
    signatureTokenEncrypted?: boolean;
    agreedLicenseAt?: boolean;
  },
  ExtArgs["result"]["deployment"]
>;

export type DeploymentSelectScalar = {
  id?: boolean;
  logo?: boolean;
  theme?: boolean;
  licenseKey?: boolean;
  signatureTokenEncrypted?: boolean;
  agreedLicenseAt?: boolean;
};

export type DeploymentOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "logo" | "theme" | "licenseKey" | "signatureTokenEncrypted" | "agreedLicenseAt",
  ExtArgs["result"]["deployment"]
>;

export type $DeploymentPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Deployment";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * This is a single row table, so we use a fixed id
       */
      id: number;
      logo: string | null;
      /**
       * @zod.import(["import { DeploymentTheme } from '../../zod-utils'"]).custom.use(DeploymentTheme)
       */
      theme: runtime.JsonValue | null;
      licenseKey: string | null;
      signatureTokenEncrypted: string | null;
      agreedLicenseAt: Date | null;
    },
    ExtArgs["result"]["deployment"]
  >;
  composites: {};
};

export type DeploymentGetPayload<S extends boolean | null | undefined | DeploymentDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$DeploymentPayload, S>;

export type DeploymentCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<DeploymentFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: DeploymentCountAggregateInputType | true;
};

export interface DeploymentDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Deployment"]; meta: { name: "Deployment" } };
  /**
   * Find zero or one Deployment that matches the filter.
   * @param {DeploymentFindUniqueArgs} args - Arguments to find a Deployment
   * @example
   * // Get one Deployment
   * const deployment = await prisma.deployment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DeploymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DeploymentFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DeploymentPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Deployment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DeploymentFindUniqueOrThrowArgs} args - Arguments to find a Deployment
   * @example
   * // Get one Deployment
   * const deployment = await prisma.deployment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DeploymentFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DeploymentFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DeploymentPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Deployment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentFindFirstArgs} args - Arguments to find a Deployment
   * @example
   * // Get one Deployment
   * const deployment = await prisma.deployment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DeploymentFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DeploymentFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DeploymentPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Deployment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentFindFirstOrThrowArgs} args - Arguments to find a Deployment
   * @example
   * // Get one Deployment
   * const deployment = await prisma.deployment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DeploymentFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DeploymentFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<
      Prisma.$DeploymentPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Deployments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Deployments
   * const deployments = await prisma.deployment.findMany()
   *
   * // Get first 10 Deployments
   * const deployments = await prisma.deployment.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const deploymentWithIdOnly = await prisma.deployment.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DeploymentFindManyArgs>(
    args?: Prisma.SelectSubset<T, DeploymentFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$DeploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Deployment.
   * @param {DeploymentCreateArgs} args - Arguments to create a Deployment.
   * @example
   * // Create one Deployment
   * const Deployment = await prisma.deployment.create({
   *   data: {
   *     // ... data to create a Deployment
   *   }
   * })
   *
   */
  create<T extends DeploymentCreateArgs>(
    args: Prisma.SelectSubset<T, DeploymentCreateArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<Prisma.$DeploymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Deployments.
   * @param {DeploymentCreateManyArgs} args - Arguments to create many Deployments.
   * @example
   * // Create many Deployments
   * const deployment = await prisma.deployment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DeploymentCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DeploymentCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Deployments and returns the data saved in the database.
   * @param {DeploymentCreateManyAndReturnArgs} args - Arguments to create many Deployments.
   * @example
   * // Create many Deployments
   * const deployment = await prisma.deployment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Deployments and only return the `id`
   * const deploymentWithIdOnly = await prisma.deployment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DeploymentCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DeploymentCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DeploymentPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Deployment.
   * @param {DeploymentDeleteArgs} args - Arguments to delete one Deployment.
   * @example
   * // Delete one Deployment
   * const Deployment = await prisma.deployment.delete({
   *   where: {
   *     // ... filter to delete one Deployment
   *   }
   * })
   *
   */
  delete<T extends DeploymentDeleteArgs>(
    args: Prisma.SelectSubset<T, DeploymentDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<Prisma.$DeploymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Deployment.
   * @param {DeploymentUpdateArgs} args - Arguments to update one Deployment.
   * @example
   * // Update one Deployment
   * const deployment = await prisma.deployment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DeploymentUpdateArgs>(
    args: Prisma.SelectSubset<T, DeploymentUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<Prisma.$DeploymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Deployments.
   * @param {DeploymentDeleteManyArgs} args - Arguments to filter Deployments to delete.
   * @example
   * // Delete a few Deployments
   * const { count } = await prisma.deployment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DeploymentDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DeploymentDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Deployments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Deployments
   * const deployment = await prisma.deployment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DeploymentUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DeploymentUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Deployments and returns the data updated in the database.
   * @param {DeploymentUpdateManyAndReturnArgs} args - Arguments to update many Deployments.
   * @example
   * // Update many Deployments
   * const deployment = await prisma.deployment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Deployments and only return the `id`
   * const deploymentWithIdOnly = await prisma.deployment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DeploymentUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DeploymentUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DeploymentPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Deployment.
   * @param {DeploymentUpsertArgs} args - Arguments to update or create a Deployment.
   * @example
   * // Update or create a Deployment
   * const deployment = await prisma.deployment.upsert({
   *   create: {
   *     // ... data to create a Deployment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Deployment we want to update
   *   }
   * })
   */
  upsert<T extends DeploymentUpsertArgs>(
    args: Prisma.SelectSubset<T, DeploymentUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__DeploymentClient<
    runtime.Types.Result.GetResult<Prisma.$DeploymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Deployments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentCountArgs} args - Arguments to filter Deployments to count.
   * @example
   * // Count the number of Deployments
   * const count = await prisma.deployment.count({
   *   where: {
   *     // ... the filter for the Deployments we want to count
   *   }
   * })
   **/
  count<T extends DeploymentCountArgs>(
    args?: Prisma.Subset<T, DeploymentCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], DeploymentCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Deployment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DeploymentAggregateArgs>(
    args: Prisma.Subset<T, DeploymentAggregateArgs>
  ): Prisma.PrismaPromise<GetDeploymentAggregateType<T>>;

  /**
   * Group by Deployment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeploymentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DeploymentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DeploymentGroupByArgs["orderBy"] }
      : { orderBy?: DeploymentGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, DeploymentGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetDeploymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Deployment model
   */
  readonly fields: DeploymentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Deployment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DeploymentClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Deployment model
 */
export interface DeploymentFieldRefs {
  readonly id: Prisma.FieldRef<"Deployment", "Int">;
  readonly logo: Prisma.FieldRef<"Deployment", "String">;
  readonly theme: Prisma.FieldRef<"Deployment", "Json">;
  readonly licenseKey: Prisma.FieldRef<"Deployment", "String">;
  readonly signatureTokenEncrypted: Prisma.FieldRef<"Deployment", "String">;
  readonly agreedLicenseAt: Prisma.FieldRef<"Deployment", "DateTime">;
}

// Custom InputTypes
/**
 * Deployment findUnique
 */
export type DeploymentFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * Filter, which Deployment to fetch.
   */
  where: Prisma.DeploymentWhereUniqueInput;
};

/**
 * Deployment findUniqueOrThrow
 */
export type DeploymentFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * Filter, which Deployment to fetch.
   */
  where: Prisma.DeploymentWhereUniqueInput;
};

/**
 * Deployment findFirst
 */
export type DeploymentFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * Filter, which Deployment to fetch.
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Deployments to fetch.
   */
  orderBy?: Prisma.DeploymentOrderByWithRelationInput | Prisma.DeploymentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Deployments.
   */
  cursor?: Prisma.DeploymentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Deployments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Deployments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Deployments.
   */
  distinct?: Prisma.DeploymentScalarFieldEnum | Prisma.DeploymentScalarFieldEnum[];
};

/**
 * Deployment findFirstOrThrow
 */
export type DeploymentFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * Filter, which Deployment to fetch.
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Deployments to fetch.
   */
  orderBy?: Prisma.DeploymentOrderByWithRelationInput | Prisma.DeploymentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Deployments.
   */
  cursor?: Prisma.DeploymentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Deployments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Deployments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Deployments.
   */
  distinct?: Prisma.DeploymentScalarFieldEnum | Prisma.DeploymentScalarFieldEnum[];
};

/**
 * Deployment findMany
 */
export type DeploymentFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * Filter, which Deployments to fetch.
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Deployments to fetch.
   */
  orderBy?: Prisma.DeploymentOrderByWithRelationInput | Prisma.DeploymentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Deployments.
   */
  cursor?: Prisma.DeploymentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Deployments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Deployments.
   */
  skip?: number;
  distinct?: Prisma.DeploymentScalarFieldEnum | Prisma.DeploymentScalarFieldEnum[];
};

/**
 * Deployment create
 */
export type DeploymentCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * The data needed to create a Deployment.
   */
  data?: Prisma.XOR<Prisma.DeploymentCreateInput, Prisma.DeploymentUncheckedCreateInput>;
};

/**
 * Deployment createMany
 */
export type DeploymentCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Deployments.
   */
  data: Prisma.DeploymentCreateManyInput | Prisma.DeploymentCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Deployment createManyAndReturn
 */
export type DeploymentCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * The data used to create many Deployments.
   */
  data: Prisma.DeploymentCreateManyInput | Prisma.DeploymentCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Deployment update
 */
export type DeploymentUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * The data needed to update a Deployment.
   */
  data: Prisma.XOR<Prisma.DeploymentUpdateInput, Prisma.DeploymentUncheckedUpdateInput>;
  /**
   * Choose, which Deployment to update.
   */
  where: Prisma.DeploymentWhereUniqueInput;
};

/**
 * Deployment updateMany
 */
export type DeploymentUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Deployments.
   */
  data: Prisma.XOR<Prisma.DeploymentUpdateManyMutationInput, Prisma.DeploymentUncheckedUpdateManyInput>;
  /**
   * Filter which Deployments to update
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * Limit how many Deployments to update.
   */
  limit?: number;
};

/**
 * Deployment updateManyAndReturn
 */
export type DeploymentUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * The data used to update Deployments.
   */
  data: Prisma.XOR<Prisma.DeploymentUpdateManyMutationInput, Prisma.DeploymentUncheckedUpdateManyInput>;
  /**
   * Filter which Deployments to update
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * Limit how many Deployments to update.
   */
  limit?: number;
};

/**
 * Deployment upsert
 */
export type DeploymentUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * The filter to search for the Deployment to update in case it exists.
   */
  where: Prisma.DeploymentWhereUniqueInput;
  /**
   * In case the Deployment found by the `where` argument doesn't exist, create a new Deployment with this data.
   */
  create: Prisma.XOR<Prisma.DeploymentCreateInput, Prisma.DeploymentUncheckedCreateInput>;
  /**
   * In case the Deployment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DeploymentUpdateInput, Prisma.DeploymentUncheckedUpdateInput>;
};

/**
 * Deployment delete
 */
export type DeploymentDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
  /**
   * Filter which Deployment to delete.
   */
  where: Prisma.DeploymentWhereUniqueInput;
};

/**
 * Deployment deleteMany
 */
export type DeploymentDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Deployments to delete
   */
  where?: Prisma.DeploymentWhereInput;
  /**
   * Limit how many Deployments to delete.
   */
  limit?: number;
};

/**
 * Deployment without action
 */
export type DeploymentDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Deployment
   */
  select?: Prisma.DeploymentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Deployment
   */
  omit?: Prisma.DeploymentOmit<ExtArgs> | null;
};
