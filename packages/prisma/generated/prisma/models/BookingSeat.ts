/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `BookingSeat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BookingSeat
 *
 */
export type BookingSeatModel = runtime.Types.Result.DefaultSelection<Prisma.$BookingSeatPayload>;

export type AggregateBookingSeat = {
  _count: BookingSeatCountAggregateOutputType | null;
  _avg: BookingSeatAvgAggregateOutputType | null;
  _sum: BookingSeatSumAggregateOutputType | null;
  _min: BookingSeatMinAggregateOutputType | null;
  _max: BookingSeatMaxAggregateOutputType | null;
};

export type BookingSeatAvgAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
  attendeeId: number | null;
};

export type BookingSeatSumAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
  attendeeId: number | null;
};

export type BookingSeatMinAggregateOutputType = {
  id: number | null;
  referenceUid: string | null;
  bookingId: number | null;
  attendeeId: number | null;
};

export type BookingSeatMaxAggregateOutputType = {
  id: number | null;
  referenceUid: string | null;
  bookingId: number | null;
  attendeeId: number | null;
};

export type BookingSeatCountAggregateOutputType = {
  id: number;
  referenceUid: number;
  bookingId: number;
  attendeeId: number;
  data: number;
  metadata: number;
  _all: number;
};

export type BookingSeatAvgAggregateInputType = {
  id?: true;
  bookingId?: true;
  attendeeId?: true;
};

export type BookingSeatSumAggregateInputType = {
  id?: true;
  bookingId?: true;
  attendeeId?: true;
};

export type BookingSeatMinAggregateInputType = {
  id?: true;
  referenceUid?: true;
  bookingId?: true;
  attendeeId?: true;
};

export type BookingSeatMaxAggregateInputType = {
  id?: true;
  referenceUid?: true;
  bookingId?: true;
  attendeeId?: true;
};

export type BookingSeatCountAggregateInputType = {
  id?: true;
  referenceUid?: true;
  bookingId?: true;
  attendeeId?: true;
  data?: true;
  metadata?: true;
  _all?: true;
};

export type BookingSeatAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingSeat to aggregate.
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingSeats to fetch.
   */
  orderBy?: Prisma.BookingSeatOrderByWithRelationInput | Prisma.BookingSeatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookingSeatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingSeats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingSeats.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BookingSeats
   **/
  _count?: true | BookingSeatCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BookingSeatAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BookingSeatSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookingSeatMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookingSeatMaxAggregateInputType;
};

export type GetBookingSeatAggregateType<T extends BookingSeatAggregateArgs> = {
  [P in keyof T & keyof AggregateBookingSeat]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookingSeat[P]>
    : Prisma.GetScalarType<T[P], AggregateBookingSeat[P]>;
};

export type BookingSeatGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.BookingSeatWhereInput;
  orderBy?: Prisma.BookingSeatOrderByWithAggregationInput | Prisma.BookingSeatOrderByWithAggregationInput[];
  by: Prisma.BookingSeatScalarFieldEnum[] | Prisma.BookingSeatScalarFieldEnum;
  having?: Prisma.BookingSeatScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookingSeatCountAggregateInputType | true;
  _avg?: BookingSeatAvgAggregateInputType;
  _sum?: BookingSeatSumAggregateInputType;
  _min?: BookingSeatMinAggregateInputType;
  _max?: BookingSeatMaxAggregateInputType;
};

export type BookingSeatGroupByOutputType = {
  id: number;
  referenceUid: string;
  bookingId: number;
  attendeeId: number;
  data: runtime.JsonValue | null;
  metadata: runtime.JsonValue | null;
  _count: BookingSeatCountAggregateOutputType | null;
  _avg: BookingSeatAvgAggregateOutputType | null;
  _sum: BookingSeatSumAggregateOutputType | null;
  _min: BookingSeatMinAggregateOutputType | null;
  _max: BookingSeatMaxAggregateOutputType | null;
};

type GetBookingSeatGroupByPayload<T extends BookingSeatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingSeatGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof BookingSeatGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BookingSeatGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BookingSeatGroupByOutputType[P]>;
    }
  >
>;

export type BookingSeatWhereInput = {
  AND?: Prisma.BookingSeatWhereInput | Prisma.BookingSeatWhereInput[];
  OR?: Prisma.BookingSeatWhereInput[];
  NOT?: Prisma.BookingSeatWhereInput | Prisma.BookingSeatWhereInput[];
  id?: Prisma.IntFilter<"BookingSeat"> | number;
  referenceUid?: Prisma.StringFilter<"BookingSeat"> | string;
  bookingId?: Prisma.IntFilter<"BookingSeat"> | number;
  attendeeId?: Prisma.IntFilter<"BookingSeat"> | number;
  data?: Prisma.JsonNullableFilter<"BookingSeat">;
  metadata?: Prisma.JsonNullableFilter<"BookingSeat">;
  booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
  attendee?: Prisma.XOR<Prisma.AttendeeScalarRelationFilter, Prisma.AttendeeWhereInput>;
};

export type BookingSeatOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  referenceUid?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
  data?: Prisma.SortOrderInput | Prisma.SortOrder;
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
  booking?: Prisma.BookingOrderByWithRelationInput;
  attendee?: Prisma.AttendeeOrderByWithRelationInput;
};

export type BookingSeatWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    referenceUid?: string;
    attendeeId?: number;
    AND?: Prisma.BookingSeatWhereInput | Prisma.BookingSeatWhereInput[];
    OR?: Prisma.BookingSeatWhereInput[];
    NOT?: Prisma.BookingSeatWhereInput | Prisma.BookingSeatWhereInput[];
    bookingId?: Prisma.IntFilter<"BookingSeat"> | number;
    data?: Prisma.JsonNullableFilter<"BookingSeat">;
    metadata?: Prisma.JsonNullableFilter<"BookingSeat">;
    booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
    attendee?: Prisma.XOR<Prisma.AttendeeScalarRelationFilter, Prisma.AttendeeWhereInput>;
  },
  "id" | "referenceUid" | "attendeeId"
>;

export type BookingSeatOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  referenceUid?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
  data?: Prisma.SortOrderInput | Prisma.SortOrder;
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.BookingSeatCountOrderByAggregateInput;
  _avg?: Prisma.BookingSeatAvgOrderByAggregateInput;
  _max?: Prisma.BookingSeatMaxOrderByAggregateInput;
  _min?: Prisma.BookingSeatMinOrderByAggregateInput;
  _sum?: Prisma.BookingSeatSumOrderByAggregateInput;
};

export type BookingSeatScalarWhereWithAggregatesInput = {
  AND?: Prisma.BookingSeatScalarWhereWithAggregatesInput | Prisma.BookingSeatScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookingSeatScalarWhereWithAggregatesInput[];
  NOT?: Prisma.BookingSeatScalarWhereWithAggregatesInput | Prisma.BookingSeatScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"BookingSeat"> | number;
  referenceUid?: Prisma.StringWithAggregatesFilter<"BookingSeat"> | string;
  bookingId?: Prisma.IntWithAggregatesFilter<"BookingSeat"> | number;
  attendeeId?: Prisma.IntWithAggregatesFilter<"BookingSeat"> | number;
  data?: Prisma.JsonNullableWithAggregatesFilter<"BookingSeat">;
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"BookingSeat">;
};

export type BookingSeatCreateInput = {
  referenceUid: string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  booking: Prisma.BookingCreateNestedOneWithoutSeatsReferencesInput;
  attendee: Prisma.AttendeeCreateNestedOneWithoutBookingSeatInput;
};

export type BookingSeatUncheckedCreateInput = {
  id?: number;
  referenceUid: string;
  bookingId: number;
  attendeeId: number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatUpdateInput = {
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  booking?: Prisma.BookingUpdateOneRequiredWithoutSeatsReferencesNestedInput;
  attendee?: Prisma.AttendeeUpdateOneRequiredWithoutBookingSeatNestedInput;
};

export type BookingSeatUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  attendeeId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatCreateManyInput = {
  id?: number;
  referenceUid: string;
  bookingId: number;
  attendeeId: number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatUpdateManyMutationInput = {
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  attendeeId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatNullableScalarRelationFilter = {
  is?: Prisma.BookingSeatWhereInput | null;
  isNot?: Prisma.BookingSeatWhereInput | null;
};

export type BookingSeatListRelationFilter = {
  every?: Prisma.BookingSeatWhereInput;
  some?: Prisma.BookingSeatWhereInput;
  none?: Prisma.BookingSeatWhereInput;
};

export type BookingSeatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type BookingSeatCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceUid?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  metadata?: Prisma.SortOrder;
};

export type BookingSeatAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
};

export type BookingSeatMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceUid?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
};

export type BookingSeatMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceUid?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
};

export type BookingSeatSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  attendeeId?: Prisma.SortOrder;
};

export type BookingSeatCreateNestedOneWithoutAttendeeInput = {
  create?: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedCreateWithoutAttendeeInput
  >;
  connectOrCreate?: Prisma.BookingSeatCreateOrConnectWithoutAttendeeInput;
  connect?: Prisma.BookingSeatWhereUniqueInput;
};

export type BookingSeatUncheckedCreateNestedOneWithoutAttendeeInput = {
  create?: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedCreateWithoutAttendeeInput
  >;
  connectOrCreate?: Prisma.BookingSeatCreateOrConnectWithoutAttendeeInput;
  connect?: Prisma.BookingSeatWhereUniqueInput;
};

export type BookingSeatUpdateOneWithoutAttendeeNestedInput = {
  create?: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedCreateWithoutAttendeeInput
  >;
  connectOrCreate?: Prisma.BookingSeatCreateOrConnectWithoutAttendeeInput;
  upsert?: Prisma.BookingSeatUpsertWithoutAttendeeInput;
  disconnect?: Prisma.BookingSeatWhereInput | boolean;
  delete?: Prisma.BookingSeatWhereInput | boolean;
  connect?: Prisma.BookingSeatWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BookingSeatUpdateToOneWithWhereWithoutAttendeeInput,
      Prisma.BookingSeatUpdateWithoutAttendeeInput
    >,
    Prisma.BookingSeatUncheckedUpdateWithoutAttendeeInput
  >;
};

export type BookingSeatUncheckedUpdateOneWithoutAttendeeNestedInput = {
  create?: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedCreateWithoutAttendeeInput
  >;
  connectOrCreate?: Prisma.BookingSeatCreateOrConnectWithoutAttendeeInput;
  upsert?: Prisma.BookingSeatUpsertWithoutAttendeeInput;
  disconnect?: Prisma.BookingSeatWhereInput | boolean;
  delete?: Prisma.BookingSeatWhereInput | boolean;
  connect?: Prisma.BookingSeatWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BookingSeatUpdateToOneWithWhereWithoutAttendeeInput,
      Prisma.BookingSeatUpdateWithoutAttendeeInput
    >,
    Prisma.BookingSeatUncheckedUpdateWithoutAttendeeInput
  >;
};

export type BookingSeatCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingSeatCreateWithoutBookingInput,
        Prisma.BookingSeatUncheckedCreateWithoutBookingInput
      >
    | Prisma.BookingSeatCreateWithoutBookingInput[]
    | Prisma.BookingSeatUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.BookingSeatCreateManyBookingInputEnvelope;
  connect?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
};

export type BookingSeatUncheckedCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingSeatCreateWithoutBookingInput,
        Prisma.BookingSeatUncheckedCreateWithoutBookingInput
      >
    | Prisma.BookingSeatCreateWithoutBookingInput[]
    | Prisma.BookingSeatUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.BookingSeatCreateManyBookingInputEnvelope;
  connect?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
};

export type BookingSeatUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingSeatCreateWithoutBookingInput,
        Prisma.BookingSeatUncheckedCreateWithoutBookingInput
      >
    | Prisma.BookingSeatCreateWithoutBookingInput[]
    | Prisma.BookingSeatUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.BookingSeatUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.BookingSeatUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.BookingSeatCreateManyBookingInputEnvelope;
  set?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  disconnect?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  delete?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  connect?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  update?:
    | Prisma.BookingSeatUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.BookingSeatUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.BookingSeatUpdateManyWithWhereWithoutBookingInput
    | Prisma.BookingSeatUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.BookingSeatScalarWhereInput | Prisma.BookingSeatScalarWhereInput[];
};

export type BookingSeatUncheckedUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingSeatCreateWithoutBookingInput,
        Prisma.BookingSeatUncheckedCreateWithoutBookingInput
      >
    | Prisma.BookingSeatCreateWithoutBookingInput[]
    | Prisma.BookingSeatUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput
    | Prisma.BookingSeatCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.BookingSeatUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.BookingSeatUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.BookingSeatCreateManyBookingInputEnvelope;
  set?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  disconnect?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  delete?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  connect?: Prisma.BookingSeatWhereUniqueInput | Prisma.BookingSeatWhereUniqueInput[];
  update?:
    | Prisma.BookingSeatUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.BookingSeatUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.BookingSeatUpdateManyWithWhereWithoutBookingInput
    | Prisma.BookingSeatUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.BookingSeatScalarWhereInput | Prisma.BookingSeatScalarWhereInput[];
};

export type BookingSeatCreateWithoutAttendeeInput = {
  referenceUid: string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  booking: Prisma.BookingCreateNestedOneWithoutSeatsReferencesInput;
};

export type BookingSeatUncheckedCreateWithoutAttendeeInput = {
  id?: number;
  referenceUid: string;
  bookingId: number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatCreateOrConnectWithoutAttendeeInput = {
  where: Prisma.BookingSeatWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedCreateWithoutAttendeeInput
  >;
};

export type BookingSeatUpsertWithoutAttendeeInput = {
  update: Prisma.XOR<
    Prisma.BookingSeatUpdateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedUpdateWithoutAttendeeInput
  >;
  create: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedCreateWithoutAttendeeInput
  >;
  where?: Prisma.BookingSeatWhereInput;
};

export type BookingSeatUpdateToOneWithWhereWithoutAttendeeInput = {
  where?: Prisma.BookingSeatWhereInput;
  data: Prisma.XOR<
    Prisma.BookingSeatUpdateWithoutAttendeeInput,
    Prisma.BookingSeatUncheckedUpdateWithoutAttendeeInput
  >;
};

export type BookingSeatUpdateWithoutAttendeeInput = {
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  booking?: Prisma.BookingUpdateOneRequiredWithoutSeatsReferencesNestedInput;
};

export type BookingSeatUncheckedUpdateWithoutAttendeeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatCreateWithoutBookingInput = {
  referenceUid: string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  attendee: Prisma.AttendeeCreateNestedOneWithoutBookingSeatInput;
};

export type BookingSeatUncheckedCreateWithoutBookingInput = {
  id?: number;
  referenceUid: string;
  attendeeId: number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatCreateOrConnectWithoutBookingInput = {
  where: Prisma.BookingSeatWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutBookingInput,
    Prisma.BookingSeatUncheckedCreateWithoutBookingInput
  >;
};

export type BookingSeatCreateManyBookingInputEnvelope = {
  data: Prisma.BookingSeatCreateManyBookingInput | Prisma.BookingSeatCreateManyBookingInput[];
  skipDuplicates?: boolean;
};

export type BookingSeatUpsertWithWhereUniqueWithoutBookingInput = {
  where: Prisma.BookingSeatWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.BookingSeatUpdateWithoutBookingInput,
    Prisma.BookingSeatUncheckedUpdateWithoutBookingInput
  >;
  create: Prisma.XOR<
    Prisma.BookingSeatCreateWithoutBookingInput,
    Prisma.BookingSeatUncheckedCreateWithoutBookingInput
  >;
};

export type BookingSeatUpdateWithWhereUniqueWithoutBookingInput = {
  where: Prisma.BookingSeatWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.BookingSeatUpdateWithoutBookingInput,
    Prisma.BookingSeatUncheckedUpdateWithoutBookingInput
  >;
};

export type BookingSeatUpdateManyWithWhereWithoutBookingInput = {
  where: Prisma.BookingSeatScalarWhereInput;
  data: Prisma.XOR<
    Prisma.BookingSeatUpdateManyMutationInput,
    Prisma.BookingSeatUncheckedUpdateManyWithoutBookingInput
  >;
};

export type BookingSeatScalarWhereInput = {
  AND?: Prisma.BookingSeatScalarWhereInput | Prisma.BookingSeatScalarWhereInput[];
  OR?: Prisma.BookingSeatScalarWhereInput[];
  NOT?: Prisma.BookingSeatScalarWhereInput | Prisma.BookingSeatScalarWhereInput[];
  id?: Prisma.IntFilter<"BookingSeat"> | number;
  referenceUid?: Prisma.StringFilter<"BookingSeat"> | string;
  bookingId?: Prisma.IntFilter<"BookingSeat"> | number;
  attendeeId?: Prisma.IntFilter<"BookingSeat"> | number;
  data?: Prisma.JsonNullableFilter<"BookingSeat">;
  metadata?: Prisma.JsonNullableFilter<"BookingSeat">;
};

export type BookingSeatCreateManyBookingInput = {
  id?: number;
  referenceUid: string;
  attendeeId: number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatUpdateWithoutBookingInput = {
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  attendee?: Prisma.AttendeeUpdateOneRequiredWithoutBookingSeatNestedInput;
};

export type BookingSeatUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  attendeeId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatUncheckedUpdateManyWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceUid?: Prisma.StringFieldUpdateOperationsInput | string;
  attendeeId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
};

export type BookingSeatSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    referenceUid?: boolean;
    bookingId?: boolean;
    attendeeId?: boolean;
    data?: boolean;
    metadata?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
    attendee?: boolean | Prisma.AttendeeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookingSeat"]
>;

export type BookingSeatSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    referenceUid?: boolean;
    bookingId?: boolean;
    attendeeId?: boolean;
    data?: boolean;
    metadata?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
    attendee?: boolean | Prisma.AttendeeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookingSeat"]
>;

export type BookingSeatSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    referenceUid?: boolean;
    bookingId?: boolean;
    attendeeId?: boolean;
    data?: boolean;
    metadata?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
    attendee?: boolean | Prisma.AttendeeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookingSeat"]
>;

export type BookingSeatSelectScalar = {
  id?: boolean;
  referenceUid?: boolean;
  bookingId?: boolean;
  attendeeId?: boolean;
  data?: boolean;
  metadata?: boolean;
};

export type BookingSeatOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "referenceUid" | "bookingId" | "attendeeId" | "data" | "metadata",
  ExtArgs["result"]["bookingSeat"]
>;
export type BookingSeatInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  attendee?: boolean | Prisma.AttendeeDefaultArgs<ExtArgs>;
};
export type BookingSeatIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  attendee?: boolean | Prisma.AttendeeDefaultArgs<ExtArgs>;
};
export type BookingSeatIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  attendee?: boolean | Prisma.AttendeeDefaultArgs<ExtArgs>;
};

export type $BookingSeatPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "BookingSeat";
  objects: {
    booking: Prisma.$BookingPayload<ExtArgs>;
    attendee: Prisma.$AttendeePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      referenceUid: string;
      bookingId: number;
      attendeeId: number;
      /**
       * @zod.import(["import { bookingSeatDataSchema } from '../../zod-utils'"]).custom.use(bookingSeatDataSchema)
       */
      data: runtime.JsonValue | null;
      metadata: runtime.JsonValue | null;
    },
    ExtArgs["result"]["bookingSeat"]
  >;
  composites: {};
};

export type BookingSeatGetPayload<S extends boolean | null | undefined | BookingSeatDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$BookingSeatPayload, S>;

export type BookingSeatCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<BookingSeatFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BookingSeatCountAggregateInputType | true;
};

export interface BookingSeatDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["BookingSeat"]; meta: { name: "BookingSeat" } };
  /**
   * Find zero or one BookingSeat that matches the filter.
   * @param {BookingSeatFindUniqueArgs} args - Arguments to find a BookingSeat
   * @example
   * // Get one BookingSeat
   * const bookingSeat = await prisma.bookingSeat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingSeatFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookingSeatFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BookingSeat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingSeatFindUniqueOrThrowArgs} args - Arguments to find a BookingSeat
   * @example
   * // Get one BookingSeat
   * const bookingSeat = await prisma.bookingSeat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingSeatFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookingSeatFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingSeat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatFindFirstArgs} args - Arguments to find a BookingSeat
   * @example
   * // Get one BookingSeat
   * const bookingSeat = await prisma.bookingSeat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingSeatFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookingSeatFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingSeat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatFindFirstOrThrowArgs} args - Arguments to find a BookingSeat
   * @example
   * // Get one BookingSeat
   * const bookingSeat = await prisma.bookingSeat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingSeatFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookingSeatFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BookingSeats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookingSeats
   * const bookingSeats = await prisma.bookingSeat.findMany()
   *
   * // Get first 10 BookingSeats
   * const bookingSeats = await prisma.bookingSeat.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookingSeatWithIdOnly = await prisma.bookingSeat.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookingSeatFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookingSeatFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$BookingSeatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a BookingSeat.
   * @param {BookingSeatCreateArgs} args - Arguments to create a BookingSeat.
   * @example
   * // Create one BookingSeat
   * const BookingSeat = await prisma.bookingSeat.create({
   *   data: {
   *     // ... data to create a BookingSeat
   *   }
   * })
   *
   */
  create<T extends BookingSeatCreateArgs>(
    args: Prisma.SelectSubset<T, BookingSeatCreateArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<Prisma.$BookingSeatPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BookingSeats.
   * @param {BookingSeatCreateManyArgs} args - Arguments to create many BookingSeats.
   * @example
   * // Create many BookingSeats
   * const bookingSeat = await prisma.bookingSeat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BookingSeatCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BookingSeatCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BookingSeats and returns the data saved in the database.
   * @param {BookingSeatCreateManyAndReturnArgs} args - Arguments to create many BookingSeats.
   * @example
   * // Create many BookingSeats
   * const bookingSeat = await prisma.bookingSeat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BookingSeats and only return the `id`
   * const bookingSeatWithIdOnly = await prisma.bookingSeat.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BookingSeatCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BookingSeatCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BookingSeat.
   * @param {BookingSeatDeleteArgs} args - Arguments to delete one BookingSeat.
   * @example
   * // Delete one BookingSeat
   * const BookingSeat = await prisma.bookingSeat.delete({
   *   where: {
   *     // ... filter to delete one BookingSeat
   *   }
   * })
   *
   */
  delete<T extends BookingSeatDeleteArgs>(
    args: Prisma.SelectSubset<T, BookingSeatDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<Prisma.$BookingSeatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BookingSeat.
   * @param {BookingSeatUpdateArgs} args - Arguments to update one BookingSeat.
   * @example
   * // Update one BookingSeat
   * const bookingSeat = await prisma.bookingSeat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BookingSeatUpdateArgs>(
    args: Prisma.SelectSubset<T, BookingSeatUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<Prisma.$BookingSeatPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BookingSeats.
   * @param {BookingSeatDeleteManyArgs} args - Arguments to filter BookingSeats to delete.
   * @example
   * // Delete a few BookingSeats
   * const { count } = await prisma.bookingSeat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BookingSeatDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BookingSeatDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookingSeats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BookingSeats
   * const bookingSeat = await prisma.bookingSeat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BookingSeatUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BookingSeatUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookingSeats and returns the data updated in the database.
   * @param {BookingSeatUpdateManyAndReturnArgs} args - Arguments to update many BookingSeats.
   * @example
   * // Update many BookingSeats
   * const bookingSeat = await prisma.bookingSeat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BookingSeats and only return the `id`
   * const bookingSeatWithIdOnly = await prisma.bookingSeat.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BookingSeatUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BookingSeatUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BookingSeat.
   * @param {BookingSeatUpsertArgs} args - Arguments to update or create a BookingSeat.
   * @example
   * // Update or create a BookingSeat
   * const bookingSeat = await prisma.bookingSeat.upsert({
   *   create: {
   *     // ... data to create a BookingSeat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BookingSeat we want to update
   *   }
   * })
   */
  upsert<T extends BookingSeatUpsertArgs>(
    args: Prisma.SelectSubset<T, BookingSeatUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<Prisma.$BookingSeatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BookingSeats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatCountArgs} args - Arguments to filter BookingSeats to count.
   * @example
   * // Count the number of BookingSeats
   * const count = await prisma.bookingSeat.count({
   *   where: {
   *     // ... the filter for the BookingSeats we want to count
   *   }
   * })
   **/
  count<T extends BookingSeatCountArgs>(
    args?: Prisma.Subset<T, BookingSeatCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BookingSeatCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BookingSeat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookingSeatAggregateArgs>(
    args: Prisma.Subset<T, BookingSeatAggregateArgs>
  ): Prisma.PrismaPromise<GetBookingSeatAggregateType<T>>;

  /**
   * Group by BookingSeat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingSeatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookingSeatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingSeatGroupByArgs["orderBy"] }
      : { orderBy?: BookingSeatGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, BookingSeatGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetBookingSeatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BookingSeat model
   */
  readonly fields: BookingSeatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookingSeat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingSeatClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  booking<T extends Prisma.BookingDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__BookingClient<
    | runtime.Types.Result.GetResult<
        Prisma.$BookingPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  attendee<T extends Prisma.AttendeeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AttendeeDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AttendeePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BookingSeat model
 */
export interface BookingSeatFieldRefs {
  readonly id: Prisma.FieldRef<"BookingSeat", "Int">;
  readonly referenceUid: Prisma.FieldRef<"BookingSeat", "String">;
  readonly bookingId: Prisma.FieldRef<"BookingSeat", "Int">;
  readonly attendeeId: Prisma.FieldRef<"BookingSeat", "Int">;
  readonly data: Prisma.FieldRef<"BookingSeat", "Json">;
  readonly metadata: Prisma.FieldRef<"BookingSeat", "Json">;
}

// Custom InputTypes
/**
 * BookingSeat findUnique
 */
export type BookingSeatFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * Filter, which BookingSeat to fetch.
   */
  where: Prisma.BookingSeatWhereUniqueInput;
};

/**
 * BookingSeat findUniqueOrThrow
 */
export type BookingSeatFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * Filter, which BookingSeat to fetch.
   */
  where: Prisma.BookingSeatWhereUniqueInput;
};

/**
 * BookingSeat findFirst
 */
export type BookingSeatFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * Filter, which BookingSeat to fetch.
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingSeats to fetch.
   */
  orderBy?: Prisma.BookingSeatOrderByWithRelationInput | Prisma.BookingSeatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingSeats.
   */
  cursor?: Prisma.BookingSeatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingSeats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingSeats.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingSeats.
   */
  distinct?: Prisma.BookingSeatScalarFieldEnum | Prisma.BookingSeatScalarFieldEnum[];
};

/**
 * BookingSeat findFirstOrThrow
 */
export type BookingSeatFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * Filter, which BookingSeat to fetch.
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingSeats to fetch.
   */
  orderBy?: Prisma.BookingSeatOrderByWithRelationInput | Prisma.BookingSeatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingSeats.
   */
  cursor?: Prisma.BookingSeatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingSeats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingSeats.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingSeats.
   */
  distinct?: Prisma.BookingSeatScalarFieldEnum | Prisma.BookingSeatScalarFieldEnum[];
};

/**
 * BookingSeat findMany
 */
export type BookingSeatFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * Filter, which BookingSeats to fetch.
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingSeats to fetch.
   */
  orderBy?: Prisma.BookingSeatOrderByWithRelationInput | Prisma.BookingSeatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BookingSeats.
   */
  cursor?: Prisma.BookingSeatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingSeats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingSeats.
   */
  skip?: number;
  distinct?: Prisma.BookingSeatScalarFieldEnum | Prisma.BookingSeatScalarFieldEnum[];
};

/**
 * BookingSeat create
 */
export type BookingSeatCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * The data needed to create a BookingSeat.
   */
  data: Prisma.XOR<Prisma.BookingSeatCreateInput, Prisma.BookingSeatUncheckedCreateInput>;
};

/**
 * BookingSeat createMany
 */
export type BookingSeatCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many BookingSeats.
   */
  data: Prisma.BookingSeatCreateManyInput | Prisma.BookingSeatCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BookingSeat createManyAndReturn
 */
export type BookingSeatCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * The data used to create many BookingSeats.
   */
  data: Prisma.BookingSeatCreateManyInput | Prisma.BookingSeatCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * BookingSeat update
 */
export type BookingSeatUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * The data needed to update a BookingSeat.
   */
  data: Prisma.XOR<Prisma.BookingSeatUpdateInput, Prisma.BookingSeatUncheckedUpdateInput>;
  /**
   * Choose, which BookingSeat to update.
   */
  where: Prisma.BookingSeatWhereUniqueInput;
};

/**
 * BookingSeat updateMany
 */
export type BookingSeatUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update BookingSeats.
   */
  data: Prisma.XOR<Prisma.BookingSeatUpdateManyMutationInput, Prisma.BookingSeatUncheckedUpdateManyInput>;
  /**
   * Filter which BookingSeats to update
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * Limit how many BookingSeats to update.
   */
  limit?: number;
};

/**
 * BookingSeat updateManyAndReturn
 */
export type BookingSeatUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * The data used to update BookingSeats.
   */
  data: Prisma.XOR<Prisma.BookingSeatUpdateManyMutationInput, Prisma.BookingSeatUncheckedUpdateManyInput>;
  /**
   * Filter which BookingSeats to update
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * Limit how many BookingSeats to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * BookingSeat upsert
 */
export type BookingSeatUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * The filter to search for the BookingSeat to update in case it exists.
   */
  where: Prisma.BookingSeatWhereUniqueInput;
  /**
   * In case the BookingSeat found by the `where` argument doesn't exist, create a new BookingSeat with this data.
   */
  create: Prisma.XOR<Prisma.BookingSeatCreateInput, Prisma.BookingSeatUncheckedCreateInput>;
  /**
   * In case the BookingSeat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookingSeatUpdateInput, Prisma.BookingSeatUncheckedUpdateInput>;
};

/**
 * BookingSeat delete
 */
export type BookingSeatDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  /**
   * Filter which BookingSeat to delete.
   */
  where: Prisma.BookingSeatWhereUniqueInput;
};

/**
 * BookingSeat deleteMany
 */
export type BookingSeatDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingSeats to delete
   */
  where?: Prisma.BookingSeatWhereInput;
  /**
   * Limit how many BookingSeats to delete.
   */
  limit?: number;
};

/**
 * BookingSeat without action
 */
export type BookingSeatDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
};
