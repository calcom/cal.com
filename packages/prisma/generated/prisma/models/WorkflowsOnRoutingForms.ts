/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `WorkflowsOnRoutingForms` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model WorkflowsOnRoutingForms
 *
 */
export type WorkflowsOnRoutingFormsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$WorkflowsOnRoutingFormsPayload>;

export type AggregateWorkflowsOnRoutingForms = {
  _count: WorkflowsOnRoutingFormsCountAggregateOutputType | null;
  _avg: WorkflowsOnRoutingFormsAvgAggregateOutputType | null;
  _sum: WorkflowsOnRoutingFormsSumAggregateOutputType | null;
  _min: WorkflowsOnRoutingFormsMinAggregateOutputType | null;
  _max: WorkflowsOnRoutingFormsMaxAggregateOutputType | null;
};

export type WorkflowsOnRoutingFormsAvgAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
};

export type WorkflowsOnRoutingFormsSumAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
};

export type WorkflowsOnRoutingFormsMinAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  routingFormId: string | null;
};

export type WorkflowsOnRoutingFormsMaxAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  routingFormId: string | null;
};

export type WorkflowsOnRoutingFormsCountAggregateOutputType = {
  id: number;
  workflowId: number;
  routingFormId: number;
  _all: number;
};

export type WorkflowsOnRoutingFormsAvgAggregateInputType = {
  id?: true;
  workflowId?: true;
};

export type WorkflowsOnRoutingFormsSumAggregateInputType = {
  id?: true;
  workflowId?: true;
};

export type WorkflowsOnRoutingFormsMinAggregateInputType = {
  id?: true;
  workflowId?: true;
  routingFormId?: true;
};

export type WorkflowsOnRoutingFormsMaxAggregateInputType = {
  id?: true;
  workflowId?: true;
  routingFormId?: true;
};

export type WorkflowsOnRoutingFormsCountAggregateInputType = {
  id?: true;
  workflowId?: true;
  routingFormId?: true;
  _all?: true;
};

export type WorkflowsOnRoutingFormsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WorkflowsOnRoutingForms to aggregate.
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnRoutingForms to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnRoutingForms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnRoutingForms.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned WorkflowsOnRoutingForms
   **/
  _count?: true | WorkflowsOnRoutingFormsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WorkflowsOnRoutingFormsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WorkflowsOnRoutingFormsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WorkflowsOnRoutingFormsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WorkflowsOnRoutingFormsMaxAggregateInputType;
};

export type GetWorkflowsOnRoutingFormsAggregateType<T extends WorkflowsOnRoutingFormsAggregateArgs> = {
  [P in keyof T & keyof AggregateWorkflowsOnRoutingForms]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkflowsOnRoutingForms[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkflowsOnRoutingForms[P]>;
};

export type WorkflowsOnRoutingFormsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  orderBy?:
    | Prisma.WorkflowsOnRoutingFormsOrderByWithAggregationInput
    | Prisma.WorkflowsOnRoutingFormsOrderByWithAggregationInput[];
  by: Prisma.WorkflowsOnRoutingFormsScalarFieldEnum[] | Prisma.WorkflowsOnRoutingFormsScalarFieldEnum;
  having?: Prisma.WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WorkflowsOnRoutingFormsCountAggregateInputType | true;
  _avg?: WorkflowsOnRoutingFormsAvgAggregateInputType;
  _sum?: WorkflowsOnRoutingFormsSumAggregateInputType;
  _min?: WorkflowsOnRoutingFormsMinAggregateInputType;
  _max?: WorkflowsOnRoutingFormsMaxAggregateInputType;
};

export type WorkflowsOnRoutingFormsGroupByOutputType = {
  id: number;
  workflowId: number;
  routingFormId: string;
  _count: WorkflowsOnRoutingFormsCountAggregateOutputType | null;
  _avg: WorkflowsOnRoutingFormsAvgAggregateOutputType | null;
  _sum: WorkflowsOnRoutingFormsSumAggregateOutputType | null;
  _min: WorkflowsOnRoutingFormsMinAggregateOutputType | null;
  _max: WorkflowsOnRoutingFormsMaxAggregateOutputType | null;
};

type GetWorkflowsOnRoutingFormsGroupByPayload<T extends WorkflowsOnRoutingFormsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<WorkflowsOnRoutingFormsGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof WorkflowsOnRoutingFormsGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkflowsOnRoutingFormsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkflowsOnRoutingFormsGroupByOutputType[P]>;
      }
    >
  >;

export type WorkflowsOnRoutingFormsWhereInput = {
  AND?: Prisma.WorkflowsOnRoutingFormsWhereInput | Prisma.WorkflowsOnRoutingFormsWhereInput[];
  OR?: Prisma.WorkflowsOnRoutingFormsWhereInput[];
  NOT?: Prisma.WorkflowsOnRoutingFormsWhereInput | Prisma.WorkflowsOnRoutingFormsWhereInput[];
  id?: Prisma.IntFilter<"WorkflowsOnRoutingForms"> | number;
  workflowId?: Prisma.IntFilter<"WorkflowsOnRoutingForms"> | number;
  routingFormId?: Prisma.StringFilter<"WorkflowsOnRoutingForms"> | string;
  workflow?: Prisma.XOR<Prisma.WorkflowScalarRelationFilter, Prisma.WorkflowWhereInput>;
  routingForm?: Prisma.XOR<
    Prisma.App_RoutingForms_FormScalarRelationFilter,
    Prisma.App_RoutingForms_FormWhereInput
  >;
};

export type WorkflowsOnRoutingFormsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  routingFormId?: Prisma.SortOrder;
  workflow?: Prisma.WorkflowOrderByWithRelationInput;
  routingForm?: Prisma.App_RoutingForms_FormOrderByWithRelationInput;
};

export type WorkflowsOnRoutingFormsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    workflowId_routingFormId?: Prisma.WorkflowsOnRoutingFormsWorkflowIdRoutingFormIdCompoundUniqueInput;
    AND?: Prisma.WorkflowsOnRoutingFormsWhereInput | Prisma.WorkflowsOnRoutingFormsWhereInput[];
    OR?: Prisma.WorkflowsOnRoutingFormsWhereInput[];
    NOT?: Prisma.WorkflowsOnRoutingFormsWhereInput | Prisma.WorkflowsOnRoutingFormsWhereInput[];
    workflowId?: Prisma.IntFilter<"WorkflowsOnRoutingForms"> | number;
    routingFormId?: Prisma.StringFilter<"WorkflowsOnRoutingForms"> | string;
    workflow?: Prisma.XOR<Prisma.WorkflowScalarRelationFilter, Prisma.WorkflowWhereInput>;
    routingForm?: Prisma.XOR<
      Prisma.App_RoutingForms_FormScalarRelationFilter,
      Prisma.App_RoutingForms_FormWhereInput
    >;
  },
  "id" | "workflowId_routingFormId"
>;

export type WorkflowsOnRoutingFormsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  routingFormId?: Prisma.SortOrder;
  _count?: Prisma.WorkflowsOnRoutingFormsCountOrderByAggregateInput;
  _avg?: Prisma.WorkflowsOnRoutingFormsAvgOrderByAggregateInput;
  _max?: Prisma.WorkflowsOnRoutingFormsMaxOrderByAggregateInput;
  _min?: Prisma.WorkflowsOnRoutingFormsMinOrderByAggregateInput;
  _sum?: Prisma.WorkflowsOnRoutingFormsSumOrderByAggregateInput;
};

export type WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput
    | Prisma.WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput[];
  OR?: Prisma.WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput
    | Prisma.WorkflowsOnRoutingFormsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"WorkflowsOnRoutingForms"> | number;
  workflowId?: Prisma.IntWithAggregatesFilter<"WorkflowsOnRoutingForms"> | number;
  routingFormId?: Prisma.StringWithAggregatesFilter<"WorkflowsOnRoutingForms"> | string;
};

export type WorkflowsOnRoutingFormsCreateInput = {
  workflow: Prisma.WorkflowCreateNestedOneWithoutActiveOnRoutingFormsInput;
  routingForm: Prisma.App_RoutingForms_FormCreateNestedOneWithoutWorkflowsInput;
};

export type WorkflowsOnRoutingFormsUncheckedCreateInput = {
  id?: number;
  workflowId: number;
  routingFormId: string;
};

export type WorkflowsOnRoutingFormsUpdateInput = {
  workflow?: Prisma.WorkflowUpdateOneRequiredWithoutActiveOnRoutingFormsNestedInput;
  routingForm?: Prisma.App_RoutingForms_FormUpdateOneRequiredWithoutWorkflowsNestedInput;
};

export type WorkflowsOnRoutingFormsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
  routingFormId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type WorkflowsOnRoutingFormsCreateManyInput = {
  id?: number;
  workflowId: number;
  routingFormId: string;
};

export type WorkflowsOnRoutingFormsUpdateManyMutationInput = {};

export type WorkflowsOnRoutingFormsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
  routingFormId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type WorkflowsOnRoutingFormsListRelationFilter = {
  every?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  some?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  none?: Prisma.WorkflowsOnRoutingFormsWhereInput;
};

export type WorkflowsOnRoutingFormsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type WorkflowsOnRoutingFormsWorkflowIdRoutingFormIdCompoundUniqueInput = {
  workflowId: number;
  routingFormId: string;
};

export type WorkflowsOnRoutingFormsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  routingFormId?: Prisma.SortOrder;
};

export type WorkflowsOnRoutingFormsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
};

export type WorkflowsOnRoutingFormsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  routingFormId?: Prisma.SortOrder;
};

export type WorkflowsOnRoutingFormsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  routingFormId?: Prisma.SortOrder;
};

export type WorkflowsOnRoutingFormsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
};

export type WorkflowsOnRoutingFormsCreateNestedManyWithoutRoutingFormInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyRoutingFormInputEnvelope;
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
};

export type WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutRoutingFormInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyRoutingFormInputEnvelope;
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
};

export type WorkflowsOnRoutingFormsUpdateManyWithoutRoutingFormNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput[];
  upsert?:
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutRoutingFormInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyRoutingFormInputEnvelope;
  set?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutRoutingFormInput[];
  updateMany?:
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutRoutingFormInput[];
  deleteMany?:
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
};

export type WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutRoutingFormNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput[];
  upsert?:
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutRoutingFormInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyRoutingFormInputEnvelope;
  set?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutRoutingFormInput[];
  updateMany?:
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutRoutingFormInput[];
  deleteMany?:
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
};

export type WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyWorkflowInputEnvelope;
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
};

export type WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyWorkflowInputEnvelope;
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
};

export type WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput[];
  upsert?:
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyWorkflowInputEnvelope;
  set?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutWorkflowInput[];
  updateMany?:
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutWorkflowInput[];
  deleteMany?:
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
};

export type WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput[];
  upsert?:
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnRoutingFormsCreateManyWorkflowInputEnvelope;
  set?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput
    | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput | Prisma.WorkflowsOnRoutingFormsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutWorkflowInput[];
  updateMany?:
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutWorkflowInput[];
  deleteMany?:
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput
    | Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
};

export type WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput = {
  workflow: Prisma.WorkflowCreateNestedOneWithoutActiveOnRoutingFormsInput;
};

export type WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput = {
  id?: number;
  workflowId: number;
};

export type WorkflowsOnRoutingFormsCreateOrConnectWithoutRoutingFormInput = {
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput
  >;
};

export type WorkflowsOnRoutingFormsCreateManyRoutingFormInputEnvelope = {
  data:
    | Prisma.WorkflowsOnRoutingFormsCreateManyRoutingFormInput
    | Prisma.WorkflowsOnRoutingFormsCreateManyRoutingFormInput[];
  skipDuplicates?: boolean;
};

export type WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutRoutingFormInput = {
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateWithoutRoutingFormInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateWithoutRoutingFormInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsCreateWithoutRoutingFormInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutRoutingFormInput
  >;
};

export type WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutRoutingFormInput = {
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateWithoutRoutingFormInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateWithoutRoutingFormInput
  >;
};

export type WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutRoutingFormInput = {
  where: Prisma.WorkflowsOnRoutingFormsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateManyMutationInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutRoutingFormInput
  >;
};

export type WorkflowsOnRoutingFormsScalarWhereInput = {
  AND?: Prisma.WorkflowsOnRoutingFormsScalarWhereInput | Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
  OR?: Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
  NOT?: Prisma.WorkflowsOnRoutingFormsScalarWhereInput | Prisma.WorkflowsOnRoutingFormsScalarWhereInput[];
  id?: Prisma.IntFilter<"WorkflowsOnRoutingForms"> | number;
  workflowId?: Prisma.IntFilter<"WorkflowsOnRoutingForms"> | number;
  routingFormId?: Prisma.StringFilter<"WorkflowsOnRoutingForms"> | string;
};

export type WorkflowsOnRoutingFormsCreateWithoutWorkflowInput = {
  routingForm: Prisma.App_RoutingForms_FormCreateNestedOneWithoutWorkflowsInput;
};

export type WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput = {
  id?: number;
  routingFormId: string;
};

export type WorkflowsOnRoutingFormsCreateOrConnectWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput
  >;
};

export type WorkflowsOnRoutingFormsCreateManyWorkflowInputEnvelope = {
  data:
    | Prisma.WorkflowsOnRoutingFormsCreateManyWorkflowInput
    | Prisma.WorkflowsOnRoutingFormsCreateManyWorkflowInput[];
  skipDuplicates?: boolean;
};

export type WorkflowsOnRoutingFormsUpsertWithWhereUniqueWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateWithoutWorkflowInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateWithoutWorkflowInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsCreateWithoutWorkflowInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedCreateWithoutWorkflowInput
  >;
};

export type WorkflowsOnRoutingFormsUpdateWithWhereUniqueWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateWithoutWorkflowInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateWithoutWorkflowInput
  >;
};

export type WorkflowsOnRoutingFormsUpdateManyWithWhereWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnRoutingFormsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateManyMutationInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowInput
  >;
};

export type WorkflowsOnRoutingFormsCreateManyRoutingFormInput = {
  id?: number;
  workflowId: number;
};

export type WorkflowsOnRoutingFormsUpdateWithoutRoutingFormInput = {
  workflow?: Prisma.WorkflowUpdateOneRequiredWithoutActiveOnRoutingFormsNestedInput;
};

export type WorkflowsOnRoutingFormsUncheckedUpdateWithoutRoutingFormInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutRoutingFormInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnRoutingFormsCreateManyWorkflowInput = {
  id?: number;
  routingFormId: string;
};

export type WorkflowsOnRoutingFormsUpdateWithoutWorkflowInput = {
  routingForm?: Prisma.App_RoutingForms_FormUpdateOneRequiredWithoutWorkflowsNestedInput;
};

export type WorkflowsOnRoutingFormsUncheckedUpdateWithoutWorkflowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  routingFormId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  routingFormId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type WorkflowsOnRoutingFormsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    routingFormId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    routingForm?: boolean | Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnRoutingForms"]
>;

export type WorkflowsOnRoutingFormsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    routingFormId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    routingForm?: boolean | Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnRoutingForms"]
>;

export type WorkflowsOnRoutingFormsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    routingFormId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    routingForm?: boolean | Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnRoutingForms"]
>;

export type WorkflowsOnRoutingFormsSelectScalar = {
  id?: boolean;
  workflowId?: boolean;
  routingFormId?: boolean;
};

export type WorkflowsOnRoutingFormsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "workflowId" | "routingFormId",
  ExtArgs["result"]["workflowsOnRoutingForms"]
>;
export type WorkflowsOnRoutingFormsInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  routingForm?: boolean | Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>;
};
export type WorkflowsOnRoutingFormsIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  routingForm?: boolean | Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>;
};
export type WorkflowsOnRoutingFormsIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  routingForm?: boolean | Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>;
};

export type $WorkflowsOnRoutingFormsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "WorkflowsOnRoutingForms";
  objects: {
    workflow: Prisma.$WorkflowPayload<ExtArgs>;
    routingForm: Prisma.$App_RoutingForms_FormPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      workflowId: number;
      routingFormId: string;
    },
    ExtArgs["result"]["workflowsOnRoutingForms"]
  >;
  composites: {};
};

export type WorkflowsOnRoutingFormsGetPayload<
  S extends boolean | null | undefined | WorkflowsOnRoutingFormsDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$WorkflowsOnRoutingFormsPayload, S>;

export type WorkflowsOnRoutingFormsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<WorkflowsOnRoutingFormsFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: WorkflowsOnRoutingFormsCountAggregateInputType | true;
};

export interface WorkflowsOnRoutingFormsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["WorkflowsOnRoutingForms"];
    meta: { name: "WorkflowsOnRoutingForms" };
  };
  /**
   * Find zero or one WorkflowsOnRoutingForms that matches the filter.
   * @param {WorkflowsOnRoutingFormsFindUniqueArgs} args - Arguments to find a WorkflowsOnRoutingForms
   * @example
   * // Get one WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkflowsOnRoutingFormsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one WorkflowsOnRoutingForms that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkflowsOnRoutingFormsFindUniqueOrThrowArgs} args - Arguments to find a WorkflowsOnRoutingForms
   * @example
   * // Get one WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkflowsOnRoutingFormsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkflowsOnRoutingForms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsFindFirstArgs} args - Arguments to find a WorkflowsOnRoutingForms
   * @example
   * // Get one WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkflowsOnRoutingFormsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkflowsOnRoutingForms that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsFindFirstOrThrowArgs} args - Arguments to find a WorkflowsOnRoutingForms
   * @example
   * // Get one WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkflowsOnRoutingFormsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more WorkflowsOnRoutingForms that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findMany()
   *
   * // Get first 10 WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const workflowsOnRoutingFormsWithIdOnly = await prisma.workflowsOnRoutingForms.findMany({ select: { id: true } })
   *
   */
  findMany<T extends WorkflowsOnRoutingFormsFindManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a WorkflowsOnRoutingForms.
   * @param {WorkflowsOnRoutingFormsCreateArgs} args - Arguments to create a WorkflowsOnRoutingForms.
   * @example
   * // Create one WorkflowsOnRoutingForms
   * const WorkflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.create({
   *   data: {
   *     // ... data to create a WorkflowsOnRoutingForms
   *   }
   * })
   *
   */
  create<T extends WorkflowsOnRoutingFormsCreateArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many WorkflowsOnRoutingForms.
   * @param {WorkflowsOnRoutingFormsCreateManyArgs} args - Arguments to create many WorkflowsOnRoutingForms.
   * @example
   * // Create many WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WorkflowsOnRoutingFormsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many WorkflowsOnRoutingForms and returns the data saved in the database.
   * @param {WorkflowsOnRoutingFormsCreateManyAndReturnArgs} args - Arguments to create many WorkflowsOnRoutingForms.
   * @example
   * // Create many WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many WorkflowsOnRoutingForms and only return the `id`
   * const workflowsOnRoutingFormsWithIdOnly = await prisma.workflowsOnRoutingForms.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WorkflowsOnRoutingFormsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a WorkflowsOnRoutingForms.
   * @param {WorkflowsOnRoutingFormsDeleteArgs} args - Arguments to delete one WorkflowsOnRoutingForms.
   * @example
   * // Delete one WorkflowsOnRoutingForms
   * const WorkflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.delete({
   *   where: {
   *     // ... filter to delete one WorkflowsOnRoutingForms
   *   }
   * })
   *
   */
  delete<T extends WorkflowsOnRoutingFormsDeleteArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one WorkflowsOnRoutingForms.
   * @param {WorkflowsOnRoutingFormsUpdateArgs} args - Arguments to update one WorkflowsOnRoutingForms.
   * @example
   * // Update one WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WorkflowsOnRoutingFormsUpdateArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more WorkflowsOnRoutingForms.
   * @param {WorkflowsOnRoutingFormsDeleteManyArgs} args - Arguments to filter WorkflowsOnRoutingForms to delete.
   * @example
   * // Delete a few WorkflowsOnRoutingForms
   * const { count } = await prisma.workflowsOnRoutingForms.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WorkflowsOnRoutingFormsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkflowsOnRoutingForms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WorkflowsOnRoutingFormsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkflowsOnRoutingForms and returns the data updated in the database.
   * @param {WorkflowsOnRoutingFormsUpdateManyAndReturnArgs} args - Arguments to update many WorkflowsOnRoutingForms.
   * @example
   * // Update many WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more WorkflowsOnRoutingForms and only return the `id`
   * const workflowsOnRoutingFormsWithIdOnly = await prisma.workflowsOnRoutingForms.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WorkflowsOnRoutingFormsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one WorkflowsOnRoutingForms.
   * @param {WorkflowsOnRoutingFormsUpsertArgs} args - Arguments to update or create a WorkflowsOnRoutingForms.
   * @example
   * // Update or create a WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.upsert({
   *   create: {
   *     // ... data to create a WorkflowsOnRoutingForms
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkflowsOnRoutingForms we want to update
   *   }
   * })
   */
  upsert<T extends WorkflowsOnRoutingFormsUpsertArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnRoutingFormsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnRoutingFormsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of WorkflowsOnRoutingForms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsCountArgs} args - Arguments to filter WorkflowsOnRoutingForms to count.
   * @example
   * // Count the number of WorkflowsOnRoutingForms
   * const count = await prisma.workflowsOnRoutingForms.count({
   *   where: {
   *     // ... the filter for the WorkflowsOnRoutingForms we want to count
   *   }
   * })
   **/
  count<T extends WorkflowsOnRoutingFormsCountArgs>(
    args?: Prisma.Subset<T, WorkflowsOnRoutingFormsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], WorkflowsOnRoutingFormsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a WorkflowsOnRoutingForms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WorkflowsOnRoutingFormsAggregateArgs>(
    args: Prisma.Subset<T, WorkflowsOnRoutingFormsAggregateArgs>
  ): Prisma.PrismaPromise<GetWorkflowsOnRoutingFormsAggregateType<T>>;

  /**
   * Group by WorkflowsOnRoutingForms.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnRoutingFormsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WorkflowsOnRoutingFormsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkflowsOnRoutingFormsGroupByArgs["orderBy"] }
      : { orderBy?: WorkflowsOnRoutingFormsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, WorkflowsOnRoutingFormsGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetWorkflowsOnRoutingFormsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the WorkflowsOnRoutingForms model
   */
  readonly fields: WorkflowsOnRoutingFormsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkflowsOnRoutingForms.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkflowsOnRoutingFormsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  workflow<T extends Prisma.WorkflowDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WorkflowDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkflowPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  routingForm<T extends Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.App_RoutingForms_FormDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__App_RoutingForms_FormClient<
    | runtime.Types.Result.GetResult<
        Prisma.$App_RoutingForms_FormPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WorkflowsOnRoutingForms model
 */
export interface WorkflowsOnRoutingFormsFieldRefs {
  readonly id: Prisma.FieldRef<"WorkflowsOnRoutingForms", "Int">;
  readonly workflowId: Prisma.FieldRef<"WorkflowsOnRoutingForms", "Int">;
  readonly routingFormId: Prisma.FieldRef<"WorkflowsOnRoutingForms", "String">;
}

// Custom InputTypes
/**
 * WorkflowsOnRoutingForms findUnique
 */
export type WorkflowsOnRoutingFormsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnRoutingForms to fetch.
   */
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
};

/**
 * WorkflowsOnRoutingForms findUniqueOrThrow
 */
export type WorkflowsOnRoutingFormsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnRoutingForms to fetch.
   */
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
};

/**
 * WorkflowsOnRoutingForms findFirst
 */
export type WorkflowsOnRoutingFormsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnRoutingForms to fetch.
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnRoutingForms to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkflowsOnRoutingForms.
   */
  cursor?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnRoutingForms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnRoutingForms.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkflowsOnRoutingForms.
   */
  distinct?: Prisma.WorkflowsOnRoutingFormsScalarFieldEnum | Prisma.WorkflowsOnRoutingFormsScalarFieldEnum[];
};

/**
 * WorkflowsOnRoutingForms findFirstOrThrow
 */
export type WorkflowsOnRoutingFormsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnRoutingForms to fetch.
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnRoutingForms to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkflowsOnRoutingForms.
   */
  cursor?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnRoutingForms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnRoutingForms.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkflowsOnRoutingForms.
   */
  distinct?: Prisma.WorkflowsOnRoutingFormsScalarFieldEnum | Prisma.WorkflowsOnRoutingFormsScalarFieldEnum[];
};

/**
 * WorkflowsOnRoutingForms findMany
 */
export type WorkflowsOnRoutingFormsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnRoutingForms to fetch.
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnRoutingForms to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing WorkflowsOnRoutingForms.
   */
  cursor?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnRoutingForms from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnRoutingForms.
   */
  skip?: number;
  distinct?: Prisma.WorkflowsOnRoutingFormsScalarFieldEnum | Prisma.WorkflowsOnRoutingFormsScalarFieldEnum[];
};

/**
 * WorkflowsOnRoutingForms create
 */
export type WorkflowsOnRoutingFormsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * The data needed to create a WorkflowsOnRoutingForms.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsCreateInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedCreateInput
  >;
};

/**
 * WorkflowsOnRoutingForms createMany
 */
export type WorkflowsOnRoutingFormsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many WorkflowsOnRoutingForms.
   */
  data: Prisma.WorkflowsOnRoutingFormsCreateManyInput | Prisma.WorkflowsOnRoutingFormsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WorkflowsOnRoutingForms createManyAndReturn
 */
export type WorkflowsOnRoutingFormsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * The data used to create many WorkflowsOnRoutingForms.
   */
  data: Prisma.WorkflowsOnRoutingFormsCreateManyInput | Prisma.WorkflowsOnRoutingFormsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkflowsOnRoutingForms update
 */
export type WorkflowsOnRoutingFormsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * The data needed to update a WorkflowsOnRoutingForms.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateInput
  >;
  /**
   * Choose, which WorkflowsOnRoutingForms to update.
   */
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
};

/**
 * WorkflowsOnRoutingForms updateMany
 */
export type WorkflowsOnRoutingFormsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update WorkflowsOnRoutingForms.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateManyMutationInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkflowsOnRoutingForms to update
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * Limit how many WorkflowsOnRoutingForms to update.
   */
  limit?: number;
};

/**
 * WorkflowsOnRoutingForms updateManyAndReturn
 */
export type WorkflowsOnRoutingFormsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * The data used to update WorkflowsOnRoutingForms.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateManyMutationInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkflowsOnRoutingForms to update
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * Limit how many WorkflowsOnRoutingForms to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkflowsOnRoutingForms upsert
 */
export type WorkflowsOnRoutingFormsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * The filter to search for the WorkflowsOnRoutingForms to update in case it exists.
   */
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  /**
   * In case the WorkflowsOnRoutingForms found by the `where` argument doesn't exist, create a new WorkflowsOnRoutingForms with this data.
   */
  create: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsCreateInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedCreateInput
  >;
  /**
   * In case the WorkflowsOnRoutingForms was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.WorkflowsOnRoutingFormsUpdateInput,
    Prisma.WorkflowsOnRoutingFormsUncheckedUpdateInput
  >;
};

/**
 * WorkflowsOnRoutingForms delete
 */
export type WorkflowsOnRoutingFormsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  /**
   * Filter which WorkflowsOnRoutingForms to delete.
   */
  where: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
};

/**
 * WorkflowsOnRoutingForms deleteMany
 */
export type WorkflowsOnRoutingFormsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WorkflowsOnRoutingForms to delete
   */
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  /**
   * Limit how many WorkflowsOnRoutingForms to delete.
   */
  limit?: number;
};

/**
 * WorkflowsOnRoutingForms without action
 */
export type WorkflowsOnRoutingFormsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
};
