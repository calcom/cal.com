/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `SelectedSlots` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SelectedSlots
 *
 */
export type SelectedSlotsModel = runtime.Types.Result.DefaultSelection<Prisma.$SelectedSlotsPayload>;

export type AggregateSelectedSlots = {
  _count: SelectedSlotsCountAggregateOutputType | null;
  _avg: SelectedSlotsAvgAggregateOutputType | null;
  _sum: SelectedSlotsSumAggregateOutputType | null;
  _min: SelectedSlotsMinAggregateOutputType | null;
  _max: SelectedSlotsMaxAggregateOutputType | null;
};

export type SelectedSlotsAvgAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
};

export type SelectedSlotsSumAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
};

export type SelectedSlotsMinAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  slotUtcStartDate: Date | null;
  slotUtcEndDate: Date | null;
  uid: string | null;
  releaseAt: Date | null;
  isSeat: boolean | null;
};

export type SelectedSlotsMaxAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  slotUtcStartDate: Date | null;
  slotUtcEndDate: Date | null;
  uid: string | null;
  releaseAt: Date | null;
  isSeat: boolean | null;
};

export type SelectedSlotsCountAggregateOutputType = {
  id: number;
  eventTypeId: number;
  userId: number;
  slotUtcStartDate: number;
  slotUtcEndDate: number;
  uid: number;
  releaseAt: number;
  isSeat: number;
  _all: number;
};

export type SelectedSlotsAvgAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
};

export type SelectedSlotsSumAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
};

export type SelectedSlotsMinAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  slotUtcStartDate?: true;
  slotUtcEndDate?: true;
  uid?: true;
  releaseAt?: true;
  isSeat?: true;
};

export type SelectedSlotsMaxAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  slotUtcStartDate?: true;
  slotUtcEndDate?: true;
  uid?: true;
  releaseAt?: true;
  isSeat?: true;
};

export type SelectedSlotsCountAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  slotUtcStartDate?: true;
  slotUtcEndDate?: true;
  uid?: true;
  releaseAt?: true;
  isSeat?: true;
  _all?: true;
};

export type SelectedSlotsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which SelectedSlots to aggregate.
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SelectedSlots to fetch.
   */
  orderBy?: Prisma.SelectedSlotsOrderByWithRelationInput | Prisma.SelectedSlotsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SelectedSlotsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SelectedSlots from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SelectedSlots.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned SelectedSlots
   **/
  _count?: true | SelectedSlotsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: SelectedSlotsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: SelectedSlotsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SelectedSlotsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SelectedSlotsMaxAggregateInputType;
};

export type GetSelectedSlotsAggregateType<T extends SelectedSlotsAggregateArgs> = {
  [P in keyof T & keyof AggregateSelectedSlots]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSelectedSlots[P]>
    : Prisma.GetScalarType<T[P], AggregateSelectedSlots[P]>;
};

export type SelectedSlotsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.SelectedSlotsWhereInput;
  orderBy?:
    | Prisma.SelectedSlotsOrderByWithAggregationInput
    | Prisma.SelectedSlotsOrderByWithAggregationInput[];
  by: Prisma.SelectedSlotsScalarFieldEnum[] | Prisma.SelectedSlotsScalarFieldEnum;
  having?: Prisma.SelectedSlotsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SelectedSlotsCountAggregateInputType | true;
  _avg?: SelectedSlotsAvgAggregateInputType;
  _sum?: SelectedSlotsSumAggregateInputType;
  _min?: SelectedSlotsMinAggregateInputType;
  _max?: SelectedSlotsMaxAggregateInputType;
};

export type SelectedSlotsGroupByOutputType = {
  id: number;
  eventTypeId: number;
  userId: number;
  slotUtcStartDate: Date;
  slotUtcEndDate: Date;
  uid: string;
  releaseAt: Date;
  isSeat: boolean;
  _count: SelectedSlotsCountAggregateOutputType | null;
  _avg: SelectedSlotsAvgAggregateOutputType | null;
  _sum: SelectedSlotsSumAggregateOutputType | null;
  _min: SelectedSlotsMinAggregateOutputType | null;
  _max: SelectedSlotsMaxAggregateOutputType | null;
};

type GetSelectedSlotsGroupByPayload<T extends SelectedSlotsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SelectedSlotsGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof SelectedSlotsGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], SelectedSlotsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], SelectedSlotsGroupByOutputType[P]>;
    }
  >
>;

export type SelectedSlotsWhereInput = {
  AND?: Prisma.SelectedSlotsWhereInput | Prisma.SelectedSlotsWhereInput[];
  OR?: Prisma.SelectedSlotsWhereInput[];
  NOT?: Prisma.SelectedSlotsWhereInput | Prisma.SelectedSlotsWhereInput[];
  id?: Prisma.IntFilter<"SelectedSlots"> | number;
  eventTypeId?: Prisma.IntFilter<"SelectedSlots"> | number;
  userId?: Prisma.IntFilter<"SelectedSlots"> | number;
  slotUtcStartDate?: Prisma.DateTimeFilter<"SelectedSlots"> | Date | string;
  slotUtcEndDate?: Prisma.DateTimeFilter<"SelectedSlots"> | Date | string;
  uid?: Prisma.StringFilter<"SelectedSlots"> | string;
  releaseAt?: Prisma.DateTimeFilter<"SelectedSlots"> | Date | string;
  isSeat?: Prisma.BoolFilter<"SelectedSlots"> | boolean;
};

export type SelectedSlotsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  slotUtcStartDate?: Prisma.SortOrder;
  slotUtcEndDate?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  releaseAt?: Prisma.SortOrder;
  isSeat?: Prisma.SortOrder;
};

export type SelectedSlotsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    selectedSlotUnique?: Prisma.SelectedSlotsSelectedSlotUniqueCompoundUniqueInput;
    AND?: Prisma.SelectedSlotsWhereInput | Prisma.SelectedSlotsWhereInput[];
    OR?: Prisma.SelectedSlotsWhereInput[];
    NOT?: Prisma.SelectedSlotsWhereInput | Prisma.SelectedSlotsWhereInput[];
    eventTypeId?: Prisma.IntFilter<"SelectedSlots"> | number;
    userId?: Prisma.IntFilter<"SelectedSlots"> | number;
    slotUtcStartDate?: Prisma.DateTimeFilter<"SelectedSlots"> | Date | string;
    slotUtcEndDate?: Prisma.DateTimeFilter<"SelectedSlots"> | Date | string;
    uid?: Prisma.StringFilter<"SelectedSlots"> | string;
    releaseAt?: Prisma.DateTimeFilter<"SelectedSlots"> | Date | string;
    isSeat?: Prisma.BoolFilter<"SelectedSlots"> | boolean;
  },
  "id" | "selectedSlotUnique"
>;

export type SelectedSlotsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  slotUtcStartDate?: Prisma.SortOrder;
  slotUtcEndDate?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  releaseAt?: Prisma.SortOrder;
  isSeat?: Prisma.SortOrder;
  _count?: Prisma.SelectedSlotsCountOrderByAggregateInput;
  _avg?: Prisma.SelectedSlotsAvgOrderByAggregateInput;
  _max?: Prisma.SelectedSlotsMaxOrderByAggregateInput;
  _min?: Prisma.SelectedSlotsMinOrderByAggregateInput;
  _sum?: Prisma.SelectedSlotsSumOrderByAggregateInput;
};

export type SelectedSlotsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SelectedSlotsScalarWhereWithAggregatesInput
    | Prisma.SelectedSlotsScalarWhereWithAggregatesInput[];
  OR?: Prisma.SelectedSlotsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SelectedSlotsScalarWhereWithAggregatesInput
    | Prisma.SelectedSlotsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"SelectedSlots"> | number;
  eventTypeId?: Prisma.IntWithAggregatesFilter<"SelectedSlots"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"SelectedSlots"> | number;
  slotUtcStartDate?: Prisma.DateTimeWithAggregatesFilter<"SelectedSlots"> | Date | string;
  slotUtcEndDate?: Prisma.DateTimeWithAggregatesFilter<"SelectedSlots"> | Date | string;
  uid?: Prisma.StringWithAggregatesFilter<"SelectedSlots"> | string;
  releaseAt?: Prisma.DateTimeWithAggregatesFilter<"SelectedSlots"> | Date | string;
  isSeat?: Prisma.BoolWithAggregatesFilter<"SelectedSlots"> | boolean;
};

export type SelectedSlotsCreateInput = {
  eventTypeId: number;
  userId: number;
  slotUtcStartDate: Date | string;
  slotUtcEndDate: Date | string;
  uid: string;
  releaseAt: Date | string;
  isSeat?: boolean;
};

export type SelectedSlotsUncheckedCreateInput = {
  id?: number;
  eventTypeId: number;
  userId: number;
  slotUtcStartDate: Date | string;
  slotUtcEndDate: Date | string;
  uid: string;
  releaseAt: Date | string;
  isSeat?: boolean;
};

export type SelectedSlotsUpdateInput = {
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  slotUtcStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  slotUtcEndDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  releaseAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isSeat?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SelectedSlotsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  slotUtcStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  slotUtcEndDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  releaseAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isSeat?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SelectedSlotsCreateManyInput = {
  id?: number;
  eventTypeId: number;
  userId: number;
  slotUtcStartDate: Date | string;
  slotUtcEndDate: Date | string;
  uid: string;
  releaseAt: Date | string;
  isSeat?: boolean;
};

export type SelectedSlotsUpdateManyMutationInput = {
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  slotUtcStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  slotUtcEndDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  releaseAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isSeat?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SelectedSlotsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  slotUtcStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  slotUtcEndDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  releaseAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isSeat?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type SelectedSlotsSelectedSlotUniqueCompoundUniqueInput = {
  userId: number;
  slotUtcStartDate: Date | string;
  slotUtcEndDate: Date | string;
  uid: string;
};

export type SelectedSlotsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  slotUtcStartDate?: Prisma.SortOrder;
  slotUtcEndDate?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  releaseAt?: Prisma.SortOrder;
  isSeat?: Prisma.SortOrder;
};

export type SelectedSlotsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type SelectedSlotsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  slotUtcStartDate?: Prisma.SortOrder;
  slotUtcEndDate?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  releaseAt?: Prisma.SortOrder;
  isSeat?: Prisma.SortOrder;
};

export type SelectedSlotsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  slotUtcStartDate?: Prisma.SortOrder;
  slotUtcEndDate?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  releaseAt?: Prisma.SortOrder;
  isSeat?: Prisma.SortOrder;
};

export type SelectedSlotsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type SelectedSlotsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    eventTypeId?: boolean;
    userId?: boolean;
    slotUtcStartDate?: boolean;
    slotUtcEndDate?: boolean;
    uid?: boolean;
    releaseAt?: boolean;
    isSeat?: boolean;
  },
  ExtArgs["result"]["selectedSlots"]
>;

export type SelectedSlotsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    eventTypeId?: boolean;
    userId?: boolean;
    slotUtcStartDate?: boolean;
    slotUtcEndDate?: boolean;
    uid?: boolean;
    releaseAt?: boolean;
    isSeat?: boolean;
  },
  ExtArgs["result"]["selectedSlots"]
>;

export type SelectedSlotsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    eventTypeId?: boolean;
    userId?: boolean;
    slotUtcStartDate?: boolean;
    slotUtcEndDate?: boolean;
    uid?: boolean;
    releaseAt?: boolean;
    isSeat?: boolean;
  },
  ExtArgs["result"]["selectedSlots"]
>;

export type SelectedSlotsSelectScalar = {
  id?: boolean;
  eventTypeId?: boolean;
  userId?: boolean;
  slotUtcStartDate?: boolean;
  slotUtcEndDate?: boolean;
  uid?: boolean;
  releaseAt?: boolean;
  isSeat?: boolean;
};

export type SelectedSlotsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "eventTypeId" | "userId" | "slotUtcStartDate" | "slotUtcEndDate" | "uid" | "releaseAt" | "isSeat",
  ExtArgs["result"]["selectedSlots"]
>;

export type $SelectedSlotsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "SelectedSlots";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      eventTypeId: number;
      userId: number;
      slotUtcStartDate: Date;
      slotUtcEndDate: Date;
      uid: string;
      releaseAt: Date;
      isSeat: boolean;
    },
    ExtArgs["result"]["selectedSlots"]
  >;
  composites: {};
};

export type SelectedSlotsGetPayload<S extends boolean | null | undefined | SelectedSlotsDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$SelectedSlotsPayload, S>;

export type SelectedSlotsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<SelectedSlotsFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: SelectedSlotsCountAggregateInputType | true;
};

export interface SelectedSlotsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["SelectedSlots"]; meta: { name: "SelectedSlots" } };
  /**
   * Find zero or one SelectedSlots that matches the filter.
   * @param {SelectedSlotsFindUniqueArgs} args - Arguments to find a SelectedSlots
   * @example
   * // Get one SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SelectedSlotsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<
      Prisma.$SelectedSlotsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one SelectedSlots that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SelectedSlotsFindUniqueOrThrowArgs} args - Arguments to find a SelectedSlots
   * @example
   * // Get one SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SelectedSlotsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<
      Prisma.$SelectedSlotsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SelectedSlots that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsFindFirstArgs} args - Arguments to find a SelectedSlots
   * @example
   * // Get one SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SelectedSlotsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SelectedSlotsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<
      Prisma.$SelectedSlotsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first SelectedSlots that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsFindFirstOrThrowArgs} args - Arguments to find a SelectedSlots
   * @example
   * // Get one SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SelectedSlotsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SelectedSlotsFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<
      Prisma.$SelectedSlotsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more SelectedSlots that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findMany()
   *
   * // Get first 10 SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const selectedSlotsWithIdOnly = await prisma.selectedSlots.findMany({ select: { id: true } })
   *
   */
  findMany<T extends SelectedSlotsFindManyArgs>(
    args?: Prisma.SelectSubset<T, SelectedSlotsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$SelectedSlotsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a SelectedSlots.
   * @param {SelectedSlotsCreateArgs} args - Arguments to create a SelectedSlots.
   * @example
   * // Create one SelectedSlots
   * const SelectedSlots = await prisma.selectedSlots.create({
   *   data: {
   *     // ... data to create a SelectedSlots
   *   }
   * })
   *
   */
  create<T extends SelectedSlotsCreateArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<Prisma.$SelectedSlotsPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many SelectedSlots.
   * @param {SelectedSlotsCreateManyArgs} args - Arguments to create many SelectedSlots.
   * @example
   * // Create many SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SelectedSlotsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SelectedSlotsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many SelectedSlots and returns the data saved in the database.
   * @param {SelectedSlotsCreateManyAndReturnArgs} args - Arguments to create many SelectedSlots.
   * @example
   * // Create many SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many SelectedSlots and only return the `id`
   * const selectedSlotsWithIdOnly = await prisma.selectedSlots.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SelectedSlotsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SelectedSlotsCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SelectedSlotsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a SelectedSlots.
   * @param {SelectedSlotsDeleteArgs} args - Arguments to delete one SelectedSlots.
   * @example
   * // Delete one SelectedSlots
   * const SelectedSlots = await prisma.selectedSlots.delete({
   *   where: {
   *     // ... filter to delete one SelectedSlots
   *   }
   * })
   *
   */
  delete<T extends SelectedSlotsDeleteArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<Prisma.$SelectedSlotsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one SelectedSlots.
   * @param {SelectedSlotsUpdateArgs} args - Arguments to update one SelectedSlots.
   * @example
   * // Update one SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SelectedSlotsUpdateArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<Prisma.$SelectedSlotsPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more SelectedSlots.
   * @param {SelectedSlotsDeleteManyArgs} args - Arguments to filter SelectedSlots to delete.
   * @example
   * // Delete a few SelectedSlots
   * const { count } = await prisma.selectedSlots.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SelectedSlotsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SelectedSlotsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SelectedSlots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SelectedSlotsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more SelectedSlots and returns the data updated in the database.
   * @param {SelectedSlotsUpdateManyAndReturnArgs} args - Arguments to update many SelectedSlots.
   * @example
   * // Update many SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more SelectedSlots and only return the `id`
   * const selectedSlotsWithIdOnly = await prisma.selectedSlots.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SelectedSlotsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SelectedSlotsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one SelectedSlots.
   * @param {SelectedSlotsUpsertArgs} args - Arguments to update or create a SelectedSlots.
   * @example
   * // Update or create a SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.upsert({
   *   create: {
   *     // ... data to create a SelectedSlots
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SelectedSlots we want to update
   *   }
   * })
   */
  upsert<T extends SelectedSlotsUpsertArgs>(
    args: Prisma.SelectSubset<T, SelectedSlotsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedSlotsClient<
    runtime.Types.Result.GetResult<Prisma.$SelectedSlotsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of SelectedSlots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsCountArgs} args - Arguments to filter SelectedSlots to count.
   * @example
   * // Count the number of SelectedSlots
   * const count = await prisma.selectedSlots.count({
   *   where: {
   *     // ... the filter for the SelectedSlots we want to count
   *   }
   * })
   **/
  count<T extends SelectedSlotsCountArgs>(
    args?: Prisma.Subset<T, SelectedSlotsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], SelectedSlotsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a SelectedSlots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SelectedSlotsAggregateArgs>(
    args: Prisma.Subset<T, SelectedSlotsAggregateArgs>
  ): Prisma.PrismaPromise<GetSelectedSlotsAggregateType<T>>;

  /**
   * Group by SelectedSlots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SelectedSlotsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SelectedSlotsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SelectedSlotsGroupByArgs["orderBy"] }
      : { orderBy?: SelectedSlotsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, SelectedSlotsGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetSelectedSlotsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the SelectedSlots model
   */
  readonly fields: SelectedSlotsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SelectedSlots.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SelectedSlotsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SelectedSlots model
 */
export interface SelectedSlotsFieldRefs {
  readonly id: Prisma.FieldRef<"SelectedSlots", "Int">;
  readonly eventTypeId: Prisma.FieldRef<"SelectedSlots", "Int">;
  readonly userId: Prisma.FieldRef<"SelectedSlots", "Int">;
  readonly slotUtcStartDate: Prisma.FieldRef<"SelectedSlots", "DateTime">;
  readonly slotUtcEndDate: Prisma.FieldRef<"SelectedSlots", "DateTime">;
  readonly uid: Prisma.FieldRef<"SelectedSlots", "String">;
  readonly releaseAt: Prisma.FieldRef<"SelectedSlots", "DateTime">;
  readonly isSeat: Prisma.FieldRef<"SelectedSlots", "Boolean">;
}

// Custom InputTypes
/**
 * SelectedSlots findUnique
 */
export type SelectedSlotsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * Filter, which SelectedSlots to fetch.
   */
  where: Prisma.SelectedSlotsWhereUniqueInput;
};

/**
 * SelectedSlots findUniqueOrThrow
 */
export type SelectedSlotsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * Filter, which SelectedSlots to fetch.
   */
  where: Prisma.SelectedSlotsWhereUniqueInput;
};

/**
 * SelectedSlots findFirst
 */
export type SelectedSlotsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * Filter, which SelectedSlots to fetch.
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SelectedSlots to fetch.
   */
  orderBy?: Prisma.SelectedSlotsOrderByWithRelationInput | Prisma.SelectedSlotsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SelectedSlots.
   */
  cursor?: Prisma.SelectedSlotsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SelectedSlots from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SelectedSlots.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SelectedSlots.
   */
  distinct?: Prisma.SelectedSlotsScalarFieldEnum | Prisma.SelectedSlotsScalarFieldEnum[];
};

/**
 * SelectedSlots findFirstOrThrow
 */
export type SelectedSlotsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * Filter, which SelectedSlots to fetch.
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SelectedSlots to fetch.
   */
  orderBy?: Prisma.SelectedSlotsOrderByWithRelationInput | Prisma.SelectedSlotsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for SelectedSlots.
   */
  cursor?: Prisma.SelectedSlotsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SelectedSlots from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SelectedSlots.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of SelectedSlots.
   */
  distinct?: Prisma.SelectedSlotsScalarFieldEnum | Prisma.SelectedSlotsScalarFieldEnum[];
};

/**
 * SelectedSlots findMany
 */
export type SelectedSlotsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * Filter, which SelectedSlots to fetch.
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of SelectedSlots to fetch.
   */
  orderBy?: Prisma.SelectedSlotsOrderByWithRelationInput | Prisma.SelectedSlotsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing SelectedSlots.
   */
  cursor?: Prisma.SelectedSlotsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` SelectedSlots from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` SelectedSlots.
   */
  skip?: number;
  distinct?: Prisma.SelectedSlotsScalarFieldEnum | Prisma.SelectedSlotsScalarFieldEnum[];
};

/**
 * SelectedSlots create
 */
export type SelectedSlotsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * The data needed to create a SelectedSlots.
   */
  data: Prisma.XOR<Prisma.SelectedSlotsCreateInput, Prisma.SelectedSlotsUncheckedCreateInput>;
};

/**
 * SelectedSlots createMany
 */
export type SelectedSlotsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many SelectedSlots.
   */
  data: Prisma.SelectedSlotsCreateManyInput | Prisma.SelectedSlotsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SelectedSlots createManyAndReturn
 */
export type SelectedSlotsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * The data used to create many SelectedSlots.
   */
  data: Prisma.SelectedSlotsCreateManyInput | Prisma.SelectedSlotsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * SelectedSlots update
 */
export type SelectedSlotsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * The data needed to update a SelectedSlots.
   */
  data: Prisma.XOR<Prisma.SelectedSlotsUpdateInput, Prisma.SelectedSlotsUncheckedUpdateInput>;
  /**
   * Choose, which SelectedSlots to update.
   */
  where: Prisma.SelectedSlotsWhereUniqueInput;
};

/**
 * SelectedSlots updateMany
 */
export type SelectedSlotsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update SelectedSlots.
   */
  data: Prisma.XOR<Prisma.SelectedSlotsUpdateManyMutationInput, Prisma.SelectedSlotsUncheckedUpdateManyInput>;
  /**
   * Filter which SelectedSlots to update
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * Limit how many SelectedSlots to update.
   */
  limit?: number;
};

/**
 * SelectedSlots updateManyAndReturn
 */
export type SelectedSlotsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * The data used to update SelectedSlots.
   */
  data: Prisma.XOR<Prisma.SelectedSlotsUpdateManyMutationInput, Prisma.SelectedSlotsUncheckedUpdateManyInput>;
  /**
   * Filter which SelectedSlots to update
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * Limit how many SelectedSlots to update.
   */
  limit?: number;
};

/**
 * SelectedSlots upsert
 */
export type SelectedSlotsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * The filter to search for the SelectedSlots to update in case it exists.
   */
  where: Prisma.SelectedSlotsWhereUniqueInput;
  /**
   * In case the SelectedSlots found by the `where` argument doesn't exist, create a new SelectedSlots with this data.
   */
  create: Prisma.XOR<Prisma.SelectedSlotsCreateInput, Prisma.SelectedSlotsUncheckedCreateInput>;
  /**
   * In case the SelectedSlots was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SelectedSlotsUpdateInput, Prisma.SelectedSlotsUncheckedUpdateInput>;
};

/**
 * SelectedSlots delete
 */
export type SelectedSlotsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
  /**
   * Filter which SelectedSlots to delete.
   */
  where: Prisma.SelectedSlotsWhereUniqueInput;
};

/**
 * SelectedSlots deleteMany
 */
export type SelectedSlotsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which SelectedSlots to delete
   */
  where?: Prisma.SelectedSlotsWhereInput;
  /**
   * Limit how many SelectedSlots to delete.
   */
  limit?: number;
};

/**
 * SelectedSlots without action
 */
export type SelectedSlotsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the SelectedSlots
   */
  select?: Prisma.SelectedSlotsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the SelectedSlots
   */
  omit?: Prisma.SelectedSlotsOmit<ExtArgs> | null;
};
