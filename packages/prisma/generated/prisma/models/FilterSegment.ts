/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `FilterSegment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model FilterSegment
 *
 */
export type FilterSegmentModel = runtime.Types.Result.DefaultSelection<Prisma.$FilterSegmentPayload>;

export type AggregateFilterSegment = {
  _count: FilterSegmentCountAggregateOutputType | null;
  _avg: FilterSegmentAvgAggregateOutputType | null;
  _sum: FilterSegmentSumAggregateOutputType | null;
  _min: FilterSegmentMinAggregateOutputType | null;
  _max: FilterSegmentMaxAggregateOutputType | null;
};

export type FilterSegmentAvgAggregateOutputType = {
  id: number | null;
  perPage: number | null;
  userId: number | null;
  teamId: number | null;
};

export type FilterSegmentSumAggregateOutputType = {
  id: number | null;
  perPage: number | null;
  userId: number | null;
  teamId: number | null;
};

export type FilterSegmentMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  tableIdentifier: string | null;
  scope: $Enums.FilterSegmentScope | null;
  perPage: number | null;
  searchTerm: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  userId: number | null;
  teamId: number | null;
};

export type FilterSegmentMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  tableIdentifier: string | null;
  scope: $Enums.FilterSegmentScope | null;
  perPage: number | null;
  searchTerm: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  userId: number | null;
  teamId: number | null;
};

export type FilterSegmentCountAggregateOutputType = {
  id: number;
  name: number;
  tableIdentifier: number;
  scope: number;
  activeFilters: number;
  sorting: number;
  columnVisibility: number;
  columnSizing: number;
  perPage: number;
  searchTerm: number;
  createdAt: number;
  updatedAt: number;
  userId: number;
  teamId: number;
  _all: number;
};

export type FilterSegmentAvgAggregateInputType = {
  id?: true;
  perPage?: true;
  userId?: true;
  teamId?: true;
};

export type FilterSegmentSumAggregateInputType = {
  id?: true;
  perPage?: true;
  userId?: true;
  teamId?: true;
};

export type FilterSegmentMinAggregateInputType = {
  id?: true;
  name?: true;
  tableIdentifier?: true;
  scope?: true;
  perPage?: true;
  searchTerm?: true;
  createdAt?: true;
  updatedAt?: true;
  userId?: true;
  teamId?: true;
};

export type FilterSegmentMaxAggregateInputType = {
  id?: true;
  name?: true;
  tableIdentifier?: true;
  scope?: true;
  perPage?: true;
  searchTerm?: true;
  createdAt?: true;
  updatedAt?: true;
  userId?: true;
  teamId?: true;
};

export type FilterSegmentCountAggregateInputType = {
  id?: true;
  name?: true;
  tableIdentifier?: true;
  scope?: true;
  activeFilters?: true;
  sorting?: true;
  columnVisibility?: true;
  columnSizing?: true;
  perPage?: true;
  searchTerm?: true;
  createdAt?: true;
  updatedAt?: true;
  userId?: true;
  teamId?: true;
  _all?: true;
};

export type FilterSegmentAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which FilterSegment to aggregate.
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FilterSegments to fetch.
   */
  orderBy?: Prisma.FilterSegmentOrderByWithRelationInput | Prisma.FilterSegmentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FilterSegmentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FilterSegments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FilterSegments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FilterSegments
   **/
  _count?: true | FilterSegmentCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: FilterSegmentAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: FilterSegmentSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FilterSegmentMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FilterSegmentMaxAggregateInputType;
};

export type GetFilterSegmentAggregateType<T extends FilterSegmentAggregateArgs> = {
  [P in keyof T & keyof AggregateFilterSegment]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFilterSegment[P]>
    : Prisma.GetScalarType<T[P], AggregateFilterSegment[P]>;
};

export type FilterSegmentGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.FilterSegmentWhereInput;
  orderBy?:
    | Prisma.FilterSegmentOrderByWithAggregationInput
    | Prisma.FilterSegmentOrderByWithAggregationInput[];
  by: Prisma.FilterSegmentScalarFieldEnum[] | Prisma.FilterSegmentScalarFieldEnum;
  having?: Prisma.FilterSegmentScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FilterSegmentCountAggregateInputType | true;
  _avg?: FilterSegmentAvgAggregateInputType;
  _sum?: FilterSegmentSumAggregateInputType;
  _min?: FilterSegmentMinAggregateInputType;
  _max?: FilterSegmentMaxAggregateInputType;
};

export type FilterSegmentGroupByOutputType = {
  id: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters: runtime.JsonValue | null;
  sorting: runtime.JsonValue | null;
  columnVisibility: runtime.JsonValue | null;
  columnSizing: runtime.JsonValue | null;
  perPage: number;
  searchTerm: string | null;
  createdAt: Date;
  updatedAt: Date;
  userId: number;
  teamId: number | null;
  _count: FilterSegmentCountAggregateOutputType | null;
  _avg: FilterSegmentAvgAggregateOutputType | null;
  _sum: FilterSegmentSumAggregateOutputType | null;
  _min: FilterSegmentMinAggregateOutputType | null;
  _max: FilterSegmentMaxAggregateOutputType | null;
};

type GetFilterSegmentGroupByPayload<T extends FilterSegmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FilterSegmentGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof FilterSegmentGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], FilterSegmentGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], FilterSegmentGroupByOutputType[P]>;
    }
  >
>;

export type FilterSegmentWhereInput = {
  AND?: Prisma.FilterSegmentWhereInput | Prisma.FilterSegmentWhereInput[];
  OR?: Prisma.FilterSegmentWhereInput[];
  NOT?: Prisma.FilterSegmentWhereInput | Prisma.FilterSegmentWhereInput[];
  id?: Prisma.IntFilter<"FilterSegment"> | number;
  name?: Prisma.StringFilter<"FilterSegment"> | string;
  tableIdentifier?: Prisma.StringFilter<"FilterSegment"> | string;
  scope?: Prisma.EnumFilterSegmentScopeFilter<"FilterSegment"> | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.JsonNullableFilter<"FilterSegment">;
  sorting?: Prisma.JsonNullableFilter<"FilterSegment">;
  columnVisibility?: Prisma.JsonNullableFilter<"FilterSegment">;
  columnSizing?: Prisma.JsonNullableFilter<"FilterSegment">;
  perPage?: Prisma.IntFilter<"FilterSegment"> | number;
  searchTerm?: Prisma.StringNullableFilter<"FilterSegment"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"FilterSegment"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"FilterSegment"> | Date | string;
  userId?: Prisma.IntFilter<"FilterSegment"> | number;
  teamId?: Prisma.IntNullableFilter<"FilterSegment"> | number | null;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  userPreferences?: Prisma.UserFilterSegmentPreferenceListRelationFilter;
};

export type FilterSegmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  activeFilters?: Prisma.SortOrderInput | Prisma.SortOrder;
  sorting?: Prisma.SortOrderInput | Prisma.SortOrder;
  columnVisibility?: Prisma.SortOrderInput | Prisma.SortOrder;
  columnSizing?: Prisma.SortOrderInput | Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  searchTerm?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceOrderByRelationAggregateInput;
};

export type FilterSegmentWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.FilterSegmentWhereInput | Prisma.FilterSegmentWhereInput[];
    OR?: Prisma.FilterSegmentWhereInput[];
    NOT?: Prisma.FilterSegmentWhereInput | Prisma.FilterSegmentWhereInput[];
    name?: Prisma.StringFilter<"FilterSegment"> | string;
    tableIdentifier?: Prisma.StringFilter<"FilterSegment"> | string;
    scope?: Prisma.EnumFilterSegmentScopeFilter<"FilterSegment"> | $Enums.FilterSegmentScope;
    activeFilters?: Prisma.JsonNullableFilter<"FilterSegment">;
    sorting?: Prisma.JsonNullableFilter<"FilterSegment">;
    columnVisibility?: Prisma.JsonNullableFilter<"FilterSegment">;
    columnSizing?: Prisma.JsonNullableFilter<"FilterSegment">;
    perPage?: Prisma.IntFilter<"FilterSegment"> | number;
    searchTerm?: Prisma.StringNullableFilter<"FilterSegment"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"FilterSegment"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"FilterSegment"> | Date | string;
    userId?: Prisma.IntFilter<"FilterSegment"> | number;
    teamId?: Prisma.IntNullableFilter<"FilterSegment"> | number | null;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
    userPreferences?: Prisma.UserFilterSegmentPreferenceListRelationFilter;
  },
  "id"
>;

export type FilterSegmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  activeFilters?: Prisma.SortOrderInput | Prisma.SortOrder;
  sorting?: Prisma.SortOrderInput | Prisma.SortOrder;
  columnVisibility?: Prisma.SortOrderInput | Prisma.SortOrder;
  columnSizing?: Prisma.SortOrderInput | Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  searchTerm?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.FilterSegmentCountOrderByAggregateInput;
  _avg?: Prisma.FilterSegmentAvgOrderByAggregateInput;
  _max?: Prisma.FilterSegmentMaxOrderByAggregateInput;
  _min?: Prisma.FilterSegmentMinOrderByAggregateInput;
  _sum?: Prisma.FilterSegmentSumOrderByAggregateInput;
};

export type FilterSegmentScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FilterSegmentScalarWhereWithAggregatesInput
    | Prisma.FilterSegmentScalarWhereWithAggregatesInput[];
  OR?: Prisma.FilterSegmentScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.FilterSegmentScalarWhereWithAggregatesInput
    | Prisma.FilterSegmentScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"FilterSegment"> | number;
  name?: Prisma.StringWithAggregatesFilter<"FilterSegment"> | string;
  tableIdentifier?: Prisma.StringWithAggregatesFilter<"FilterSegment"> | string;
  scope?: Prisma.EnumFilterSegmentScopeWithAggregatesFilter<"FilterSegment"> | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.JsonNullableWithAggregatesFilter<"FilterSegment">;
  sorting?: Prisma.JsonNullableWithAggregatesFilter<"FilterSegment">;
  columnVisibility?: Prisma.JsonNullableWithAggregatesFilter<"FilterSegment">;
  columnSizing?: Prisma.JsonNullableWithAggregatesFilter<"FilterSegment">;
  perPage?: Prisma.IntWithAggregatesFilter<"FilterSegment"> | number;
  searchTerm?: Prisma.StringNullableWithAggregatesFilter<"FilterSegment"> | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FilterSegment"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FilterSegment"> | Date | string;
  userId?: Prisma.IntWithAggregatesFilter<"FilterSegment"> | number;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"FilterSegment"> | number | null;
};

export type FilterSegmentCreateInput = {
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFilterSegmentsInput;
  team?: Prisma.TeamCreateNestedOneWithoutFilterSegmentsInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceCreateNestedManyWithoutSegmentInput;
};

export type FilterSegmentUncheckedCreateInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: number;
  teamId?: number | null;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUncheckedCreateNestedManyWithoutSegmentInput;
};

export type FilterSegmentUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFilterSegmentsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutFilterSegmentsNestedInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUpdateManyWithoutSegmentNestedInput;
};

export type FilterSegmentUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyWithoutSegmentNestedInput;
};

export type FilterSegmentCreateManyInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: number;
  teamId?: number | null;
};

export type FilterSegmentUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FilterSegmentUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type FilterSegmentListRelationFilter = {
  every?: Prisma.FilterSegmentWhereInput;
  some?: Prisma.FilterSegmentWhereInput;
  none?: Prisma.FilterSegmentWhereInput;
};

export type FilterSegmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type FilterSegmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  activeFilters?: Prisma.SortOrder;
  sorting?: Prisma.SortOrder;
  columnVisibility?: Prisma.SortOrder;
  columnSizing?: Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  searchTerm?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type FilterSegmentAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type FilterSegmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  searchTerm?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type FilterSegmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  searchTerm?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type FilterSegmentSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  perPage?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type FilterSegmentNullableScalarRelationFilter = {
  is?: Prisma.FilterSegmentWhereInput | null;
  isNot?: Prisma.FilterSegmentWhereInput | null;
};

export type FilterSegmentCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutUserInput,
        Prisma.FilterSegmentUncheckedCreateWithoutUserInput
      >
    | Prisma.FilterSegmentCreateWithoutUserInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.FilterSegmentCreateManyUserInputEnvelope;
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
};

export type FilterSegmentUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutUserInput,
        Prisma.FilterSegmentUncheckedCreateWithoutUserInput
      >
    | Prisma.FilterSegmentCreateWithoutUserInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.FilterSegmentCreateManyUserInputEnvelope;
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
};

export type FilterSegmentUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutUserInput,
        Prisma.FilterSegmentUncheckedCreateWithoutUserInput
      >
    | Prisma.FilterSegmentCreateWithoutUserInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutUserInput
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.FilterSegmentCreateManyUserInputEnvelope;
  set?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  disconnect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  delete?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  update?:
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutUserInput
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutUserInput
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.FilterSegmentScalarWhereInput | Prisma.FilterSegmentScalarWhereInput[];
};

export type FilterSegmentUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutUserInput,
        Prisma.FilterSegmentUncheckedCreateWithoutUserInput
      >
    | Prisma.FilterSegmentCreateWithoutUserInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput
    | Prisma.FilterSegmentCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutUserInput
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.FilterSegmentCreateManyUserInputEnvelope;
  set?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  disconnect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  delete?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  update?:
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutUserInput
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutUserInput
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.FilterSegmentScalarWhereInput | Prisma.FilterSegmentScalarWhereInput[];
};

export type FilterSegmentCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutTeamInput,
        Prisma.FilterSegmentUncheckedCreateWithoutTeamInput
      >
    | Prisma.FilterSegmentCreateWithoutTeamInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.FilterSegmentCreateManyTeamInputEnvelope;
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
};

export type FilterSegmentUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutTeamInput,
        Prisma.FilterSegmentUncheckedCreateWithoutTeamInput
      >
    | Prisma.FilterSegmentCreateWithoutTeamInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.FilterSegmentCreateManyTeamInputEnvelope;
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
};

export type FilterSegmentUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutTeamInput,
        Prisma.FilterSegmentUncheckedCreateWithoutTeamInput
      >
    | Prisma.FilterSegmentCreateWithoutTeamInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.FilterSegmentCreateManyTeamInputEnvelope;
  set?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  disconnect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  delete?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  update?:
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutTeamInput
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.FilterSegmentScalarWhereInput | Prisma.FilterSegmentScalarWhereInput[];
};

export type FilterSegmentUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FilterSegmentCreateWithoutTeamInput,
        Prisma.FilterSegmentUncheckedCreateWithoutTeamInput
      >
    | Prisma.FilterSegmentCreateWithoutTeamInput[]
    | Prisma.FilterSegmentUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput
    | Prisma.FilterSegmentCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.FilterSegmentUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.FilterSegmentCreateManyTeamInputEnvelope;
  set?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  disconnect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  delete?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  connect?: Prisma.FilterSegmentWhereUniqueInput | Prisma.FilterSegmentWhereUniqueInput[];
  update?:
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.FilterSegmentUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutTeamInput
    | Prisma.FilterSegmentUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.FilterSegmentScalarWhereInput | Prisma.FilterSegmentScalarWhereInput[];
};

export type EnumFilterSegmentScopeFieldUpdateOperationsInput = {
  set?: $Enums.FilterSegmentScope;
};

export type FilterSegmentCreateNestedOneWithoutUserPreferencesInput = {
  create?: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutUserPreferencesInput,
    Prisma.FilterSegmentUncheckedCreateWithoutUserPreferencesInput
  >;
  connectOrCreate?: Prisma.FilterSegmentCreateOrConnectWithoutUserPreferencesInput;
  connect?: Prisma.FilterSegmentWhereUniqueInput;
};

export type FilterSegmentUpdateOneWithoutUserPreferencesNestedInput = {
  create?: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutUserPreferencesInput,
    Prisma.FilterSegmentUncheckedCreateWithoutUserPreferencesInput
  >;
  connectOrCreate?: Prisma.FilterSegmentCreateOrConnectWithoutUserPreferencesInput;
  upsert?: Prisma.FilterSegmentUpsertWithoutUserPreferencesInput;
  disconnect?: Prisma.FilterSegmentWhereInput | boolean;
  delete?: Prisma.FilterSegmentWhereInput | boolean;
  connect?: Prisma.FilterSegmentWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FilterSegmentUpdateToOneWithWhereWithoutUserPreferencesInput,
      Prisma.FilterSegmentUpdateWithoutUserPreferencesInput
    >,
    Prisma.FilterSegmentUncheckedUpdateWithoutUserPreferencesInput
  >;
};

export type FilterSegmentCreateWithoutUserInput = {
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  team?: Prisma.TeamCreateNestedOneWithoutFilterSegmentsInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceCreateNestedManyWithoutSegmentInput;
};

export type FilterSegmentUncheckedCreateWithoutUserInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  teamId?: number | null;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUncheckedCreateNestedManyWithoutSegmentInput;
};

export type FilterSegmentCreateOrConnectWithoutUserInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutUserInput,
    Prisma.FilterSegmentUncheckedCreateWithoutUserInput
  >;
};

export type FilterSegmentCreateManyUserInputEnvelope = {
  data: Prisma.FilterSegmentCreateManyUserInput | Prisma.FilterSegmentCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type FilterSegmentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FilterSegmentUpdateWithoutUserInput,
    Prisma.FilterSegmentUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutUserInput,
    Prisma.FilterSegmentUncheckedCreateWithoutUserInput
  >;
};

export type FilterSegmentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FilterSegmentUpdateWithoutUserInput,
    Prisma.FilterSegmentUncheckedUpdateWithoutUserInput
  >;
};

export type FilterSegmentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.FilterSegmentScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FilterSegmentUpdateManyMutationInput,
    Prisma.FilterSegmentUncheckedUpdateManyWithoutUserInput
  >;
};

export type FilterSegmentScalarWhereInput = {
  AND?: Prisma.FilterSegmentScalarWhereInput | Prisma.FilterSegmentScalarWhereInput[];
  OR?: Prisma.FilterSegmentScalarWhereInput[];
  NOT?: Prisma.FilterSegmentScalarWhereInput | Prisma.FilterSegmentScalarWhereInput[];
  id?: Prisma.IntFilter<"FilterSegment"> | number;
  name?: Prisma.StringFilter<"FilterSegment"> | string;
  tableIdentifier?: Prisma.StringFilter<"FilterSegment"> | string;
  scope?: Prisma.EnumFilterSegmentScopeFilter<"FilterSegment"> | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.JsonNullableFilter<"FilterSegment">;
  sorting?: Prisma.JsonNullableFilter<"FilterSegment">;
  columnVisibility?: Prisma.JsonNullableFilter<"FilterSegment">;
  columnSizing?: Prisma.JsonNullableFilter<"FilterSegment">;
  perPage?: Prisma.IntFilter<"FilterSegment"> | number;
  searchTerm?: Prisma.StringNullableFilter<"FilterSegment"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"FilterSegment"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"FilterSegment"> | Date | string;
  userId?: Prisma.IntFilter<"FilterSegment"> | number;
  teamId?: Prisma.IntNullableFilter<"FilterSegment"> | number | null;
};

export type FilterSegmentCreateWithoutTeamInput = {
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFilterSegmentsInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceCreateNestedManyWithoutSegmentInput;
};

export type FilterSegmentUncheckedCreateWithoutTeamInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: number;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUncheckedCreateNestedManyWithoutSegmentInput;
};

export type FilterSegmentCreateOrConnectWithoutTeamInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutTeamInput,
    Prisma.FilterSegmentUncheckedCreateWithoutTeamInput
  >;
};

export type FilterSegmentCreateManyTeamInputEnvelope = {
  data: Prisma.FilterSegmentCreateManyTeamInput | Prisma.FilterSegmentCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type FilterSegmentUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FilterSegmentUpdateWithoutTeamInput,
    Prisma.FilterSegmentUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutTeamInput,
    Prisma.FilterSegmentUncheckedCreateWithoutTeamInput
  >;
};

export type FilterSegmentUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FilterSegmentUpdateWithoutTeamInput,
    Prisma.FilterSegmentUncheckedUpdateWithoutTeamInput
  >;
};

export type FilterSegmentUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.FilterSegmentScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FilterSegmentUpdateManyMutationInput,
    Prisma.FilterSegmentUncheckedUpdateManyWithoutTeamInput
  >;
};

export type FilterSegmentCreateWithoutUserPreferencesInput = {
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFilterSegmentsInput;
  team?: Prisma.TeamCreateNestedOneWithoutFilterSegmentsInput;
};

export type FilterSegmentUncheckedCreateWithoutUserPreferencesInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: number;
  teamId?: number | null;
};

export type FilterSegmentCreateOrConnectWithoutUserPreferencesInput = {
  where: Prisma.FilterSegmentWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutUserPreferencesInput,
    Prisma.FilterSegmentUncheckedCreateWithoutUserPreferencesInput
  >;
};

export type FilterSegmentUpsertWithoutUserPreferencesInput = {
  update: Prisma.XOR<
    Prisma.FilterSegmentUpdateWithoutUserPreferencesInput,
    Prisma.FilterSegmentUncheckedUpdateWithoutUserPreferencesInput
  >;
  create: Prisma.XOR<
    Prisma.FilterSegmentCreateWithoutUserPreferencesInput,
    Prisma.FilterSegmentUncheckedCreateWithoutUserPreferencesInput
  >;
  where?: Prisma.FilterSegmentWhereInput;
};

export type FilterSegmentUpdateToOneWithWhereWithoutUserPreferencesInput = {
  where?: Prisma.FilterSegmentWhereInput;
  data: Prisma.XOR<
    Prisma.FilterSegmentUpdateWithoutUserPreferencesInput,
    Prisma.FilterSegmentUncheckedUpdateWithoutUserPreferencesInput
  >;
};

export type FilterSegmentUpdateWithoutUserPreferencesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFilterSegmentsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutFilterSegmentsNestedInput;
};

export type FilterSegmentUncheckedUpdateWithoutUserPreferencesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type FilterSegmentCreateManyUserInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  teamId?: number | null;
};

export type FilterSegmentUpdateWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  team?: Prisma.TeamUpdateOneWithoutFilterSegmentsNestedInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUpdateManyWithoutSegmentNestedInput;
};

export type FilterSegmentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyWithoutSegmentNestedInput;
};

export type FilterSegmentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type FilterSegmentCreateManyTeamInput = {
  id?: number;
  name: string;
  tableIdentifier: string;
  scope: $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage: number;
  searchTerm?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: number;
};

export type FilterSegmentUpdateWithoutTeamInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFilterSegmentsNestedInput;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUpdateManyWithoutSegmentNestedInput;
};

export type FilterSegmentUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  userPreferences?: Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyWithoutSegmentNestedInput;
};

export type FilterSegmentUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  scope?: Prisma.EnumFilterSegmentScopeFieldUpdateOperationsInput | $Enums.FilterSegmentScope;
  activeFilters?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  sorting?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnVisibility?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  columnSizing?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  perPage?: Prisma.IntFieldUpdateOperationsInput | number;
  searchTerm?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
};

/**
 * Count Type FilterSegmentCountOutputType
 */

export type FilterSegmentCountOutputType = {
  userPreferences: number;
};

export type FilterSegmentCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  userPreferences?: boolean | FilterSegmentCountOutputTypeCountUserPreferencesArgs;
};

/**
 * FilterSegmentCountOutputType without action
 */
export type FilterSegmentCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegmentCountOutputType
   */
  select?: Prisma.FilterSegmentCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * FilterSegmentCountOutputType without action
 */
export type FilterSegmentCountOutputTypeCountUserPreferencesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
};

export type FilterSegmentSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    tableIdentifier?: boolean;
    scope?: boolean;
    activeFilters?: boolean;
    sorting?: boolean;
    columnVisibility?: boolean;
    columnSizing?: boolean;
    perPage?: boolean;
    searchTerm?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    teamId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    team?: boolean | Prisma.FilterSegment$teamArgs<ExtArgs>;
    userPreferences?: boolean | Prisma.FilterSegment$userPreferencesArgs<ExtArgs>;
    _count?: boolean | Prisma.FilterSegmentCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["filterSegment"]
>;

export type FilterSegmentSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    tableIdentifier?: boolean;
    scope?: boolean;
    activeFilters?: boolean;
    sorting?: boolean;
    columnVisibility?: boolean;
    columnSizing?: boolean;
    perPage?: boolean;
    searchTerm?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    teamId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    team?: boolean | Prisma.FilterSegment$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["filterSegment"]
>;

export type FilterSegmentSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    tableIdentifier?: boolean;
    scope?: boolean;
    activeFilters?: boolean;
    sorting?: boolean;
    columnVisibility?: boolean;
    columnSizing?: boolean;
    perPage?: boolean;
    searchTerm?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    teamId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    team?: boolean | Prisma.FilterSegment$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["filterSegment"]
>;

export type FilterSegmentSelectScalar = {
  id?: boolean;
  name?: boolean;
  tableIdentifier?: boolean;
  scope?: boolean;
  activeFilters?: boolean;
  sorting?: boolean;
  columnVisibility?: boolean;
  columnSizing?: boolean;
  perPage?: boolean;
  searchTerm?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  userId?: boolean;
  teamId?: boolean;
};

export type FilterSegmentOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "tableIdentifier"
  | "scope"
  | "activeFilters"
  | "sorting"
  | "columnVisibility"
  | "columnSizing"
  | "perPage"
  | "searchTerm"
  | "createdAt"
  | "updatedAt"
  | "userId"
  | "teamId",
  ExtArgs["result"]["filterSegment"]
>;
export type FilterSegmentInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  team?: boolean | Prisma.FilterSegment$teamArgs<ExtArgs>;
  userPreferences?: boolean | Prisma.FilterSegment$userPreferencesArgs<ExtArgs>;
  _count?: boolean | Prisma.FilterSegmentCountOutputTypeDefaultArgs<ExtArgs>;
};
export type FilterSegmentIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  team?: boolean | Prisma.FilterSegment$teamArgs<ExtArgs>;
};
export type FilterSegmentIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  team?: boolean | Prisma.FilterSegment$teamArgs<ExtArgs>;
};

export type $FilterSegmentPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "FilterSegment";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    team: Prisma.$TeamPayload<ExtArgs> | null;
    userPreferences: Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      tableIdentifier: string;
      scope: $Enums.FilterSegmentScope;
      activeFilters: runtime.JsonValue | null;
      sorting: runtime.JsonValue | null;
      columnVisibility: runtime.JsonValue | null;
      columnSizing: runtime.JsonValue | null;
      perPage: number;
      searchTerm: string | null;
      createdAt: Date;
      updatedAt: Date;
      userId: number;
      teamId: number | null;
    },
    ExtArgs["result"]["filterSegment"]
  >;
  composites: {};
};

export type FilterSegmentGetPayload<S extends boolean | null | undefined | FilterSegmentDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$FilterSegmentPayload, S>;

export type FilterSegmentCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<FilterSegmentFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: FilterSegmentCountAggregateInputType | true;
};

export interface FilterSegmentDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["FilterSegment"]; meta: { name: "FilterSegment" } };
  /**
   * Find zero or one FilterSegment that matches the filter.
   * @param {FilterSegmentFindUniqueArgs} args - Arguments to find a FilterSegment
   * @example
   * // Get one FilterSegment
   * const filterSegment = await prisma.filterSegment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FilterSegmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one FilterSegment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FilterSegmentFindUniqueOrThrowArgs} args - Arguments to find a FilterSegment
   * @example
   * // Get one FilterSegment
   * const filterSegment = await prisma.filterSegment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FilterSegmentFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FilterSegment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentFindFirstArgs} args - Arguments to find a FilterSegment
   * @example
   * // Get one FilterSegment
   * const filterSegment = await prisma.filterSegment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FilterSegmentFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FilterSegmentFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FilterSegment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentFindFirstOrThrowArgs} args - Arguments to find a FilterSegment
   * @example
   * // Get one FilterSegment
   * const filterSegment = await prisma.filterSegment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FilterSegmentFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FilterSegmentFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more FilterSegments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FilterSegments
   * const filterSegments = await prisma.filterSegment.findMany()
   *
   * // Get first 10 FilterSegments
   * const filterSegments = await prisma.filterSegment.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const filterSegmentWithIdOnly = await prisma.filterSegment.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FilterSegmentFindManyArgs>(
    args?: Prisma.SelectSubset<T, FilterSegmentFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$FilterSegmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a FilterSegment.
   * @param {FilterSegmentCreateArgs} args - Arguments to create a FilterSegment.
   * @example
   * // Create one FilterSegment
   * const FilterSegment = await prisma.filterSegment.create({
   *   data: {
   *     // ... data to create a FilterSegment
   *   }
   * })
   *
   */
  create<T extends FilterSegmentCreateArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<Prisma.$FilterSegmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many FilterSegments.
   * @param {FilterSegmentCreateManyArgs} args - Arguments to create many FilterSegments.
   * @example
   * // Create many FilterSegments
   * const filterSegment = await prisma.filterSegment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FilterSegmentCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FilterSegmentCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many FilterSegments and returns the data saved in the database.
   * @param {FilterSegmentCreateManyAndReturnArgs} args - Arguments to create many FilterSegments.
   * @example
   * // Create many FilterSegments
   * const filterSegment = await prisma.filterSegment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FilterSegments and only return the `id`
   * const filterSegmentWithIdOnly = await prisma.filterSegment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FilterSegmentCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FilterSegmentCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a FilterSegment.
   * @param {FilterSegmentDeleteArgs} args - Arguments to delete one FilterSegment.
   * @example
   * // Delete one FilterSegment
   * const FilterSegment = await prisma.filterSegment.delete({
   *   where: {
   *     // ... filter to delete one FilterSegment
   *   }
   * })
   *
   */
  delete<T extends FilterSegmentDeleteArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<Prisma.$FilterSegmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one FilterSegment.
   * @param {FilterSegmentUpdateArgs} args - Arguments to update one FilterSegment.
   * @example
   * // Update one FilterSegment
   * const filterSegment = await prisma.filterSegment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FilterSegmentUpdateArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<Prisma.$FilterSegmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more FilterSegments.
   * @param {FilterSegmentDeleteManyArgs} args - Arguments to filter FilterSegments to delete.
   * @example
   * // Delete a few FilterSegments
   * const { count } = await prisma.filterSegment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FilterSegmentDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FilterSegmentDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FilterSegments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FilterSegments
   * const filterSegment = await prisma.filterSegment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FilterSegmentUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FilterSegments and returns the data updated in the database.
   * @param {FilterSegmentUpdateManyAndReturnArgs} args - Arguments to update many FilterSegments.
   * @example
   * // Update many FilterSegments
   * const filterSegment = await prisma.filterSegment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FilterSegments and only return the `id`
   * const filterSegmentWithIdOnly = await prisma.filterSegment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FilterSegmentUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one FilterSegment.
   * @param {FilterSegmentUpsertArgs} args - Arguments to update or create a FilterSegment.
   * @example
   * // Update or create a FilterSegment
   * const filterSegment = await prisma.filterSegment.upsert({
   *   create: {
   *     // ... data to create a FilterSegment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FilterSegment we want to update
   *   }
   * })
   */
  upsert<T extends FilterSegmentUpsertArgs>(
    args: Prisma.SelectSubset<T, FilterSegmentUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<Prisma.$FilterSegmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of FilterSegments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentCountArgs} args - Arguments to filter FilterSegments to count.
   * @example
   * // Count the number of FilterSegments
   * const count = await prisma.filterSegment.count({
   *   where: {
   *     // ... the filter for the FilterSegments we want to count
   *   }
   * })
   **/
  count<T extends FilterSegmentCountArgs>(
    args?: Prisma.Subset<T, FilterSegmentCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], FilterSegmentCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a FilterSegment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FilterSegmentAggregateArgs>(
    args: Prisma.Subset<T, FilterSegmentAggregateArgs>
  ): Prisma.PrismaPromise<GetFilterSegmentAggregateType<T>>;

  /**
   * Group by FilterSegment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FilterSegmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FilterSegmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FilterSegmentGroupByArgs["orderBy"] }
      : { orderBy?: FilterSegmentGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, FilterSegmentGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetFilterSegmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the FilterSegment model
   */
  readonly fields: FilterSegmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FilterSegment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FilterSegmentClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.FilterSegment$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FilterSegment$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  userPreferences<T extends Prisma.FilterSegment$userPreferencesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FilterSegment$userPreferencesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the FilterSegment model
 */
export interface FilterSegmentFieldRefs {
  readonly id: Prisma.FieldRef<"FilterSegment", "Int">;
  readonly name: Prisma.FieldRef<"FilterSegment", "String">;
  readonly tableIdentifier: Prisma.FieldRef<"FilterSegment", "String">;
  readonly scope: Prisma.FieldRef<"FilterSegment", "FilterSegmentScope">;
  readonly activeFilters: Prisma.FieldRef<"FilterSegment", "Json">;
  readonly sorting: Prisma.FieldRef<"FilterSegment", "Json">;
  readonly columnVisibility: Prisma.FieldRef<"FilterSegment", "Json">;
  readonly columnSizing: Prisma.FieldRef<"FilterSegment", "Json">;
  readonly perPage: Prisma.FieldRef<"FilterSegment", "Int">;
  readonly searchTerm: Prisma.FieldRef<"FilterSegment", "String">;
  readonly createdAt: Prisma.FieldRef<"FilterSegment", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"FilterSegment", "DateTime">;
  readonly userId: Prisma.FieldRef<"FilterSegment", "Int">;
  readonly teamId: Prisma.FieldRef<"FilterSegment", "Int">;
}

// Custom InputTypes
/**
 * FilterSegment findUnique
 */
export type FilterSegmentFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * Filter, which FilterSegment to fetch.
   */
  where: Prisma.FilterSegmentWhereUniqueInput;
};

/**
 * FilterSegment findUniqueOrThrow
 */
export type FilterSegmentFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * Filter, which FilterSegment to fetch.
   */
  where: Prisma.FilterSegmentWhereUniqueInput;
};

/**
 * FilterSegment findFirst
 */
export type FilterSegmentFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * Filter, which FilterSegment to fetch.
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FilterSegments to fetch.
   */
  orderBy?: Prisma.FilterSegmentOrderByWithRelationInput | Prisma.FilterSegmentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FilterSegments.
   */
  cursor?: Prisma.FilterSegmentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FilterSegments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FilterSegments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FilterSegments.
   */
  distinct?: Prisma.FilterSegmentScalarFieldEnum | Prisma.FilterSegmentScalarFieldEnum[];
};

/**
 * FilterSegment findFirstOrThrow
 */
export type FilterSegmentFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * Filter, which FilterSegment to fetch.
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FilterSegments to fetch.
   */
  orderBy?: Prisma.FilterSegmentOrderByWithRelationInput | Prisma.FilterSegmentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FilterSegments.
   */
  cursor?: Prisma.FilterSegmentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FilterSegments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FilterSegments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FilterSegments.
   */
  distinct?: Prisma.FilterSegmentScalarFieldEnum | Prisma.FilterSegmentScalarFieldEnum[];
};

/**
 * FilterSegment findMany
 */
export type FilterSegmentFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * Filter, which FilterSegments to fetch.
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FilterSegments to fetch.
   */
  orderBy?: Prisma.FilterSegmentOrderByWithRelationInput | Prisma.FilterSegmentOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FilterSegments.
   */
  cursor?: Prisma.FilterSegmentWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FilterSegments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FilterSegments.
   */
  skip?: number;
  distinct?: Prisma.FilterSegmentScalarFieldEnum | Prisma.FilterSegmentScalarFieldEnum[];
};

/**
 * FilterSegment create
 */
export type FilterSegmentCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * The data needed to create a FilterSegment.
   */
  data: Prisma.XOR<Prisma.FilterSegmentCreateInput, Prisma.FilterSegmentUncheckedCreateInput>;
};

/**
 * FilterSegment createMany
 */
export type FilterSegmentCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many FilterSegments.
   */
  data: Prisma.FilterSegmentCreateManyInput | Prisma.FilterSegmentCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * FilterSegment createManyAndReturn
 */
export type FilterSegmentCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * The data used to create many FilterSegments.
   */
  data: Prisma.FilterSegmentCreateManyInput | Prisma.FilterSegmentCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * FilterSegment update
 */
export type FilterSegmentUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * The data needed to update a FilterSegment.
   */
  data: Prisma.XOR<Prisma.FilterSegmentUpdateInput, Prisma.FilterSegmentUncheckedUpdateInput>;
  /**
   * Choose, which FilterSegment to update.
   */
  where: Prisma.FilterSegmentWhereUniqueInput;
};

/**
 * FilterSegment updateMany
 */
export type FilterSegmentUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update FilterSegments.
   */
  data: Prisma.XOR<Prisma.FilterSegmentUpdateManyMutationInput, Prisma.FilterSegmentUncheckedUpdateManyInput>;
  /**
   * Filter which FilterSegments to update
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * Limit how many FilterSegments to update.
   */
  limit?: number;
};

/**
 * FilterSegment updateManyAndReturn
 */
export type FilterSegmentUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * The data used to update FilterSegments.
   */
  data: Prisma.XOR<Prisma.FilterSegmentUpdateManyMutationInput, Prisma.FilterSegmentUncheckedUpdateManyInput>;
  /**
   * Filter which FilterSegments to update
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * Limit how many FilterSegments to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * FilterSegment upsert
 */
export type FilterSegmentUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * The filter to search for the FilterSegment to update in case it exists.
   */
  where: Prisma.FilterSegmentWhereUniqueInput;
  /**
   * In case the FilterSegment found by the `where` argument doesn't exist, create a new FilterSegment with this data.
   */
  create: Prisma.XOR<Prisma.FilterSegmentCreateInput, Prisma.FilterSegmentUncheckedCreateInput>;
  /**
   * In case the FilterSegment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FilterSegmentUpdateInput, Prisma.FilterSegmentUncheckedUpdateInput>;
};

/**
 * FilterSegment delete
 */
export type FilterSegmentDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  /**
   * Filter which FilterSegment to delete.
   */
  where: Prisma.FilterSegmentWhereUniqueInput;
};

/**
 * FilterSegment deleteMany
 */
export type FilterSegmentDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which FilterSegments to delete
   */
  where?: Prisma.FilterSegmentWhereInput;
  /**
   * Limit how many FilterSegments to delete.
   */
  limit?: number;
};

/**
 * FilterSegment.team
 */
export type FilterSegment$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * FilterSegment.userPreferences
 */
export type FilterSegment$userPreferencesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  orderBy?:
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput[];
  cursor?: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum[];
};

/**
 * FilterSegment without action
 */
export type FilterSegmentDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
};
