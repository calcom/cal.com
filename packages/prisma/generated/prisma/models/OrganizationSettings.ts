/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `OrganizationSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model OrganizationSettings
 *
 */
export type OrganizationSettingsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$OrganizationSettingsPayload>;

export type AggregateOrganizationSettings = {
  _count: OrganizationSettingsCountAggregateOutputType | null;
  _avg: OrganizationSettingsAvgAggregateOutputType | null;
  _sum: OrganizationSettingsSumAggregateOutputType | null;
  _min: OrganizationSettingsMinAggregateOutputType | null;
  _max: OrganizationSettingsMaxAggregateOutputType | null;
};

export type OrganizationSettingsAvgAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
};

export type OrganizationSettingsSumAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
};

export type OrganizationSettingsMinAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
  isOrganizationConfigured: boolean | null;
  isOrganizationVerified: boolean | null;
  orgAutoAcceptEmail: string | null;
  lockEventTypeCreationForUsers: boolean | null;
  adminGetsNoSlotsNotification: boolean | null;
  isAdminReviewed: boolean | null;
  isAdminAPIEnabled: boolean | null;
  allowSEOIndexing: boolean | null;
  orgProfileRedirectsToVerifiedDomain: boolean | null;
  disablePhoneOnlySMSNotifications: boolean | null;
};

export type OrganizationSettingsMaxAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
  isOrganizationConfigured: boolean | null;
  isOrganizationVerified: boolean | null;
  orgAutoAcceptEmail: string | null;
  lockEventTypeCreationForUsers: boolean | null;
  adminGetsNoSlotsNotification: boolean | null;
  isAdminReviewed: boolean | null;
  isAdminAPIEnabled: boolean | null;
  allowSEOIndexing: boolean | null;
  orgProfileRedirectsToVerifiedDomain: boolean | null;
  disablePhoneOnlySMSNotifications: boolean | null;
};

export type OrganizationSettingsCountAggregateOutputType = {
  id: number;
  organizationId: number;
  isOrganizationConfigured: number;
  isOrganizationVerified: number;
  orgAutoAcceptEmail: number;
  lockEventTypeCreationForUsers: number;
  adminGetsNoSlotsNotification: number;
  isAdminReviewed: number;
  isAdminAPIEnabled: number;
  allowSEOIndexing: number;
  orgProfileRedirectsToVerifiedDomain: number;
  disablePhoneOnlySMSNotifications: number;
  _all: number;
};

export type OrganizationSettingsAvgAggregateInputType = {
  id?: true;
  organizationId?: true;
};

export type OrganizationSettingsSumAggregateInputType = {
  id?: true;
  organizationId?: true;
};

export type OrganizationSettingsMinAggregateInputType = {
  id?: true;
  organizationId?: true;
  isOrganizationConfigured?: true;
  isOrganizationVerified?: true;
  orgAutoAcceptEmail?: true;
  lockEventTypeCreationForUsers?: true;
  adminGetsNoSlotsNotification?: true;
  isAdminReviewed?: true;
  isAdminAPIEnabled?: true;
  allowSEOIndexing?: true;
  orgProfileRedirectsToVerifiedDomain?: true;
  disablePhoneOnlySMSNotifications?: true;
};

export type OrganizationSettingsMaxAggregateInputType = {
  id?: true;
  organizationId?: true;
  isOrganizationConfigured?: true;
  isOrganizationVerified?: true;
  orgAutoAcceptEmail?: true;
  lockEventTypeCreationForUsers?: true;
  adminGetsNoSlotsNotification?: true;
  isAdminReviewed?: true;
  isAdminAPIEnabled?: true;
  allowSEOIndexing?: true;
  orgProfileRedirectsToVerifiedDomain?: true;
  disablePhoneOnlySMSNotifications?: true;
};

export type OrganizationSettingsCountAggregateInputType = {
  id?: true;
  organizationId?: true;
  isOrganizationConfigured?: true;
  isOrganizationVerified?: true;
  orgAutoAcceptEmail?: true;
  lockEventTypeCreationForUsers?: true;
  adminGetsNoSlotsNotification?: true;
  isAdminReviewed?: true;
  isAdminAPIEnabled?: true;
  allowSEOIndexing?: true;
  orgProfileRedirectsToVerifiedDomain?: true;
  disablePhoneOnlySMSNotifications?: true;
  _all?: true;
};

export type OrganizationSettingsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which OrganizationSettings to aggregate.
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrganizationSettings to fetch.
   */
  orderBy?:
    | Prisma.OrganizationSettingsOrderByWithRelationInput
    | Prisma.OrganizationSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.OrganizationSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrganizationSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrganizationSettings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned OrganizationSettings
   **/
  _count?: true | OrganizationSettingsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: OrganizationSettingsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: OrganizationSettingsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: OrganizationSettingsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: OrganizationSettingsMaxAggregateInputType;
};

export type GetOrganizationSettingsAggregateType<T extends OrganizationSettingsAggregateArgs> = {
  [P in keyof T & keyof AggregateOrganizationSettings]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrganizationSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateOrganizationSettings[P]>;
};

export type OrganizationSettingsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.OrganizationSettingsWhereInput;
  orderBy?:
    | Prisma.OrganizationSettingsOrderByWithAggregationInput
    | Prisma.OrganizationSettingsOrderByWithAggregationInput[];
  by: Prisma.OrganizationSettingsScalarFieldEnum[] | Prisma.OrganizationSettingsScalarFieldEnum;
  having?: Prisma.OrganizationSettingsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: OrganizationSettingsCountAggregateInputType | true;
  _avg?: OrganizationSettingsAvgAggregateInputType;
  _sum?: OrganizationSettingsSumAggregateInputType;
  _min?: OrganizationSettingsMinAggregateInputType;
  _max?: OrganizationSettingsMaxAggregateInputType;
};

export type OrganizationSettingsGroupByOutputType = {
  id: number;
  organizationId: number;
  isOrganizationConfigured: boolean;
  isOrganizationVerified: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers: boolean;
  adminGetsNoSlotsNotification: boolean;
  isAdminReviewed: boolean;
  isAdminAPIEnabled: boolean;
  allowSEOIndexing: boolean;
  orgProfileRedirectsToVerifiedDomain: boolean;
  disablePhoneOnlySMSNotifications: boolean;
  _count: OrganizationSettingsCountAggregateOutputType | null;
  _avg: OrganizationSettingsAvgAggregateOutputType | null;
  _sum: OrganizationSettingsSumAggregateOutputType | null;
  _min: OrganizationSettingsMinAggregateOutputType | null;
  _max: OrganizationSettingsMaxAggregateOutputType | null;
};

type GetOrganizationSettingsGroupByPayload<T extends OrganizationSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrganizationSettingsGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof OrganizationSettingsGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], OrganizationSettingsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], OrganizationSettingsGroupByOutputType[P]>;
    }
  >
>;

export type OrganizationSettingsWhereInput = {
  AND?: Prisma.OrganizationSettingsWhereInput | Prisma.OrganizationSettingsWhereInput[];
  OR?: Prisma.OrganizationSettingsWhereInput[];
  NOT?: Prisma.OrganizationSettingsWhereInput | Prisma.OrganizationSettingsWhereInput[];
  id?: Prisma.IntFilter<"OrganizationSettings"> | number;
  organizationId?: Prisma.IntFilter<"OrganizationSettings"> | number;
  isOrganizationConfigured?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  isOrganizationVerified?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  orgAutoAcceptEmail?: Prisma.StringFilter<"OrganizationSettings"> | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  isAdminReviewed?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  isAdminAPIEnabled?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  allowSEOIndexing?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
  organization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  dSyncData?: Prisma.XOR<Prisma.DSyncDataNullableScalarRelationFilter, Prisma.DSyncDataWhereInput> | null;
};

export type OrganizationSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  isOrganizationConfigured?: Prisma.SortOrder;
  isOrganizationVerified?: Prisma.SortOrder;
  orgAutoAcceptEmail?: Prisma.SortOrder;
  lockEventTypeCreationForUsers?: Prisma.SortOrder;
  adminGetsNoSlotsNotification?: Prisma.SortOrder;
  isAdminReviewed?: Prisma.SortOrder;
  isAdminAPIEnabled?: Prisma.SortOrder;
  allowSEOIndexing?: Prisma.SortOrder;
  orgProfileRedirectsToVerifiedDomain?: Prisma.SortOrder;
  disablePhoneOnlySMSNotifications?: Prisma.SortOrder;
  organization?: Prisma.TeamOrderByWithRelationInput;
  dSyncData?: Prisma.DSyncDataOrderByWithRelationInput;
};

export type OrganizationSettingsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    organizationId?: number;
    AND?: Prisma.OrganizationSettingsWhereInput | Prisma.OrganizationSettingsWhereInput[];
    OR?: Prisma.OrganizationSettingsWhereInput[];
    NOT?: Prisma.OrganizationSettingsWhereInput | Prisma.OrganizationSettingsWhereInput[];
    isOrganizationConfigured?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    isOrganizationVerified?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    orgAutoAcceptEmail?: Prisma.StringFilter<"OrganizationSettings"> | string;
    lockEventTypeCreationForUsers?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    adminGetsNoSlotsNotification?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    isAdminReviewed?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    isAdminAPIEnabled?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    allowSEOIndexing?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    disablePhoneOnlySMSNotifications?: Prisma.BoolFilter<"OrganizationSettings"> | boolean;
    organization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    dSyncData?: Prisma.XOR<Prisma.DSyncDataNullableScalarRelationFilter, Prisma.DSyncDataWhereInput> | null;
  },
  "id" | "organizationId"
>;

export type OrganizationSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  isOrganizationConfigured?: Prisma.SortOrder;
  isOrganizationVerified?: Prisma.SortOrder;
  orgAutoAcceptEmail?: Prisma.SortOrder;
  lockEventTypeCreationForUsers?: Prisma.SortOrder;
  adminGetsNoSlotsNotification?: Prisma.SortOrder;
  isAdminReviewed?: Prisma.SortOrder;
  isAdminAPIEnabled?: Prisma.SortOrder;
  allowSEOIndexing?: Prisma.SortOrder;
  orgProfileRedirectsToVerifiedDomain?: Prisma.SortOrder;
  disablePhoneOnlySMSNotifications?: Prisma.SortOrder;
  _count?: Prisma.OrganizationSettingsCountOrderByAggregateInput;
  _avg?: Prisma.OrganizationSettingsAvgOrderByAggregateInput;
  _max?: Prisma.OrganizationSettingsMaxOrderByAggregateInput;
  _min?: Prisma.OrganizationSettingsMinOrderByAggregateInput;
  _sum?: Prisma.OrganizationSettingsSumOrderByAggregateInput;
};

export type OrganizationSettingsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.OrganizationSettingsScalarWhereWithAggregatesInput
    | Prisma.OrganizationSettingsScalarWhereWithAggregatesInput[];
  OR?: Prisma.OrganizationSettingsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.OrganizationSettingsScalarWhereWithAggregatesInput
    | Prisma.OrganizationSettingsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"OrganizationSettings"> | number;
  organizationId?: Prisma.IntWithAggregatesFilter<"OrganizationSettings"> | number;
  isOrganizationConfigured?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  isOrganizationVerified?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  orgAutoAcceptEmail?: Prisma.StringWithAggregatesFilter<"OrganizationSettings"> | string;
  lockEventTypeCreationForUsers?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  isAdminReviewed?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  isAdminAPIEnabled?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  allowSEOIndexing?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolWithAggregatesFilter<"OrganizationSettings"> | boolean;
};

export type OrganizationSettingsCreateInput = {
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
  organization: Prisma.TeamCreateNestedOneWithoutOrganizationSettingsInput;
  dSyncData?: Prisma.DSyncDataCreateNestedOneWithoutOrgInput;
};

export type OrganizationSettingsUncheckedCreateInput = {
  id?: number;
  organizationId: number;
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
  dSyncData?: Prisma.DSyncDataUncheckedCreateNestedOneWithoutOrgInput;
};

export type OrganizationSettingsUpdateInput = {
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  organization?: Prisma.TeamUpdateOneRequiredWithoutOrganizationSettingsNestedInput;
  dSyncData?: Prisma.DSyncDataUpdateOneWithoutOrgNestedInput;
};

export type OrganizationSettingsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  dSyncData?: Prisma.DSyncDataUncheckedUpdateOneWithoutOrgNestedInput;
};

export type OrganizationSettingsCreateManyInput = {
  id?: number;
  organizationId: number;
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
};

export type OrganizationSettingsUpdateManyMutationInput = {
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type OrganizationSettingsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type OrganizationSettingsNullableScalarRelationFilter = {
  is?: Prisma.OrganizationSettingsWhereInput | null;
  isNot?: Prisma.OrganizationSettingsWhereInput | null;
};

export type OrganizationSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  isOrganizationConfigured?: Prisma.SortOrder;
  isOrganizationVerified?: Prisma.SortOrder;
  orgAutoAcceptEmail?: Prisma.SortOrder;
  lockEventTypeCreationForUsers?: Prisma.SortOrder;
  adminGetsNoSlotsNotification?: Prisma.SortOrder;
  isAdminReviewed?: Prisma.SortOrder;
  isAdminAPIEnabled?: Prisma.SortOrder;
  allowSEOIndexing?: Prisma.SortOrder;
  orgProfileRedirectsToVerifiedDomain?: Prisma.SortOrder;
  disablePhoneOnlySMSNotifications?: Prisma.SortOrder;
};

export type OrganizationSettingsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type OrganizationSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  isOrganizationConfigured?: Prisma.SortOrder;
  isOrganizationVerified?: Prisma.SortOrder;
  orgAutoAcceptEmail?: Prisma.SortOrder;
  lockEventTypeCreationForUsers?: Prisma.SortOrder;
  adminGetsNoSlotsNotification?: Prisma.SortOrder;
  isAdminReviewed?: Prisma.SortOrder;
  isAdminAPIEnabled?: Prisma.SortOrder;
  allowSEOIndexing?: Prisma.SortOrder;
  orgProfileRedirectsToVerifiedDomain?: Prisma.SortOrder;
  disablePhoneOnlySMSNotifications?: Prisma.SortOrder;
};

export type OrganizationSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  isOrganizationConfigured?: Prisma.SortOrder;
  isOrganizationVerified?: Prisma.SortOrder;
  orgAutoAcceptEmail?: Prisma.SortOrder;
  lockEventTypeCreationForUsers?: Prisma.SortOrder;
  adminGetsNoSlotsNotification?: Prisma.SortOrder;
  isAdminReviewed?: Prisma.SortOrder;
  isAdminAPIEnabled?: Prisma.SortOrder;
  allowSEOIndexing?: Prisma.SortOrder;
  orgProfileRedirectsToVerifiedDomain?: Prisma.SortOrder;
  disablePhoneOnlySMSNotifications?: Prisma.SortOrder;
};

export type OrganizationSettingsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type OrganizationSettingsCreateNestedOneWithoutOrganizationInput = {
  create?: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutOrganizationInput
  >;
  connectOrCreate?: Prisma.OrganizationSettingsCreateOrConnectWithoutOrganizationInput;
  connect?: Prisma.OrganizationSettingsWhereUniqueInput;
};

export type OrganizationSettingsUncheckedCreateNestedOneWithoutOrganizationInput = {
  create?: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutOrganizationInput
  >;
  connectOrCreate?: Prisma.OrganizationSettingsCreateOrConnectWithoutOrganizationInput;
  connect?: Prisma.OrganizationSettingsWhereUniqueInput;
};

export type OrganizationSettingsUpdateOneWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutOrganizationInput
  >;
  connectOrCreate?: Prisma.OrganizationSettingsCreateOrConnectWithoutOrganizationInput;
  upsert?: Prisma.OrganizationSettingsUpsertWithoutOrganizationInput;
  disconnect?: Prisma.OrganizationSettingsWhereInput | boolean;
  delete?: Prisma.OrganizationSettingsWhereInput | boolean;
  connect?: Prisma.OrganizationSettingsWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.OrganizationSettingsUpdateToOneWithWhereWithoutOrganizationInput,
      Prisma.OrganizationSettingsUpdateWithoutOrganizationInput
    >,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutOrganizationInput
  >;
};

export type OrganizationSettingsUncheckedUpdateOneWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutOrganizationInput
  >;
  connectOrCreate?: Prisma.OrganizationSettingsCreateOrConnectWithoutOrganizationInput;
  upsert?: Prisma.OrganizationSettingsUpsertWithoutOrganizationInput;
  disconnect?: Prisma.OrganizationSettingsWhereInput | boolean;
  delete?: Prisma.OrganizationSettingsWhereInput | boolean;
  connect?: Prisma.OrganizationSettingsWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.OrganizationSettingsUpdateToOneWithWhereWithoutOrganizationInput,
      Prisma.OrganizationSettingsUpdateWithoutOrganizationInput
    >,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutOrganizationInput
  >;
};

export type OrganizationSettingsCreateNestedOneWithoutDSyncDataInput = {
  create?: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutDSyncDataInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutDSyncDataInput
  >;
  connectOrCreate?: Prisma.OrganizationSettingsCreateOrConnectWithoutDSyncDataInput;
  connect?: Prisma.OrganizationSettingsWhereUniqueInput;
};

export type OrganizationSettingsUpdateOneWithoutDSyncDataNestedInput = {
  create?: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutDSyncDataInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutDSyncDataInput
  >;
  connectOrCreate?: Prisma.OrganizationSettingsCreateOrConnectWithoutDSyncDataInput;
  upsert?: Prisma.OrganizationSettingsUpsertWithoutDSyncDataInput;
  disconnect?: Prisma.OrganizationSettingsWhereInput | boolean;
  delete?: Prisma.OrganizationSettingsWhereInput | boolean;
  connect?: Prisma.OrganizationSettingsWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.OrganizationSettingsUpdateToOneWithWhereWithoutDSyncDataInput,
      Prisma.OrganizationSettingsUpdateWithoutDSyncDataInput
    >,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutDSyncDataInput
  >;
};

export type OrganizationSettingsCreateWithoutOrganizationInput = {
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
  dSyncData?: Prisma.DSyncDataCreateNestedOneWithoutOrgInput;
};

export type OrganizationSettingsUncheckedCreateWithoutOrganizationInput = {
  id?: number;
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
  dSyncData?: Prisma.DSyncDataUncheckedCreateNestedOneWithoutOrgInput;
};

export type OrganizationSettingsCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.OrganizationSettingsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutOrganizationInput
  >;
};

export type OrganizationSettingsUpsertWithoutOrganizationInput = {
  update: Prisma.XOR<
    Prisma.OrganizationSettingsUpdateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutOrganizationInput
  >;
  where?: Prisma.OrganizationSettingsWhereInput;
};

export type OrganizationSettingsUpdateToOneWithWhereWithoutOrganizationInput = {
  where?: Prisma.OrganizationSettingsWhereInput;
  data: Prisma.XOR<
    Prisma.OrganizationSettingsUpdateWithoutOrganizationInput,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutOrganizationInput
  >;
};

export type OrganizationSettingsUpdateWithoutOrganizationInput = {
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  dSyncData?: Prisma.DSyncDataUpdateOneWithoutOrgNestedInput;
};

export type OrganizationSettingsUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  dSyncData?: Prisma.DSyncDataUncheckedUpdateOneWithoutOrgNestedInput;
};

export type OrganizationSettingsCreateWithoutDSyncDataInput = {
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
  organization: Prisma.TeamCreateNestedOneWithoutOrganizationSettingsInput;
};

export type OrganizationSettingsUncheckedCreateWithoutDSyncDataInput = {
  id?: number;
  organizationId: number;
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail: string;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
};

export type OrganizationSettingsCreateOrConnectWithoutDSyncDataInput = {
  where: Prisma.OrganizationSettingsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutDSyncDataInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutDSyncDataInput
  >;
};

export type OrganizationSettingsUpsertWithoutDSyncDataInput = {
  update: Prisma.XOR<
    Prisma.OrganizationSettingsUpdateWithoutDSyncDataInput,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutDSyncDataInput
  >;
  create: Prisma.XOR<
    Prisma.OrganizationSettingsCreateWithoutDSyncDataInput,
    Prisma.OrganizationSettingsUncheckedCreateWithoutDSyncDataInput
  >;
  where?: Prisma.OrganizationSettingsWhereInput;
};

export type OrganizationSettingsUpdateToOneWithWhereWithoutDSyncDataInput = {
  where?: Prisma.OrganizationSettingsWhereInput;
  data: Prisma.XOR<
    Prisma.OrganizationSettingsUpdateWithoutDSyncDataInput,
    Prisma.OrganizationSettingsUncheckedUpdateWithoutDSyncDataInput
  >;
};

export type OrganizationSettingsUpdateWithoutDSyncDataInput = {
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  organization?: Prisma.TeamUpdateOneRequiredWithoutOrganizationSettingsNestedInput;
};

export type OrganizationSettingsUncheckedUpdateWithoutDSyncDataInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  isOrganizationConfigured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isOrganizationVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgAutoAcceptEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  lockEventTypeCreationForUsers?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  adminGetsNoSlotsNotification?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminReviewed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isAdminAPIEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  allowSEOIndexing?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  orgProfileRedirectsToVerifiedDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  disablePhoneOnlySMSNotifications?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type OrganizationSettingsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    organizationId?: boolean;
    isOrganizationConfigured?: boolean;
    isOrganizationVerified?: boolean;
    orgAutoAcceptEmail?: boolean;
    lockEventTypeCreationForUsers?: boolean;
    adminGetsNoSlotsNotification?: boolean;
    isAdminReviewed?: boolean;
    isAdminAPIEnabled?: boolean;
    allowSEOIndexing?: boolean;
    orgProfileRedirectsToVerifiedDomain?: boolean;
    disablePhoneOnlySMSNotifications?: boolean;
    organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    dSyncData?: boolean | Prisma.OrganizationSettings$dSyncDataArgs<ExtArgs>;
  },
  ExtArgs["result"]["organizationSettings"]
>;

export type OrganizationSettingsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    organizationId?: boolean;
    isOrganizationConfigured?: boolean;
    isOrganizationVerified?: boolean;
    orgAutoAcceptEmail?: boolean;
    lockEventTypeCreationForUsers?: boolean;
    adminGetsNoSlotsNotification?: boolean;
    isAdminReviewed?: boolean;
    isAdminAPIEnabled?: boolean;
    allowSEOIndexing?: boolean;
    orgProfileRedirectsToVerifiedDomain?: boolean;
    disablePhoneOnlySMSNotifications?: boolean;
    organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["organizationSettings"]
>;

export type OrganizationSettingsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    organizationId?: boolean;
    isOrganizationConfigured?: boolean;
    isOrganizationVerified?: boolean;
    orgAutoAcceptEmail?: boolean;
    lockEventTypeCreationForUsers?: boolean;
    adminGetsNoSlotsNotification?: boolean;
    isAdminReviewed?: boolean;
    isAdminAPIEnabled?: boolean;
    allowSEOIndexing?: boolean;
    orgProfileRedirectsToVerifiedDomain?: boolean;
    disablePhoneOnlySMSNotifications?: boolean;
    organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["organizationSettings"]
>;

export type OrganizationSettingsSelectScalar = {
  id?: boolean;
  organizationId?: boolean;
  isOrganizationConfigured?: boolean;
  isOrganizationVerified?: boolean;
  orgAutoAcceptEmail?: boolean;
  lockEventTypeCreationForUsers?: boolean;
  adminGetsNoSlotsNotification?: boolean;
  isAdminReviewed?: boolean;
  isAdminAPIEnabled?: boolean;
  allowSEOIndexing?: boolean;
  orgProfileRedirectsToVerifiedDomain?: boolean;
  disablePhoneOnlySMSNotifications?: boolean;
};

export type OrganizationSettingsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "organizationId"
  | "isOrganizationConfigured"
  | "isOrganizationVerified"
  | "orgAutoAcceptEmail"
  | "lockEventTypeCreationForUsers"
  | "adminGetsNoSlotsNotification"
  | "isAdminReviewed"
  | "isAdminAPIEnabled"
  | "allowSEOIndexing"
  | "orgProfileRedirectsToVerifiedDomain"
  | "disablePhoneOnlySMSNotifications",
  ExtArgs["result"]["organizationSettings"]
>;
export type OrganizationSettingsInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  dSyncData?: boolean | Prisma.OrganizationSettings$dSyncDataArgs<ExtArgs>;
};
export type OrganizationSettingsIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type OrganizationSettingsIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};

export type $OrganizationSettingsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "OrganizationSettings";
  objects: {
    organization: Prisma.$TeamPayload<ExtArgs>;
    dSyncData: Prisma.$DSyncDataPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      organizationId: number;
      isOrganizationConfigured: boolean;
      isOrganizationVerified: boolean;
      orgAutoAcceptEmail: string;
      lockEventTypeCreationForUsers: boolean;
      adminGetsNoSlotsNotification: boolean;
      isAdminReviewed: boolean;
      isAdminAPIEnabled: boolean;
      allowSEOIndexing: boolean;
      orgProfileRedirectsToVerifiedDomain: boolean;
      disablePhoneOnlySMSNotifications: boolean;
    },
    ExtArgs["result"]["organizationSettings"]
  >;
  composites: {};
};

export type OrganizationSettingsGetPayload<
  S extends boolean | null | undefined | OrganizationSettingsDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$OrganizationSettingsPayload, S>;

export type OrganizationSettingsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<OrganizationSettingsFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: OrganizationSettingsCountAggregateInputType | true;
};

export interface OrganizationSettingsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["OrganizationSettings"];
    meta: { name: "OrganizationSettings" };
  };
  /**
   * Find zero or one OrganizationSettings that matches the filter.
   * @param {OrganizationSettingsFindUniqueArgs} args - Arguments to find a OrganizationSettings
   * @example
   * // Get one OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrganizationSettingsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one OrganizationSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrganizationSettingsFindUniqueOrThrowArgs} args - Arguments to find a OrganizationSettings
   * @example
   * // Get one OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrganizationSettingsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OrganizationSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsFindFirstArgs} args - Arguments to find a OrganizationSettings
   * @example
   * // Get one OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrganizationSettingsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, OrganizationSettingsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OrganizationSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsFindFirstOrThrowArgs} args - Arguments to find a OrganizationSettings
   * @example
   * // Get one OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrganizationSettingsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, OrganizationSettingsFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more OrganizationSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findMany()
   *
   * // Get first 10 OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const organizationSettingsWithIdOnly = await prisma.organizationSettings.findMany({ select: { id: true } })
   *
   */
  findMany<T extends OrganizationSettingsFindManyArgs>(
    args?: Prisma.SelectSubset<T, OrganizationSettingsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a OrganizationSettings.
   * @param {OrganizationSettingsCreateArgs} args - Arguments to create a OrganizationSettings.
   * @example
   * // Create one OrganizationSettings
   * const OrganizationSettings = await prisma.organizationSettings.create({
   *   data: {
   *     // ... data to create a OrganizationSettings
   *   }
   * })
   *
   */
  create<T extends OrganizationSettingsCreateArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many OrganizationSettings.
   * @param {OrganizationSettingsCreateManyArgs} args - Arguments to create many OrganizationSettings.
   * @example
   * // Create many OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends OrganizationSettingsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, OrganizationSettingsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many OrganizationSettings and returns the data saved in the database.
   * @param {OrganizationSettingsCreateManyAndReturnArgs} args - Arguments to create many OrganizationSettings.
   * @example
   * // Create many OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many OrganizationSettings and only return the `id`
   * const organizationSettingsWithIdOnly = await prisma.organizationSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends OrganizationSettingsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, OrganizationSettingsCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a OrganizationSettings.
   * @param {OrganizationSettingsDeleteArgs} args - Arguments to delete one OrganizationSettings.
   * @example
   * // Delete one OrganizationSettings
   * const OrganizationSettings = await prisma.organizationSettings.delete({
   *   where: {
   *     // ... filter to delete one OrganizationSettings
   *   }
   * })
   *
   */
  delete<T extends OrganizationSettingsDeleteArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one OrganizationSettings.
   * @param {OrganizationSettingsUpdateArgs} args - Arguments to update one OrganizationSettings.
   * @example
   * // Update one OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends OrganizationSettingsUpdateArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more OrganizationSettings.
   * @param {OrganizationSettingsDeleteManyArgs} args - Arguments to filter OrganizationSettings to delete.
   * @example
   * // Delete a few OrganizationSettings
   * const { count } = await prisma.organizationSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends OrganizationSettingsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, OrganizationSettingsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OrganizationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends OrganizationSettingsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OrganizationSettings and returns the data updated in the database.
   * @param {OrganizationSettingsUpdateManyAndReturnArgs} args - Arguments to update many OrganizationSettings.
   * @example
   * // Update many OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more OrganizationSettings and only return the `id`
   * const organizationSettingsWithIdOnly = await prisma.organizationSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends OrganizationSettingsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one OrganizationSettings.
   * @param {OrganizationSettingsUpsertArgs} args - Arguments to update or create a OrganizationSettings.
   * @example
   * // Update or create a OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.upsert({
   *   create: {
   *     // ... data to create a OrganizationSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrganizationSettings we want to update
   *   }
   * })
   */
  upsert<T extends OrganizationSettingsUpsertArgs>(
    args: Prisma.SelectSubset<T, OrganizationSettingsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of OrganizationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsCountArgs} args - Arguments to filter OrganizationSettings to count.
   * @example
   * // Count the number of OrganizationSettings
   * const count = await prisma.organizationSettings.count({
   *   where: {
   *     // ... the filter for the OrganizationSettings we want to count
   *   }
   * })
   **/
  count<T extends OrganizationSettingsCountArgs>(
    args?: Prisma.Subset<T, OrganizationSettingsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], OrganizationSettingsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a OrganizationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends OrganizationSettingsAggregateArgs>(
    args: Prisma.Subset<T, OrganizationSettingsAggregateArgs>
  ): Prisma.PrismaPromise<GetOrganizationSettingsAggregateType<T>>;

  /**
   * Group by OrganizationSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrganizationSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends OrganizationSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrganizationSettingsGroupByArgs["orderBy"] }
      : { orderBy?: OrganizationSettingsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, OrganizationSettingsGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetOrganizationSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the OrganizationSettings model
   */
  readonly fields: OrganizationSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrganizationSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrganizationSettingsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  organization<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  dSyncData<T extends Prisma.OrganizationSettings$dSyncDataArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationSettings$dSyncDataArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the OrganizationSettings model
 */
export interface OrganizationSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"OrganizationSettings", "Int">;
  readonly organizationId: Prisma.FieldRef<"OrganizationSettings", "Int">;
  readonly isOrganizationConfigured: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly isOrganizationVerified: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly orgAutoAcceptEmail: Prisma.FieldRef<"OrganizationSettings", "String">;
  readonly lockEventTypeCreationForUsers: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly adminGetsNoSlotsNotification: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly isAdminReviewed: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly isAdminAPIEnabled: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly allowSEOIndexing: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly orgProfileRedirectsToVerifiedDomain: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
  readonly disablePhoneOnlySMSNotifications: Prisma.FieldRef<"OrganizationSettings", "Boolean">;
}

// Custom InputTypes
/**
 * OrganizationSettings findUnique
 */
export type OrganizationSettingsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * Filter, which OrganizationSettings to fetch.
   */
  where: Prisma.OrganizationSettingsWhereUniqueInput;
};

/**
 * OrganizationSettings findUniqueOrThrow
 */
export type OrganizationSettingsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * Filter, which OrganizationSettings to fetch.
   */
  where: Prisma.OrganizationSettingsWhereUniqueInput;
};

/**
 * OrganizationSettings findFirst
 */
export type OrganizationSettingsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * Filter, which OrganizationSettings to fetch.
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrganizationSettings to fetch.
   */
  orderBy?:
    | Prisma.OrganizationSettingsOrderByWithRelationInput
    | Prisma.OrganizationSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OrganizationSettings.
   */
  cursor?: Prisma.OrganizationSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrganizationSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrganizationSettings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OrganizationSettings.
   */
  distinct?: Prisma.OrganizationSettingsScalarFieldEnum | Prisma.OrganizationSettingsScalarFieldEnum[];
};

/**
 * OrganizationSettings findFirstOrThrow
 */
export type OrganizationSettingsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * Filter, which OrganizationSettings to fetch.
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrganizationSettings to fetch.
   */
  orderBy?:
    | Prisma.OrganizationSettingsOrderByWithRelationInput
    | Prisma.OrganizationSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OrganizationSettings.
   */
  cursor?: Prisma.OrganizationSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrganizationSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrganizationSettings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OrganizationSettings.
   */
  distinct?: Prisma.OrganizationSettingsScalarFieldEnum | Prisma.OrganizationSettingsScalarFieldEnum[];
};

/**
 * OrganizationSettings findMany
 */
export type OrganizationSettingsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * Filter, which OrganizationSettings to fetch.
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrganizationSettings to fetch.
   */
  orderBy?:
    | Prisma.OrganizationSettingsOrderByWithRelationInput
    | Prisma.OrganizationSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing OrganizationSettings.
   */
  cursor?: Prisma.OrganizationSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrganizationSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrganizationSettings.
   */
  skip?: number;
  distinct?: Prisma.OrganizationSettingsScalarFieldEnum | Prisma.OrganizationSettingsScalarFieldEnum[];
};

/**
 * OrganizationSettings create
 */
export type OrganizationSettingsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * The data needed to create a OrganizationSettings.
   */
  data: Prisma.XOR<Prisma.OrganizationSettingsCreateInput, Prisma.OrganizationSettingsUncheckedCreateInput>;
};

/**
 * OrganizationSettings createMany
 */
export type OrganizationSettingsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many OrganizationSettings.
   */
  data: Prisma.OrganizationSettingsCreateManyInput | Prisma.OrganizationSettingsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * OrganizationSettings createManyAndReturn
 */
export type OrganizationSettingsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * The data used to create many OrganizationSettings.
   */
  data: Prisma.OrganizationSettingsCreateManyInput | Prisma.OrganizationSettingsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * OrganizationSettings update
 */
export type OrganizationSettingsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * The data needed to update a OrganizationSettings.
   */
  data: Prisma.XOR<Prisma.OrganizationSettingsUpdateInput, Prisma.OrganizationSettingsUncheckedUpdateInput>;
  /**
   * Choose, which OrganizationSettings to update.
   */
  where: Prisma.OrganizationSettingsWhereUniqueInput;
};

/**
 * OrganizationSettings updateMany
 */
export type OrganizationSettingsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update OrganizationSettings.
   */
  data: Prisma.XOR<
    Prisma.OrganizationSettingsUpdateManyMutationInput,
    Prisma.OrganizationSettingsUncheckedUpdateManyInput
  >;
  /**
   * Filter which OrganizationSettings to update
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * Limit how many OrganizationSettings to update.
   */
  limit?: number;
};

/**
 * OrganizationSettings updateManyAndReturn
 */
export type OrganizationSettingsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * The data used to update OrganizationSettings.
   */
  data: Prisma.XOR<
    Prisma.OrganizationSettingsUpdateManyMutationInput,
    Prisma.OrganizationSettingsUncheckedUpdateManyInput
  >;
  /**
   * Filter which OrganizationSettings to update
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * Limit how many OrganizationSettings to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * OrganizationSettings upsert
 */
export type OrganizationSettingsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * The filter to search for the OrganizationSettings to update in case it exists.
   */
  where: Prisma.OrganizationSettingsWhereUniqueInput;
  /**
   * In case the OrganizationSettings found by the `where` argument doesn't exist, create a new OrganizationSettings with this data.
   */
  create: Prisma.XOR<Prisma.OrganizationSettingsCreateInput, Prisma.OrganizationSettingsUncheckedCreateInput>;
  /**
   * In case the OrganizationSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrganizationSettingsUpdateInput, Prisma.OrganizationSettingsUncheckedUpdateInput>;
};

/**
 * OrganizationSettings delete
 */
export type OrganizationSettingsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  /**
   * Filter which OrganizationSettings to delete.
   */
  where: Prisma.OrganizationSettingsWhereUniqueInput;
};

/**
 * OrganizationSettings deleteMany
 */
export type OrganizationSettingsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which OrganizationSettings to delete
   */
  where?: Prisma.OrganizationSettingsWhereInput;
  /**
   * Limit how many OrganizationSettings to delete.
   */
  limit?: number;
};

/**
 * OrganizationSettings.dSyncData
 */
export type OrganizationSettings$dSyncDataArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  where?: Prisma.DSyncDataWhereInput;
};

/**
 * OrganizationSettings without action
 */
export type OrganizationSettingsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
};
