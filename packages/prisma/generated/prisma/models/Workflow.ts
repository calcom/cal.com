/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Workflow` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Workflow
 *
 */
export type WorkflowModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkflowPayload>;

export type AggregateWorkflow = {
  _count: WorkflowCountAggregateOutputType | null;
  _avg: WorkflowAvgAggregateOutputType | null;
  _sum: WorkflowSumAggregateOutputType | null;
  _min: WorkflowMinAggregateOutputType | null;
  _max: WorkflowMaxAggregateOutputType | null;
};

export type WorkflowAvgAggregateOutputType = {
  id: number | null;
  position: number | null;
  userId: number | null;
  teamId: number | null;
  time: number | null;
};

export type WorkflowSumAggregateOutputType = {
  id: number | null;
  position: number | null;
  userId: number | null;
  teamId: number | null;
  time: number | null;
};

export type WorkflowMinAggregateOutputType = {
  id: number | null;
  position: number | null;
  name: string | null;
  userId: number | null;
  teamId: number | null;
  isActiveOnAll: boolean | null;
  trigger: $Enums.WorkflowTriggerEvents | null;
  time: number | null;
  timeUnit: $Enums.TimeUnit | null;
  type: $Enums.WorkflowType | null;
};

export type WorkflowMaxAggregateOutputType = {
  id: number | null;
  position: number | null;
  name: string | null;
  userId: number | null;
  teamId: number | null;
  isActiveOnAll: boolean | null;
  trigger: $Enums.WorkflowTriggerEvents | null;
  time: number | null;
  timeUnit: $Enums.TimeUnit | null;
  type: $Enums.WorkflowType | null;
};

export type WorkflowCountAggregateOutputType = {
  id: number;
  position: number;
  name: number;
  userId: number;
  teamId: number;
  isActiveOnAll: number;
  trigger: number;
  time: number;
  timeUnit: number;
  type: number;
  _all: number;
};

export type WorkflowAvgAggregateInputType = {
  id?: true;
  position?: true;
  userId?: true;
  teamId?: true;
  time?: true;
};

export type WorkflowSumAggregateInputType = {
  id?: true;
  position?: true;
  userId?: true;
  teamId?: true;
  time?: true;
};

export type WorkflowMinAggregateInputType = {
  id?: true;
  position?: true;
  name?: true;
  userId?: true;
  teamId?: true;
  isActiveOnAll?: true;
  trigger?: true;
  time?: true;
  timeUnit?: true;
  type?: true;
};

export type WorkflowMaxAggregateInputType = {
  id?: true;
  position?: true;
  name?: true;
  userId?: true;
  teamId?: true;
  isActiveOnAll?: true;
  trigger?: true;
  time?: true;
  timeUnit?: true;
  type?: true;
};

export type WorkflowCountAggregateInputType = {
  id?: true;
  position?: true;
  name?: true;
  userId?: true;
  teamId?: true;
  isActiveOnAll?: true;
  trigger?: true;
  time?: true;
  timeUnit?: true;
  type?: true;
  _all?: true;
};

export type WorkflowAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Workflow to aggregate.
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Workflows to fetch.
   */
  orderBy?: Prisma.WorkflowOrderByWithRelationInput | Prisma.WorkflowOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WorkflowWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Workflows from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Workflows.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Workflows
   **/
  _count?: true | WorkflowCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WorkflowAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WorkflowSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WorkflowMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WorkflowMaxAggregateInputType;
};

export type GetWorkflowAggregateType<T extends WorkflowAggregateArgs> = {
  [P in keyof T & keyof AggregateWorkflow]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkflow[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkflow[P]>;
};

export type WorkflowGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowWhereInput;
  orderBy?: Prisma.WorkflowOrderByWithAggregationInput | Prisma.WorkflowOrderByWithAggregationInput[];
  by: Prisma.WorkflowScalarFieldEnum[] | Prisma.WorkflowScalarFieldEnum;
  having?: Prisma.WorkflowScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WorkflowCountAggregateInputType | true;
  _avg?: WorkflowAvgAggregateInputType;
  _sum?: WorkflowSumAggregateInputType;
  _min?: WorkflowMinAggregateInputType;
  _max?: WorkflowMaxAggregateInputType;
};

export type WorkflowGroupByOutputType = {
  id: number;
  position: number;
  name: string;
  userId: number | null;
  teamId: number | null;
  isActiveOnAll: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time: number | null;
  timeUnit: $Enums.TimeUnit | null;
  type: $Enums.WorkflowType;
  _count: WorkflowCountAggregateOutputType | null;
  _avg: WorkflowAvgAggregateOutputType | null;
  _sum: WorkflowSumAggregateOutputType | null;
  _min: WorkflowMinAggregateOutputType | null;
  _max: WorkflowMaxAggregateOutputType | null;
};

type GetWorkflowGroupByPayload<T extends WorkflowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkflowGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof WorkflowGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], WorkflowGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], WorkflowGroupByOutputType[P]>;
    }
  >
>;

export type WorkflowWhereInput = {
  AND?: Prisma.WorkflowWhereInput | Prisma.WorkflowWhereInput[];
  OR?: Prisma.WorkflowWhereInput[];
  NOT?: Prisma.WorkflowWhereInput | Prisma.WorkflowWhereInput[];
  id?: Prisma.IntFilter<"Workflow"> | number;
  position?: Prisma.IntFilter<"Workflow"> | number;
  name?: Prisma.StringFilter<"Workflow"> | string;
  userId?: Prisma.IntNullableFilter<"Workflow"> | number | null;
  teamId?: Prisma.IntNullableFilter<"Workflow"> | number | null;
  isActiveOnAll?: Prisma.BoolFilter<"Workflow"> | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFilter<"Workflow"> | $Enums.WorkflowTriggerEvents;
  time?: Prisma.IntNullableFilter<"Workflow"> | number | null;
  timeUnit?: Prisma.EnumTimeUnitNullableFilter<"Workflow"> | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFilter<"Workflow"> | $Enums.WorkflowType;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  activeOn?: Prisma.WorkflowsOnEventTypesListRelationFilter;
  activeOnTeams?: Prisma.WorkflowsOnTeamsListRelationFilter;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsListRelationFilter;
  steps?: Prisma.WorkflowStepListRelationFilter;
};

export type WorkflowOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  isActiveOnAll?: Prisma.SortOrder;
  trigger?: Prisma.SortOrder;
  time?: Prisma.SortOrderInput | Prisma.SortOrder;
  timeUnit?: Prisma.SortOrderInput | Prisma.SortOrder;
  type?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
  activeOn?: Prisma.WorkflowsOnEventTypesOrderByRelationAggregateInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsOrderByRelationAggregateInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsOrderByRelationAggregateInput;
  steps?: Prisma.WorkflowStepOrderByRelationAggregateInput;
};

export type WorkflowWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.WorkflowWhereInput | Prisma.WorkflowWhereInput[];
    OR?: Prisma.WorkflowWhereInput[];
    NOT?: Prisma.WorkflowWhereInput | Prisma.WorkflowWhereInput[];
    position?: Prisma.IntFilter<"Workflow"> | number;
    name?: Prisma.StringFilter<"Workflow"> | string;
    userId?: Prisma.IntNullableFilter<"Workflow"> | number | null;
    teamId?: Prisma.IntNullableFilter<"Workflow"> | number | null;
    isActiveOnAll?: Prisma.BoolFilter<"Workflow"> | boolean;
    trigger?: Prisma.EnumWorkflowTriggerEventsFilter<"Workflow"> | $Enums.WorkflowTriggerEvents;
    time?: Prisma.IntNullableFilter<"Workflow"> | number | null;
    timeUnit?: Prisma.EnumTimeUnitNullableFilter<"Workflow"> | $Enums.TimeUnit | null;
    type?: Prisma.EnumWorkflowTypeFilter<"Workflow"> | $Enums.WorkflowType;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
    activeOn?: Prisma.WorkflowsOnEventTypesListRelationFilter;
    activeOnTeams?: Prisma.WorkflowsOnTeamsListRelationFilter;
    activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsListRelationFilter;
    steps?: Prisma.WorkflowStepListRelationFilter;
  },
  "id"
>;

export type WorkflowOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  isActiveOnAll?: Prisma.SortOrder;
  trigger?: Prisma.SortOrder;
  time?: Prisma.SortOrderInput | Prisma.SortOrder;
  timeUnit?: Prisma.SortOrderInput | Prisma.SortOrder;
  type?: Prisma.SortOrder;
  _count?: Prisma.WorkflowCountOrderByAggregateInput;
  _avg?: Prisma.WorkflowAvgOrderByAggregateInput;
  _max?: Prisma.WorkflowMaxOrderByAggregateInput;
  _min?: Prisma.WorkflowMinOrderByAggregateInput;
  _sum?: Prisma.WorkflowSumOrderByAggregateInput;
};

export type WorkflowScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkflowScalarWhereWithAggregatesInput | Prisma.WorkflowScalarWhereWithAggregatesInput[];
  OR?: Prisma.WorkflowScalarWhereWithAggregatesInput[];
  NOT?: Prisma.WorkflowScalarWhereWithAggregatesInput | Prisma.WorkflowScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Workflow"> | number;
  position?: Prisma.IntWithAggregatesFilter<"Workflow"> | number;
  name?: Prisma.StringWithAggregatesFilter<"Workflow"> | string;
  userId?: Prisma.IntNullableWithAggregatesFilter<"Workflow"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"Workflow"> | number | null;
  isActiveOnAll?: Prisma.BoolWithAggregatesFilter<"Workflow"> | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsWithAggregatesFilter<"Workflow"> | $Enums.WorkflowTriggerEvents;
  time?: Prisma.IntNullableWithAggregatesFilter<"Workflow"> | number | null;
  timeUnit?: Prisma.EnumTimeUnitNullableWithAggregatesFilter<"Workflow"> | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeWithAggregatesFilter<"Workflow"> | $Enums.WorkflowType;
};

export type WorkflowCreateInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  user?: Prisma.UserCreateNestedOneWithoutWorkflowsInput;
  team?: Prisma.TeamCreateNestedOneWithoutWorkflowsInput;
  activeOn?: Prisma.WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUpdateInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  user?: Prisma.UserUpdateOneWithoutWorkflowsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutWorkflowsNestedInput;
  activeOn?: Prisma.WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowCreateManyInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
};

export type WorkflowUpdateManyMutationInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
};

export type WorkflowUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
};

export type WorkflowListRelationFilter = {
  every?: Prisma.WorkflowWhereInput;
  some?: Prisma.WorkflowWhereInput;
  none?: Prisma.WorkflowWhereInput;
};

export type WorkflowOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type WorkflowScalarRelationFilter = {
  is?: Prisma.WorkflowWhereInput;
  isNot?: Prisma.WorkflowWhereInput;
};

export type WorkflowCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  isActiveOnAll?: Prisma.SortOrder;
  trigger?: Prisma.SortOrder;
  time?: Prisma.SortOrder;
  timeUnit?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
};

export type WorkflowAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  time?: Prisma.SortOrder;
};

export type WorkflowMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  isActiveOnAll?: Prisma.SortOrder;
  trigger?: Prisma.SortOrder;
  time?: Prisma.SortOrder;
  timeUnit?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
};

export type WorkflowMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  isActiveOnAll?: Prisma.SortOrder;
  trigger?: Prisma.SortOrder;
  time?: Prisma.SortOrder;
  timeUnit?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
};

export type WorkflowSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  position?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  time?: Prisma.SortOrder;
};

export type WorkflowCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutUserInput, Prisma.WorkflowUncheckedCreateWithoutUserInput>
    | Prisma.WorkflowCreateWithoutUserInput[]
    | Prisma.WorkflowUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutUserInput
    | Prisma.WorkflowCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.WorkflowCreateManyUserInputEnvelope;
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
};

export type WorkflowUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutUserInput, Prisma.WorkflowUncheckedCreateWithoutUserInput>
    | Prisma.WorkflowCreateWithoutUserInput[]
    | Prisma.WorkflowUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutUserInput
    | Prisma.WorkflowCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.WorkflowCreateManyUserInputEnvelope;
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
};

export type WorkflowUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutUserInput, Prisma.WorkflowUncheckedCreateWithoutUserInput>
    | Prisma.WorkflowCreateWithoutUserInput[]
    | Prisma.WorkflowUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutUserInput
    | Prisma.WorkflowCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutUserInput
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.WorkflowCreateManyUserInputEnvelope;
  set?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  disconnect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  delete?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  update?:
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutUserInput
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.WorkflowUpdateManyWithWhereWithoutUserInput
    | Prisma.WorkflowUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.WorkflowScalarWhereInput | Prisma.WorkflowScalarWhereInput[];
};

export type WorkflowUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutUserInput, Prisma.WorkflowUncheckedCreateWithoutUserInput>
    | Prisma.WorkflowCreateWithoutUserInput[]
    | Prisma.WorkflowUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutUserInput
    | Prisma.WorkflowCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutUserInput
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.WorkflowCreateManyUserInputEnvelope;
  set?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  disconnect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  delete?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  update?:
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutUserInput
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.WorkflowUpdateManyWithWhereWithoutUserInput
    | Prisma.WorkflowUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.WorkflowScalarWhereInput | Prisma.WorkflowScalarWhereInput[];
};

export type WorkflowCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutTeamInput, Prisma.WorkflowUncheckedCreateWithoutTeamInput>
    | Prisma.WorkflowCreateWithoutTeamInput[]
    | Prisma.WorkflowUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.WorkflowCreateManyTeamInputEnvelope;
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
};

export type WorkflowUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutTeamInput, Prisma.WorkflowUncheckedCreateWithoutTeamInput>
    | Prisma.WorkflowCreateWithoutTeamInput[]
    | Prisma.WorkflowUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.WorkflowCreateManyTeamInputEnvelope;
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
};

export type WorkflowUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutTeamInput, Prisma.WorkflowUncheckedCreateWithoutTeamInput>
    | Prisma.WorkflowCreateWithoutTeamInput[]
    | Prisma.WorkflowUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.WorkflowCreateManyTeamInputEnvelope;
  set?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  disconnect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  delete?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  update?:
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.WorkflowUpdateManyWithWhereWithoutTeamInput
    | Prisma.WorkflowUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.WorkflowScalarWhereInput | Prisma.WorkflowScalarWhereInput[];
};

export type WorkflowUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.WorkflowCreateWithoutTeamInput, Prisma.WorkflowUncheckedCreateWithoutTeamInput>
    | Prisma.WorkflowCreateWithoutTeamInput[]
    | Prisma.WorkflowUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.WorkflowCreateManyTeamInputEnvelope;
  set?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  disconnect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  delete?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  connect?: Prisma.WorkflowWhereUniqueInput | Prisma.WorkflowWhereUniqueInput[];
  update?:
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.WorkflowUpdateManyWithWhereWithoutTeamInput
    | Prisma.WorkflowUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.WorkflowScalarWhereInput | Prisma.WorkflowScalarWhereInput[];
};

export type WorkflowCreateNestedOneWithoutStepsInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutStepsInput,
    Prisma.WorkflowUncheckedCreateWithoutStepsInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutStepsInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
};

export type WorkflowUpdateOneRequiredWithoutStepsNestedInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutStepsInput,
    Prisma.WorkflowUncheckedCreateWithoutStepsInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutStepsInput;
  upsert?: Prisma.WorkflowUpsertWithoutStepsInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<Prisma.WorkflowUpdateToOneWithWhereWithoutStepsInput, Prisma.WorkflowUpdateWithoutStepsInput>,
    Prisma.WorkflowUncheckedUpdateWithoutStepsInput
  >;
};

export type EnumWorkflowTriggerEventsFieldUpdateOperationsInput = {
  set?: $Enums.WorkflowTriggerEvents;
};

export type EnumWorkflowTypeFieldUpdateOperationsInput = {
  set?: $Enums.WorkflowType;
};

export type WorkflowCreateNestedOneWithoutActiveOnInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutActiveOnInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
};

export type WorkflowUpdateOneRequiredWithoutActiveOnNestedInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutActiveOnInput;
  upsert?: Prisma.WorkflowUpsertWithoutActiveOnInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.WorkflowUpdateToOneWithWhereWithoutActiveOnInput,
      Prisma.WorkflowUpdateWithoutActiveOnInput
    >,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnInput
  >;
};

export type WorkflowCreateNestedOneWithoutActiveOnRoutingFormsInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnRoutingFormsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnRoutingFormsInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutActiveOnRoutingFormsInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
};

export type WorkflowUpdateOneRequiredWithoutActiveOnRoutingFormsNestedInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnRoutingFormsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnRoutingFormsInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutActiveOnRoutingFormsInput;
  upsert?: Prisma.WorkflowUpsertWithoutActiveOnRoutingFormsInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.WorkflowUpdateToOneWithWhereWithoutActiveOnRoutingFormsInput,
      Prisma.WorkflowUpdateWithoutActiveOnRoutingFormsInput
    >,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnRoutingFormsInput
  >;
};

export type WorkflowCreateNestedOneWithoutActiveOnTeamsInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnTeamsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnTeamsInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutActiveOnTeamsInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
};

export type WorkflowUpdateOneRequiredWithoutActiveOnTeamsNestedInput = {
  create?: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnTeamsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnTeamsInput
  >;
  connectOrCreate?: Prisma.WorkflowCreateOrConnectWithoutActiveOnTeamsInput;
  upsert?: Prisma.WorkflowUpsertWithoutActiveOnTeamsInput;
  connect?: Prisma.WorkflowWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.WorkflowUpdateToOneWithWhereWithoutActiveOnTeamsInput,
      Prisma.WorkflowUpdateWithoutActiveOnTeamsInput
    >,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnTeamsInput
  >;
};

export type WorkflowCreateWithoutUserInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  team?: Prisma.TeamCreateNestedOneWithoutWorkflowsInput;
  activeOn?: Prisma.WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateWithoutUserInput = {
  id?: number;
  position?: number;
  name: string;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowCreateOrConnectWithoutUserInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  create: Prisma.XOR<Prisma.WorkflowCreateWithoutUserInput, Prisma.WorkflowUncheckedCreateWithoutUserInput>;
};

export type WorkflowCreateManyUserInputEnvelope = {
  data: Prisma.WorkflowCreateManyUserInput | Prisma.WorkflowCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type WorkflowUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  update: Prisma.XOR<Prisma.WorkflowUpdateWithoutUserInput, Prisma.WorkflowUncheckedUpdateWithoutUserInput>;
  create: Prisma.XOR<Prisma.WorkflowCreateWithoutUserInput, Prisma.WorkflowUncheckedCreateWithoutUserInput>;
};

export type WorkflowUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  data: Prisma.XOR<Prisma.WorkflowUpdateWithoutUserInput, Prisma.WorkflowUncheckedUpdateWithoutUserInput>;
};

export type WorkflowUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WorkflowScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowUpdateManyMutationInput,
    Prisma.WorkflowUncheckedUpdateManyWithoutUserInput
  >;
};

export type WorkflowScalarWhereInput = {
  AND?: Prisma.WorkflowScalarWhereInput | Prisma.WorkflowScalarWhereInput[];
  OR?: Prisma.WorkflowScalarWhereInput[];
  NOT?: Prisma.WorkflowScalarWhereInput | Prisma.WorkflowScalarWhereInput[];
  id?: Prisma.IntFilter<"Workflow"> | number;
  position?: Prisma.IntFilter<"Workflow"> | number;
  name?: Prisma.StringFilter<"Workflow"> | string;
  userId?: Prisma.IntNullableFilter<"Workflow"> | number | null;
  teamId?: Prisma.IntNullableFilter<"Workflow"> | number | null;
  isActiveOnAll?: Prisma.BoolFilter<"Workflow"> | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFilter<"Workflow"> | $Enums.WorkflowTriggerEvents;
  time?: Prisma.IntNullableFilter<"Workflow"> | number | null;
  timeUnit?: Prisma.EnumTimeUnitNullableFilter<"Workflow"> | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFilter<"Workflow"> | $Enums.WorkflowType;
};

export type WorkflowCreateWithoutTeamInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  user?: Prisma.UserCreateNestedOneWithoutWorkflowsInput;
  activeOn?: Prisma.WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateWithoutTeamInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowCreateOrConnectWithoutTeamInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  create: Prisma.XOR<Prisma.WorkflowCreateWithoutTeamInput, Prisma.WorkflowUncheckedCreateWithoutTeamInput>;
};

export type WorkflowCreateManyTeamInputEnvelope = {
  data: Prisma.WorkflowCreateManyTeamInput | Prisma.WorkflowCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type WorkflowUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  update: Prisma.XOR<Prisma.WorkflowUpdateWithoutTeamInput, Prisma.WorkflowUncheckedUpdateWithoutTeamInput>;
  create: Prisma.XOR<Prisma.WorkflowCreateWithoutTeamInput, Prisma.WorkflowUncheckedCreateWithoutTeamInput>;
};

export type WorkflowUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  data: Prisma.XOR<Prisma.WorkflowUpdateWithoutTeamInput, Prisma.WorkflowUncheckedUpdateWithoutTeamInput>;
};

export type WorkflowUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.WorkflowScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowUpdateManyMutationInput,
    Prisma.WorkflowUncheckedUpdateManyWithoutTeamInput
  >;
};

export type WorkflowCreateWithoutStepsInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  user?: Prisma.UserCreateNestedOneWithoutWorkflowsInput;
  team?: Prisma.TeamCreateNestedOneWithoutWorkflowsInput;
  activeOn?: Prisma.WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateWithoutStepsInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowCreateOrConnectWithoutStepsInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  create: Prisma.XOR<Prisma.WorkflowCreateWithoutStepsInput, Prisma.WorkflowUncheckedCreateWithoutStepsInput>;
};

export type WorkflowUpsertWithoutStepsInput = {
  update: Prisma.XOR<Prisma.WorkflowUpdateWithoutStepsInput, Prisma.WorkflowUncheckedUpdateWithoutStepsInput>;
  create: Prisma.XOR<Prisma.WorkflowCreateWithoutStepsInput, Prisma.WorkflowUncheckedCreateWithoutStepsInput>;
  where?: Prisma.WorkflowWhereInput;
};

export type WorkflowUpdateToOneWithWhereWithoutStepsInput = {
  where?: Prisma.WorkflowWhereInput;
  data: Prisma.XOR<Prisma.WorkflowUpdateWithoutStepsInput, Prisma.WorkflowUncheckedUpdateWithoutStepsInput>;
};

export type WorkflowUpdateWithoutStepsInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  user?: Prisma.UserUpdateOneWithoutWorkflowsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutWorkflowsNestedInput;
  activeOn?: Prisma.WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateWithoutStepsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowCreateWithoutActiveOnInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  user?: Prisma.UserCreateNestedOneWithoutWorkflowsInput;
  team?: Prisma.TeamCreateNestedOneWithoutWorkflowsInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateWithoutActiveOnInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowCreateOrConnectWithoutActiveOnInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnInput
  >;
};

export type WorkflowUpsertWithoutActiveOnInput = {
  update: Prisma.XOR<
    Prisma.WorkflowUpdateWithoutActiveOnInput,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnInput
  >;
  where?: Prisma.WorkflowWhereInput;
};

export type WorkflowUpdateToOneWithWhereWithoutActiveOnInput = {
  where?: Prisma.WorkflowWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowUpdateWithoutActiveOnInput,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnInput
  >;
};

export type WorkflowUpdateWithoutActiveOnInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  user?: Prisma.UserUpdateOneWithoutWorkflowsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutWorkflowsNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateWithoutActiveOnInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowCreateWithoutActiveOnRoutingFormsInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  user?: Prisma.UserCreateNestedOneWithoutWorkflowsInput;
  team?: Prisma.TeamCreateNestedOneWithoutWorkflowsInput;
  activeOn?: Prisma.WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateWithoutActiveOnRoutingFormsInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowCreateOrConnectWithoutActiveOnRoutingFormsInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnRoutingFormsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnRoutingFormsInput
  >;
};

export type WorkflowUpsertWithoutActiveOnRoutingFormsInput = {
  update: Prisma.XOR<
    Prisma.WorkflowUpdateWithoutActiveOnRoutingFormsInput,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnRoutingFormsInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnRoutingFormsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnRoutingFormsInput
  >;
  where?: Prisma.WorkflowWhereInput;
};

export type WorkflowUpdateToOneWithWhereWithoutActiveOnRoutingFormsInput = {
  where?: Prisma.WorkflowWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowUpdateWithoutActiveOnRoutingFormsInput,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnRoutingFormsInput
  >;
};

export type WorkflowUpdateWithoutActiveOnRoutingFormsInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  user?: Prisma.UserUpdateOneWithoutWorkflowsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutWorkflowsNestedInput;
  activeOn?: Prisma.WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateWithoutActiveOnRoutingFormsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowCreateWithoutActiveOnTeamsInput = {
  position?: number;
  name: string;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  user?: Prisma.UserCreateNestedOneWithoutWorkflowsInput;
  team?: Prisma.TeamCreateNestedOneWithoutWorkflowsInput;
  activeOn?: Prisma.WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowUncheckedCreateWithoutActiveOnTeamsInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedCreateNestedManyWithoutWorkflowInput;
  steps?: Prisma.WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput;
};

export type WorkflowCreateOrConnectWithoutActiveOnTeamsInput = {
  where: Prisma.WorkflowWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnTeamsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnTeamsInput
  >;
};

export type WorkflowUpsertWithoutActiveOnTeamsInput = {
  update: Prisma.XOR<
    Prisma.WorkflowUpdateWithoutActiveOnTeamsInput,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnTeamsInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowCreateWithoutActiveOnTeamsInput,
    Prisma.WorkflowUncheckedCreateWithoutActiveOnTeamsInput
  >;
  where?: Prisma.WorkflowWhereInput;
};

export type WorkflowUpdateToOneWithWhereWithoutActiveOnTeamsInput = {
  where?: Prisma.WorkflowWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowUpdateWithoutActiveOnTeamsInput,
    Prisma.WorkflowUncheckedUpdateWithoutActiveOnTeamsInput
  >;
};

export type WorkflowUpdateWithoutActiveOnTeamsInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  user?: Prisma.UserUpdateOneWithoutWorkflowsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutWorkflowsNestedInput;
  activeOn?: Prisma.WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateWithoutActiveOnTeamsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowCreateManyUserInput = {
  id?: number;
  position?: number;
  name: string;
  teamId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
};

export type WorkflowUpdateWithoutUserInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  team?: Prisma.TeamUpdateOneWithoutWorkflowsNestedInput;
  activeOn?: Prisma.WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
};

export type WorkflowCreateManyTeamInput = {
  id?: number;
  position?: number;
  name: string;
  userId?: number | null;
  isActiveOnAll?: boolean;
  trigger: $Enums.WorkflowTriggerEvents;
  time?: number | null;
  timeUnit?: $Enums.TimeUnit | null;
  type?: $Enums.WorkflowType;
};

export type WorkflowUpdateWithoutTeamInput = {
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  user?: Prisma.UserUpdateOneWithoutWorkflowsNestedInput;
  activeOn?: Prisma.WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
  activeOn?: Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnTeams?: Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput;
  activeOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsUncheckedUpdateManyWithoutWorkflowNestedInput;
  steps?: Prisma.WorkflowStepUncheckedUpdateManyWithoutWorkflowNestedInput;
};

export type WorkflowUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  position?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  isActiveOnAll?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  trigger?: Prisma.EnumWorkflowTriggerEventsFieldUpdateOperationsInput | $Enums.WorkflowTriggerEvents;
  time?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  timeUnit?: Prisma.NullableEnumTimeUnitFieldUpdateOperationsInput | $Enums.TimeUnit | null;
  type?: Prisma.EnumWorkflowTypeFieldUpdateOperationsInput | $Enums.WorkflowType;
};

/**
 * Count Type WorkflowCountOutputType
 */

export type WorkflowCountOutputType = {
  activeOn: number;
  activeOnTeams: number;
  activeOnRoutingForms: number;
  steps: number;
};

export type WorkflowCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  activeOn?: boolean | WorkflowCountOutputTypeCountActiveOnArgs;
  activeOnTeams?: boolean | WorkflowCountOutputTypeCountActiveOnTeamsArgs;
  activeOnRoutingForms?: boolean | WorkflowCountOutputTypeCountActiveOnRoutingFormsArgs;
  steps?: boolean | WorkflowCountOutputTypeCountStepsArgs;
};

/**
 * WorkflowCountOutputType without action
 */
export type WorkflowCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowCountOutputType
   */
  select?: Prisma.WorkflowCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * WorkflowCountOutputType without action
 */
export type WorkflowCountOutputTypeCountActiveOnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
};

/**
 * WorkflowCountOutputType without action
 */
export type WorkflowCountOutputTypeCountActiveOnTeamsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowsOnTeamsWhereInput;
};

/**
 * WorkflowCountOutputType without action
 */
export type WorkflowCountOutputTypeCountActiveOnRoutingFormsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
};

/**
 * WorkflowCountOutputType without action
 */
export type WorkflowCountOutputTypeCountStepsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowStepWhereInput;
};

export type WorkflowSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    position?: boolean;
    name?: boolean;
    userId?: boolean;
    teamId?: boolean;
    isActiveOnAll?: boolean;
    trigger?: boolean;
    time?: boolean;
    timeUnit?: boolean;
    type?: boolean;
    user?: boolean | Prisma.Workflow$userArgs<ExtArgs>;
    team?: boolean | Prisma.Workflow$teamArgs<ExtArgs>;
    activeOn?: boolean | Prisma.Workflow$activeOnArgs<ExtArgs>;
    activeOnTeams?: boolean | Prisma.Workflow$activeOnTeamsArgs<ExtArgs>;
    activeOnRoutingForms?: boolean | Prisma.Workflow$activeOnRoutingFormsArgs<ExtArgs>;
    steps?: boolean | Prisma.Workflow$stepsArgs<ExtArgs>;
    _count?: boolean | Prisma.WorkflowCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflow"]
>;

export type WorkflowSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    position?: boolean;
    name?: boolean;
    userId?: boolean;
    teamId?: boolean;
    isActiveOnAll?: boolean;
    trigger?: boolean;
    time?: boolean;
    timeUnit?: boolean;
    type?: boolean;
    user?: boolean | Prisma.Workflow$userArgs<ExtArgs>;
    team?: boolean | Prisma.Workflow$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflow"]
>;

export type WorkflowSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    position?: boolean;
    name?: boolean;
    userId?: boolean;
    teamId?: boolean;
    isActiveOnAll?: boolean;
    trigger?: boolean;
    time?: boolean;
    timeUnit?: boolean;
    type?: boolean;
    user?: boolean | Prisma.Workflow$userArgs<ExtArgs>;
    team?: boolean | Prisma.Workflow$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflow"]
>;

export type WorkflowSelectScalar = {
  id?: boolean;
  position?: boolean;
  name?: boolean;
  userId?: boolean;
  teamId?: boolean;
  isActiveOnAll?: boolean;
  trigger?: boolean;
  time?: boolean;
  timeUnit?: boolean;
  type?: boolean;
};

export type WorkflowOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "position"
  | "name"
  | "userId"
  | "teamId"
  | "isActiveOnAll"
  | "trigger"
  | "time"
  | "timeUnit"
  | "type",
  ExtArgs["result"]["workflow"]
>;
export type WorkflowInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Workflow$userArgs<ExtArgs>;
  team?: boolean | Prisma.Workflow$teamArgs<ExtArgs>;
  activeOn?: boolean | Prisma.Workflow$activeOnArgs<ExtArgs>;
  activeOnTeams?: boolean | Prisma.Workflow$activeOnTeamsArgs<ExtArgs>;
  activeOnRoutingForms?: boolean | Prisma.Workflow$activeOnRoutingFormsArgs<ExtArgs>;
  steps?: boolean | Prisma.Workflow$stepsArgs<ExtArgs>;
  _count?: boolean | Prisma.WorkflowCountOutputTypeDefaultArgs<ExtArgs>;
};
export type WorkflowIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Workflow$userArgs<ExtArgs>;
  team?: boolean | Prisma.Workflow$teamArgs<ExtArgs>;
};
export type WorkflowIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Workflow$userArgs<ExtArgs>;
  team?: boolean | Prisma.Workflow$teamArgs<ExtArgs>;
};

export type $WorkflowPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Workflow";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
    team: Prisma.$TeamPayload<ExtArgs> | null;
    activeOn: Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>[];
    activeOnTeams: Prisma.$WorkflowsOnTeamsPayload<ExtArgs>[];
    activeOnRoutingForms: Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>[];
    steps: Prisma.$WorkflowStepPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      position: number;
      name: string;
      userId: number | null;
      teamId: number | null;
      isActiveOnAll: boolean;
      trigger: $Enums.WorkflowTriggerEvents;
      time: number | null;
      timeUnit: $Enums.TimeUnit | null;
      type: $Enums.WorkflowType;
    },
    ExtArgs["result"]["workflow"]
  >;
  composites: {};
};

export type WorkflowGetPayload<S extends boolean | null | undefined | WorkflowDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$WorkflowPayload, S>;

export type WorkflowCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<WorkflowFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: WorkflowCountAggregateInputType | true;
};

export interface WorkflowDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Workflow"]; meta: { name: "Workflow" } };
  /**
   * Find zero or one Workflow that matches the filter.
   * @param {WorkflowFindUniqueArgs} args - Arguments to find a Workflow
   * @example
   * // Get one Workflow
   * const workflow = await prisma.workflow.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkflowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WorkflowFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Workflow that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkflowFindUniqueOrThrowArgs} args - Arguments to find a Workflow
   * @example
   * // Get one Workflow
   * const workflow = await prisma.workflow.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkflowFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, WorkflowFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Workflow that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowFindFirstArgs} args - Arguments to find a Workflow
   * @example
   * // Get one Workflow
   * const workflow = await prisma.workflow.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkflowFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WorkflowFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Workflow that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowFindFirstOrThrowArgs} args - Arguments to find a Workflow
   * @example
   * // Get one Workflow
   * const workflow = await prisma.workflow.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkflowFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, WorkflowFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Workflows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Workflows
   * const workflows = await prisma.workflow.findMany()
   *
   * // Get first 10 Workflows
   * const workflows = await prisma.workflow.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const workflowWithIdOnly = await prisma.workflow.findMany({ select: { id: true } })
   *
   */
  findMany<T extends WorkflowFindManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Workflow.
   * @param {WorkflowCreateArgs} args - Arguments to create a Workflow.
   * @example
   * // Create one Workflow
   * const Workflow = await prisma.workflow.create({
   *   data: {
   *     // ... data to create a Workflow
   *   }
   * })
   *
   */
  create<T extends WorkflowCreateArgs>(
    args: Prisma.SelectSubset<T, WorkflowCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Workflows.
   * @param {WorkflowCreateManyArgs} args - Arguments to create many Workflows.
   * @example
   * // Create many Workflows
   * const workflow = await prisma.workflow.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WorkflowCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Workflows and returns the data saved in the database.
   * @param {WorkflowCreateManyAndReturnArgs} args - Arguments to create many Workflows.
   * @example
   * // Create many Workflows
   * const workflow = await prisma.workflow.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Workflows and only return the `id`
   * const workflowWithIdOnly = await prisma.workflow.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WorkflowCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, WorkflowCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Workflow.
   * @param {WorkflowDeleteArgs} args - Arguments to delete one Workflow.
   * @example
   * // Delete one Workflow
   * const Workflow = await prisma.workflow.delete({
   *   where: {
   *     // ... filter to delete one Workflow
   *   }
   * })
   *
   */
  delete<T extends WorkflowDeleteArgs>(
    args: Prisma.SelectSubset<T, WorkflowDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Workflow.
   * @param {WorkflowUpdateArgs} args - Arguments to update one Workflow.
   * @example
   * // Update one Workflow
   * const workflow = await prisma.workflow.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WorkflowUpdateArgs>(
    args: Prisma.SelectSubset<T, WorkflowUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Workflows.
   * @param {WorkflowDeleteManyArgs} args - Arguments to filter Workflows to delete.
   * @example
   * // Delete a few Workflows
   * const { count } = await prisma.workflow.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WorkflowDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Workflows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Workflows
   * const workflow = await prisma.workflow.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WorkflowUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WorkflowUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Workflows and returns the data updated in the database.
   * @param {WorkflowUpdateManyAndReturnArgs} args - Arguments to update many Workflows.
   * @example
   * // Update many Workflows
   * const workflow = await prisma.workflow.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Workflows and only return the `id`
   * const workflowWithIdOnly = await prisma.workflow.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WorkflowUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, WorkflowUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Workflow.
   * @param {WorkflowUpsertArgs} args - Arguments to update or create a Workflow.
   * @example
   * // Update or create a Workflow
   * const workflow = await prisma.workflow.upsert({
   *   create: {
   *     // ... data to create a Workflow
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Workflow we want to update
   *   }
   * })
   */
  upsert<T extends WorkflowUpsertArgs>(
    args: Prisma.SelectSubset<T, WorkflowUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Workflows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowCountArgs} args - Arguments to filter Workflows to count.
   * @example
   * // Count the number of Workflows
   * const count = await prisma.workflow.count({
   *   where: {
   *     // ... the filter for the Workflows we want to count
   *   }
   * })
   **/
  count<T extends WorkflowCountArgs>(
    args?: Prisma.Subset<T, WorkflowCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], WorkflowCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Workflow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WorkflowAggregateArgs>(
    args: Prisma.Subset<T, WorkflowAggregateArgs>
  ): Prisma.PrismaPromise<GetWorkflowAggregateType<T>>;

  /**
   * Group by Workflow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WorkflowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkflowGroupByArgs["orderBy"] }
      : { orderBy?: WorkflowGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, WorkflowGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetWorkflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Workflow model
   */
  readonly fields: WorkflowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Workflow.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkflowClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.Workflow$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Workflow$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.Workflow$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Workflow$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  activeOn<T extends Prisma.Workflow$activeOnArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Workflow$activeOnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  activeOnTeams<T extends Prisma.Workflow$activeOnTeamsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Workflow$activeOnTeamsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  activeOnRoutingForms<T extends Prisma.Workflow$activeOnRoutingFormsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Workflow$activeOnRoutingFormsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  steps<T extends Prisma.Workflow$stepsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Workflow$stepsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Workflow model
 */
export interface WorkflowFieldRefs {
  readonly id: Prisma.FieldRef<"Workflow", "Int">;
  readonly position: Prisma.FieldRef<"Workflow", "Int">;
  readonly name: Prisma.FieldRef<"Workflow", "String">;
  readonly userId: Prisma.FieldRef<"Workflow", "Int">;
  readonly teamId: Prisma.FieldRef<"Workflow", "Int">;
  readonly isActiveOnAll: Prisma.FieldRef<"Workflow", "Boolean">;
  readonly trigger: Prisma.FieldRef<"Workflow", "WorkflowTriggerEvents">;
  readonly time: Prisma.FieldRef<"Workflow", "Int">;
  readonly timeUnit: Prisma.FieldRef<"Workflow", "TimeUnit">;
  readonly type: Prisma.FieldRef<"Workflow", "WorkflowType">;
}

// Custom InputTypes
/**
 * Workflow findUnique
 */
export type WorkflowFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * Filter, which Workflow to fetch.
   */
  where: Prisma.WorkflowWhereUniqueInput;
};

/**
 * Workflow findUniqueOrThrow
 */
export type WorkflowFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * Filter, which Workflow to fetch.
   */
  where: Prisma.WorkflowWhereUniqueInput;
};

/**
 * Workflow findFirst
 */
export type WorkflowFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * Filter, which Workflow to fetch.
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Workflows to fetch.
   */
  orderBy?: Prisma.WorkflowOrderByWithRelationInput | Prisma.WorkflowOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Workflows.
   */
  cursor?: Prisma.WorkflowWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Workflows from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Workflows.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Workflows.
   */
  distinct?: Prisma.WorkflowScalarFieldEnum | Prisma.WorkflowScalarFieldEnum[];
};

/**
 * Workflow findFirstOrThrow
 */
export type WorkflowFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * Filter, which Workflow to fetch.
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Workflows to fetch.
   */
  orderBy?: Prisma.WorkflowOrderByWithRelationInput | Prisma.WorkflowOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Workflows.
   */
  cursor?: Prisma.WorkflowWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Workflows from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Workflows.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Workflows.
   */
  distinct?: Prisma.WorkflowScalarFieldEnum | Prisma.WorkflowScalarFieldEnum[];
};

/**
 * Workflow findMany
 */
export type WorkflowFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * Filter, which Workflows to fetch.
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Workflows to fetch.
   */
  orderBy?: Prisma.WorkflowOrderByWithRelationInput | Prisma.WorkflowOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Workflows.
   */
  cursor?: Prisma.WorkflowWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Workflows from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Workflows.
   */
  skip?: number;
  distinct?: Prisma.WorkflowScalarFieldEnum | Prisma.WorkflowScalarFieldEnum[];
};

/**
 * Workflow create
 */
export type WorkflowCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * The data needed to create a Workflow.
   */
  data: Prisma.XOR<Prisma.WorkflowCreateInput, Prisma.WorkflowUncheckedCreateInput>;
};

/**
 * Workflow createMany
 */
export type WorkflowCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Workflows.
   */
  data: Prisma.WorkflowCreateManyInput | Prisma.WorkflowCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Workflow createManyAndReturn
 */
export type WorkflowCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * The data used to create many Workflows.
   */
  data: Prisma.WorkflowCreateManyInput | Prisma.WorkflowCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Workflow update
 */
export type WorkflowUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * The data needed to update a Workflow.
   */
  data: Prisma.XOR<Prisma.WorkflowUpdateInput, Prisma.WorkflowUncheckedUpdateInput>;
  /**
   * Choose, which Workflow to update.
   */
  where: Prisma.WorkflowWhereUniqueInput;
};

/**
 * Workflow updateMany
 */
export type WorkflowUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Workflows.
   */
  data: Prisma.XOR<Prisma.WorkflowUpdateManyMutationInput, Prisma.WorkflowUncheckedUpdateManyInput>;
  /**
   * Filter which Workflows to update
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * Limit how many Workflows to update.
   */
  limit?: number;
};

/**
 * Workflow updateManyAndReturn
 */
export type WorkflowUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * The data used to update Workflows.
   */
  data: Prisma.XOR<Prisma.WorkflowUpdateManyMutationInput, Prisma.WorkflowUncheckedUpdateManyInput>;
  /**
   * Filter which Workflows to update
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * Limit how many Workflows to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Workflow upsert
 */
export type WorkflowUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * The filter to search for the Workflow to update in case it exists.
   */
  where: Prisma.WorkflowWhereUniqueInput;
  /**
   * In case the Workflow found by the `where` argument doesn't exist, create a new Workflow with this data.
   */
  create: Prisma.XOR<Prisma.WorkflowCreateInput, Prisma.WorkflowUncheckedCreateInput>;
  /**
   * In case the Workflow was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkflowUpdateInput, Prisma.WorkflowUncheckedUpdateInput>;
};

/**
 * Workflow delete
 */
export type WorkflowDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
  /**
   * Filter which Workflow to delete.
   */
  where: Prisma.WorkflowWhereUniqueInput;
};

/**
 * Workflow deleteMany
 */
export type WorkflowDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Workflows to delete
   */
  where?: Prisma.WorkflowWhereInput;
  /**
   * Limit how many Workflows to delete.
   */
  limit?: number;
};

/**
 * Workflow.user
 */
export type Workflow$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Workflow.team
 */
export type Workflow$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * Workflow.activeOn
 */
export type Workflow$activeOnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  orderBy?:
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput[];
  cursor?: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.WorkflowsOnEventTypesScalarFieldEnum | Prisma.WorkflowsOnEventTypesScalarFieldEnum[];
};

/**
 * Workflow.activeOnTeams
 */
export type Workflow$activeOnTeamsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  orderBy?:
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput[];
  cursor?: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.WorkflowsOnTeamsScalarFieldEnum | Prisma.WorkflowsOnTeamsScalarFieldEnum[];
};

/**
 * Workflow.activeOnRoutingForms
 */
export type Workflow$activeOnRoutingFormsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnRoutingForms
   */
  select?: Prisma.WorkflowsOnRoutingFormsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnRoutingForms
   */
  omit?: Prisma.WorkflowsOnRoutingFormsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnRoutingFormsInclude<ExtArgs> | null;
  where?: Prisma.WorkflowsOnRoutingFormsWhereInput;
  orderBy?:
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput
    | Prisma.WorkflowsOnRoutingFormsOrderByWithRelationInput[];
  cursor?: Prisma.WorkflowsOnRoutingFormsWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.WorkflowsOnRoutingFormsScalarFieldEnum | Prisma.WorkflowsOnRoutingFormsScalarFieldEnum[];
};

/**
 * Workflow.steps
 */
export type Workflow$stepsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowStep
   */
  select?: Prisma.WorkflowStepSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowStep
   */
  omit?: Prisma.WorkflowStepOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowStepInclude<ExtArgs> | null;
  where?: Prisma.WorkflowStepWhereInput;
  orderBy?: Prisma.WorkflowStepOrderByWithRelationInput | Prisma.WorkflowStepOrderByWithRelationInput[];
  cursor?: Prisma.WorkflowStepWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.WorkflowStepScalarFieldEnum | Prisma.WorkflowStepScalarFieldEnum[];
};

/**
 * Workflow without action
 */
export type WorkflowDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Workflow
   */
  select?: Prisma.WorkflowSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Workflow
   */
  omit?: Prisma.WorkflowOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowInclude<ExtArgs> | null;
};
