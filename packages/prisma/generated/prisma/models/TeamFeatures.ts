/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `TeamFeatures` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TeamFeatures
 *
 */
export type TeamFeaturesModel = runtime.Types.Result.DefaultSelection<Prisma.$TeamFeaturesPayload>;

export type AggregateTeamFeatures = {
  _count: TeamFeaturesCountAggregateOutputType | null;
  _avg: TeamFeaturesAvgAggregateOutputType | null;
  _sum: TeamFeaturesSumAggregateOutputType | null;
  _min: TeamFeaturesMinAggregateOutputType | null;
  _max: TeamFeaturesMaxAggregateOutputType | null;
};

export type TeamFeaturesAvgAggregateOutputType = {
  teamId: number | null;
};

export type TeamFeaturesSumAggregateOutputType = {
  teamId: number | null;
};

export type TeamFeaturesMinAggregateOutputType = {
  teamId: number | null;
  featureId: string | null;
  assignedAt: Date | null;
  assignedBy: string | null;
  updatedAt: Date | null;
};

export type TeamFeaturesMaxAggregateOutputType = {
  teamId: number | null;
  featureId: string | null;
  assignedAt: Date | null;
  assignedBy: string | null;
  updatedAt: Date | null;
};

export type TeamFeaturesCountAggregateOutputType = {
  teamId: number;
  featureId: number;
  assignedAt: number;
  assignedBy: number;
  updatedAt: number;
  _all: number;
};

export type TeamFeaturesAvgAggregateInputType = {
  teamId?: true;
};

export type TeamFeaturesSumAggregateInputType = {
  teamId?: true;
};

export type TeamFeaturesMinAggregateInputType = {
  teamId?: true;
  featureId?: true;
  assignedAt?: true;
  assignedBy?: true;
  updatedAt?: true;
};

export type TeamFeaturesMaxAggregateInputType = {
  teamId?: true;
  featureId?: true;
  assignedAt?: true;
  assignedBy?: true;
  updatedAt?: true;
};

export type TeamFeaturesCountAggregateInputType = {
  teamId?: true;
  featureId?: true;
  assignedAt?: true;
  assignedBy?: true;
  updatedAt?: true;
  _all?: true;
};

export type TeamFeaturesAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TeamFeatures to aggregate.
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamFeatures to fetch.
   */
  orderBy?: Prisma.TeamFeaturesOrderByWithRelationInput | Prisma.TeamFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TeamFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TeamFeatures
   **/
  _count?: true | TeamFeaturesCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TeamFeaturesAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TeamFeaturesSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TeamFeaturesMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TeamFeaturesMaxAggregateInputType;
};

export type GetTeamFeaturesAggregateType<T extends TeamFeaturesAggregateArgs> = {
  [P in keyof T & keyof AggregateTeamFeatures]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeamFeatures[P]>
    : Prisma.GetScalarType<T[P], AggregateTeamFeatures[P]>;
};

export type TeamFeaturesGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.TeamFeaturesWhereInput;
  orderBy?: Prisma.TeamFeaturesOrderByWithAggregationInput | Prisma.TeamFeaturesOrderByWithAggregationInput[];
  by: Prisma.TeamFeaturesScalarFieldEnum[] | Prisma.TeamFeaturesScalarFieldEnum;
  having?: Prisma.TeamFeaturesScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TeamFeaturesCountAggregateInputType | true;
  _avg?: TeamFeaturesAvgAggregateInputType;
  _sum?: TeamFeaturesSumAggregateInputType;
  _min?: TeamFeaturesMinAggregateInputType;
  _max?: TeamFeaturesMaxAggregateInputType;
};

export type TeamFeaturesGroupByOutputType = {
  teamId: number;
  featureId: string;
  assignedAt: Date;
  assignedBy: string;
  updatedAt: Date;
  _count: TeamFeaturesCountAggregateOutputType | null;
  _avg: TeamFeaturesAvgAggregateOutputType | null;
  _sum: TeamFeaturesSumAggregateOutputType | null;
  _min: TeamFeaturesMinAggregateOutputType | null;
  _max: TeamFeaturesMaxAggregateOutputType | null;
};

type GetTeamFeaturesGroupByPayload<T extends TeamFeaturesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeamFeaturesGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof TeamFeaturesGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TeamFeaturesGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TeamFeaturesGroupByOutputType[P]>;
    }
  >
>;

export type TeamFeaturesWhereInput = {
  AND?: Prisma.TeamFeaturesWhereInput | Prisma.TeamFeaturesWhereInput[];
  OR?: Prisma.TeamFeaturesWhereInput[];
  NOT?: Prisma.TeamFeaturesWhereInput | Prisma.TeamFeaturesWhereInput[];
  teamId?: Prisma.IntFilter<"TeamFeatures"> | number;
  featureId?: Prisma.StringFilter<"TeamFeatures"> | string;
  assignedAt?: Prisma.DateTimeFilter<"TeamFeatures"> | Date | string;
  assignedBy?: Prisma.StringFilter<"TeamFeatures"> | string;
  updatedAt?: Prisma.DateTimeFilter<"TeamFeatures"> | Date | string;
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  feature?: Prisma.XOR<Prisma.FeatureScalarRelationFilter, Prisma.FeatureWhereInput>;
};

export type TeamFeaturesOrderByWithRelationInput = {
  teamId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  team?: Prisma.TeamOrderByWithRelationInput;
  feature?: Prisma.FeatureOrderByWithRelationInput;
};

export type TeamFeaturesWhereUniqueInput = Prisma.AtLeast<
  {
    teamId_featureId?: Prisma.TeamFeaturesTeamIdFeatureIdCompoundUniqueInput;
    AND?: Prisma.TeamFeaturesWhereInput | Prisma.TeamFeaturesWhereInput[];
    OR?: Prisma.TeamFeaturesWhereInput[];
    NOT?: Prisma.TeamFeaturesWhereInput | Prisma.TeamFeaturesWhereInput[];
    teamId?: Prisma.IntFilter<"TeamFeatures"> | number;
    featureId?: Prisma.StringFilter<"TeamFeatures"> | string;
    assignedAt?: Prisma.DateTimeFilter<"TeamFeatures"> | Date | string;
    assignedBy?: Prisma.StringFilter<"TeamFeatures"> | string;
    updatedAt?: Prisma.DateTimeFilter<"TeamFeatures"> | Date | string;
    team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    feature?: Prisma.XOR<Prisma.FeatureScalarRelationFilter, Prisma.FeatureWhereInput>;
  },
  "teamId_featureId"
>;

export type TeamFeaturesOrderByWithAggregationInput = {
  teamId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.TeamFeaturesCountOrderByAggregateInput;
  _avg?: Prisma.TeamFeaturesAvgOrderByAggregateInput;
  _max?: Prisma.TeamFeaturesMaxOrderByAggregateInput;
  _min?: Prisma.TeamFeaturesMinOrderByAggregateInput;
  _sum?: Prisma.TeamFeaturesSumOrderByAggregateInput;
};

export type TeamFeaturesScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TeamFeaturesScalarWhereWithAggregatesInput
    | Prisma.TeamFeaturesScalarWhereWithAggregatesInput[];
  OR?: Prisma.TeamFeaturesScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TeamFeaturesScalarWhereWithAggregatesInput
    | Prisma.TeamFeaturesScalarWhereWithAggregatesInput[];
  teamId?: Prisma.IntWithAggregatesFilter<"TeamFeatures"> | number;
  featureId?: Prisma.StringWithAggregatesFilter<"TeamFeatures"> | string;
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"TeamFeatures"> | Date | string;
  assignedBy?: Prisma.StringWithAggregatesFilter<"TeamFeatures"> | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TeamFeatures"> | Date | string;
};

export type TeamFeaturesCreateInput = {
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
  team: Prisma.TeamCreateNestedOneWithoutFeaturesInput;
  feature: Prisma.FeatureCreateNestedOneWithoutTeamsInput;
};

export type TeamFeaturesUncheckedCreateInput = {
  teamId: number;
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type TeamFeaturesUpdateInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  team?: Prisma.TeamUpdateOneRequiredWithoutFeaturesNestedInput;
  feature?: Prisma.FeatureUpdateOneRequiredWithoutTeamsNestedInput;
};

export type TeamFeaturesUncheckedUpdateInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesCreateManyInput = {
  teamId: number;
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type TeamFeaturesUpdateManyMutationInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesUncheckedUpdateManyInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesListRelationFilter = {
  every?: Prisma.TeamFeaturesWhereInput;
  some?: Prisma.TeamFeaturesWhereInput;
  none?: Prisma.TeamFeaturesWhereInput;
};

export type TeamFeaturesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TeamFeaturesTeamIdFeatureIdCompoundUniqueInput = {
  teamId: number;
  featureId: string;
};

export type TeamFeaturesCountOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TeamFeaturesAvgOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
};

export type TeamFeaturesMaxOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TeamFeaturesMinOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TeamFeaturesSumOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
};

export type TeamFeaturesCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutTeamInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput
      >
    | Prisma.TeamFeaturesCreateWithoutTeamInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.TeamFeaturesCreateManyTeamInputEnvelope;
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
};

export type TeamFeaturesUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutTeamInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput
      >
    | Prisma.TeamFeaturesCreateWithoutTeamInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.TeamFeaturesCreateManyTeamInputEnvelope;
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
};

export type TeamFeaturesUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutTeamInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput
      >
    | Prisma.TeamFeaturesCreateWithoutTeamInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.TeamFeaturesCreateManyTeamInputEnvelope;
  set?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  disconnect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  delete?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  update?:
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutTeamInput
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.TeamFeaturesScalarWhereInput | Prisma.TeamFeaturesScalarWhereInput[];
};

export type TeamFeaturesUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutTeamInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput
      >
    | Prisma.TeamFeaturesCreateWithoutTeamInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.TeamFeaturesCreateManyTeamInputEnvelope;
  set?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  disconnect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  delete?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  update?:
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutTeamInput
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.TeamFeaturesScalarWhereInput | Prisma.TeamFeaturesScalarWhereInput[];
};

export type TeamFeaturesCreateNestedManyWithoutFeatureInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutFeatureInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.TeamFeaturesCreateWithoutFeatureInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput[];
  createMany?: Prisma.TeamFeaturesCreateManyFeatureInputEnvelope;
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
};

export type TeamFeaturesUncheckedCreateNestedManyWithoutFeatureInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutFeatureInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.TeamFeaturesCreateWithoutFeatureInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput[];
  createMany?: Prisma.TeamFeaturesCreateManyFeatureInputEnvelope;
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
};

export type TeamFeaturesUpdateManyWithoutFeatureNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutFeatureInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.TeamFeaturesCreateWithoutFeatureInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput[];
  upsert?:
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutFeatureInput
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutFeatureInput[];
  createMany?: Prisma.TeamFeaturesCreateManyFeatureInputEnvelope;
  set?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  disconnect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  delete?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  update?:
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutFeatureInput
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutFeatureInput[];
  updateMany?:
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutFeatureInput
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutFeatureInput[];
  deleteMany?: Prisma.TeamFeaturesScalarWhereInput | Prisma.TeamFeaturesScalarWhereInput[];
};

export type TeamFeaturesUncheckedUpdateManyWithoutFeatureNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamFeaturesCreateWithoutFeatureInput,
        Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.TeamFeaturesCreateWithoutFeatureInput[]
    | Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.TeamFeaturesCreateOrConnectWithoutFeatureInput[];
  upsert?:
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutFeatureInput
    | Prisma.TeamFeaturesUpsertWithWhereUniqueWithoutFeatureInput[];
  createMany?: Prisma.TeamFeaturesCreateManyFeatureInputEnvelope;
  set?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  disconnect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  delete?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  connect?: Prisma.TeamFeaturesWhereUniqueInput | Prisma.TeamFeaturesWhereUniqueInput[];
  update?:
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutFeatureInput
    | Prisma.TeamFeaturesUpdateWithWhereUniqueWithoutFeatureInput[];
  updateMany?:
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutFeatureInput
    | Prisma.TeamFeaturesUpdateManyWithWhereWithoutFeatureInput[];
  deleteMany?: Prisma.TeamFeaturesScalarWhereInput | Prisma.TeamFeaturesScalarWhereInput[];
};

export type TeamFeaturesCreateWithoutTeamInput = {
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
  feature: Prisma.FeatureCreateNestedOneWithoutTeamsInput;
};

export type TeamFeaturesUncheckedCreateWithoutTeamInput = {
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type TeamFeaturesCreateOrConnectWithoutTeamInput = {
  where: Prisma.TeamFeaturesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeamFeaturesCreateWithoutTeamInput,
    Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput
  >;
};

export type TeamFeaturesCreateManyTeamInputEnvelope = {
  data: Prisma.TeamFeaturesCreateManyTeamInput | Prisma.TeamFeaturesCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type TeamFeaturesUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.TeamFeaturesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TeamFeaturesUpdateWithoutTeamInput,
    Prisma.TeamFeaturesUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.TeamFeaturesCreateWithoutTeamInput,
    Prisma.TeamFeaturesUncheckedCreateWithoutTeamInput
  >;
};

export type TeamFeaturesUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.TeamFeaturesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TeamFeaturesUpdateWithoutTeamInput,
    Prisma.TeamFeaturesUncheckedUpdateWithoutTeamInput
  >;
};

export type TeamFeaturesUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.TeamFeaturesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TeamFeaturesUpdateManyMutationInput,
    Prisma.TeamFeaturesUncheckedUpdateManyWithoutTeamInput
  >;
};

export type TeamFeaturesScalarWhereInput = {
  AND?: Prisma.TeamFeaturesScalarWhereInput | Prisma.TeamFeaturesScalarWhereInput[];
  OR?: Prisma.TeamFeaturesScalarWhereInput[];
  NOT?: Prisma.TeamFeaturesScalarWhereInput | Prisma.TeamFeaturesScalarWhereInput[];
  teamId?: Prisma.IntFilter<"TeamFeatures"> | number;
  featureId?: Prisma.StringFilter<"TeamFeatures"> | string;
  assignedAt?: Prisma.DateTimeFilter<"TeamFeatures"> | Date | string;
  assignedBy?: Prisma.StringFilter<"TeamFeatures"> | string;
  updatedAt?: Prisma.DateTimeFilter<"TeamFeatures"> | Date | string;
};

export type TeamFeaturesCreateWithoutFeatureInput = {
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
  team: Prisma.TeamCreateNestedOneWithoutFeaturesInput;
};

export type TeamFeaturesUncheckedCreateWithoutFeatureInput = {
  teamId: number;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type TeamFeaturesCreateOrConnectWithoutFeatureInput = {
  where: Prisma.TeamFeaturesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeamFeaturesCreateWithoutFeatureInput,
    Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput
  >;
};

export type TeamFeaturesCreateManyFeatureInputEnvelope = {
  data: Prisma.TeamFeaturesCreateManyFeatureInput | Prisma.TeamFeaturesCreateManyFeatureInput[];
  skipDuplicates?: boolean;
};

export type TeamFeaturesUpsertWithWhereUniqueWithoutFeatureInput = {
  where: Prisma.TeamFeaturesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TeamFeaturesUpdateWithoutFeatureInput,
    Prisma.TeamFeaturesUncheckedUpdateWithoutFeatureInput
  >;
  create: Prisma.XOR<
    Prisma.TeamFeaturesCreateWithoutFeatureInput,
    Prisma.TeamFeaturesUncheckedCreateWithoutFeatureInput
  >;
};

export type TeamFeaturesUpdateWithWhereUniqueWithoutFeatureInput = {
  where: Prisma.TeamFeaturesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TeamFeaturesUpdateWithoutFeatureInput,
    Prisma.TeamFeaturesUncheckedUpdateWithoutFeatureInput
  >;
};

export type TeamFeaturesUpdateManyWithWhereWithoutFeatureInput = {
  where: Prisma.TeamFeaturesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TeamFeaturesUpdateManyMutationInput,
    Prisma.TeamFeaturesUncheckedUpdateManyWithoutFeatureInput
  >;
};

export type TeamFeaturesCreateManyTeamInput = {
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type TeamFeaturesUpdateWithoutTeamInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  feature?: Prisma.FeatureUpdateOneRequiredWithoutTeamsNestedInput;
};

export type TeamFeaturesUncheckedUpdateWithoutTeamInput = {
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesUncheckedUpdateManyWithoutTeamInput = {
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesCreateManyFeatureInput = {
  teamId: number;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type TeamFeaturesUpdateWithoutFeatureInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  team?: Prisma.TeamUpdateOneRequiredWithoutFeaturesNestedInput;
};

export type TeamFeaturesUncheckedUpdateWithoutFeatureInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesUncheckedUpdateManyWithoutFeatureInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamFeaturesSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    featureId?: boolean;
    assignedAt?: boolean;
    assignedBy?: boolean;
    updatedAt?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teamFeatures"]
>;

export type TeamFeaturesSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    featureId?: boolean;
    assignedAt?: boolean;
    assignedBy?: boolean;
    updatedAt?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teamFeatures"]
>;

export type TeamFeaturesSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    featureId?: boolean;
    assignedAt?: boolean;
    assignedBy?: boolean;
    updatedAt?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["teamFeatures"]
>;

export type TeamFeaturesSelectScalar = {
  teamId?: boolean;
  featureId?: boolean;
  assignedAt?: boolean;
  assignedBy?: boolean;
  updatedAt?: boolean;
};

export type TeamFeaturesOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "teamId" | "featureId" | "assignedAt" | "assignedBy" | "updatedAt",
  ExtArgs["result"]["teamFeatures"]
>;
export type TeamFeaturesInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
};
export type TeamFeaturesIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
};
export type TeamFeaturesIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
};

export type $TeamFeaturesPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "TeamFeatures";
  objects: {
    team: Prisma.$TeamPayload<ExtArgs>;
    feature: Prisma.$FeaturePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      teamId: number;
      featureId: string;
      assignedAt: Date;
      assignedBy: string;
      updatedAt: Date;
    },
    ExtArgs["result"]["teamFeatures"]
  >;
  composites: {};
};

export type TeamFeaturesGetPayload<S extends boolean | null | undefined | TeamFeaturesDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$TeamFeaturesPayload, S>;

export type TeamFeaturesCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<TeamFeaturesFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: TeamFeaturesCountAggregateInputType | true;
};

export interface TeamFeaturesDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["TeamFeatures"]; meta: { name: "TeamFeatures" } };
  /**
   * Find zero or one TeamFeatures that matches the filter.
   * @param {TeamFeaturesFindUniqueArgs} args - Arguments to find a TeamFeatures
   * @example
   * // Get one TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeamFeaturesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamFeaturesPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TeamFeatures that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeamFeaturesFindUniqueOrThrowArgs} args - Arguments to find a TeamFeatures
   * @example
   * // Get one TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeamFeaturesFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamFeaturesPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeamFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesFindFirstArgs} args - Arguments to find a TeamFeatures
   * @example
   * // Get one TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeamFeaturesFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TeamFeaturesFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamFeaturesPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeamFeatures that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesFindFirstOrThrowArgs} args - Arguments to find a TeamFeatures
   * @example
   * // Get one TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeamFeaturesFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TeamFeaturesFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamFeaturesPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TeamFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findMany()
   *
   * // Get first 10 TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findMany({ take: 10 })
   *
   * // Only select the `teamId`
   * const teamFeaturesWithTeamIdOnly = await prisma.teamFeatures.findMany({ select: { teamId: true } })
   *
   */
  findMany<T extends TeamFeaturesFindManyArgs>(
    args?: Prisma.SelectSubset<T, TeamFeaturesFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$TeamFeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a TeamFeatures.
   * @param {TeamFeaturesCreateArgs} args - Arguments to create a TeamFeatures.
   * @example
   * // Create one TeamFeatures
   * const TeamFeatures = await prisma.teamFeatures.create({
   *   data: {
   *     // ... data to create a TeamFeatures
   *   }
   * })
   *
   */
  create<T extends TeamFeaturesCreateArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$TeamFeaturesPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TeamFeatures.
   * @param {TeamFeaturesCreateManyArgs} args - Arguments to create many TeamFeatures.
   * @example
   * // Create many TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TeamFeaturesCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TeamFeaturesCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TeamFeatures and returns the data saved in the database.
   * @param {TeamFeaturesCreateManyAndReturnArgs} args - Arguments to create many TeamFeatures.
   * @example
   * // Create many TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TeamFeatures and only return the `teamId`
   * const teamFeaturesWithTeamIdOnly = await prisma.teamFeatures.createManyAndReturn({
   *   select: { teamId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TeamFeaturesCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TeamFeaturesCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamFeaturesPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TeamFeatures.
   * @param {TeamFeaturesDeleteArgs} args - Arguments to delete one TeamFeatures.
   * @example
   * // Delete one TeamFeatures
   * const TeamFeatures = await prisma.teamFeatures.delete({
   *   where: {
   *     // ... filter to delete one TeamFeatures
   *   }
   * })
   *
   */
  delete<T extends TeamFeaturesDeleteArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$TeamFeaturesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TeamFeatures.
   * @param {TeamFeaturesUpdateArgs} args - Arguments to update one TeamFeatures.
   * @example
   * // Update one TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TeamFeaturesUpdateArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$TeamFeaturesPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TeamFeatures.
   * @param {TeamFeaturesDeleteManyArgs} args - Arguments to filter TeamFeatures to delete.
   * @example
   * // Delete a few TeamFeatures
   * const { count } = await prisma.teamFeatures.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TeamFeaturesDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TeamFeaturesDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeamFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TeamFeaturesUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeamFeatures and returns the data updated in the database.
   * @param {TeamFeaturesUpdateManyAndReturnArgs} args - Arguments to update many TeamFeatures.
   * @example
   * // Update many TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TeamFeatures and only return the `teamId`
   * const teamFeaturesWithTeamIdOnly = await prisma.teamFeatures.updateManyAndReturn({
   *   select: { teamId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TeamFeaturesUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamFeaturesPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TeamFeatures.
   * @param {TeamFeaturesUpsertArgs} args - Arguments to update or create a TeamFeatures.
   * @example
   * // Update or create a TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.upsert({
   *   create: {
   *     // ... data to create a TeamFeatures
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeamFeatures we want to update
   *   }
   * })
   */
  upsert<T extends TeamFeaturesUpsertArgs>(
    args: Prisma.SelectSubset<T, TeamFeaturesUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TeamFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$TeamFeaturesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TeamFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesCountArgs} args - Arguments to filter TeamFeatures to count.
   * @example
   * // Count the number of TeamFeatures
   * const count = await prisma.teamFeatures.count({
   *   where: {
   *     // ... the filter for the TeamFeatures we want to count
   *   }
   * })
   **/
  count<T extends TeamFeaturesCountArgs>(
    args?: Prisma.Subset<T, TeamFeaturesCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TeamFeaturesCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TeamFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TeamFeaturesAggregateArgs>(
    args: Prisma.Subset<T, TeamFeaturesAggregateArgs>
  ): Prisma.PrismaPromise<GetTeamFeaturesAggregateType<T>>;

  /**
   * Group by TeamFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFeaturesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TeamFeaturesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeamFeaturesGroupByArgs["orderBy"] }
      : { orderBy?: TeamFeaturesGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, TeamFeaturesGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetTeamFeaturesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TeamFeatures model
   */
  readonly fields: TeamFeaturesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeamFeatures.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeamFeaturesClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  feature<T extends Prisma.FeatureDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeatureDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__FeatureClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FeaturePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TeamFeatures model
 */
export interface TeamFeaturesFieldRefs {
  readonly teamId: Prisma.FieldRef<"TeamFeatures", "Int">;
  readonly featureId: Prisma.FieldRef<"TeamFeatures", "String">;
  readonly assignedAt: Prisma.FieldRef<"TeamFeatures", "DateTime">;
  readonly assignedBy: Prisma.FieldRef<"TeamFeatures", "String">;
  readonly updatedAt: Prisma.FieldRef<"TeamFeatures", "DateTime">;
}

// Custom InputTypes
/**
 * TeamFeatures findUnique
 */
export type TeamFeaturesFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which TeamFeatures to fetch.
   */
  where: Prisma.TeamFeaturesWhereUniqueInput;
};

/**
 * TeamFeatures findUniqueOrThrow
 */
export type TeamFeaturesFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which TeamFeatures to fetch.
   */
  where: Prisma.TeamFeaturesWhereUniqueInput;
};

/**
 * TeamFeatures findFirst
 */
export type TeamFeaturesFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which TeamFeatures to fetch.
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamFeatures to fetch.
   */
  orderBy?: Prisma.TeamFeaturesOrderByWithRelationInput | Prisma.TeamFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeamFeatures.
   */
  cursor?: Prisma.TeamFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeamFeatures.
   */
  distinct?: Prisma.TeamFeaturesScalarFieldEnum | Prisma.TeamFeaturesScalarFieldEnum[];
};

/**
 * TeamFeatures findFirstOrThrow
 */
export type TeamFeaturesFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which TeamFeatures to fetch.
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamFeatures to fetch.
   */
  orderBy?: Prisma.TeamFeaturesOrderByWithRelationInput | Prisma.TeamFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeamFeatures.
   */
  cursor?: Prisma.TeamFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeamFeatures.
   */
  distinct?: Prisma.TeamFeaturesScalarFieldEnum | Prisma.TeamFeaturesScalarFieldEnum[];
};

/**
 * TeamFeatures findMany
 */
export type TeamFeaturesFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which TeamFeatures to fetch.
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamFeatures to fetch.
   */
  orderBy?: Prisma.TeamFeaturesOrderByWithRelationInput | Prisma.TeamFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TeamFeatures.
   */
  cursor?: Prisma.TeamFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamFeatures.
   */
  skip?: number;
  distinct?: Prisma.TeamFeaturesScalarFieldEnum | Prisma.TeamFeaturesScalarFieldEnum[];
};

/**
 * TeamFeatures create
 */
export type TeamFeaturesCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * The data needed to create a TeamFeatures.
   */
  data: Prisma.XOR<Prisma.TeamFeaturesCreateInput, Prisma.TeamFeaturesUncheckedCreateInput>;
};

/**
 * TeamFeatures createMany
 */
export type TeamFeaturesCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many TeamFeatures.
   */
  data: Prisma.TeamFeaturesCreateManyInput | Prisma.TeamFeaturesCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TeamFeatures createManyAndReturn
 */
export type TeamFeaturesCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * The data used to create many TeamFeatures.
   */
  data: Prisma.TeamFeaturesCreateManyInput | Prisma.TeamFeaturesCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TeamFeatures update
 */
export type TeamFeaturesUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * The data needed to update a TeamFeatures.
   */
  data: Prisma.XOR<Prisma.TeamFeaturesUpdateInput, Prisma.TeamFeaturesUncheckedUpdateInput>;
  /**
   * Choose, which TeamFeatures to update.
   */
  where: Prisma.TeamFeaturesWhereUniqueInput;
};

/**
 * TeamFeatures updateMany
 */
export type TeamFeaturesUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update TeamFeatures.
   */
  data: Prisma.XOR<Prisma.TeamFeaturesUpdateManyMutationInput, Prisma.TeamFeaturesUncheckedUpdateManyInput>;
  /**
   * Filter which TeamFeatures to update
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * Limit how many TeamFeatures to update.
   */
  limit?: number;
};

/**
 * TeamFeatures updateManyAndReturn
 */
export type TeamFeaturesUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * The data used to update TeamFeatures.
   */
  data: Prisma.XOR<Prisma.TeamFeaturesUpdateManyMutationInput, Prisma.TeamFeaturesUncheckedUpdateManyInput>;
  /**
   * Filter which TeamFeatures to update
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * Limit how many TeamFeatures to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TeamFeatures upsert
 */
export type TeamFeaturesUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * The filter to search for the TeamFeatures to update in case it exists.
   */
  where: Prisma.TeamFeaturesWhereUniqueInput;
  /**
   * In case the TeamFeatures found by the `where` argument doesn't exist, create a new TeamFeatures with this data.
   */
  create: Prisma.XOR<Prisma.TeamFeaturesCreateInput, Prisma.TeamFeaturesUncheckedCreateInput>;
  /**
   * In case the TeamFeatures was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeamFeaturesUpdateInput, Prisma.TeamFeaturesUncheckedUpdateInput>;
};

/**
 * TeamFeatures delete
 */
export type TeamFeaturesDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
  /**
   * Filter which TeamFeatures to delete.
   */
  where: Prisma.TeamFeaturesWhereUniqueInput;
};

/**
 * TeamFeatures deleteMany
 */
export type TeamFeaturesDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TeamFeatures to delete
   */
  where?: Prisma.TeamFeaturesWhereInput;
  /**
   * Limit how many TeamFeatures to delete.
   */
  limit?: number;
};

/**
 * TeamFeatures without action
 */
export type TeamFeaturesDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamFeatures
   */
  select?: Prisma.TeamFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamFeatures
   */
  omit?: Prisma.TeamFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamFeaturesInclude<ExtArgs> | null;
};
