/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Membership` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Membership
 *
 */
export type MembershipModel = runtime.Types.Result.DefaultSelection<Prisma.$MembershipPayload>;

export type AggregateMembership = {
  _count: MembershipCountAggregateOutputType | null;
  _avg: MembershipAvgAggregateOutputType | null;
  _sum: MembershipSumAggregateOutputType | null;
  _min: MembershipMinAggregateOutputType | null;
  _max: MembershipMaxAggregateOutputType | null;
};

export type MembershipAvgAggregateOutputType = {
  id: number | null;
  teamId: number | null;
  userId: number | null;
};

export type MembershipSumAggregateOutputType = {
  id: number | null;
  teamId: number | null;
  userId: number | null;
};

export type MembershipMinAggregateOutputType = {
  id: number | null;
  teamId: number | null;
  userId: number | null;
  accepted: boolean | null;
  role: $Enums.MembershipRole | null;
  customRoleId: string | null;
  disableImpersonation: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type MembershipMaxAggregateOutputType = {
  id: number | null;
  teamId: number | null;
  userId: number | null;
  accepted: boolean | null;
  role: $Enums.MembershipRole | null;
  customRoleId: string | null;
  disableImpersonation: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type MembershipCountAggregateOutputType = {
  id: number;
  teamId: number;
  userId: number;
  accepted: number;
  role: number;
  customRoleId: number;
  disableImpersonation: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type MembershipAvgAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
};

export type MembershipSumAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
};

export type MembershipMinAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  accepted?: true;
  role?: true;
  customRoleId?: true;
  disableImpersonation?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type MembershipMaxAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  accepted?: true;
  role?: true;
  customRoleId?: true;
  disableImpersonation?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type MembershipCountAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  accepted?: true;
  role?: true;
  customRoleId?: true;
  disableImpersonation?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type MembershipAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Membership to aggregate.
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Memberships to fetch.
   */
  orderBy?: Prisma.MembershipOrderByWithRelationInput | Prisma.MembershipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MembershipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Memberships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Memberships.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Memberships
   **/
  _count?: true | MembershipCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: MembershipAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: MembershipSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MembershipMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MembershipMaxAggregateInputType;
};

export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
  [P in keyof T & keyof AggregateMembership]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMembership[P]>
    : Prisma.GetScalarType<T[P], AggregateMembership[P]>;
};

export type MembershipGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.MembershipWhereInput;
  orderBy?: Prisma.MembershipOrderByWithAggregationInput | Prisma.MembershipOrderByWithAggregationInput[];
  by: Prisma.MembershipScalarFieldEnum[] | Prisma.MembershipScalarFieldEnum;
  having?: Prisma.MembershipScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MembershipCountAggregateInputType | true;
  _avg?: MembershipAvgAggregateInputType;
  _sum?: MembershipSumAggregateInputType;
  _min?: MembershipMinAggregateInputType;
  _max?: MembershipMaxAggregateInputType;
};

export type MembershipGroupByOutputType = {
  id: number;
  teamId: number;
  userId: number;
  accepted: boolean;
  role: $Enums.MembershipRole;
  customRoleId: string | null;
  disableImpersonation: boolean;
  createdAt: Date | null;
  updatedAt: Date | null;
  _count: MembershipCountAggregateOutputType | null;
  _avg: MembershipAvgAggregateOutputType | null;
  _sum: MembershipSumAggregateOutputType | null;
  _min: MembershipMinAggregateOutputType | null;
  _max: MembershipMaxAggregateOutputType | null;
};

type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MembershipGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof MembershipGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MembershipGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MembershipGroupByOutputType[P]>;
    }
  >
>;

export type MembershipWhereInput = {
  AND?: Prisma.MembershipWhereInput | Prisma.MembershipWhereInput[];
  OR?: Prisma.MembershipWhereInput[];
  NOT?: Prisma.MembershipWhereInput | Prisma.MembershipWhereInput[];
  id?: Prisma.IntFilter<"Membership"> | number;
  teamId?: Prisma.IntFilter<"Membership"> | number;
  userId?: Prisma.IntFilter<"Membership"> | number;
  accepted?: Prisma.BoolFilter<"Membership"> | boolean;
  role?: Prisma.EnumMembershipRoleFilter<"Membership"> | $Enums.MembershipRole;
  customRoleId?: Prisma.StringNullableFilter<"Membership"> | string | null;
  disableImpersonation?: Prisma.BoolFilter<"Membership"> | boolean;
  createdAt?: Prisma.DateTimeNullableFilter<"Membership"> | Date | string | null;
  updatedAt?: Prisma.DateTimeNullableFilter<"Membership"> | Date | string | null;
  customRole?: Prisma.XOR<Prisma.RoleNullableScalarRelationFilter, Prisma.RoleWhereInput> | null;
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  AttributeToUser?: Prisma.AttributeToUserListRelationFilter;
  Host?: Prisma.HostListRelationFilter;
};

export type MembershipOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accepted?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  customRoleId?: Prisma.SortOrderInput | Prisma.SortOrder;
  disableImpersonation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  customRole?: Prisma.RoleOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
  AttributeToUser?: Prisma.AttributeToUserOrderByRelationAggregateInput;
  Host?: Prisma.HostOrderByRelationAggregateInput;
};

export type MembershipWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    userId_teamId?: Prisma.MembershipUserIdTeamIdCompoundUniqueInput;
    AND?: Prisma.MembershipWhereInput | Prisma.MembershipWhereInput[];
    OR?: Prisma.MembershipWhereInput[];
    NOT?: Prisma.MembershipWhereInput | Prisma.MembershipWhereInput[];
    teamId?: Prisma.IntFilter<"Membership"> | number;
    userId?: Prisma.IntFilter<"Membership"> | number;
    accepted?: Prisma.BoolFilter<"Membership"> | boolean;
    role?: Prisma.EnumMembershipRoleFilter<"Membership"> | $Enums.MembershipRole;
    customRoleId?: Prisma.StringNullableFilter<"Membership"> | string | null;
    disableImpersonation?: Prisma.BoolFilter<"Membership"> | boolean;
    createdAt?: Prisma.DateTimeNullableFilter<"Membership"> | Date | string | null;
    updatedAt?: Prisma.DateTimeNullableFilter<"Membership"> | Date | string | null;
    customRole?: Prisma.XOR<Prisma.RoleNullableScalarRelationFilter, Prisma.RoleWhereInput> | null;
    team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    AttributeToUser?: Prisma.AttributeToUserListRelationFilter;
    Host?: Prisma.HostListRelationFilter;
  },
  "id" | "userId_teamId"
>;

export type MembershipOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accepted?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  customRoleId?: Prisma.SortOrderInput | Prisma.SortOrder;
  disableImpersonation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.MembershipCountOrderByAggregateInput;
  _avg?: Prisma.MembershipAvgOrderByAggregateInput;
  _max?: Prisma.MembershipMaxOrderByAggregateInput;
  _min?: Prisma.MembershipMinOrderByAggregateInput;
  _sum?: Prisma.MembershipSumOrderByAggregateInput;
};

export type MembershipScalarWhereWithAggregatesInput = {
  AND?: Prisma.MembershipScalarWhereWithAggregatesInput | Prisma.MembershipScalarWhereWithAggregatesInput[];
  OR?: Prisma.MembershipScalarWhereWithAggregatesInput[];
  NOT?: Prisma.MembershipScalarWhereWithAggregatesInput | Prisma.MembershipScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Membership"> | number;
  teamId?: Prisma.IntWithAggregatesFilter<"Membership"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"Membership"> | number;
  accepted?: Prisma.BoolWithAggregatesFilter<"Membership"> | boolean;
  role?: Prisma.EnumMembershipRoleWithAggregatesFilter<"Membership"> | $Enums.MembershipRole;
  customRoleId?: Prisma.StringNullableWithAggregatesFilter<"Membership"> | string | null;
  disableImpersonation?: Prisma.BoolWithAggregatesFilter<"Membership"> | boolean;
  createdAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Membership"> | Date | string | null;
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Membership"> | Date | string | null;
};

export type MembershipCreateInput = {
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  customRole?: Prisma.RoleCreateNestedOneWithoutMembershipsInput;
  team: Prisma.TeamCreateNestedOneWithoutMembersInput;
  user: Prisma.UserCreateNestedOneWithoutTeamsInput;
  AttributeToUser?: Prisma.AttributeToUserCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostCreateNestedManyWithoutMemberInput;
};

export type MembershipUncheckedCreateInput = {
  id?: number;
  teamId: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutMemberInput;
};

export type MembershipUpdateInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  customRole?: Prisma.RoleUpdateOneWithoutMembershipsNestedInput;
  team?: Prisma.TeamUpdateOneRequiredWithoutMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
  AttributeToUser?: Prisma.AttributeToUserUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutMemberNestedInput;
};

export type MembershipCreateManyInput = {
  id?: number;
  teamId: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
};

export type MembershipUpdateManyMutationInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type MembershipUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type MembershipNullableScalarRelationFilter = {
  is?: Prisma.MembershipWhereInput | null;
  isNot?: Prisma.MembershipWhereInput | null;
};

export type MembershipListRelationFilter = {
  every?: Prisma.MembershipWhereInput;
  some?: Prisma.MembershipWhereInput;
  none?: Prisma.MembershipWhereInput;
};

export type MembershipOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MembershipUserIdTeamIdCompoundUniqueInput = {
  userId: number;
  teamId: number;
};

export type MembershipCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accepted?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  customRoleId?: Prisma.SortOrder;
  disableImpersonation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MembershipAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type MembershipMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accepted?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  customRoleId?: Prisma.SortOrder;
  disableImpersonation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MembershipMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accepted?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  customRoleId?: Prisma.SortOrder;
  disableImpersonation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MembershipSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type MembershipScalarRelationFilter = {
  is?: Prisma.MembershipWhereInput;
  isNot?: Prisma.MembershipWhereInput;
};

export type MembershipCreateNestedOneWithoutHostInput = {
  create?: Prisma.XOR<
    Prisma.MembershipCreateWithoutHostInput,
    Prisma.MembershipUncheckedCreateWithoutHostInput
  >;
  connectOrCreate?: Prisma.MembershipCreateOrConnectWithoutHostInput;
  connect?: Prisma.MembershipWhereUniqueInput;
};

export type MembershipUpdateOneWithoutHostNestedInput = {
  create?: Prisma.XOR<
    Prisma.MembershipCreateWithoutHostInput,
    Prisma.MembershipUncheckedCreateWithoutHostInput
  >;
  connectOrCreate?: Prisma.MembershipCreateOrConnectWithoutHostInput;
  upsert?: Prisma.MembershipUpsertWithoutHostInput;
  disconnect?: Prisma.MembershipWhereInput | boolean;
  delete?: Prisma.MembershipWhereInput | boolean;
  connect?: Prisma.MembershipWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MembershipUpdateToOneWithWhereWithoutHostInput,
      Prisma.MembershipUpdateWithoutHostInput
    >,
    Prisma.MembershipUncheckedUpdateWithoutHostInput
  >;
};

export type MembershipCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutUserInput, Prisma.MembershipUncheckedCreateWithoutUserInput>
    | Prisma.MembershipCreateWithoutUserInput[]
    | Prisma.MembershipUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutUserInput
    | Prisma.MembershipCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.MembershipCreateManyUserInputEnvelope;
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
};

export type MembershipUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutUserInput, Prisma.MembershipUncheckedCreateWithoutUserInput>
    | Prisma.MembershipCreateWithoutUserInput[]
    | Prisma.MembershipUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutUserInput
    | Prisma.MembershipCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.MembershipCreateManyUserInputEnvelope;
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
};

export type MembershipUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutUserInput, Prisma.MembershipUncheckedCreateWithoutUserInput>
    | Prisma.MembershipCreateWithoutUserInput[]
    | Prisma.MembershipUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutUserInput
    | Prisma.MembershipCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.MembershipUpsertWithWhereUniqueWithoutUserInput
    | Prisma.MembershipUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.MembershipCreateManyUserInputEnvelope;
  set?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  disconnect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  delete?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  update?:
    | Prisma.MembershipUpdateWithWhereUniqueWithoutUserInput
    | Prisma.MembershipUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.MembershipUpdateManyWithWhereWithoutUserInput
    | Prisma.MembershipUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
};

export type MembershipUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutUserInput, Prisma.MembershipUncheckedCreateWithoutUserInput>
    | Prisma.MembershipCreateWithoutUserInput[]
    | Prisma.MembershipUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutUserInput
    | Prisma.MembershipCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.MembershipUpsertWithWhereUniqueWithoutUserInput
    | Prisma.MembershipUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.MembershipCreateManyUserInputEnvelope;
  set?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  disconnect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  delete?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  update?:
    | Prisma.MembershipUpdateWithWhereUniqueWithoutUserInput
    | Prisma.MembershipUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.MembershipUpdateManyWithWhereWithoutUserInput
    | Prisma.MembershipUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
};

export type MembershipCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutTeamInput, Prisma.MembershipUncheckedCreateWithoutTeamInput>
    | Prisma.MembershipCreateWithoutTeamInput[]
    | Prisma.MembershipUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutTeamInput
    | Prisma.MembershipCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.MembershipCreateManyTeamInputEnvelope;
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
};

export type MembershipUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutTeamInput, Prisma.MembershipUncheckedCreateWithoutTeamInput>
    | Prisma.MembershipCreateWithoutTeamInput[]
    | Prisma.MembershipUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutTeamInput
    | Prisma.MembershipCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.MembershipCreateManyTeamInputEnvelope;
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
};

export type MembershipUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutTeamInput, Prisma.MembershipUncheckedCreateWithoutTeamInput>
    | Prisma.MembershipCreateWithoutTeamInput[]
    | Prisma.MembershipUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutTeamInput
    | Prisma.MembershipCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.MembershipUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.MembershipUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.MembershipCreateManyTeamInputEnvelope;
  set?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  disconnect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  delete?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  update?:
    | Prisma.MembershipUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.MembershipUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.MembershipUpdateManyWithWhereWithoutTeamInput
    | Prisma.MembershipUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
};

export type MembershipUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.MembershipCreateWithoutTeamInput, Prisma.MembershipUncheckedCreateWithoutTeamInput>
    | Prisma.MembershipCreateWithoutTeamInput[]
    | Prisma.MembershipUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutTeamInput
    | Prisma.MembershipCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.MembershipUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.MembershipUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.MembershipCreateManyTeamInputEnvelope;
  set?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  disconnect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  delete?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  update?:
    | Prisma.MembershipUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.MembershipUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.MembershipUpdateManyWithWhereWithoutTeamInput
    | Prisma.MembershipUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
};

export type EnumMembershipRoleFieldUpdateOperationsInput = {
  set?: $Enums.MembershipRole;
};

export type MembershipCreateNestedOneWithoutAttributeToUserInput = {
  create?: Prisma.XOR<
    Prisma.MembershipCreateWithoutAttributeToUserInput,
    Prisma.MembershipUncheckedCreateWithoutAttributeToUserInput
  >;
  connectOrCreate?: Prisma.MembershipCreateOrConnectWithoutAttributeToUserInput;
  connect?: Prisma.MembershipWhereUniqueInput;
};

export type MembershipUpdateOneRequiredWithoutAttributeToUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.MembershipCreateWithoutAttributeToUserInput,
    Prisma.MembershipUncheckedCreateWithoutAttributeToUserInput
  >;
  connectOrCreate?: Prisma.MembershipCreateOrConnectWithoutAttributeToUserInput;
  upsert?: Prisma.MembershipUpsertWithoutAttributeToUserInput;
  connect?: Prisma.MembershipWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MembershipUpdateToOneWithWhereWithoutAttributeToUserInput,
      Prisma.MembershipUpdateWithoutAttributeToUserInput
    >,
    Prisma.MembershipUncheckedUpdateWithoutAttributeToUserInput
  >;
};

export type MembershipCreateNestedManyWithoutCustomRoleInput = {
  create?:
    | Prisma.XOR<
        Prisma.MembershipCreateWithoutCustomRoleInput,
        Prisma.MembershipUncheckedCreateWithoutCustomRoleInput
      >
    | Prisma.MembershipCreateWithoutCustomRoleInput[]
    | Prisma.MembershipUncheckedCreateWithoutCustomRoleInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput[];
  createMany?: Prisma.MembershipCreateManyCustomRoleInputEnvelope;
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
};

export type MembershipUncheckedCreateNestedManyWithoutCustomRoleInput = {
  create?:
    | Prisma.XOR<
        Prisma.MembershipCreateWithoutCustomRoleInput,
        Prisma.MembershipUncheckedCreateWithoutCustomRoleInput
      >
    | Prisma.MembershipCreateWithoutCustomRoleInput[]
    | Prisma.MembershipUncheckedCreateWithoutCustomRoleInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput[];
  createMany?: Prisma.MembershipCreateManyCustomRoleInputEnvelope;
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
};

export type MembershipUpdateManyWithoutCustomRoleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MembershipCreateWithoutCustomRoleInput,
        Prisma.MembershipUncheckedCreateWithoutCustomRoleInput
      >
    | Prisma.MembershipCreateWithoutCustomRoleInput[]
    | Prisma.MembershipUncheckedCreateWithoutCustomRoleInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput[];
  upsert?:
    | Prisma.MembershipUpsertWithWhereUniqueWithoutCustomRoleInput
    | Prisma.MembershipUpsertWithWhereUniqueWithoutCustomRoleInput[];
  createMany?: Prisma.MembershipCreateManyCustomRoleInputEnvelope;
  set?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  disconnect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  delete?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  update?:
    | Prisma.MembershipUpdateWithWhereUniqueWithoutCustomRoleInput
    | Prisma.MembershipUpdateWithWhereUniqueWithoutCustomRoleInput[];
  updateMany?:
    | Prisma.MembershipUpdateManyWithWhereWithoutCustomRoleInput
    | Prisma.MembershipUpdateManyWithWhereWithoutCustomRoleInput[];
  deleteMany?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
};

export type MembershipUncheckedUpdateManyWithoutCustomRoleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MembershipCreateWithoutCustomRoleInput,
        Prisma.MembershipUncheckedCreateWithoutCustomRoleInput
      >
    | Prisma.MembershipCreateWithoutCustomRoleInput[]
    | Prisma.MembershipUncheckedCreateWithoutCustomRoleInput[];
  connectOrCreate?:
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput
    | Prisma.MembershipCreateOrConnectWithoutCustomRoleInput[];
  upsert?:
    | Prisma.MembershipUpsertWithWhereUniqueWithoutCustomRoleInput
    | Prisma.MembershipUpsertWithWhereUniqueWithoutCustomRoleInput[];
  createMany?: Prisma.MembershipCreateManyCustomRoleInputEnvelope;
  set?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  disconnect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  delete?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  connect?: Prisma.MembershipWhereUniqueInput | Prisma.MembershipWhereUniqueInput[];
  update?:
    | Prisma.MembershipUpdateWithWhereUniqueWithoutCustomRoleInput
    | Prisma.MembershipUpdateWithWhereUniqueWithoutCustomRoleInput[];
  updateMany?:
    | Prisma.MembershipUpdateManyWithWhereWithoutCustomRoleInput
    | Prisma.MembershipUpdateManyWithWhereWithoutCustomRoleInput[];
  deleteMany?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
};

export type MembershipCreateWithoutHostInput = {
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  customRole?: Prisma.RoleCreateNestedOneWithoutMembershipsInput;
  team: Prisma.TeamCreateNestedOneWithoutMembersInput;
  user: Prisma.UserCreateNestedOneWithoutTeamsInput;
  AttributeToUser?: Prisma.AttributeToUserCreateNestedManyWithoutMemberInput;
};

export type MembershipUncheckedCreateWithoutHostInput = {
  id?: number;
  teamId: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutMemberInput;
};

export type MembershipCreateOrConnectWithoutHostInput = {
  where: Prisma.MembershipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutHostInput,
    Prisma.MembershipUncheckedCreateWithoutHostInput
  >;
};

export type MembershipUpsertWithoutHostInput = {
  update: Prisma.XOR<
    Prisma.MembershipUpdateWithoutHostInput,
    Prisma.MembershipUncheckedUpdateWithoutHostInput
  >;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutHostInput,
    Prisma.MembershipUncheckedCreateWithoutHostInput
  >;
  where?: Prisma.MembershipWhereInput;
};

export type MembershipUpdateToOneWithWhereWithoutHostInput = {
  where?: Prisma.MembershipWhereInput;
  data: Prisma.XOR<Prisma.MembershipUpdateWithoutHostInput, Prisma.MembershipUncheckedUpdateWithoutHostInput>;
};

export type MembershipUpdateWithoutHostInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  customRole?: Prisma.RoleUpdateOneWithoutMembershipsNestedInput;
  team?: Prisma.TeamUpdateOneRequiredWithoutMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
  AttributeToUser?: Prisma.AttributeToUserUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateWithoutHostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedUpdateManyWithoutMemberNestedInput;
};

export type MembershipCreateWithoutUserInput = {
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  customRole?: Prisma.RoleCreateNestedOneWithoutMembershipsInput;
  team: Prisma.TeamCreateNestedOneWithoutMembersInput;
  AttributeToUser?: Prisma.AttributeToUserCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostCreateNestedManyWithoutMemberInput;
};

export type MembershipUncheckedCreateWithoutUserInput = {
  id?: number;
  teamId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutMemberInput;
};

export type MembershipCreateOrConnectWithoutUserInput = {
  where: Prisma.MembershipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutUserInput,
    Prisma.MembershipUncheckedCreateWithoutUserInput
  >;
};

export type MembershipCreateManyUserInputEnvelope = {
  data: Prisma.MembershipCreateManyUserInput | Prisma.MembershipCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type MembershipUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MembershipWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MembershipUpdateWithoutUserInput,
    Prisma.MembershipUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutUserInput,
    Prisma.MembershipUncheckedCreateWithoutUserInput
  >;
};

export type MembershipUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MembershipWhereUniqueInput;
  data: Prisma.XOR<Prisma.MembershipUpdateWithoutUserInput, Prisma.MembershipUncheckedUpdateWithoutUserInput>;
};

export type MembershipUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MembershipScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MembershipUpdateManyMutationInput,
    Prisma.MembershipUncheckedUpdateManyWithoutUserInput
  >;
};

export type MembershipScalarWhereInput = {
  AND?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
  OR?: Prisma.MembershipScalarWhereInput[];
  NOT?: Prisma.MembershipScalarWhereInput | Prisma.MembershipScalarWhereInput[];
  id?: Prisma.IntFilter<"Membership"> | number;
  teamId?: Prisma.IntFilter<"Membership"> | number;
  userId?: Prisma.IntFilter<"Membership"> | number;
  accepted?: Prisma.BoolFilter<"Membership"> | boolean;
  role?: Prisma.EnumMembershipRoleFilter<"Membership"> | $Enums.MembershipRole;
  customRoleId?: Prisma.StringNullableFilter<"Membership"> | string | null;
  disableImpersonation?: Prisma.BoolFilter<"Membership"> | boolean;
  createdAt?: Prisma.DateTimeNullableFilter<"Membership"> | Date | string | null;
  updatedAt?: Prisma.DateTimeNullableFilter<"Membership"> | Date | string | null;
};

export type MembershipCreateWithoutTeamInput = {
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  customRole?: Prisma.RoleCreateNestedOneWithoutMembershipsInput;
  user: Prisma.UserCreateNestedOneWithoutTeamsInput;
  AttributeToUser?: Prisma.AttributeToUserCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostCreateNestedManyWithoutMemberInput;
};

export type MembershipUncheckedCreateWithoutTeamInput = {
  id?: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutMemberInput;
};

export type MembershipCreateOrConnectWithoutTeamInput = {
  where: Prisma.MembershipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutTeamInput,
    Prisma.MembershipUncheckedCreateWithoutTeamInput
  >;
};

export type MembershipCreateManyTeamInputEnvelope = {
  data: Prisma.MembershipCreateManyTeamInput | Prisma.MembershipCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type MembershipUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.MembershipWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MembershipUpdateWithoutTeamInput,
    Prisma.MembershipUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutTeamInput,
    Prisma.MembershipUncheckedCreateWithoutTeamInput
  >;
};

export type MembershipUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.MembershipWhereUniqueInput;
  data: Prisma.XOR<Prisma.MembershipUpdateWithoutTeamInput, Prisma.MembershipUncheckedUpdateWithoutTeamInput>;
};

export type MembershipUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.MembershipScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MembershipUpdateManyMutationInput,
    Prisma.MembershipUncheckedUpdateManyWithoutTeamInput
  >;
};

export type MembershipCreateWithoutAttributeToUserInput = {
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  customRole?: Prisma.RoleCreateNestedOneWithoutMembershipsInput;
  team: Prisma.TeamCreateNestedOneWithoutMembersInput;
  user: Prisma.UserCreateNestedOneWithoutTeamsInput;
  Host?: Prisma.HostCreateNestedManyWithoutMemberInput;
};

export type MembershipUncheckedCreateWithoutAttributeToUserInput = {
  id?: number;
  teamId: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutMemberInput;
};

export type MembershipCreateOrConnectWithoutAttributeToUserInput = {
  where: Prisma.MembershipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutAttributeToUserInput,
    Prisma.MembershipUncheckedCreateWithoutAttributeToUserInput
  >;
};

export type MembershipUpsertWithoutAttributeToUserInput = {
  update: Prisma.XOR<
    Prisma.MembershipUpdateWithoutAttributeToUserInput,
    Prisma.MembershipUncheckedUpdateWithoutAttributeToUserInput
  >;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutAttributeToUserInput,
    Prisma.MembershipUncheckedCreateWithoutAttributeToUserInput
  >;
  where?: Prisma.MembershipWhereInput;
};

export type MembershipUpdateToOneWithWhereWithoutAttributeToUserInput = {
  where?: Prisma.MembershipWhereInput;
  data: Prisma.XOR<
    Prisma.MembershipUpdateWithoutAttributeToUserInput,
    Prisma.MembershipUncheckedUpdateWithoutAttributeToUserInput
  >;
};

export type MembershipUpdateWithoutAttributeToUserInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  customRole?: Prisma.RoleUpdateOneWithoutMembershipsNestedInput;
  team?: Prisma.TeamUpdateOneRequiredWithoutMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
  Host?: Prisma.HostUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateWithoutAttributeToUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  Host?: Prisma.HostUncheckedUpdateManyWithoutMemberNestedInput;
};

export type MembershipCreateWithoutCustomRoleInput = {
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  team: Prisma.TeamCreateNestedOneWithoutMembersInput;
  user: Prisma.UserCreateNestedOneWithoutTeamsInput;
  AttributeToUser?: Prisma.AttributeToUserCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostCreateNestedManyWithoutMemberInput;
};

export type MembershipUncheckedCreateWithoutCustomRoleInput = {
  id?: number;
  teamId: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutMemberInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutMemberInput;
};

export type MembershipCreateOrConnectWithoutCustomRoleInput = {
  where: Prisma.MembershipWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutCustomRoleInput,
    Prisma.MembershipUncheckedCreateWithoutCustomRoleInput
  >;
};

export type MembershipCreateManyCustomRoleInputEnvelope = {
  data: Prisma.MembershipCreateManyCustomRoleInput | Prisma.MembershipCreateManyCustomRoleInput[];
  skipDuplicates?: boolean;
};

export type MembershipUpsertWithWhereUniqueWithoutCustomRoleInput = {
  where: Prisma.MembershipWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MembershipUpdateWithoutCustomRoleInput,
    Prisma.MembershipUncheckedUpdateWithoutCustomRoleInput
  >;
  create: Prisma.XOR<
    Prisma.MembershipCreateWithoutCustomRoleInput,
    Prisma.MembershipUncheckedCreateWithoutCustomRoleInput
  >;
};

export type MembershipUpdateWithWhereUniqueWithoutCustomRoleInput = {
  where: Prisma.MembershipWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MembershipUpdateWithoutCustomRoleInput,
    Prisma.MembershipUncheckedUpdateWithoutCustomRoleInput
  >;
};

export type MembershipUpdateManyWithWhereWithoutCustomRoleInput = {
  where: Prisma.MembershipScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MembershipUpdateManyMutationInput,
    Prisma.MembershipUncheckedUpdateManyWithoutCustomRoleInput
  >;
};

export type MembershipCreateManyUserInput = {
  id?: number;
  teamId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
};

export type MembershipUpdateWithoutUserInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  customRole?: Prisma.RoleUpdateOneWithoutMembershipsNestedInput;
  team?: Prisma.TeamUpdateOneRequiredWithoutMembersNestedInput;
  AttributeToUser?: Prisma.AttributeToUserUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type MembershipCreateManyTeamInput = {
  id?: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  customRoleId?: string | null;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
};

export type MembershipUpdateWithoutTeamInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  customRole?: Prisma.RoleUpdateOneWithoutMembershipsNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
  AttributeToUser?: Prisma.AttributeToUserUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  customRoleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type MembershipCreateManyCustomRoleInput = {
  id?: number;
  teamId: number;
  userId: number;
  accepted?: boolean;
  role: $Enums.MembershipRole;
  disableImpersonation?: boolean;
  createdAt?: Date | string | null;
  updatedAt?: Date | string | null;
};

export type MembershipUpdateWithoutCustomRoleInput = {
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  team?: Prisma.TeamUpdateOneRequiredWithoutMembersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutTeamsNestedInput;
  AttributeToUser?: Prisma.AttributeToUserUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateWithoutCustomRoleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  AttributeToUser?: Prisma.AttributeToUserUncheckedUpdateManyWithoutMemberNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutMemberNestedInput;
};

export type MembershipUncheckedUpdateManyWithoutCustomRoleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.EnumMembershipRoleFieldUpdateOperationsInput | $Enums.MembershipRole;
  disableImpersonation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

/**
 * Count Type MembershipCountOutputType
 */

export type MembershipCountOutputType = {
  AttributeToUser: number;
  Host: number;
};

export type MembershipCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  AttributeToUser?: boolean | MembershipCountOutputTypeCountAttributeToUserArgs;
  Host?: boolean | MembershipCountOutputTypeCountHostArgs;
};

/**
 * MembershipCountOutputType without action
 */
export type MembershipCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the MembershipCountOutputType
   */
  select?: Prisma.MembershipCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * MembershipCountOutputType without action
 */
export type MembershipCountOutputTypeCountAttributeToUserArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AttributeToUserWhereInput;
};

/**
 * MembershipCountOutputType without action
 */
export type MembershipCountOutputTypeCountHostArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.HostWhereInput;
};

export type MembershipSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    accepted?: boolean;
    role?: boolean;
    customRoleId?: boolean;
    disableImpersonation?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    customRole?: boolean | Prisma.Membership$customRoleArgs<ExtArgs>;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    AttributeToUser?: boolean | Prisma.Membership$AttributeToUserArgs<ExtArgs>;
    Host?: boolean | Prisma.Membership$HostArgs<ExtArgs>;
    _count?: boolean | Prisma.MembershipCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["membership"]
>;

export type MembershipSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    accepted?: boolean;
    role?: boolean;
    customRoleId?: boolean;
    disableImpersonation?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    customRole?: boolean | Prisma.Membership$customRoleArgs<ExtArgs>;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["membership"]
>;

export type MembershipSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    accepted?: boolean;
    role?: boolean;
    customRoleId?: boolean;
    disableImpersonation?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    customRole?: boolean | Prisma.Membership$customRoleArgs<ExtArgs>;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["membership"]
>;

export type MembershipSelectScalar = {
  id?: boolean;
  teamId?: boolean;
  userId?: boolean;
  accepted?: boolean;
  role?: boolean;
  customRoleId?: boolean;
  disableImpersonation?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type MembershipOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "teamId"
  | "userId"
  | "accepted"
  | "role"
  | "customRoleId"
  | "disableImpersonation"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["membership"]
>;
export type MembershipInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  customRole?: boolean | Prisma.Membership$customRoleArgs<ExtArgs>;
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  AttributeToUser?: boolean | Prisma.Membership$AttributeToUserArgs<ExtArgs>;
  Host?: boolean | Prisma.Membership$HostArgs<ExtArgs>;
  _count?: boolean | Prisma.MembershipCountOutputTypeDefaultArgs<ExtArgs>;
};
export type MembershipIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  customRole?: boolean | Prisma.Membership$customRoleArgs<ExtArgs>;
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type MembershipIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  customRole?: boolean | Prisma.Membership$customRoleArgs<ExtArgs>;
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $MembershipPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Membership";
  objects: {
    customRole: Prisma.$RolePayload<ExtArgs> | null;
    team: Prisma.$TeamPayload<ExtArgs>;
    user: Prisma.$UserPayload<ExtArgs>;
    AttributeToUser: Prisma.$AttributeToUserPayload<ExtArgs>[];
    Host: Prisma.$HostPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      teamId: number;
      userId: number;
      accepted: boolean;
      role: $Enums.MembershipRole;
      customRoleId: string | null;
      disableImpersonation: boolean;
      createdAt: Date | null;
      updatedAt: Date | null;
    },
    ExtArgs["result"]["membership"]
  >;
  composites: {};
};

export type MembershipGetPayload<S extends boolean | null | undefined | MembershipDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MembershipPayload, S>;

export type MembershipCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<MembershipFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: MembershipCountAggregateInputType | true;
};

export interface MembershipDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Membership"]; meta: { name: "Membership" } };
  /**
   * Find zero or one Membership that matches the filter.
   * @param {MembershipFindUniqueArgs} args - Arguments to find a Membership
   * @example
   * // Get one Membership
   * const membership = await prisma.membership.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MembershipFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MembershipFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<
      Prisma.$MembershipPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Membership that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MembershipFindUniqueOrThrowArgs} args - Arguments to find a Membership
   * @example
   * // Get one Membership
   * const membership = await prisma.membership.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MembershipFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MembershipFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<
      Prisma.$MembershipPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Membership that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipFindFirstArgs} args - Arguments to find a Membership
   * @example
   * // Get one Membership
   * const membership = await prisma.membership.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MembershipFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MembershipFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<
      Prisma.$MembershipPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Membership that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipFindFirstOrThrowArgs} args - Arguments to find a Membership
   * @example
   * // Get one Membership
   * const membership = await prisma.membership.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MembershipFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MembershipFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<
      Prisma.$MembershipPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Memberships that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Memberships
   * const memberships = await prisma.membership.findMany()
   *
   * // Get first 10 Memberships
   * const memberships = await prisma.membership.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const membershipWithIdOnly = await prisma.membership.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MembershipFindManyArgs>(
    args?: Prisma.SelectSubset<T, MembershipFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Membership.
   * @param {MembershipCreateArgs} args - Arguments to create a Membership.
   * @example
   * // Create one Membership
   * const Membership = await prisma.membership.create({
   *   data: {
   *     // ... data to create a Membership
   *   }
   * })
   *
   */
  create<T extends MembershipCreateArgs>(
    args: Prisma.SelectSubset<T, MembershipCreateArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Memberships.
   * @param {MembershipCreateManyArgs} args - Arguments to create many Memberships.
   * @example
   * // Create many Memberships
   * const membership = await prisma.membership.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MembershipCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MembershipCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Memberships and returns the data saved in the database.
   * @param {MembershipCreateManyAndReturnArgs} args - Arguments to create many Memberships.
   * @example
   * // Create many Memberships
   * const membership = await prisma.membership.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Memberships and only return the `id`
   * const membershipWithIdOnly = await prisma.membership.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MembershipCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MembershipCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MembershipPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Membership.
   * @param {MembershipDeleteArgs} args - Arguments to delete one Membership.
   * @example
   * // Delete one Membership
   * const Membership = await prisma.membership.delete({
   *   where: {
   *     // ... filter to delete one Membership
   *   }
   * })
   *
   */
  delete<T extends MembershipDeleteArgs>(
    args: Prisma.SelectSubset<T, MembershipDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Membership.
   * @param {MembershipUpdateArgs} args - Arguments to update one Membership.
   * @example
   * // Update one Membership
   * const membership = await prisma.membership.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MembershipUpdateArgs>(
    args: Prisma.SelectSubset<T, MembershipUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Memberships.
   * @param {MembershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
   * @example
   * // Delete a few Memberships
   * const { count } = await prisma.membership.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MembershipDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MembershipDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Memberships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Memberships
   * const membership = await prisma.membership.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MembershipUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MembershipUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Memberships and returns the data updated in the database.
   * @param {MembershipUpdateManyAndReturnArgs} args - Arguments to update many Memberships.
   * @example
   * // Update many Memberships
   * const membership = await prisma.membership.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Memberships and only return the `id`
   * const membershipWithIdOnly = await prisma.membership.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MembershipUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MembershipUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MembershipPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Membership.
   * @param {MembershipUpsertArgs} args - Arguments to update or create a Membership.
   * @example
   * // Update or create a Membership
   * const membership = await prisma.membership.upsert({
   *   create: {
   *     // ... data to create a Membership
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Membership we want to update
   *   }
   * })
   */
  upsert<T extends MembershipUpsertArgs>(
    args: Prisma.SelectSubset<T, MembershipUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__MembershipClient<
    runtime.Types.Result.GetResult<Prisma.$MembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Memberships.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipCountArgs} args - Arguments to filter Memberships to count.
   * @example
   * // Count the number of Memberships
   * const count = await prisma.membership.count({
   *   where: {
   *     // ... the filter for the Memberships we want to count
   *   }
   * })
   **/
  count<T extends MembershipCountArgs>(
    args?: Prisma.Subset<T, MembershipCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], MembershipCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Membership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MembershipAggregateArgs>(
    args: Prisma.Subset<T, MembershipAggregateArgs>
  ): Prisma.PrismaPromise<GetMembershipAggregateType<T>>;

  /**
   * Group by Membership.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MembershipGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MembershipGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MembershipGroupByArgs["orderBy"] }
      : { orderBy?: MembershipGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Membership model
   */
  readonly fields: MembershipFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Membership.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MembershipClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  customRole<T extends Prisma.Membership$customRoleArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Membership$customRoleArgs<ExtArgs>>
  ): Prisma.Prisma__RoleClient<
    runtime.Types.Result.GetResult<
      Prisma.$RolePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  AttributeToUser<T extends Prisma.Membership$AttributeToUserArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Membership$AttributeToUserArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AttributeToUserPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  Host<T extends Prisma.Membership$HostArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Membership$HostArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$HostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Membership model
 */
export interface MembershipFieldRefs {
  readonly id: Prisma.FieldRef<"Membership", "Int">;
  readonly teamId: Prisma.FieldRef<"Membership", "Int">;
  readonly userId: Prisma.FieldRef<"Membership", "Int">;
  readonly accepted: Prisma.FieldRef<"Membership", "Boolean">;
  readonly role: Prisma.FieldRef<"Membership", "MembershipRole">;
  readonly customRoleId: Prisma.FieldRef<"Membership", "String">;
  readonly disableImpersonation: Prisma.FieldRef<"Membership", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"Membership", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Membership", "DateTime">;
}

// Custom InputTypes
/**
 * Membership findUnique
 */
export type MembershipFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * Filter, which Membership to fetch.
   */
  where: Prisma.MembershipWhereUniqueInput;
};

/**
 * Membership findUniqueOrThrow
 */
export type MembershipFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * Filter, which Membership to fetch.
   */
  where: Prisma.MembershipWhereUniqueInput;
};

/**
 * Membership findFirst
 */
export type MembershipFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * Filter, which Membership to fetch.
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Memberships to fetch.
   */
  orderBy?: Prisma.MembershipOrderByWithRelationInput | Prisma.MembershipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Memberships.
   */
  cursor?: Prisma.MembershipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Memberships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Memberships.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Memberships.
   */
  distinct?: Prisma.MembershipScalarFieldEnum | Prisma.MembershipScalarFieldEnum[];
};

/**
 * Membership findFirstOrThrow
 */
export type MembershipFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * Filter, which Membership to fetch.
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Memberships to fetch.
   */
  orderBy?: Prisma.MembershipOrderByWithRelationInput | Prisma.MembershipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Memberships.
   */
  cursor?: Prisma.MembershipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Memberships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Memberships.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Memberships.
   */
  distinct?: Prisma.MembershipScalarFieldEnum | Prisma.MembershipScalarFieldEnum[];
};

/**
 * Membership findMany
 */
export type MembershipFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * Filter, which Memberships to fetch.
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Memberships to fetch.
   */
  orderBy?: Prisma.MembershipOrderByWithRelationInput | Prisma.MembershipOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Memberships.
   */
  cursor?: Prisma.MembershipWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Memberships from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Memberships.
   */
  skip?: number;
  distinct?: Prisma.MembershipScalarFieldEnum | Prisma.MembershipScalarFieldEnum[];
};

/**
 * Membership create
 */
export type MembershipCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * The data needed to create a Membership.
   */
  data: Prisma.XOR<Prisma.MembershipCreateInput, Prisma.MembershipUncheckedCreateInput>;
};

/**
 * Membership createMany
 */
export type MembershipCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Memberships.
   */
  data: Prisma.MembershipCreateManyInput | Prisma.MembershipCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Membership createManyAndReturn
 */
export type MembershipCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * The data used to create many Memberships.
   */
  data: Prisma.MembershipCreateManyInput | Prisma.MembershipCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Membership update
 */
export type MembershipUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * The data needed to update a Membership.
   */
  data: Prisma.XOR<Prisma.MembershipUpdateInput, Prisma.MembershipUncheckedUpdateInput>;
  /**
   * Choose, which Membership to update.
   */
  where: Prisma.MembershipWhereUniqueInput;
};

/**
 * Membership updateMany
 */
export type MembershipUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Memberships.
   */
  data: Prisma.XOR<Prisma.MembershipUpdateManyMutationInput, Prisma.MembershipUncheckedUpdateManyInput>;
  /**
   * Filter which Memberships to update
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * Limit how many Memberships to update.
   */
  limit?: number;
};

/**
 * Membership updateManyAndReturn
 */
export type MembershipUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * The data used to update Memberships.
   */
  data: Prisma.XOR<Prisma.MembershipUpdateManyMutationInput, Prisma.MembershipUncheckedUpdateManyInput>;
  /**
   * Filter which Memberships to update
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * Limit how many Memberships to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Membership upsert
 */
export type MembershipUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * The filter to search for the Membership to update in case it exists.
   */
  where: Prisma.MembershipWhereUniqueInput;
  /**
   * In case the Membership found by the `where` argument doesn't exist, create a new Membership with this data.
   */
  create: Prisma.XOR<Prisma.MembershipCreateInput, Prisma.MembershipUncheckedCreateInput>;
  /**
   * In case the Membership was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MembershipUpdateInput, Prisma.MembershipUncheckedUpdateInput>;
};

/**
 * Membership delete
 */
export type MembershipDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
  /**
   * Filter which Membership to delete.
   */
  where: Prisma.MembershipWhereUniqueInput;
};

/**
 * Membership deleteMany
 */
export type MembershipDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Memberships to delete
   */
  where?: Prisma.MembershipWhereInput;
  /**
   * Limit how many Memberships to delete.
   */
  limit?: number;
};

/**
 * Membership.customRole
 */
export type Membership$customRoleArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Role
   */
  select?: Prisma.RoleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Role
   */
  omit?: Prisma.RoleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoleInclude<ExtArgs> | null;
  where?: Prisma.RoleWhereInput;
};

/**
 * Membership.AttributeToUser
 */
export type Membership$AttributeToUserArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AttributeToUser
   */
  select?: Prisma.AttributeToUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AttributeToUser
   */
  omit?: Prisma.AttributeToUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeToUserInclude<ExtArgs> | null;
  where?: Prisma.AttributeToUserWhereInput;
  orderBy?: Prisma.AttributeToUserOrderByWithRelationInput | Prisma.AttributeToUserOrderByWithRelationInput[];
  cursor?: Prisma.AttributeToUserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.AttributeToUserScalarFieldEnum | Prisma.AttributeToUserScalarFieldEnum[];
};

/**
 * Membership.Host
 */
export type Membership$HostArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Host
   */
  select?: Prisma.HostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Host
   */
  omit?: Prisma.HostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostInclude<ExtArgs> | null;
  where?: Prisma.HostWhereInput;
  orderBy?: Prisma.HostOrderByWithRelationInput | Prisma.HostOrderByWithRelationInput[];
  cursor?: Prisma.HostWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.HostScalarFieldEnum | Prisma.HostScalarFieldEnum[];
};

/**
 * Membership without action
 */
export type MembershipDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Membership
   */
  select?: Prisma.MembershipSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Membership
   */
  omit?: Prisma.MembershipOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MembershipInclude<ExtArgs> | null;
};
