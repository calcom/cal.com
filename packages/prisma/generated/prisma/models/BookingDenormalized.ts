/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `BookingDenormalized` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BookingDenormalized
 *
 */
export type BookingDenormalizedModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BookingDenormalizedPayload>;

export type AggregateBookingDenormalized = {
  _count: BookingDenormalizedCountAggregateOutputType | null;
  _avg: BookingDenormalizedAvgAggregateOutputType | null;
  _sum: BookingDenormalizedSumAggregateOutputType | null;
  _min: BookingDenormalizedMinAggregateOutputType | null;
  _max: BookingDenormalizedMaxAggregateOutputType | null;
};

export type BookingDenormalizedAvgAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  rating: number | null;
};

export type BookingDenormalizedSumAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  rating: number | null;
};

export type BookingDenormalizedMinAggregateOutputType = {
  id: number | null;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  userEmail: string | null;
  userName: string | null;
  userUsername: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean | null;
};

export type BookingDenormalizedMaxAggregateOutputType = {
  id: number | null;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  userEmail: string | null;
  userName: string | null;
  userUsername: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean | null;
};

export type BookingDenormalizedCountAggregateOutputType = {
  id: number;
  uid: number;
  eventTypeId: number;
  title: number;
  description: number;
  startTime: number;
  endTime: number;
  createdAt: number;
  updatedAt: number;
  location: number;
  paid: number;
  status: number;
  rescheduled: number;
  userId: number;
  teamId: number;
  eventLength: number;
  eventParentId: number;
  userEmail: number;
  userName: number;
  userUsername: number;
  ratingFeedback: number;
  rating: number;
  noShowHost: number;
  isTeamBooking: number;
  _all: number;
};

export type BookingDenormalizedAvgAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  rating?: true;
};

export type BookingDenormalizedSumAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  rating?: true;
};

export type BookingDenormalizedMinAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  updatedAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  userEmail?: true;
  userName?: true;
  userUsername?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
};

export type BookingDenormalizedMaxAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  updatedAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  userEmail?: true;
  userName?: true;
  userUsername?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
};

export type BookingDenormalizedCountAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  updatedAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  userEmail?: true;
  userName?: true;
  userUsername?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
  _all?: true;
};

export type BookingDenormalizedAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingDenormalized to aggregate.
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingDenormalizedOrderByWithRelationInput
    | Prisma.BookingDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookingDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingDenormalizeds.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BookingDenormalizeds
   **/
  _count?: true | BookingDenormalizedCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BookingDenormalizedAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BookingDenormalizedSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookingDenormalizedMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookingDenormalizedMaxAggregateInputType;
};

export type GetBookingDenormalizedAggregateType<T extends BookingDenormalizedAggregateArgs> = {
  [P in keyof T & keyof AggregateBookingDenormalized]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookingDenormalized[P]>
    : Prisma.GetScalarType<T[P], AggregateBookingDenormalized[P]>;
};

export type BookingDenormalizedGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.BookingDenormalizedWhereInput;
  orderBy?:
    | Prisma.BookingDenormalizedOrderByWithAggregationInput
    | Prisma.BookingDenormalizedOrderByWithAggregationInput[];
  by: Prisma.BookingDenormalizedScalarFieldEnum[] | Prisma.BookingDenormalizedScalarFieldEnum;
  having?: Prisma.BookingDenormalizedScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookingDenormalizedCountAggregateInputType | true;
  _avg?: BookingDenormalizedAvgAggregateInputType;
  _sum?: BookingDenormalizedSumAggregateInputType;
  _min?: BookingDenormalizedMinAggregateInputType;
  _max?: BookingDenormalizedMaxAggregateInputType;
};

export type BookingDenormalizedGroupByOutputType = {
  id: number;
  uid: string;
  eventTypeId: number | null;
  title: string;
  description: string | null;
  startTime: Date;
  endTime: Date;
  createdAt: Date;
  updatedAt: Date | null;
  location: string | null;
  paid: boolean;
  status: $Enums.BookingStatus;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  userEmail: string | null;
  userName: string | null;
  userUsername: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean;
  _count: BookingDenormalizedCountAggregateOutputType | null;
  _avg: BookingDenormalizedAvgAggregateOutputType | null;
  _sum: BookingDenormalizedSumAggregateOutputType | null;
  _min: BookingDenormalizedMinAggregateOutputType | null;
  _max: BookingDenormalizedMaxAggregateOutputType | null;
};

type GetBookingDenormalizedGroupByPayload<T extends BookingDenormalizedGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingDenormalizedGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof BookingDenormalizedGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BookingDenormalizedGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BookingDenormalizedGroupByOutputType[P]>;
    }
  >
>;

export type BookingDenormalizedWhereInput = {
  AND?: Prisma.BookingDenormalizedWhereInput | Prisma.BookingDenormalizedWhereInput[];
  OR?: Prisma.BookingDenormalizedWhereInput[];
  NOT?: Prisma.BookingDenormalizedWhereInput | Prisma.BookingDenormalizedWhereInput[];
  id?: Prisma.IntFilter<"BookingDenormalized"> | number;
  uid?: Prisma.StringFilter<"BookingDenormalized"> | string;
  eventTypeId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
  title?: Prisma.StringFilter<"BookingDenormalized"> | string;
  description?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
  startTime?: Prisma.DateTimeFilter<"BookingDenormalized"> | Date | string;
  endTime?: Prisma.DateTimeFilter<"BookingDenormalized"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"BookingDenormalized"> | Date | string;
  updatedAt?: Prisma.DateTimeNullableFilter<"BookingDenormalized"> | Date | string | null;
  location?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
  paid?: Prisma.BoolFilter<"BookingDenormalized"> | boolean;
  status?: Prisma.EnumBookingStatusFilter<"BookingDenormalized"> | $Enums.BookingStatus;
  rescheduled?: Prisma.BoolNullableFilter<"BookingDenormalized"> | boolean | null;
  userId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
  teamId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
  eventLength?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
  eventParentId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
  userEmail?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
  userName?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
  userUsername?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
  ratingFeedback?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
  rating?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
  noShowHost?: Prisma.BoolNullableFilter<"BookingDenormalized"> | boolean | null;
  isTeamBooking?: Prisma.BoolFilter<"BookingDenormalized"> | boolean;
};

export type BookingDenormalizedOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventLength?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventParentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  userName?: Prisma.SortOrderInput | Prisma.SortOrder;
  userUsername?: Prisma.SortOrderInput | Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrderInput | Prisma.SortOrder;
  rating?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShowHost?: Prisma.SortOrderInput | Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingDenormalizedWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.BookingDenormalizedWhereInput | Prisma.BookingDenormalizedWhereInput[];
    OR?: Prisma.BookingDenormalizedWhereInput[];
    NOT?: Prisma.BookingDenormalizedWhereInput | Prisma.BookingDenormalizedWhereInput[];
    uid?: Prisma.StringFilter<"BookingDenormalized"> | string;
    eventTypeId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
    title?: Prisma.StringFilter<"BookingDenormalized"> | string;
    description?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
    startTime?: Prisma.DateTimeFilter<"BookingDenormalized"> | Date | string;
    endTime?: Prisma.DateTimeFilter<"BookingDenormalized"> | Date | string;
    createdAt?: Prisma.DateTimeFilter<"BookingDenormalized"> | Date | string;
    updatedAt?: Prisma.DateTimeNullableFilter<"BookingDenormalized"> | Date | string | null;
    location?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
    paid?: Prisma.BoolFilter<"BookingDenormalized"> | boolean;
    status?: Prisma.EnumBookingStatusFilter<"BookingDenormalized"> | $Enums.BookingStatus;
    rescheduled?: Prisma.BoolNullableFilter<"BookingDenormalized"> | boolean | null;
    userId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
    teamId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
    eventLength?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
    eventParentId?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
    userEmail?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
    userName?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
    userUsername?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
    ratingFeedback?: Prisma.StringNullableFilter<"BookingDenormalized"> | string | null;
    rating?: Prisma.IntNullableFilter<"BookingDenormalized"> | number | null;
    noShowHost?: Prisma.BoolNullableFilter<"BookingDenormalized"> | boolean | null;
    isTeamBooking?: Prisma.BoolFilter<"BookingDenormalized"> | boolean;
  },
  "id" | "id"
>;

export type BookingDenormalizedOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventLength?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventParentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  userName?: Prisma.SortOrderInput | Prisma.SortOrder;
  userUsername?: Prisma.SortOrderInput | Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrderInput | Prisma.SortOrder;
  rating?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShowHost?: Prisma.SortOrderInput | Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  _count?: Prisma.BookingDenormalizedCountOrderByAggregateInput;
  _avg?: Prisma.BookingDenormalizedAvgOrderByAggregateInput;
  _max?: Prisma.BookingDenormalizedMaxOrderByAggregateInput;
  _min?: Prisma.BookingDenormalizedMinOrderByAggregateInput;
  _sum?: Prisma.BookingDenormalizedSumOrderByAggregateInput;
};

export type BookingDenormalizedScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BookingDenormalizedScalarWhereWithAggregatesInput
    | Prisma.BookingDenormalizedScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookingDenormalizedScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BookingDenormalizedScalarWhereWithAggregatesInput
    | Prisma.BookingDenormalizedScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"BookingDenormalized"> | number;
  uid?: Prisma.StringWithAggregatesFilter<"BookingDenormalized"> | string;
  eventTypeId?: Prisma.IntNullableWithAggregatesFilter<"BookingDenormalized"> | number | null;
  title?: Prisma.StringWithAggregatesFilter<"BookingDenormalized"> | string;
  description?: Prisma.StringNullableWithAggregatesFilter<"BookingDenormalized"> | string | null;
  startTime?: Prisma.DateTimeWithAggregatesFilter<"BookingDenormalized"> | Date | string;
  endTime?: Prisma.DateTimeWithAggregatesFilter<"BookingDenormalized"> | Date | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BookingDenormalized"> | Date | string;
  updatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"BookingDenormalized"> | Date | string | null;
  location?: Prisma.StringNullableWithAggregatesFilter<"BookingDenormalized"> | string | null;
  paid?: Prisma.BoolWithAggregatesFilter<"BookingDenormalized"> | boolean;
  status?: Prisma.EnumBookingStatusWithAggregatesFilter<"BookingDenormalized"> | $Enums.BookingStatus;
  rescheduled?: Prisma.BoolNullableWithAggregatesFilter<"BookingDenormalized"> | boolean | null;
  userId?: Prisma.IntNullableWithAggregatesFilter<"BookingDenormalized"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"BookingDenormalized"> | number | null;
  eventLength?: Prisma.IntNullableWithAggregatesFilter<"BookingDenormalized"> | number | null;
  eventParentId?: Prisma.IntNullableWithAggregatesFilter<"BookingDenormalized"> | number | null;
  userEmail?: Prisma.StringNullableWithAggregatesFilter<"BookingDenormalized"> | string | null;
  userName?: Prisma.StringNullableWithAggregatesFilter<"BookingDenormalized"> | string | null;
  userUsername?: Prisma.StringNullableWithAggregatesFilter<"BookingDenormalized"> | string | null;
  ratingFeedback?: Prisma.StringNullableWithAggregatesFilter<"BookingDenormalized"> | string | null;
  rating?: Prisma.IntNullableWithAggregatesFilter<"BookingDenormalized"> | number | null;
  noShowHost?: Prisma.BoolNullableWithAggregatesFilter<"BookingDenormalized"> | boolean | null;
  isTeamBooking?: Prisma.BoolWithAggregatesFilter<"BookingDenormalized"> | boolean;
};

export type BookingDenormalizedCreateInput = {
  id: number;
  uid: string;
  eventTypeId?: number | null;
  title: string;
  description?: string | null;
  startTime: Date | string;
  endTime: Date | string;
  createdAt: Date | string;
  updatedAt?: Date | string | null;
  location?: string | null;
  paid: boolean;
  status: $Enums.BookingStatus;
  rescheduled?: boolean | null;
  userId?: number | null;
  teamId?: number | null;
  eventLength?: number | null;
  eventParentId?: number | null;
  userEmail?: string | null;
  userName?: string | null;
  userUsername?: string | null;
  ratingFeedback?: string | null;
  rating?: number | null;
  noShowHost?: boolean | null;
  isTeamBooking: boolean;
};

export type BookingDenormalizedUncheckedCreateInput = {
  id: number;
  uid: string;
  eventTypeId?: number | null;
  title: string;
  description?: string | null;
  startTime: Date | string;
  endTime: Date | string;
  createdAt: Date | string;
  updatedAt?: Date | string | null;
  location?: string | null;
  paid: boolean;
  status: $Enums.BookingStatus;
  rescheduled?: boolean | null;
  userId?: number | null;
  teamId?: number | null;
  eventLength?: number | null;
  eventParentId?: number | null;
  userEmail?: string | null;
  userName?: string | null;
  userUsername?: string | null;
  ratingFeedback?: string | null;
  rating?: number | null;
  noShowHost?: boolean | null;
  isTeamBooking: boolean;
};

export type BookingDenormalizedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  paid?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus;
  rescheduled?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventParentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userUsername?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  ratingFeedback?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rating?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShowHost?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  isTeamBooking?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type BookingDenormalizedUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  paid?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus;
  rescheduled?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventParentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userUsername?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  ratingFeedback?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rating?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShowHost?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  isTeamBooking?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type BookingDenormalizedCreateManyInput = {
  id: number;
  uid: string;
  eventTypeId?: number | null;
  title: string;
  description?: string | null;
  startTime: Date | string;
  endTime: Date | string;
  createdAt: Date | string;
  updatedAt?: Date | string | null;
  location?: string | null;
  paid: boolean;
  status: $Enums.BookingStatus;
  rescheduled?: boolean | null;
  userId?: number | null;
  teamId?: number | null;
  eventLength?: number | null;
  eventParentId?: number | null;
  userEmail?: string | null;
  userName?: string | null;
  userUsername?: string | null;
  ratingFeedback?: string | null;
  rating?: number | null;
  noShowHost?: boolean | null;
  isTeamBooking: boolean;
};

export type BookingDenormalizedUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  paid?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus;
  rescheduled?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventParentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userUsername?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  ratingFeedback?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rating?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShowHost?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  isTeamBooking?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type BookingDenormalizedUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  paid?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus;
  rescheduled?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventParentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userUsername?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  ratingFeedback?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rating?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShowHost?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  isTeamBooking?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type BookingDenormalizedCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  userName?: Prisma.SortOrder;
  userUsername?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingDenormalizedAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
};

export type BookingDenormalizedMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  userName?: Prisma.SortOrder;
  userUsername?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingDenormalizedMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  userName?: Prisma.SortOrder;
  userUsername?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingDenormalizedSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
};

export type BookingDenormalizedSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    eventTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    location?: boolean;
    paid?: boolean;
    status?: boolean;
    rescheduled?: boolean;
    userId?: boolean;
    teamId?: boolean;
    eventLength?: boolean;
    eventParentId?: boolean;
    userEmail?: boolean;
    userName?: boolean;
    userUsername?: boolean;
    ratingFeedback?: boolean;
    rating?: boolean;
    noShowHost?: boolean;
    isTeamBooking?: boolean;
  },
  ExtArgs["result"]["bookingDenormalized"]
>;

export type BookingDenormalizedSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    eventTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    location?: boolean;
    paid?: boolean;
    status?: boolean;
    rescheduled?: boolean;
    userId?: boolean;
    teamId?: boolean;
    eventLength?: boolean;
    eventParentId?: boolean;
    userEmail?: boolean;
    userName?: boolean;
    userUsername?: boolean;
    ratingFeedback?: boolean;
    rating?: boolean;
    noShowHost?: boolean;
    isTeamBooking?: boolean;
  },
  ExtArgs["result"]["bookingDenormalized"]
>;

export type BookingDenormalizedSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    eventTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    location?: boolean;
    paid?: boolean;
    status?: boolean;
    rescheduled?: boolean;
    userId?: boolean;
    teamId?: boolean;
    eventLength?: boolean;
    eventParentId?: boolean;
    userEmail?: boolean;
    userName?: boolean;
    userUsername?: boolean;
    ratingFeedback?: boolean;
    rating?: boolean;
    noShowHost?: boolean;
    isTeamBooking?: boolean;
  },
  ExtArgs["result"]["bookingDenormalized"]
>;

export type BookingDenormalizedSelectScalar = {
  id?: boolean;
  uid?: boolean;
  eventTypeId?: boolean;
  title?: boolean;
  description?: boolean;
  startTime?: boolean;
  endTime?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  location?: boolean;
  paid?: boolean;
  status?: boolean;
  rescheduled?: boolean;
  userId?: boolean;
  teamId?: boolean;
  eventLength?: boolean;
  eventParentId?: boolean;
  userEmail?: boolean;
  userName?: boolean;
  userUsername?: boolean;
  ratingFeedback?: boolean;
  rating?: boolean;
  noShowHost?: boolean;
  isTeamBooking?: boolean;
};

export type BookingDenormalizedOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "uid"
  | "eventTypeId"
  | "title"
  | "description"
  | "startTime"
  | "endTime"
  | "createdAt"
  | "updatedAt"
  | "location"
  | "paid"
  | "status"
  | "rescheduled"
  | "userId"
  | "teamId"
  | "eventLength"
  | "eventParentId"
  | "userEmail"
  | "userName"
  | "userUsername"
  | "ratingFeedback"
  | "rating"
  | "noShowHost"
  | "isTeamBooking",
  ExtArgs["result"]["bookingDenormalized"]
>;

export type $BookingDenormalizedPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "BookingDenormalized";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      uid: string;
      eventTypeId: number | null;
      title: string;
      description: string | null;
      startTime: Date;
      endTime: Date;
      createdAt: Date;
      updatedAt: Date | null;
      location: string | null;
      paid: boolean;
      status: $Enums.BookingStatus;
      rescheduled: boolean | null;
      userId: number | null;
      teamId: number | null;
      eventLength: number | null;
      eventParentId: number | null;
      userEmail: string | null;
      userName: string | null;
      userUsername: string | null;
      ratingFeedback: string | null;
      rating: number | null;
      noShowHost: boolean | null;
      isTeamBooking: boolean;
    },
    ExtArgs["result"]["bookingDenormalized"]
  >;
  composites: {};
};

export type BookingDenormalizedGetPayload<
  S extends boolean | null | undefined | BookingDenormalizedDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$BookingDenormalizedPayload, S>;

export type BookingDenormalizedCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<BookingDenormalizedFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BookingDenormalizedCountAggregateInputType | true;
};

export interface BookingDenormalizedDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["BookingDenormalized"];
    meta: { name: "BookingDenormalized" };
  };
  /**
   * Find zero or one BookingDenormalized that matches the filter.
   * @param {BookingDenormalizedFindUniqueArgs} args - Arguments to find a BookingDenormalized
   * @example
   * // Get one BookingDenormalized
   * const bookingDenormalized = await prisma.bookingDenormalized.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingDenormalizedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BookingDenormalized that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingDenormalizedFindUniqueOrThrowArgs} args - Arguments to find a BookingDenormalized
   * @example
   * // Get one BookingDenormalized
   * const bookingDenormalized = await prisma.bookingDenormalized.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingDenormalizedFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingDenormalized that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedFindFirstArgs} args - Arguments to find a BookingDenormalized
   * @example
   * // Get one BookingDenormalized
   * const bookingDenormalized = await prisma.bookingDenormalized.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingDenormalizedFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookingDenormalizedFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingDenormalized that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedFindFirstOrThrowArgs} args - Arguments to find a BookingDenormalized
   * @example
   * // Get one BookingDenormalized
   * const bookingDenormalized = await prisma.bookingDenormalized.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingDenormalizedFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookingDenormalizedFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BookingDenormalizeds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookingDenormalizeds
   * const bookingDenormalizeds = await prisma.bookingDenormalized.findMany()
   *
   * // Get first 10 BookingDenormalizeds
   * const bookingDenormalizeds = await prisma.bookingDenormalized.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookingDenormalizedWithIdOnly = await prisma.bookingDenormalized.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookingDenormalizedFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookingDenormalizedFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a BookingDenormalized.
   * @param {BookingDenormalizedCreateArgs} args - Arguments to create a BookingDenormalized.
   * @example
   * // Create one BookingDenormalized
   * const BookingDenormalized = await prisma.bookingDenormalized.create({
   *   data: {
   *     // ... data to create a BookingDenormalized
   *   }
   * })
   *
   */
  create<T extends BookingDenormalizedCreateArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedCreateArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BookingDenormalizeds.
   * @param {BookingDenormalizedCreateManyArgs} args - Arguments to create many BookingDenormalizeds.
   * @example
   * // Create many BookingDenormalizeds
   * const bookingDenormalized = await prisma.bookingDenormalized.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BookingDenormalizedCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BookingDenormalizedCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BookingDenormalizeds and returns the data saved in the database.
   * @param {BookingDenormalizedCreateManyAndReturnArgs} args - Arguments to create many BookingDenormalizeds.
   * @example
   * // Create many BookingDenormalizeds
   * const bookingDenormalized = await prisma.bookingDenormalized.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BookingDenormalizeds and only return the `id`
   * const bookingDenormalizedWithIdOnly = await prisma.bookingDenormalized.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BookingDenormalizedCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BookingDenormalizedCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BookingDenormalized.
   * @param {BookingDenormalizedDeleteArgs} args - Arguments to delete one BookingDenormalized.
   * @example
   * // Delete one BookingDenormalized
   * const BookingDenormalized = await prisma.bookingDenormalized.delete({
   *   where: {
   *     // ... filter to delete one BookingDenormalized
   *   }
   * })
   *
   */
  delete<T extends BookingDenormalizedDeleteArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BookingDenormalized.
   * @param {BookingDenormalizedUpdateArgs} args - Arguments to update one BookingDenormalized.
   * @example
   * // Update one BookingDenormalized
   * const bookingDenormalized = await prisma.bookingDenormalized.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BookingDenormalizedUpdateArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BookingDenormalizeds.
   * @param {BookingDenormalizedDeleteManyArgs} args - Arguments to filter BookingDenormalizeds to delete.
   * @example
   * // Delete a few BookingDenormalizeds
   * const { count } = await prisma.bookingDenormalized.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BookingDenormalizedDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BookingDenormalizedDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookingDenormalizeds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BookingDenormalizeds
   * const bookingDenormalized = await prisma.bookingDenormalized.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BookingDenormalizedUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookingDenormalizeds and returns the data updated in the database.
   * @param {BookingDenormalizedUpdateManyAndReturnArgs} args - Arguments to update many BookingDenormalizeds.
   * @example
   * // Update many BookingDenormalizeds
   * const bookingDenormalized = await prisma.bookingDenormalized.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BookingDenormalizeds and only return the `id`
   * const bookingDenormalizedWithIdOnly = await prisma.bookingDenormalized.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BookingDenormalizedUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BookingDenormalized.
   * @param {BookingDenormalizedUpsertArgs} args - Arguments to update or create a BookingDenormalized.
   * @example
   * // Update or create a BookingDenormalized
   * const bookingDenormalized = await prisma.bookingDenormalized.upsert({
   *   create: {
   *     // ... data to create a BookingDenormalized
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BookingDenormalized we want to update
   *   }
   * })
   */
  upsert<T extends BookingDenormalizedUpsertArgs>(
    args: Prisma.SelectSubset<T, BookingDenormalizedUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__BookingDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingDenormalizedPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BookingDenormalizeds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedCountArgs} args - Arguments to filter BookingDenormalizeds to count.
   * @example
   * // Count the number of BookingDenormalizeds
   * const count = await prisma.bookingDenormalized.count({
   *   where: {
   *     // ... the filter for the BookingDenormalizeds we want to count
   *   }
   * })
   **/
  count<T extends BookingDenormalizedCountArgs>(
    args?: Prisma.Subset<T, BookingDenormalizedCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BookingDenormalizedCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BookingDenormalized.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookingDenormalizedAggregateArgs>(
    args: Prisma.Subset<T, BookingDenormalizedAggregateArgs>
  ): Prisma.PrismaPromise<GetBookingDenormalizedAggregateType<T>>;

  /**
   * Group by BookingDenormalized.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingDenormalizedGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookingDenormalizedGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingDenormalizedGroupByArgs["orderBy"] }
      : { orderBy?: BookingDenormalizedGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, BookingDenormalizedGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetBookingDenormalizedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BookingDenormalized model
   */
  readonly fields: BookingDenormalizedFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookingDenormalized.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingDenormalizedClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BookingDenormalized model
 */
export interface BookingDenormalizedFieldRefs {
  readonly id: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly uid: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly eventTypeId: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly title: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly description: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly startTime: Prisma.FieldRef<"BookingDenormalized", "DateTime">;
  readonly endTime: Prisma.FieldRef<"BookingDenormalized", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"BookingDenormalized", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"BookingDenormalized", "DateTime">;
  readonly location: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly paid: Prisma.FieldRef<"BookingDenormalized", "Boolean">;
  readonly status: Prisma.FieldRef<"BookingDenormalized", "BookingStatus">;
  readonly rescheduled: Prisma.FieldRef<"BookingDenormalized", "Boolean">;
  readonly userId: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly teamId: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly eventLength: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly eventParentId: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly userEmail: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly userName: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly userUsername: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly ratingFeedback: Prisma.FieldRef<"BookingDenormalized", "String">;
  readonly rating: Prisma.FieldRef<"BookingDenormalized", "Int">;
  readonly noShowHost: Prisma.FieldRef<"BookingDenormalized", "Boolean">;
  readonly isTeamBooking: Prisma.FieldRef<"BookingDenormalized", "Boolean">;
}

// Custom InputTypes
/**
 * BookingDenormalized findUnique
 */
export type BookingDenormalizedFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingDenormalized to fetch.
   */
  where: Prisma.BookingDenormalizedWhereUniqueInput;
};

/**
 * BookingDenormalized findUniqueOrThrow
 */
export type BookingDenormalizedFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingDenormalized to fetch.
   */
  where: Prisma.BookingDenormalizedWhereUniqueInput;
};

/**
 * BookingDenormalized findFirst
 */
export type BookingDenormalizedFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingDenormalized to fetch.
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingDenormalizedOrderByWithRelationInput
    | Prisma.BookingDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingDenormalizeds.
   */
  cursor?: Prisma.BookingDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingDenormalizeds.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingDenormalizeds.
   */
  distinct?: Prisma.BookingDenormalizedScalarFieldEnum | Prisma.BookingDenormalizedScalarFieldEnum[];
};

/**
 * BookingDenormalized findFirstOrThrow
 */
export type BookingDenormalizedFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingDenormalized to fetch.
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingDenormalizedOrderByWithRelationInput
    | Prisma.BookingDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingDenormalizeds.
   */
  cursor?: Prisma.BookingDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingDenormalizeds.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingDenormalizeds.
   */
  distinct?: Prisma.BookingDenormalizedScalarFieldEnum | Prisma.BookingDenormalizedScalarFieldEnum[];
};

/**
 * BookingDenormalized findMany
 */
export type BookingDenormalizedFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingDenormalizeds to fetch.
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingDenormalizedOrderByWithRelationInput
    | Prisma.BookingDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BookingDenormalizeds.
   */
  cursor?: Prisma.BookingDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingDenormalizeds.
   */
  skip?: number;
  distinct?: Prisma.BookingDenormalizedScalarFieldEnum | Prisma.BookingDenormalizedScalarFieldEnum[];
};

/**
 * BookingDenormalized create
 */
export type BookingDenormalizedCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * The data needed to create a BookingDenormalized.
   */
  data: Prisma.XOR<Prisma.BookingDenormalizedCreateInput, Prisma.BookingDenormalizedUncheckedCreateInput>;
};

/**
 * BookingDenormalized createMany
 */
export type BookingDenormalizedCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many BookingDenormalizeds.
   */
  data: Prisma.BookingDenormalizedCreateManyInput | Prisma.BookingDenormalizedCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BookingDenormalized createManyAndReturn
 */
export type BookingDenormalizedCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * The data used to create many BookingDenormalizeds.
   */
  data: Prisma.BookingDenormalizedCreateManyInput | Prisma.BookingDenormalizedCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BookingDenormalized update
 */
export type BookingDenormalizedUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * The data needed to update a BookingDenormalized.
   */
  data: Prisma.XOR<Prisma.BookingDenormalizedUpdateInput, Prisma.BookingDenormalizedUncheckedUpdateInput>;
  /**
   * Choose, which BookingDenormalized to update.
   */
  where: Prisma.BookingDenormalizedWhereUniqueInput;
};

/**
 * BookingDenormalized updateMany
 */
export type BookingDenormalizedUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update BookingDenormalizeds.
   */
  data: Prisma.XOR<
    Prisma.BookingDenormalizedUpdateManyMutationInput,
    Prisma.BookingDenormalizedUncheckedUpdateManyInput
  >;
  /**
   * Filter which BookingDenormalizeds to update
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * Limit how many BookingDenormalizeds to update.
   */
  limit?: number;
};

/**
 * BookingDenormalized updateManyAndReturn
 */
export type BookingDenormalizedUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * The data used to update BookingDenormalizeds.
   */
  data: Prisma.XOR<
    Prisma.BookingDenormalizedUpdateManyMutationInput,
    Prisma.BookingDenormalizedUncheckedUpdateManyInput
  >;
  /**
   * Filter which BookingDenormalizeds to update
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * Limit how many BookingDenormalizeds to update.
   */
  limit?: number;
};

/**
 * BookingDenormalized upsert
 */
export type BookingDenormalizedUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * The filter to search for the BookingDenormalized to update in case it exists.
   */
  where: Prisma.BookingDenormalizedWhereUniqueInput;
  /**
   * In case the BookingDenormalized found by the `where` argument doesn't exist, create a new BookingDenormalized with this data.
   */
  create: Prisma.XOR<Prisma.BookingDenormalizedCreateInput, Prisma.BookingDenormalizedUncheckedCreateInput>;
  /**
   * In case the BookingDenormalized was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookingDenormalizedUpdateInput, Prisma.BookingDenormalizedUncheckedUpdateInput>;
};

/**
 * BookingDenormalized delete
 */
export type BookingDenormalizedDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter which BookingDenormalized to delete.
   */
  where: Prisma.BookingDenormalizedWhereUniqueInput;
};

/**
 * BookingDenormalized deleteMany
 */
export type BookingDenormalizedDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingDenormalizeds to delete
   */
  where?: Prisma.BookingDenormalizedWhereInput;
  /**
   * Limit how many BookingDenormalizeds to delete.
   */
  limit?: number;
};

/**
 * BookingDenormalized without action
 */
export type BookingDenormalizedDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingDenormalized
   */
  select?: Prisma.BookingDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingDenormalized
   */
  omit?: Prisma.BookingDenormalizedOmit<ExtArgs> | null;
};
