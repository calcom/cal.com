/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `BookingTimeStatus` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BookingTimeStatus
 *
 */
export type BookingTimeStatusModel = runtime.Types.Result.DefaultSelection<Prisma.$BookingTimeStatusPayload>;

export type AggregateBookingTimeStatus = {
  _count: BookingTimeStatusCountAggregateOutputType | null;
  _avg: BookingTimeStatusAvgAggregateOutputType | null;
  _sum: BookingTimeStatusSumAggregateOutputType | null;
  _min: BookingTimeStatusMinAggregateOutputType | null;
  _max: BookingTimeStatusMaxAggregateOutputType | null;
};

export type BookingTimeStatusAvgAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  rating: number | null;
};

export type BookingTimeStatusSumAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  rating: number | null;
};

export type BookingTimeStatusMinAggregateOutputType = {
  id: number | null;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  timeStatus: string | null;
  eventParentId: number | null;
  userEmail: string | null;
  username: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean | null;
};

export type BookingTimeStatusMaxAggregateOutputType = {
  id: number | null;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  timeStatus: string | null;
  eventParentId: number | null;
  userEmail: string | null;
  username: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean | null;
};

export type BookingTimeStatusCountAggregateOutputType = {
  id: number;
  uid: number;
  eventTypeId: number;
  title: number;
  description: number;
  startTime: number;
  endTime: number;
  createdAt: number;
  location: number;
  paid: number;
  status: number;
  rescheduled: number;
  userId: number;
  teamId: number;
  eventLength: number;
  timeStatus: number;
  eventParentId: number;
  userEmail: number;
  username: number;
  ratingFeedback: number;
  rating: number;
  noShowHost: number;
  isTeamBooking: number;
  _all: number;
};

export type BookingTimeStatusAvgAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  rating?: true;
};

export type BookingTimeStatusSumAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  rating?: true;
};

export type BookingTimeStatusMinAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  timeStatus?: true;
  eventParentId?: true;
  userEmail?: true;
  username?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
};

export type BookingTimeStatusMaxAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  timeStatus?: true;
  eventParentId?: true;
  userEmail?: true;
  username?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
};

export type BookingTimeStatusCountAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  timeStatus?: true;
  eventParentId?: true;
  userEmail?: true;
  username?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
  _all?: true;
};

export type BookingTimeStatusAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingTimeStatus to aggregate.
   */
  where?: Prisma.BookingTimeStatusWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatuses to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusOrderByWithRelationInput
    | Prisma.BookingTimeStatusOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookingTimeStatusWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatuses from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatuses.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BookingTimeStatuses
   **/
  _count?: true | BookingTimeStatusCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BookingTimeStatusAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BookingTimeStatusSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookingTimeStatusMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookingTimeStatusMaxAggregateInputType;
};

export type GetBookingTimeStatusAggregateType<T extends BookingTimeStatusAggregateArgs> = {
  [P in keyof T & keyof AggregateBookingTimeStatus]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookingTimeStatus[P]>
    : Prisma.GetScalarType<T[P], AggregateBookingTimeStatus[P]>;
};

export type BookingTimeStatusGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.BookingTimeStatusWhereInput;
  orderBy?:
    | Prisma.BookingTimeStatusOrderByWithAggregationInput
    | Prisma.BookingTimeStatusOrderByWithAggregationInput[];
  by: Prisma.BookingTimeStatusScalarFieldEnum[] | Prisma.BookingTimeStatusScalarFieldEnum;
  having?: Prisma.BookingTimeStatusScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookingTimeStatusCountAggregateInputType | true;
  _avg?: BookingTimeStatusAvgAggregateInputType;
  _sum?: BookingTimeStatusSumAggregateInputType;
  _min?: BookingTimeStatusMinAggregateInputType;
  _max?: BookingTimeStatusMaxAggregateInputType;
};

export type BookingTimeStatusGroupByOutputType = {
  id: number;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  timeStatus: string | null;
  eventParentId: number | null;
  userEmail: string | null;
  username: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean;
  _count: BookingTimeStatusCountAggregateOutputType | null;
  _avg: BookingTimeStatusAvgAggregateOutputType | null;
  _sum: BookingTimeStatusSumAggregateOutputType | null;
  _min: BookingTimeStatusMinAggregateOutputType | null;
  _max: BookingTimeStatusMaxAggregateOutputType | null;
};

type GetBookingTimeStatusGroupByPayload<T extends BookingTimeStatusGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingTimeStatusGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof BookingTimeStatusGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BookingTimeStatusGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BookingTimeStatusGroupByOutputType[P]>;
    }
  >
>;

export type BookingTimeStatusWhereInput = {
  AND?: Prisma.BookingTimeStatusWhereInput | Prisma.BookingTimeStatusWhereInput[];
  OR?: Prisma.BookingTimeStatusWhereInput[];
  NOT?: Prisma.BookingTimeStatusWhereInput | Prisma.BookingTimeStatusWhereInput[];
  id?: Prisma.IntFilter<"BookingTimeStatus"> | number;
  uid?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  eventTypeId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
  title?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  description?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  startTime?: Prisma.DateTimeNullableFilter<"BookingTimeStatus"> | Date | string | null;
  endTime?: Prisma.DateTimeNullableFilter<"BookingTimeStatus"> | Date | string | null;
  createdAt?: Prisma.DateTimeNullableFilter<"BookingTimeStatus"> | Date | string | null;
  location?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  paid?: Prisma.BoolNullableFilter<"BookingTimeStatus"> | boolean | null;
  status?: Prisma.EnumBookingStatusNullableFilter<"BookingTimeStatus"> | $Enums.BookingStatus | null;
  rescheduled?: Prisma.BoolNullableFilter<"BookingTimeStatus"> | boolean | null;
  userId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
  teamId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
  eventLength?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
  timeStatus?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  eventParentId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
  userEmail?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  username?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  ratingFeedback?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
  rating?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
  noShowHost?: Prisma.BoolNullableFilter<"BookingTimeStatus"> | boolean | null;
  isTeamBooking?: Prisma.BoolFilter<"BookingTimeStatus"> | boolean;
};

export type BookingTimeStatusOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrderInput | Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  startTime?: Prisma.SortOrderInput | Prisma.SortOrder;
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  paid?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrderInput | Prisma.SortOrder;
  rescheduled?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventLength?: Prisma.SortOrderInput | Prisma.SortOrder;
  timeStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventParentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  username?: Prisma.SortOrderInput | Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrderInput | Prisma.SortOrder;
  rating?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShowHost?: Prisma.SortOrderInput | Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingTimeStatusWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.BookingTimeStatusWhereInput | Prisma.BookingTimeStatusWhereInput[];
    OR?: Prisma.BookingTimeStatusWhereInput[];
    NOT?: Prisma.BookingTimeStatusWhereInput | Prisma.BookingTimeStatusWhereInput[];
    uid?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    eventTypeId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
    title?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    description?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    startTime?: Prisma.DateTimeNullableFilter<"BookingTimeStatus"> | Date | string | null;
    endTime?: Prisma.DateTimeNullableFilter<"BookingTimeStatus"> | Date | string | null;
    createdAt?: Prisma.DateTimeNullableFilter<"BookingTimeStatus"> | Date | string | null;
    location?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    paid?: Prisma.BoolNullableFilter<"BookingTimeStatus"> | boolean | null;
    status?: Prisma.EnumBookingStatusNullableFilter<"BookingTimeStatus"> | $Enums.BookingStatus | null;
    rescheduled?: Prisma.BoolNullableFilter<"BookingTimeStatus"> | boolean | null;
    userId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
    teamId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
    eventLength?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
    timeStatus?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    eventParentId?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
    userEmail?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    username?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    ratingFeedback?: Prisma.StringNullableFilter<"BookingTimeStatus"> | string | null;
    rating?: Prisma.IntNullableFilter<"BookingTimeStatus"> | number | null;
    noShowHost?: Prisma.BoolNullableFilter<"BookingTimeStatus"> | boolean | null;
    isTeamBooking?: Prisma.BoolFilter<"BookingTimeStatus"> | boolean;
  },
  "id"
>;

export type BookingTimeStatusOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrderInput | Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  startTime?: Prisma.SortOrderInput | Prisma.SortOrder;
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  paid?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrderInput | Prisma.SortOrder;
  rescheduled?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventLength?: Prisma.SortOrderInput | Prisma.SortOrder;
  timeStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventParentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  username?: Prisma.SortOrderInput | Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrderInput | Prisma.SortOrder;
  rating?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShowHost?: Prisma.SortOrderInput | Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  _count?: Prisma.BookingTimeStatusCountOrderByAggregateInput;
  _avg?: Prisma.BookingTimeStatusAvgOrderByAggregateInput;
  _max?: Prisma.BookingTimeStatusMaxOrderByAggregateInput;
  _min?: Prisma.BookingTimeStatusMinOrderByAggregateInput;
  _sum?: Prisma.BookingTimeStatusSumOrderByAggregateInput;
};

export type BookingTimeStatusScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BookingTimeStatusScalarWhereWithAggregatesInput
    | Prisma.BookingTimeStatusScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookingTimeStatusScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BookingTimeStatusScalarWhereWithAggregatesInput
    | Prisma.BookingTimeStatusScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"BookingTimeStatus"> | number;
  uid?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  eventTypeId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatus"> | number | null;
  title?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  description?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  startTime?: Prisma.DateTimeNullableWithAggregatesFilter<"BookingTimeStatus"> | Date | string | null;
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"BookingTimeStatus"> | Date | string | null;
  createdAt?: Prisma.DateTimeNullableWithAggregatesFilter<"BookingTimeStatus"> | Date | string | null;
  location?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  paid?: Prisma.BoolNullableWithAggregatesFilter<"BookingTimeStatus"> | boolean | null;
  status?:
    | Prisma.EnumBookingStatusNullableWithAggregatesFilter<"BookingTimeStatus">
    | $Enums.BookingStatus
    | null;
  rescheduled?: Prisma.BoolNullableWithAggregatesFilter<"BookingTimeStatus"> | boolean | null;
  userId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatus"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatus"> | number | null;
  eventLength?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatus"> | number | null;
  timeStatus?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  eventParentId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatus"> | number | null;
  userEmail?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  username?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  ratingFeedback?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatus"> | string | null;
  rating?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatus"> | number | null;
  noShowHost?: Prisma.BoolNullableWithAggregatesFilter<"BookingTimeStatus"> | boolean | null;
  isTeamBooking?: Prisma.BoolWithAggregatesFilter<"BookingTimeStatus"> | boolean;
};

export type BookingTimeStatusCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingTimeStatusAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
};

export type BookingTimeStatusMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingTimeStatusMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
};

export type BookingTimeStatusSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
};

export type BookingTimeStatusSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    eventTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    createdAt?: boolean;
    location?: boolean;
    paid?: boolean;
    status?: boolean;
    rescheduled?: boolean;
    userId?: boolean;
    teamId?: boolean;
    eventLength?: boolean;
    timeStatus?: boolean;
    eventParentId?: boolean;
    userEmail?: boolean;
    username?: boolean;
    ratingFeedback?: boolean;
    rating?: boolean;
    noShowHost?: boolean;
    isTeamBooking?: boolean;
  },
  ExtArgs["result"]["bookingTimeStatus"]
>;

export type BookingTimeStatusSelectScalar = {
  id?: boolean;
  uid?: boolean;
  eventTypeId?: boolean;
  title?: boolean;
  description?: boolean;
  startTime?: boolean;
  endTime?: boolean;
  createdAt?: boolean;
  location?: boolean;
  paid?: boolean;
  status?: boolean;
  rescheduled?: boolean;
  userId?: boolean;
  teamId?: boolean;
  eventLength?: boolean;
  timeStatus?: boolean;
  eventParentId?: boolean;
  userEmail?: boolean;
  username?: boolean;
  ratingFeedback?: boolean;
  rating?: boolean;
  noShowHost?: boolean;
  isTeamBooking?: boolean;
};

export type BookingTimeStatusOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "uid"
  | "eventTypeId"
  | "title"
  | "description"
  | "startTime"
  | "endTime"
  | "createdAt"
  | "location"
  | "paid"
  | "status"
  | "rescheduled"
  | "userId"
  | "teamId"
  | "eventLength"
  | "timeStatus"
  | "eventParentId"
  | "userEmail"
  | "username"
  | "ratingFeedback"
  | "rating"
  | "noShowHost"
  | "isTeamBooking",
  ExtArgs["result"]["bookingTimeStatus"]
>;

export type $BookingTimeStatusPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "BookingTimeStatus";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      uid: string | null;
      eventTypeId: number | null;
      title: string | null;
      description: string | null;
      startTime: Date | null;
      endTime: Date | null;
      createdAt: Date | null;
      location: string | null;
      paid: boolean | null;
      status: $Enums.BookingStatus | null;
      rescheduled: boolean | null;
      userId: number | null;
      teamId: number | null;
      eventLength: number | null;
      timeStatus: string | null;
      eventParentId: number | null;
      userEmail: string | null;
      username: string | null;
      ratingFeedback: string | null;
      rating: number | null;
      noShowHost: boolean | null;
      isTeamBooking: boolean;
    },
    ExtArgs["result"]["bookingTimeStatus"]
  >;
  composites: {};
};

export type BookingTimeStatusGetPayload<S extends boolean | null | undefined | BookingTimeStatusDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$BookingTimeStatusPayload, S>;

export type BookingTimeStatusCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<BookingTimeStatusFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BookingTimeStatusCountAggregateInputType | true;
};

export interface BookingTimeStatusDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["BookingTimeStatus"];
    meta: { name: "BookingTimeStatus" };
  };
  /**
   * Find zero or one BookingTimeStatus that matches the filter.
   * @param {BookingTimeStatusFindUniqueArgs} args - Arguments to find a BookingTimeStatus
   * @example
   * // Get one BookingTimeStatus
   * const bookingTimeStatus = await prisma.bookingTimeStatus.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingTimeStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookingTimeStatusFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BookingTimeStatus that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingTimeStatusFindUniqueOrThrowArgs} args - Arguments to find a BookingTimeStatus
   * @example
   * // Get one BookingTimeStatus
   * const bookingTimeStatus = await prisma.bookingTimeStatus.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingTimeStatusFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookingTimeStatusFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingTimeStatus that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusFindFirstArgs} args - Arguments to find a BookingTimeStatus
   * @example
   * // Get one BookingTimeStatus
   * const bookingTimeStatus = await prisma.bookingTimeStatus.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingTimeStatusFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookingTimeStatusFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingTimeStatus that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusFindFirstOrThrowArgs} args - Arguments to find a BookingTimeStatus
   * @example
   * // Get one BookingTimeStatus
   * const bookingTimeStatus = await prisma.bookingTimeStatus.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingTimeStatusFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookingTimeStatusFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BookingTimeStatuses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookingTimeStatuses
   * const bookingTimeStatuses = await prisma.bookingTimeStatus.findMany()
   *
   * // Get first 10 BookingTimeStatuses
   * const bookingTimeStatuses = await prisma.bookingTimeStatus.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookingTimeStatusWithIdOnly = await prisma.bookingTimeStatus.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookingTimeStatusFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookingTimeStatusFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Count the number of BookingTimeStatuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusCountArgs} args - Arguments to filter BookingTimeStatuses to count.
   * @example
   * // Count the number of BookingTimeStatuses
   * const count = await prisma.bookingTimeStatus.count({
   *   where: {
   *     // ... the filter for the BookingTimeStatuses we want to count
   *   }
   * })
   **/
  count<T extends BookingTimeStatusCountArgs>(
    args?: Prisma.Subset<T, BookingTimeStatusCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BookingTimeStatusCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BookingTimeStatus.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookingTimeStatusAggregateArgs>(
    args: Prisma.Subset<T, BookingTimeStatusAggregateArgs>
  ): Prisma.PrismaPromise<GetBookingTimeStatusAggregateType<T>>;

  /**
   * Group by BookingTimeStatus.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookingTimeStatusGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingTimeStatusGroupByArgs["orderBy"] }
      : { orderBy?: BookingTimeStatusGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, BookingTimeStatusGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetBookingTimeStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BookingTimeStatus model
   */
  readonly fields: BookingTimeStatusFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookingTimeStatus.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingTimeStatusClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BookingTimeStatus model
 */
export interface BookingTimeStatusFieldRefs {
  readonly id: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly uid: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly eventTypeId: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly title: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly description: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly startTime: Prisma.FieldRef<"BookingTimeStatus", "DateTime">;
  readonly endTime: Prisma.FieldRef<"BookingTimeStatus", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"BookingTimeStatus", "DateTime">;
  readonly location: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly paid: Prisma.FieldRef<"BookingTimeStatus", "Boolean">;
  readonly status: Prisma.FieldRef<"BookingTimeStatus", "BookingStatus">;
  readonly rescheduled: Prisma.FieldRef<"BookingTimeStatus", "Boolean">;
  readonly userId: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly teamId: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly eventLength: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly timeStatus: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly eventParentId: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly userEmail: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly username: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly ratingFeedback: Prisma.FieldRef<"BookingTimeStatus", "String">;
  readonly rating: Prisma.FieldRef<"BookingTimeStatus", "Int">;
  readonly noShowHost: Prisma.FieldRef<"BookingTimeStatus", "Boolean">;
  readonly isTeamBooking: Prisma.FieldRef<"BookingTimeStatus", "Boolean">;
}

// Custom InputTypes
/**
 * BookingTimeStatus findUnique
 */
export type BookingTimeStatusFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatus
   */
  select?: Prisma.BookingTimeStatusSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatus
   */
  omit?: Prisma.BookingTimeStatusOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatus to fetch.
   */
  where: Prisma.BookingTimeStatusWhereUniqueInput;
};

/**
 * BookingTimeStatus findUniqueOrThrow
 */
export type BookingTimeStatusFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatus
   */
  select?: Prisma.BookingTimeStatusSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatus
   */
  omit?: Prisma.BookingTimeStatusOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatus to fetch.
   */
  where: Prisma.BookingTimeStatusWhereUniqueInput;
};

/**
 * BookingTimeStatus findFirst
 */
export type BookingTimeStatusFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatus
   */
  select?: Prisma.BookingTimeStatusSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatus
   */
  omit?: Prisma.BookingTimeStatusOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatus to fetch.
   */
  where?: Prisma.BookingTimeStatusWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatuses to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusOrderByWithRelationInput
    | Prisma.BookingTimeStatusOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingTimeStatuses.
   */
  cursor?: Prisma.BookingTimeStatusWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatuses from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatuses.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingTimeStatuses.
   */
  distinct?: Prisma.BookingTimeStatusScalarFieldEnum | Prisma.BookingTimeStatusScalarFieldEnum[];
};

/**
 * BookingTimeStatus findFirstOrThrow
 */
export type BookingTimeStatusFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatus
   */
  select?: Prisma.BookingTimeStatusSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatus
   */
  omit?: Prisma.BookingTimeStatusOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatus to fetch.
   */
  where?: Prisma.BookingTimeStatusWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatuses to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusOrderByWithRelationInput
    | Prisma.BookingTimeStatusOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingTimeStatuses.
   */
  cursor?: Prisma.BookingTimeStatusWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatuses from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatuses.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingTimeStatuses.
   */
  distinct?: Prisma.BookingTimeStatusScalarFieldEnum | Prisma.BookingTimeStatusScalarFieldEnum[];
};

/**
 * BookingTimeStatus findMany
 */
export type BookingTimeStatusFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatus
   */
  select?: Prisma.BookingTimeStatusSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatus
   */
  omit?: Prisma.BookingTimeStatusOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatuses to fetch.
   */
  where?: Prisma.BookingTimeStatusWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatuses to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusOrderByWithRelationInput
    | Prisma.BookingTimeStatusOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BookingTimeStatuses.
   */
  cursor?: Prisma.BookingTimeStatusWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatuses from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatuses.
   */
  skip?: number;
  distinct?: Prisma.BookingTimeStatusScalarFieldEnum | Prisma.BookingTimeStatusScalarFieldEnum[];
};

/**
 * BookingTimeStatus without action
 */
export type BookingTimeStatusDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatus
   */
  select?: Prisma.BookingTimeStatusSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatus
   */
  omit?: Prisma.BookingTimeStatusOmit<ExtArgs> | null;
};
