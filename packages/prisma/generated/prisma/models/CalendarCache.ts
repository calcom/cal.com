/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `CalendarCache` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CalendarCache
 *
 */
export type CalendarCacheModel = runtime.Types.Result.DefaultSelection<Prisma.$CalendarCachePayload>;

export type AggregateCalendarCache = {
  _count: CalendarCacheCountAggregateOutputType | null;
  _avg: CalendarCacheAvgAggregateOutputType | null;
  _sum: CalendarCacheSumAggregateOutputType | null;
  _min: CalendarCacheMinAggregateOutputType | null;
  _max: CalendarCacheMaxAggregateOutputType | null;
};

export type CalendarCacheAvgAggregateOutputType = {
  credentialId: number | null;
  userId: number | null;
};

export type CalendarCacheSumAggregateOutputType = {
  credentialId: number | null;
  userId: number | null;
};

export type CalendarCacheMinAggregateOutputType = {
  id: string | null;
  key: string | null;
  expiresAt: Date | null;
  updatedAt: Date | null;
  credentialId: number | null;
  userId: number | null;
};

export type CalendarCacheMaxAggregateOutputType = {
  id: string | null;
  key: string | null;
  expiresAt: Date | null;
  updatedAt: Date | null;
  credentialId: number | null;
  userId: number | null;
};

export type CalendarCacheCountAggregateOutputType = {
  id: number;
  key: number;
  value: number;
  expiresAt: number;
  updatedAt: number;
  credentialId: number;
  userId: number;
  _all: number;
};

export type CalendarCacheAvgAggregateInputType = {
  credentialId?: true;
  userId?: true;
};

export type CalendarCacheSumAggregateInputType = {
  credentialId?: true;
  userId?: true;
};

export type CalendarCacheMinAggregateInputType = {
  id?: true;
  key?: true;
  expiresAt?: true;
  updatedAt?: true;
  credentialId?: true;
  userId?: true;
};

export type CalendarCacheMaxAggregateInputType = {
  id?: true;
  key?: true;
  expiresAt?: true;
  updatedAt?: true;
  credentialId?: true;
  userId?: true;
};

export type CalendarCacheCountAggregateInputType = {
  id?: true;
  key?: true;
  value?: true;
  expiresAt?: true;
  updatedAt?: true;
  credentialId?: true;
  userId?: true;
  _all?: true;
};

export type CalendarCacheAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CalendarCache to aggregate.
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCaches to fetch.
   */
  orderBy?: Prisma.CalendarCacheOrderByWithRelationInput | Prisma.CalendarCacheOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CalendarCacheWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCaches from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCaches.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CalendarCaches
   **/
  _count?: true | CalendarCacheCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CalendarCacheAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CalendarCacheSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CalendarCacheMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CalendarCacheMaxAggregateInputType;
};

export type GetCalendarCacheAggregateType<T extends CalendarCacheAggregateArgs> = {
  [P in keyof T & keyof AggregateCalendarCache]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCalendarCache[P]>
    : Prisma.GetScalarType<T[P], AggregateCalendarCache[P]>;
};

export type CalendarCacheGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CalendarCacheWhereInput;
  orderBy?:
    | Prisma.CalendarCacheOrderByWithAggregationInput
    | Prisma.CalendarCacheOrderByWithAggregationInput[];
  by: Prisma.CalendarCacheScalarFieldEnum[] | Prisma.CalendarCacheScalarFieldEnum;
  having?: Prisma.CalendarCacheScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CalendarCacheCountAggregateInputType | true;
  _avg?: CalendarCacheAvgAggregateInputType;
  _sum?: CalendarCacheSumAggregateInputType;
  _min?: CalendarCacheMinAggregateInputType;
  _max?: CalendarCacheMaxAggregateInputType;
};

export type CalendarCacheGroupByOutputType = {
  id: string | null;
  key: string;
  value: runtime.JsonValue;
  expiresAt: Date;
  updatedAt: Date;
  credentialId: number;
  userId: number | null;
  _count: CalendarCacheCountAggregateOutputType | null;
  _avg: CalendarCacheAvgAggregateOutputType | null;
  _sum: CalendarCacheSumAggregateOutputType | null;
  _min: CalendarCacheMinAggregateOutputType | null;
  _max: CalendarCacheMaxAggregateOutputType | null;
};

type GetCalendarCacheGroupByPayload<T extends CalendarCacheGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CalendarCacheGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof CalendarCacheGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], CalendarCacheGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], CalendarCacheGroupByOutputType[P]>;
    }
  >
>;

export type CalendarCacheWhereInput = {
  AND?: Prisma.CalendarCacheWhereInput | Prisma.CalendarCacheWhereInput[];
  OR?: Prisma.CalendarCacheWhereInput[];
  NOT?: Prisma.CalendarCacheWhereInput | Prisma.CalendarCacheWhereInput[];
  id?: Prisma.StringNullableFilter<"CalendarCache"> | string | null;
  key?: Prisma.StringFilter<"CalendarCache"> | string;
  value?: Prisma.JsonFilter<"CalendarCache">;
  expiresAt?: Prisma.DateTimeFilter<"CalendarCache"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"CalendarCache"> | Date | string;
  credentialId?: Prisma.IntFilter<"CalendarCache"> | number;
  userId?: Prisma.IntNullableFilter<"CalendarCache"> | number | null;
  credential?: Prisma.XOR<Prisma.CredentialNullableScalarRelationFilter, Prisma.CredentialWhereInput> | null;
};

export type CalendarCacheOrderByWithRelationInput = {
  id?: Prisma.SortOrderInput | Prisma.SortOrder;
  key?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  credential?: Prisma.CredentialOrderByWithRelationInput;
};

export type CalendarCacheWhereUniqueInput = Prisma.AtLeast<
  {
    credentialId_key?: Prisma.CalendarCacheCredentialIdKeyCompoundUniqueInput;
    AND?: Prisma.CalendarCacheWhereInput | Prisma.CalendarCacheWhereInput[];
    OR?: Prisma.CalendarCacheWhereInput[];
    NOT?: Prisma.CalendarCacheWhereInput | Prisma.CalendarCacheWhereInput[];
    id?: Prisma.StringNullableFilter<"CalendarCache"> | string | null;
    key?: Prisma.StringFilter<"CalendarCache"> | string;
    value?: Prisma.JsonFilter<"CalendarCache">;
    expiresAt?: Prisma.DateTimeFilter<"CalendarCache"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"CalendarCache"> | Date | string;
    credentialId?: Prisma.IntFilter<"CalendarCache"> | number;
    userId?: Prisma.IntNullableFilter<"CalendarCache"> | number | null;
    credential?: Prisma.XOR<
      Prisma.CredentialNullableScalarRelationFilter,
      Prisma.CredentialWhereInput
    > | null;
  },
  "credentialId_key" | "credentialId_key"
>;

export type CalendarCacheOrderByWithAggregationInput = {
  id?: Prisma.SortOrderInput | Prisma.SortOrder;
  key?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CalendarCacheCountOrderByAggregateInput;
  _avg?: Prisma.CalendarCacheAvgOrderByAggregateInput;
  _max?: Prisma.CalendarCacheMaxOrderByAggregateInput;
  _min?: Prisma.CalendarCacheMinOrderByAggregateInput;
  _sum?: Prisma.CalendarCacheSumOrderByAggregateInput;
};

export type CalendarCacheScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CalendarCacheScalarWhereWithAggregatesInput
    | Prisma.CalendarCacheScalarWhereWithAggregatesInput[];
  OR?: Prisma.CalendarCacheScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CalendarCacheScalarWhereWithAggregatesInput
    | Prisma.CalendarCacheScalarWhereWithAggregatesInput[];
  id?: Prisma.StringNullableWithAggregatesFilter<"CalendarCache"> | string | null;
  key?: Prisma.StringWithAggregatesFilter<"CalendarCache"> | string;
  value?: Prisma.JsonWithAggregatesFilter<"CalendarCache">;
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"CalendarCache"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CalendarCache"> | Date | string;
  credentialId?: Prisma.IntWithAggregatesFilter<"CalendarCache"> | number;
  userId?: Prisma.IntNullableWithAggregatesFilter<"CalendarCache"> | number | null;
};

export type CalendarCacheCreateInput = {
  id?: string | null;
  key: string;
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt: Date | string;
  updatedAt?: Date | string;
  userId?: number | null;
  credential?: Prisma.CredentialCreateNestedOneWithoutCalendarCacheInput;
};

export type CalendarCacheUncheckedCreateInput = {
  id?: string | null;
  key: string;
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt: Date | string;
  updatedAt?: Date | string;
  credentialId: number;
  userId?: number | null;
};

export type CalendarCacheUpdateInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  credential?: Prisma.CredentialUpdateOneWithoutCalendarCacheNestedInput;
};

export type CalendarCacheUncheckedUpdateInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  credentialId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type CalendarCacheCreateManyInput = {
  id?: string | null;
  key: string;
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt: Date | string;
  updatedAt?: Date | string;
  credentialId: number;
  userId?: number | null;
};

export type CalendarCacheUpdateManyMutationInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type CalendarCacheUncheckedUpdateManyInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  credentialId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type CalendarCacheListRelationFilter = {
  every?: Prisma.CalendarCacheWhereInput;
  some?: Prisma.CalendarCacheWhereInput;
  none?: Prisma.CalendarCacheWhereInput;
};

export type CalendarCacheOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CalendarCacheCredentialIdKeyCompoundUniqueInput = {
  credentialId: number;
  key: string;
};

export type CalendarCacheCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  key?: Prisma.SortOrder;
  value?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CalendarCacheAvgOrderByAggregateInput = {
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CalendarCacheMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  key?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CalendarCacheMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  key?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CalendarCacheSumOrderByAggregateInput = {
  credentialId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type CalendarCacheCreateNestedManyWithoutCredentialInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheCreateWithoutCredentialInput,
        Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput
      >
    | Prisma.CalendarCacheCreateWithoutCredentialInput[]
    | Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput[];
  createMany?: Prisma.CalendarCacheCreateManyCredentialInputEnvelope;
  connect?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
};

export type CalendarCacheUncheckedCreateNestedManyWithoutCredentialInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheCreateWithoutCredentialInput,
        Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput
      >
    | Prisma.CalendarCacheCreateWithoutCredentialInput[]
    | Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput[];
  createMany?: Prisma.CalendarCacheCreateManyCredentialInputEnvelope;
  connect?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
};

export type CalendarCacheUpdateManyWithoutCredentialNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheCreateWithoutCredentialInput,
        Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput
      >
    | Prisma.CalendarCacheCreateWithoutCredentialInput[]
    | Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput[];
  upsert?:
    | Prisma.CalendarCacheUpsertWithWhereUniqueWithoutCredentialInput
    | Prisma.CalendarCacheUpsertWithWhereUniqueWithoutCredentialInput[];
  createMany?: Prisma.CalendarCacheCreateManyCredentialInputEnvelope;
  set?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  disconnect?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  delete?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  connect?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  update?:
    | Prisma.CalendarCacheUpdateWithWhereUniqueWithoutCredentialInput
    | Prisma.CalendarCacheUpdateWithWhereUniqueWithoutCredentialInput[];
  updateMany?:
    | Prisma.CalendarCacheUpdateManyWithWhereWithoutCredentialInput
    | Prisma.CalendarCacheUpdateManyWithWhereWithoutCredentialInput[];
  deleteMany?: Prisma.CalendarCacheScalarWhereInput | Prisma.CalendarCacheScalarWhereInput[];
};

export type CalendarCacheUncheckedUpdateManyWithoutCredentialNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheCreateWithoutCredentialInput,
        Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput
      >
    | Prisma.CalendarCacheCreateWithoutCredentialInput[]
    | Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput
    | Prisma.CalendarCacheCreateOrConnectWithoutCredentialInput[];
  upsert?:
    | Prisma.CalendarCacheUpsertWithWhereUniqueWithoutCredentialInput
    | Prisma.CalendarCacheUpsertWithWhereUniqueWithoutCredentialInput[];
  createMany?: Prisma.CalendarCacheCreateManyCredentialInputEnvelope;
  set?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  disconnect?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  delete?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  connect?: Prisma.CalendarCacheWhereUniqueInput | Prisma.CalendarCacheWhereUniqueInput[];
  update?:
    | Prisma.CalendarCacheUpdateWithWhereUniqueWithoutCredentialInput
    | Prisma.CalendarCacheUpdateWithWhereUniqueWithoutCredentialInput[];
  updateMany?:
    | Prisma.CalendarCacheUpdateManyWithWhereWithoutCredentialInput
    | Prisma.CalendarCacheUpdateManyWithWhereWithoutCredentialInput[];
  deleteMany?: Prisma.CalendarCacheScalarWhereInput | Prisma.CalendarCacheScalarWhereInput[];
};

export type CalendarCacheCreateWithoutCredentialInput = {
  id?: string | null;
  key: string;
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt: Date | string;
  updatedAt?: Date | string;
  userId?: number | null;
};

export type CalendarCacheUncheckedCreateWithoutCredentialInput = {
  id?: string | null;
  key: string;
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt: Date | string;
  updatedAt?: Date | string;
  userId?: number | null;
};

export type CalendarCacheCreateOrConnectWithoutCredentialInput = {
  where: Prisma.CalendarCacheWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CalendarCacheCreateWithoutCredentialInput,
    Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput
  >;
};

export type CalendarCacheCreateManyCredentialInputEnvelope = {
  data: Prisma.CalendarCacheCreateManyCredentialInput | Prisma.CalendarCacheCreateManyCredentialInput[];
  skipDuplicates?: boolean;
};

export type CalendarCacheUpsertWithWhereUniqueWithoutCredentialInput = {
  where: Prisma.CalendarCacheWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CalendarCacheUpdateWithoutCredentialInput,
    Prisma.CalendarCacheUncheckedUpdateWithoutCredentialInput
  >;
  create: Prisma.XOR<
    Prisma.CalendarCacheCreateWithoutCredentialInput,
    Prisma.CalendarCacheUncheckedCreateWithoutCredentialInput
  >;
};

export type CalendarCacheUpdateWithWhereUniqueWithoutCredentialInput = {
  where: Prisma.CalendarCacheWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CalendarCacheUpdateWithoutCredentialInput,
    Prisma.CalendarCacheUncheckedUpdateWithoutCredentialInput
  >;
};

export type CalendarCacheUpdateManyWithWhereWithoutCredentialInput = {
  where: Prisma.CalendarCacheScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CalendarCacheUpdateManyMutationInput,
    Prisma.CalendarCacheUncheckedUpdateManyWithoutCredentialInput
  >;
};

export type CalendarCacheScalarWhereInput = {
  AND?: Prisma.CalendarCacheScalarWhereInput | Prisma.CalendarCacheScalarWhereInput[];
  OR?: Prisma.CalendarCacheScalarWhereInput[];
  NOT?: Prisma.CalendarCacheScalarWhereInput | Prisma.CalendarCacheScalarWhereInput[];
  id?: Prisma.StringNullableFilter<"CalendarCache"> | string | null;
  key?: Prisma.StringFilter<"CalendarCache"> | string;
  value?: Prisma.JsonFilter<"CalendarCache">;
  expiresAt?: Prisma.DateTimeFilter<"CalendarCache"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"CalendarCache"> | Date | string;
  credentialId?: Prisma.IntFilter<"CalendarCache"> | number;
  userId?: Prisma.IntNullableFilter<"CalendarCache"> | number | null;
};

export type CalendarCacheCreateManyCredentialInput = {
  id?: string | null;
  key: string;
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt: Date | string;
  updatedAt?: Date | string;
  userId?: number | null;
};

export type CalendarCacheUpdateWithoutCredentialInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type CalendarCacheUncheckedUpdateWithoutCredentialInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type CalendarCacheUncheckedUpdateManyWithoutCredentialInput = {
  id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  key?: Prisma.StringFieldUpdateOperationsInput | string;
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type CalendarCacheSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    key?: boolean;
    value?: boolean;
    expiresAt?: boolean;
    updatedAt?: boolean;
    credentialId?: boolean;
    userId?: boolean;
    credential?: boolean | Prisma.CalendarCache$credentialArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarCache"]
>;

export type CalendarCacheSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    key?: boolean;
    value?: boolean;
    expiresAt?: boolean;
    updatedAt?: boolean;
    credentialId?: boolean;
    userId?: boolean;
    credential?: boolean | Prisma.CalendarCache$credentialArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarCache"]
>;

export type CalendarCacheSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    key?: boolean;
    value?: boolean;
    expiresAt?: boolean;
    updatedAt?: boolean;
    credentialId?: boolean;
    userId?: boolean;
    credential?: boolean | Prisma.CalendarCache$credentialArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarCache"]
>;

export type CalendarCacheSelectScalar = {
  id?: boolean;
  key?: boolean;
  value?: boolean;
  expiresAt?: boolean;
  updatedAt?: boolean;
  credentialId?: boolean;
  userId?: boolean;
};

export type CalendarCacheOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "key" | "value" | "expiresAt" | "updatedAt" | "credentialId" | "userId",
  ExtArgs["result"]["calendarCache"]
>;
export type CalendarCacheInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  credential?: boolean | Prisma.CalendarCache$credentialArgs<ExtArgs>;
};
export type CalendarCacheIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  credential?: boolean | Prisma.CalendarCache$credentialArgs<ExtArgs>;
};
export type CalendarCacheIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  credential?: boolean | Prisma.CalendarCache$credentialArgs<ExtArgs>;
};

export type $CalendarCachePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "CalendarCache";
  objects: {
    credential: Prisma.$CredentialPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string | null;
      key: string;
      value: runtime.JsonValue;
      expiresAt: Date;
      updatedAt: Date;
      credentialId: number;
      userId: number | null;
    },
    ExtArgs["result"]["calendarCache"]
  >;
  composites: {};
};

export type CalendarCacheGetPayload<S extends boolean | null | undefined | CalendarCacheDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$CalendarCachePayload, S>;

export type CalendarCacheCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<CalendarCacheFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: CalendarCacheCountAggregateInputType | true;
};

export interface CalendarCacheDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["CalendarCache"]; meta: { name: "CalendarCache" } };
  /**
   * Find zero or one CalendarCache that matches the filter.
   * @param {CalendarCacheFindUniqueArgs} args - Arguments to find a CalendarCache
   * @example
   * // Get one CalendarCache
   * const calendarCache = await prisma.calendarCache.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CalendarCacheFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCachePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CalendarCache that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CalendarCacheFindUniqueOrThrowArgs} args - Arguments to find a CalendarCache
   * @example
   * // Get one CalendarCache
   * const calendarCache = await prisma.calendarCache.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CalendarCacheFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCachePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarCache that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheFindFirstArgs} args - Arguments to find a CalendarCache
   * @example
   * // Get one CalendarCache
   * const calendarCache = await prisma.calendarCache.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CalendarCacheFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCachePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarCache that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheFindFirstOrThrowArgs} args - Arguments to find a CalendarCache
   * @example
   * // Get one CalendarCache
   * const calendarCache = await prisma.calendarCache.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CalendarCacheFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCachePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CalendarCaches that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CalendarCaches
   * const calendarCaches = await prisma.calendarCache.findMany()
   *
   * // Get first 10 CalendarCaches
   * const calendarCaches = await prisma.calendarCache.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const calendarCacheWithIdOnly = await prisma.calendarCache.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CalendarCacheFindManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$CalendarCachePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a CalendarCache.
   * @param {CalendarCacheCreateArgs} args - Arguments to create a CalendarCache.
   * @example
   * // Create one CalendarCache
   * const CalendarCache = await prisma.calendarCache.create({
   *   data: {
   *     // ... data to create a CalendarCache
   *   }
   * })
   *
   */
  create<T extends CalendarCacheCreateArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheCreateArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<Prisma.$CalendarCachePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CalendarCaches.
   * @param {CalendarCacheCreateManyArgs} args - Arguments to create many CalendarCaches.
   * @example
   * // Create many CalendarCaches
   * const calendarCache = await prisma.calendarCache.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CalendarCacheCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CalendarCaches and returns the data saved in the database.
   * @param {CalendarCacheCreateManyAndReturnArgs} args - Arguments to create many CalendarCaches.
   * @example
   * // Create many CalendarCaches
   * const calendarCache = await prisma.calendarCache.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CalendarCaches and only return the `id`
   * const calendarCacheWithIdOnly = await prisma.calendarCache.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CalendarCacheCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCachePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CalendarCache.
   * @param {CalendarCacheDeleteArgs} args - Arguments to delete one CalendarCache.
   * @example
   * // Delete one CalendarCache
   * const CalendarCache = await prisma.calendarCache.delete({
   *   where: {
   *     // ... filter to delete one CalendarCache
   *   }
   * })
   *
   */
  delete<T extends CalendarCacheDeleteArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<Prisma.$CalendarCachePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CalendarCache.
   * @param {CalendarCacheUpdateArgs} args - Arguments to update one CalendarCache.
   * @example
   * // Update one CalendarCache
   * const calendarCache = await prisma.calendarCache.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CalendarCacheUpdateArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<Prisma.$CalendarCachePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CalendarCaches.
   * @param {CalendarCacheDeleteManyArgs} args - Arguments to filter CalendarCaches to delete.
   * @example
   * // Delete a few CalendarCaches
   * const { count } = await prisma.calendarCache.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CalendarCacheDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarCaches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CalendarCaches
   * const calendarCache = await prisma.calendarCache.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CalendarCacheUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarCaches and returns the data updated in the database.
   * @param {CalendarCacheUpdateManyAndReturnArgs} args - Arguments to update many CalendarCaches.
   * @example
   * // Update many CalendarCaches
   * const calendarCache = await prisma.calendarCache.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CalendarCaches and only return the `id`
   * const calendarCacheWithIdOnly = await prisma.calendarCache.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CalendarCacheUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCachePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CalendarCache.
   * @param {CalendarCacheUpsertArgs} args - Arguments to update or create a CalendarCache.
   * @example
   * // Update or create a CalendarCache
   * const calendarCache = await prisma.calendarCache.upsert({
   *   create: {
   *     // ... data to create a CalendarCache
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CalendarCache we want to update
   *   }
   * })
   */
  upsert<T extends CalendarCacheUpsertArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheClient<
    runtime.Types.Result.GetResult<Prisma.$CalendarCachePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CalendarCaches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheCountArgs} args - Arguments to filter CalendarCaches to count.
   * @example
   * // Count the number of CalendarCaches
   * const count = await prisma.calendarCache.count({
   *   where: {
   *     // ... the filter for the CalendarCaches we want to count
   *   }
   * })
   **/
  count<T extends CalendarCacheCountArgs>(
    args?: Prisma.Subset<T, CalendarCacheCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], CalendarCacheCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CalendarCache.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CalendarCacheAggregateArgs>(
    args: Prisma.Subset<T, CalendarCacheAggregateArgs>
  ): Prisma.PrismaPromise<GetCalendarCacheAggregateType<T>>;

  /**
   * Group by CalendarCache.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CalendarCacheGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CalendarCacheGroupByArgs["orderBy"] }
      : { orderBy?: CalendarCacheGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, CalendarCacheGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetCalendarCacheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CalendarCache model
   */
  readonly fields: CalendarCacheFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CalendarCache.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CalendarCacheClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  credential<T extends Prisma.CalendarCache$credentialArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CalendarCache$credentialArgs<ExtArgs>>
  ): Prisma.Prisma__CredentialClient<
    runtime.Types.Result.GetResult<
      Prisma.$CredentialPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CalendarCache model
 */
export interface CalendarCacheFieldRefs {
  readonly id: Prisma.FieldRef<"CalendarCache", "String">;
  readonly key: Prisma.FieldRef<"CalendarCache", "String">;
  readonly value: Prisma.FieldRef<"CalendarCache", "Json">;
  readonly expiresAt: Prisma.FieldRef<"CalendarCache", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"CalendarCache", "DateTime">;
  readonly credentialId: Prisma.FieldRef<"CalendarCache", "Int">;
  readonly userId: Prisma.FieldRef<"CalendarCache", "Int">;
}

// Custom InputTypes
/**
 * CalendarCache findUnique
 */
export type CalendarCacheFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCache to fetch.
   */
  where: Prisma.CalendarCacheWhereUniqueInput;
};

/**
 * CalendarCache findUniqueOrThrow
 */
export type CalendarCacheFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCache to fetch.
   */
  where: Prisma.CalendarCacheWhereUniqueInput;
};

/**
 * CalendarCache findFirst
 */
export type CalendarCacheFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCache to fetch.
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCaches to fetch.
   */
  orderBy?: Prisma.CalendarCacheOrderByWithRelationInput | Prisma.CalendarCacheOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarCaches.
   */
  cursor?: Prisma.CalendarCacheWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCaches from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCaches.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarCaches.
   */
  distinct?: Prisma.CalendarCacheScalarFieldEnum | Prisma.CalendarCacheScalarFieldEnum[];
};

/**
 * CalendarCache findFirstOrThrow
 */
export type CalendarCacheFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCache to fetch.
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCaches to fetch.
   */
  orderBy?: Prisma.CalendarCacheOrderByWithRelationInput | Prisma.CalendarCacheOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarCaches.
   */
  cursor?: Prisma.CalendarCacheWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCaches from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCaches.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarCaches.
   */
  distinct?: Prisma.CalendarCacheScalarFieldEnum | Prisma.CalendarCacheScalarFieldEnum[];
};

/**
 * CalendarCache findMany
 */
export type CalendarCacheFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCaches to fetch.
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCaches to fetch.
   */
  orderBy?: Prisma.CalendarCacheOrderByWithRelationInput | Prisma.CalendarCacheOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CalendarCaches.
   */
  cursor?: Prisma.CalendarCacheWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCaches from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCaches.
   */
  skip?: number;
  distinct?: Prisma.CalendarCacheScalarFieldEnum | Prisma.CalendarCacheScalarFieldEnum[];
};

/**
 * CalendarCache create
 */
export type CalendarCacheCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * The data needed to create a CalendarCache.
   */
  data: Prisma.XOR<Prisma.CalendarCacheCreateInput, Prisma.CalendarCacheUncheckedCreateInput>;
};

/**
 * CalendarCache createMany
 */
export type CalendarCacheCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many CalendarCaches.
   */
  data: Prisma.CalendarCacheCreateManyInput | Prisma.CalendarCacheCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CalendarCache createManyAndReturn
 */
export type CalendarCacheCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * The data used to create many CalendarCaches.
   */
  data: Prisma.CalendarCacheCreateManyInput | Prisma.CalendarCacheCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CalendarCache update
 */
export type CalendarCacheUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * The data needed to update a CalendarCache.
   */
  data: Prisma.XOR<Prisma.CalendarCacheUpdateInput, Prisma.CalendarCacheUncheckedUpdateInput>;
  /**
   * Choose, which CalendarCache to update.
   */
  where: Prisma.CalendarCacheWhereUniqueInput;
};

/**
 * CalendarCache updateMany
 */
export type CalendarCacheUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update CalendarCaches.
   */
  data: Prisma.XOR<Prisma.CalendarCacheUpdateManyMutationInput, Prisma.CalendarCacheUncheckedUpdateManyInput>;
  /**
   * Filter which CalendarCaches to update
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * Limit how many CalendarCaches to update.
   */
  limit?: number;
};

/**
 * CalendarCache updateManyAndReturn
 */
export type CalendarCacheUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * The data used to update CalendarCaches.
   */
  data: Prisma.XOR<Prisma.CalendarCacheUpdateManyMutationInput, Prisma.CalendarCacheUncheckedUpdateManyInput>;
  /**
   * Filter which CalendarCaches to update
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * Limit how many CalendarCaches to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CalendarCache upsert
 */
export type CalendarCacheUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * The filter to search for the CalendarCache to update in case it exists.
   */
  where: Prisma.CalendarCacheWhereUniqueInput;
  /**
   * In case the CalendarCache found by the `where` argument doesn't exist, create a new CalendarCache with this data.
   */
  create: Prisma.XOR<Prisma.CalendarCacheCreateInput, Prisma.CalendarCacheUncheckedCreateInput>;
  /**
   * In case the CalendarCache was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CalendarCacheUpdateInput, Prisma.CalendarCacheUncheckedUpdateInput>;
};

/**
 * CalendarCache delete
 */
export type CalendarCacheDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
  /**
   * Filter which CalendarCache to delete.
   */
  where: Prisma.CalendarCacheWhereUniqueInput;
};

/**
 * CalendarCache deleteMany
 */
export type CalendarCacheDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CalendarCaches to delete
   */
  where?: Prisma.CalendarCacheWhereInput;
  /**
   * Limit how many CalendarCaches to delete.
   */
  limit?: number;
};

/**
 * CalendarCache.credential
 */
export type CalendarCache$credentialArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Credential
   */
  select?: Prisma.CredentialSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Credential
   */
  omit?: Prisma.CredentialOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CredentialInclude<ExtArgs> | null;
  where?: Prisma.CredentialWhereInput;
};

/**
 * CalendarCache without action
 */
export type CalendarCacheDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCache
   */
  select?: Prisma.CalendarCacheSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCache
   */
  omit?: Prisma.CalendarCacheOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheInclude<ExtArgs> | null;
};
