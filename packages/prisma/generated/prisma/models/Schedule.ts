/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Schedule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Schedule
 *
 */
export type ScheduleModel = runtime.Types.Result.DefaultSelection<Prisma.$SchedulePayload>;

export type AggregateSchedule = {
  _count: ScheduleCountAggregateOutputType | null;
  _avg: ScheduleAvgAggregateOutputType | null;
  _sum: ScheduleSumAggregateOutputType | null;
  _min: ScheduleMinAggregateOutputType | null;
  _max: ScheduleMaxAggregateOutputType | null;
};

export type ScheduleAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type ScheduleSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type ScheduleMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  name: string | null;
  timeZone: string | null;
};

export type ScheduleMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  name: string | null;
  timeZone: string | null;
};

export type ScheduleCountAggregateOutputType = {
  id: number;
  userId: number;
  name: number;
  timeZone: number;
  _all: number;
};

export type ScheduleAvgAggregateInputType = {
  id?: true;
  userId?: true;
};

export type ScheduleSumAggregateInputType = {
  id?: true;
  userId?: true;
};

export type ScheduleMinAggregateInputType = {
  id?: true;
  userId?: true;
  name?: true;
  timeZone?: true;
};

export type ScheduleMaxAggregateInputType = {
  id?: true;
  userId?: true;
  name?: true;
  timeZone?: true;
};

export type ScheduleCountAggregateInputType = {
  id?: true;
  userId?: true;
  name?: true;
  timeZone?: true;
  _all?: true;
};

export type ScheduleAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Schedule to aggregate.
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Schedules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Schedules
   **/
  _count?: true | ScheduleCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ScheduleAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ScheduleSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ScheduleMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ScheduleMaxAggregateInputType;
};

export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
  [P in keyof T & keyof AggregateSchedule]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSchedule[P]>
    : Prisma.GetScalarType<T[P], AggregateSchedule[P]>;
};

export type ScheduleGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ScheduleWhereInput;
  orderBy?: Prisma.ScheduleOrderByWithAggregationInput | Prisma.ScheduleOrderByWithAggregationInput[];
  by: Prisma.ScheduleScalarFieldEnum[] | Prisma.ScheduleScalarFieldEnum;
  having?: Prisma.ScheduleScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ScheduleCountAggregateInputType | true;
  _avg?: ScheduleAvgAggregateInputType;
  _sum?: ScheduleSumAggregateInputType;
  _min?: ScheduleMinAggregateInputType;
  _max?: ScheduleMaxAggregateInputType;
};

export type ScheduleGroupByOutputType = {
  id: number;
  userId: number;
  name: string;
  timeZone: string | null;
  _count: ScheduleCountAggregateOutputType | null;
  _avg: ScheduleAvgAggregateOutputType | null;
  _sum: ScheduleSumAggregateOutputType | null;
  _min: ScheduleMinAggregateOutputType | null;
  _max: ScheduleMaxAggregateOutputType | null;
};

type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScheduleGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ScheduleGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ScheduleGroupByOutputType[P]>;
    }
  >
>;

export type ScheduleWhereInput = {
  AND?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[];
  OR?: Prisma.ScheduleWhereInput[];
  NOT?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[];
  id?: Prisma.IntFilter<"Schedule"> | number;
  userId?: Prisma.IntFilter<"Schedule"> | number;
  name?: Prisma.StringFilter<"Schedule"> | string;
  timeZone?: Prisma.StringNullableFilter<"Schedule"> | string | null;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  eventType?: Prisma.EventTypeListRelationFilter;
  instantMeetingEvents?: Prisma.EventTypeListRelationFilter;
  restrictionSchedule?: Prisma.EventTypeListRelationFilter;
  availability?: Prisma.AvailabilityListRelationFilter;
  Host?: Prisma.HostListRelationFilter;
};

export type ScheduleOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  eventType?: Prisma.EventTypeOrderByRelationAggregateInput;
  instantMeetingEvents?: Prisma.EventTypeOrderByRelationAggregateInput;
  restrictionSchedule?: Prisma.EventTypeOrderByRelationAggregateInput;
  availability?: Prisma.AvailabilityOrderByRelationAggregateInput;
  Host?: Prisma.HostOrderByRelationAggregateInput;
};

export type ScheduleWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[];
    OR?: Prisma.ScheduleWhereInput[];
    NOT?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[];
    userId?: Prisma.IntFilter<"Schedule"> | number;
    name?: Prisma.StringFilter<"Schedule"> | string;
    timeZone?: Prisma.StringNullableFilter<"Schedule"> | string | null;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    eventType?: Prisma.EventTypeListRelationFilter;
    instantMeetingEvents?: Prisma.EventTypeListRelationFilter;
    restrictionSchedule?: Prisma.EventTypeListRelationFilter;
    availability?: Prisma.AvailabilityListRelationFilter;
    Host?: Prisma.HostListRelationFilter;
  },
  "id"
>;

export type ScheduleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.ScheduleCountOrderByAggregateInput;
  _avg?: Prisma.ScheduleAvgOrderByAggregateInput;
  _max?: Prisma.ScheduleMaxOrderByAggregateInput;
  _min?: Prisma.ScheduleMinOrderByAggregateInput;
  _sum?: Prisma.ScheduleSumOrderByAggregateInput;
};

export type ScheduleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScheduleScalarWhereWithAggregatesInput | Prisma.ScheduleScalarWhereWithAggregatesInput[];
  OR?: Prisma.ScheduleScalarWhereWithAggregatesInput[];
  NOT?: Prisma.ScheduleScalarWhereWithAggregatesInput | Prisma.ScheduleScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Schedule"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"Schedule"> | number;
  name?: Prisma.StringWithAggregatesFilter<"Schedule"> | string;
  timeZone?: Prisma.StringNullableWithAggregatesFilter<"Schedule"> | string | null;
};

export type ScheduleCreateInput = {
  name: string;
  timeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutSchedulesInput;
  eventType?: Prisma.EventTypeCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeUncheckedCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityUncheckedCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutSchedulesNestedInput;
  eventType?: Prisma.EventTypeUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUncheckedUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleCreateManyInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
};

export type ScheduleUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ScheduleUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type ScheduleNullableScalarRelationFilter = {
  is?: Prisma.ScheduleWhereInput | null;
  isNot?: Prisma.ScheduleWhereInput | null;
};

export type ScheduleListRelationFilter = {
  every?: Prisma.ScheduleWhereInput;
  some?: Prisma.ScheduleWhereInput;
  none?: Prisma.ScheduleWhereInput;
};

export type ScheduleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ScheduleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
};

export type ScheduleAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ScheduleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
};

export type ScheduleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
};

export type ScheduleSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ScheduleCreateNestedOneWithoutHostInput = {
  create?: Prisma.XOR<Prisma.ScheduleCreateWithoutHostInput, Prisma.ScheduleUncheckedCreateWithoutHostInput>;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutHostInput;
  connect?: Prisma.ScheduleWhereUniqueInput;
};

export type ScheduleUpdateOneWithoutHostNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduleCreateWithoutHostInput, Prisma.ScheduleUncheckedCreateWithoutHostInput>;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutHostInput;
  upsert?: Prisma.ScheduleUpsertWithoutHostInput;
  disconnect?: Prisma.ScheduleWhereInput | boolean;
  delete?: Prisma.ScheduleWhereInput | boolean;
  connect?: Prisma.ScheduleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<Prisma.ScheduleUpdateToOneWithWhereWithoutHostInput, Prisma.ScheduleUpdateWithoutHostInput>,
    Prisma.ScheduleUncheckedUpdateWithoutHostInput
  >;
};

export type ScheduleCreateNestedOneWithoutEventTypeInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutEventTypeInput,
    Prisma.ScheduleUncheckedCreateWithoutEventTypeInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutEventTypeInput;
  connect?: Prisma.ScheduleWhereUniqueInput;
};

export type ScheduleCreateNestedOneWithoutInstantMeetingEventsInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutInstantMeetingEventsInput,
    Prisma.ScheduleUncheckedCreateWithoutInstantMeetingEventsInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutInstantMeetingEventsInput;
  connect?: Prisma.ScheduleWhereUniqueInput;
};

export type ScheduleCreateNestedOneWithoutRestrictionScheduleInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutRestrictionScheduleInput,
    Prisma.ScheduleUncheckedCreateWithoutRestrictionScheduleInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutRestrictionScheduleInput;
  connect?: Prisma.ScheduleWhereUniqueInput;
};

export type ScheduleUpdateOneWithoutEventTypeNestedInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutEventTypeInput,
    Prisma.ScheduleUncheckedCreateWithoutEventTypeInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutEventTypeInput;
  upsert?: Prisma.ScheduleUpsertWithoutEventTypeInput;
  disconnect?: Prisma.ScheduleWhereInput | boolean;
  delete?: Prisma.ScheduleWhereInput | boolean;
  connect?: Prisma.ScheduleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ScheduleUpdateToOneWithWhereWithoutEventTypeInput,
      Prisma.ScheduleUpdateWithoutEventTypeInput
    >,
    Prisma.ScheduleUncheckedUpdateWithoutEventTypeInput
  >;
};

export type ScheduleUpdateOneWithoutInstantMeetingEventsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutInstantMeetingEventsInput,
    Prisma.ScheduleUncheckedCreateWithoutInstantMeetingEventsInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutInstantMeetingEventsInput;
  upsert?: Prisma.ScheduleUpsertWithoutInstantMeetingEventsInput;
  disconnect?: Prisma.ScheduleWhereInput | boolean;
  delete?: Prisma.ScheduleWhereInput | boolean;
  connect?: Prisma.ScheduleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ScheduleUpdateToOneWithWhereWithoutInstantMeetingEventsInput,
      Prisma.ScheduleUpdateWithoutInstantMeetingEventsInput
    >,
    Prisma.ScheduleUncheckedUpdateWithoutInstantMeetingEventsInput
  >;
};

export type ScheduleUpdateOneWithoutRestrictionScheduleNestedInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutRestrictionScheduleInput,
    Prisma.ScheduleUncheckedCreateWithoutRestrictionScheduleInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutRestrictionScheduleInput;
  upsert?: Prisma.ScheduleUpsertWithoutRestrictionScheduleInput;
  disconnect?: Prisma.ScheduleWhereInput | boolean;
  delete?: Prisma.ScheduleWhereInput | boolean;
  connect?: Prisma.ScheduleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ScheduleUpdateToOneWithWhereWithoutRestrictionScheduleInput,
      Prisma.ScheduleUpdateWithoutRestrictionScheduleInput
    >,
    Prisma.ScheduleUncheckedUpdateWithoutRestrictionScheduleInput
  >;
};

export type ScheduleCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.ScheduleCreateWithoutUserInput, Prisma.ScheduleUncheckedCreateWithoutUserInput>
    | Prisma.ScheduleCreateWithoutUserInput[]
    | Prisma.ScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ScheduleCreateOrConnectWithoutUserInput
    | Prisma.ScheduleCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ScheduleCreateManyUserInputEnvelope;
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
};

export type ScheduleUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.ScheduleCreateWithoutUserInput, Prisma.ScheduleUncheckedCreateWithoutUserInput>
    | Prisma.ScheduleCreateWithoutUserInput[]
    | Prisma.ScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ScheduleCreateOrConnectWithoutUserInput
    | Prisma.ScheduleCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ScheduleCreateManyUserInputEnvelope;
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
};

export type ScheduleUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.ScheduleCreateWithoutUserInput, Prisma.ScheduleUncheckedCreateWithoutUserInput>
    | Prisma.ScheduleCreateWithoutUserInput[]
    | Prisma.ScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ScheduleCreateOrConnectWithoutUserInput
    | Prisma.ScheduleCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ScheduleUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ScheduleUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ScheduleCreateManyUserInputEnvelope;
  set?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  disconnect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  delete?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  update?:
    | Prisma.ScheduleUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ScheduleUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ScheduleUpdateManyWithWhereWithoutUserInput
    | Prisma.ScheduleUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[];
};

export type ScheduleUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.ScheduleCreateWithoutUserInput, Prisma.ScheduleUncheckedCreateWithoutUserInput>
    | Prisma.ScheduleCreateWithoutUserInput[]
    | Prisma.ScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ScheduleCreateOrConnectWithoutUserInput
    | Prisma.ScheduleCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ScheduleUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ScheduleUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ScheduleCreateManyUserInputEnvelope;
  set?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  disconnect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  delete?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[];
  update?:
    | Prisma.ScheduleUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ScheduleUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ScheduleUpdateManyWithWhereWithoutUserInput
    | Prisma.ScheduleUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[];
};

export type ScheduleCreateNestedOneWithoutAvailabilityInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutAvailabilityInput,
    Prisma.ScheduleUncheckedCreateWithoutAvailabilityInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutAvailabilityInput;
  connect?: Prisma.ScheduleWhereUniqueInput;
};

export type ScheduleUpdateOneWithoutAvailabilityNestedInput = {
  create?: Prisma.XOR<
    Prisma.ScheduleCreateWithoutAvailabilityInput,
    Prisma.ScheduleUncheckedCreateWithoutAvailabilityInput
  >;
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutAvailabilityInput;
  upsert?: Prisma.ScheduleUpsertWithoutAvailabilityInput;
  disconnect?: Prisma.ScheduleWhereInput | boolean;
  delete?: Prisma.ScheduleWhereInput | boolean;
  connect?: Prisma.ScheduleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ScheduleUpdateToOneWithWhereWithoutAvailabilityInput,
      Prisma.ScheduleUpdateWithoutAvailabilityInput
    >,
    Prisma.ScheduleUncheckedUpdateWithoutAvailabilityInput
  >;
};

export type ScheduleCreateWithoutHostInput = {
  name: string;
  timeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutSchedulesInput;
  eventType?: Prisma.EventTypeCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateWithoutHostInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeUncheckedCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleCreateOrConnectWithoutHostInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  create: Prisma.XOR<Prisma.ScheduleCreateWithoutHostInput, Prisma.ScheduleUncheckedCreateWithoutHostInput>;
};

export type ScheduleUpsertWithoutHostInput = {
  update: Prisma.XOR<Prisma.ScheduleUpdateWithoutHostInput, Prisma.ScheduleUncheckedUpdateWithoutHostInput>;
  create: Prisma.XOR<Prisma.ScheduleCreateWithoutHostInput, Prisma.ScheduleUncheckedCreateWithoutHostInput>;
  where?: Prisma.ScheduleWhereInput;
};

export type ScheduleUpdateToOneWithWhereWithoutHostInput = {
  where?: Prisma.ScheduleWhereInput;
  data: Prisma.XOR<Prisma.ScheduleUpdateWithoutHostInput, Prisma.ScheduleUncheckedUpdateWithoutHostInput>;
};

export type ScheduleUpdateWithoutHostInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutSchedulesNestedInput;
  eventType?: Prisma.EventTypeUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateWithoutHostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUncheckedUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleCreateWithoutEventTypeInput = {
  name: string;
  timeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutSchedulesInput;
  instantMeetingEvents?: Prisma.EventTypeCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateWithoutEventTypeInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
  instantMeetingEvents?: Prisma.EventTypeUncheckedCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityUncheckedCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleCreateOrConnectWithoutEventTypeInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutEventTypeInput,
    Prisma.ScheduleUncheckedCreateWithoutEventTypeInput
  >;
};

export type ScheduleCreateWithoutInstantMeetingEventsInput = {
  name: string;
  timeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutSchedulesInput;
  eventType?: Prisma.EventTypeCreateNestedManyWithoutScheduleInput;
  restrictionSchedule?: Prisma.EventTypeCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateWithoutInstantMeetingEventsInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeUncheckedCreateNestedManyWithoutScheduleInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityUncheckedCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleCreateOrConnectWithoutInstantMeetingEventsInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutInstantMeetingEventsInput,
    Prisma.ScheduleUncheckedCreateWithoutInstantMeetingEventsInput
  >;
};

export type ScheduleCreateWithoutRestrictionScheduleInput = {
  name: string;
  timeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutSchedulesInput;
  eventType?: Prisma.EventTypeCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeCreateNestedManyWithoutInstantMeetingScheduleInput;
  availability?: Prisma.AvailabilityCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateWithoutRestrictionScheduleInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeUncheckedCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedCreateNestedManyWithoutInstantMeetingScheduleInput;
  availability?: Prisma.AvailabilityUncheckedCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleCreateOrConnectWithoutRestrictionScheduleInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutRestrictionScheduleInput,
    Prisma.ScheduleUncheckedCreateWithoutRestrictionScheduleInput
  >;
};

export type ScheduleUpsertWithoutEventTypeInput = {
  update: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutEventTypeInput,
    Prisma.ScheduleUncheckedUpdateWithoutEventTypeInput
  >;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutEventTypeInput,
    Prisma.ScheduleUncheckedCreateWithoutEventTypeInput
  >;
  where?: Prisma.ScheduleWhereInput;
};

export type ScheduleUpdateToOneWithWhereWithoutEventTypeInput = {
  where?: Prisma.ScheduleWhereInput;
  data: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutEventTypeInput,
    Prisma.ScheduleUncheckedUpdateWithoutEventTypeInput
  >;
};

export type ScheduleUpdateWithoutEventTypeInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutSchedulesNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  instantMeetingEvents?: Prisma.EventTypeUncheckedUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUpsertWithoutInstantMeetingEventsInput = {
  update: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutInstantMeetingEventsInput,
    Prisma.ScheduleUncheckedUpdateWithoutInstantMeetingEventsInput
  >;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutInstantMeetingEventsInput,
    Prisma.ScheduleUncheckedCreateWithoutInstantMeetingEventsInput
  >;
  where?: Prisma.ScheduleWhereInput;
};

export type ScheduleUpdateToOneWithWhereWithoutInstantMeetingEventsInput = {
  where?: Prisma.ScheduleWhereInput;
  data: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutInstantMeetingEventsInput,
    Prisma.ScheduleUncheckedUpdateWithoutInstantMeetingEventsInput
  >;
};

export type ScheduleUpdateWithoutInstantMeetingEventsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutSchedulesNestedInput;
  eventType?: Prisma.EventTypeUpdateManyWithoutScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateWithoutInstantMeetingEventsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUncheckedUpdateManyWithoutScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUpsertWithoutRestrictionScheduleInput = {
  update: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutRestrictionScheduleInput,
    Prisma.ScheduleUncheckedUpdateWithoutRestrictionScheduleInput
  >;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutRestrictionScheduleInput,
    Prisma.ScheduleUncheckedCreateWithoutRestrictionScheduleInput
  >;
  where?: Prisma.ScheduleWhereInput;
};

export type ScheduleUpdateToOneWithWhereWithoutRestrictionScheduleInput = {
  where?: Prisma.ScheduleWhereInput;
  data: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutRestrictionScheduleInput,
    Prisma.ScheduleUncheckedUpdateWithoutRestrictionScheduleInput
  >;
};

export type ScheduleUpdateWithoutRestrictionScheduleInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutSchedulesNestedInput;
  eventType?: Prisma.EventTypeUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUpdateManyWithoutInstantMeetingScheduleNestedInput;
  availability?: Prisma.AvailabilityUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateWithoutRestrictionScheduleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUncheckedUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedUpdateManyWithoutInstantMeetingScheduleNestedInput;
  availability?: Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleCreateWithoutUserInput = {
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateWithoutUserInput = {
  id?: number;
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeUncheckedCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedCreateNestedManyWithoutRestrictionScheduleInput;
  availability?: Prisma.AvailabilityUncheckedCreateNestedManyWithoutScheduleInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleCreateOrConnectWithoutUserInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  create: Prisma.XOR<Prisma.ScheduleCreateWithoutUserInput, Prisma.ScheduleUncheckedCreateWithoutUserInput>;
};

export type ScheduleCreateManyUserInputEnvelope = {
  data: Prisma.ScheduleCreateManyUserInput | Prisma.ScheduleCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type ScheduleUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  update: Prisma.XOR<Prisma.ScheduleUpdateWithoutUserInput, Prisma.ScheduleUncheckedUpdateWithoutUserInput>;
  create: Prisma.XOR<Prisma.ScheduleCreateWithoutUserInput, Prisma.ScheduleUncheckedCreateWithoutUserInput>;
};

export type ScheduleUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  data: Prisma.XOR<Prisma.ScheduleUpdateWithoutUserInput, Prisma.ScheduleUncheckedUpdateWithoutUserInput>;
};

export type ScheduleUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ScheduleScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ScheduleUpdateManyMutationInput,
    Prisma.ScheduleUncheckedUpdateManyWithoutUserInput
  >;
};

export type ScheduleScalarWhereInput = {
  AND?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[];
  OR?: Prisma.ScheduleScalarWhereInput[];
  NOT?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[];
  id?: Prisma.IntFilter<"Schedule"> | number;
  userId?: Prisma.IntFilter<"Schedule"> | number;
  name?: Prisma.StringFilter<"Schedule"> | string;
  timeZone?: Prisma.StringNullableFilter<"Schedule"> | string | null;
};

export type ScheduleCreateWithoutAvailabilityInput = {
  name: string;
  timeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutSchedulesInput;
  eventType?: Prisma.EventTypeCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeCreateNestedManyWithoutRestrictionScheduleInput;
  Host?: Prisma.HostCreateNestedManyWithoutScheduleInput;
};

export type ScheduleUncheckedCreateWithoutAvailabilityInput = {
  id?: number;
  userId: number;
  name: string;
  timeZone?: string | null;
  eventType?: Prisma.EventTypeUncheckedCreateNestedManyWithoutScheduleInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedCreateNestedManyWithoutInstantMeetingScheduleInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedCreateNestedManyWithoutRestrictionScheduleInput;
  Host?: Prisma.HostUncheckedCreateNestedManyWithoutScheduleInput;
};

export type ScheduleCreateOrConnectWithoutAvailabilityInput = {
  where: Prisma.ScheduleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutAvailabilityInput,
    Prisma.ScheduleUncheckedCreateWithoutAvailabilityInput
  >;
};

export type ScheduleUpsertWithoutAvailabilityInput = {
  update: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutAvailabilityInput,
    Prisma.ScheduleUncheckedUpdateWithoutAvailabilityInput
  >;
  create: Prisma.XOR<
    Prisma.ScheduleCreateWithoutAvailabilityInput,
    Prisma.ScheduleUncheckedCreateWithoutAvailabilityInput
  >;
  where?: Prisma.ScheduleWhereInput;
};

export type ScheduleUpdateToOneWithWhereWithoutAvailabilityInput = {
  where?: Prisma.ScheduleWhereInput;
  data: Prisma.XOR<
    Prisma.ScheduleUpdateWithoutAvailabilityInput,
    Prisma.ScheduleUncheckedUpdateWithoutAvailabilityInput
  >;
};

export type ScheduleUpdateWithoutAvailabilityInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutSchedulesNestedInput;
  eventType?: Prisma.EventTypeUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUpdateManyWithoutRestrictionScheduleNestedInput;
  Host?: Prisma.HostUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateWithoutAvailabilityInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUncheckedUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedUpdateManyWithoutRestrictionScheduleNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleCreateManyUserInput = {
  id?: number;
  name: string;
  timeZone?: string | null;
};

export type ScheduleUpdateWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  eventType?: Prisma.EventTypeUncheckedUpdateManyWithoutScheduleNestedInput;
  instantMeetingEvents?: Prisma.EventTypeUncheckedUpdateManyWithoutInstantMeetingScheduleNestedInput;
  restrictionSchedule?: Prisma.EventTypeUncheckedUpdateManyWithoutRestrictionScheduleNestedInput;
  availability?: Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput;
  Host?: Prisma.HostUncheckedUpdateManyWithoutScheduleNestedInput;
};

export type ScheduleUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

/**
 * Count Type ScheduleCountOutputType
 */

export type ScheduleCountOutputType = {
  eventType: number;
  instantMeetingEvents: number;
  restrictionSchedule: number;
  availability: number;
  Host: number;
};

export type ScheduleCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventType?: boolean | ScheduleCountOutputTypeCountEventTypeArgs;
  instantMeetingEvents?: boolean | ScheduleCountOutputTypeCountInstantMeetingEventsArgs;
  restrictionSchedule?: boolean | ScheduleCountOutputTypeCountRestrictionScheduleArgs;
  availability?: boolean | ScheduleCountOutputTypeCountAvailabilityArgs;
  Host?: boolean | ScheduleCountOutputTypeCountHostArgs;
};

/**
 * ScheduleCountOutputType without action
 */
export type ScheduleCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ScheduleCountOutputType
   */
  select?: Prisma.ScheduleCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ScheduleCountOutputType without action
 */
export type ScheduleCountOutputTypeCountEventTypeArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.EventTypeWhereInput;
};

/**
 * ScheduleCountOutputType without action
 */
export type ScheduleCountOutputTypeCountInstantMeetingEventsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.EventTypeWhereInput;
};

/**
 * ScheduleCountOutputType without action
 */
export type ScheduleCountOutputTypeCountRestrictionScheduleArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.EventTypeWhereInput;
};

/**
 * ScheduleCountOutputType without action
 */
export type ScheduleCountOutputTypeCountAvailabilityArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AvailabilityWhereInput;
};

/**
 * ScheduleCountOutputType without action
 */
export type ScheduleCountOutputTypeCountHostArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.HostWhereInput;
};

export type ScheduleSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    name?: boolean;
    timeZone?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    eventType?: boolean | Prisma.Schedule$eventTypeArgs<ExtArgs>;
    instantMeetingEvents?: boolean | Prisma.Schedule$instantMeetingEventsArgs<ExtArgs>;
    restrictionSchedule?: boolean | Prisma.Schedule$restrictionScheduleArgs<ExtArgs>;
    availability?: boolean | Prisma.Schedule$availabilityArgs<ExtArgs>;
    Host?: boolean | Prisma.Schedule$HostArgs<ExtArgs>;
    _count?: boolean | Prisma.ScheduleCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schedule"]
>;

export type ScheduleSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    name?: boolean;
    timeZone?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schedule"]
>;

export type ScheduleSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    name?: boolean;
    timeZone?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["schedule"]
>;

export type ScheduleSelectScalar = {
  id?: boolean;
  userId?: boolean;
  name?: boolean;
  timeZone?: boolean;
};

export type ScheduleOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "name" | "timeZone", ExtArgs["result"]["schedule"]>;
export type ScheduleInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  eventType?: boolean | Prisma.Schedule$eventTypeArgs<ExtArgs>;
  instantMeetingEvents?: boolean | Prisma.Schedule$instantMeetingEventsArgs<ExtArgs>;
  restrictionSchedule?: boolean | Prisma.Schedule$restrictionScheduleArgs<ExtArgs>;
  availability?: boolean | Prisma.Schedule$availabilityArgs<ExtArgs>;
  Host?: boolean | Prisma.Schedule$HostArgs<ExtArgs>;
  _count?: boolean | Prisma.ScheduleCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ScheduleIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ScheduleIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $SchedulePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Schedule";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    eventType: Prisma.$EventTypePayload<ExtArgs>[];
    instantMeetingEvents: Prisma.$EventTypePayload<ExtArgs>[];
    restrictionSchedule: Prisma.$EventTypePayload<ExtArgs>[];
    availability: Prisma.$AvailabilityPayload<ExtArgs>[];
    Host: Prisma.$HostPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number;
      name: string;
      timeZone: string | null;
    },
    ExtArgs["result"]["schedule"]
  >;
  composites: {};
};

export type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$SchedulePayload, S>;

export type ScheduleCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ScheduleFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ScheduleCountAggregateInputType | true;
};

export interface ScheduleDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Schedule"]; meta: { name: "Schedule" } };
  /**
   * Find zero or one Schedule that matches the filter.
   * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScheduleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Schedule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Schedule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScheduleFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Schedule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Schedules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Schedules
   * const schedules = await prisma.schedule.findMany()
   *
   * // Get first 10 Schedules
   * const schedules = await prisma.schedule.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ScheduleFindManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Schedule.
   * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
   * @example
   * // Create one Schedule
   * const Schedule = await prisma.schedule.create({
   *   data: {
   *     // ... data to create a Schedule
   *   }
   * })
   *
   */
  create<T extends ScheduleCreateArgs>(
    args: Prisma.SelectSubset<T, ScheduleCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Schedules.
   * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
   * @example
   * // Create many Schedules
   * const schedule = await prisma.schedule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ScheduleCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Schedules and returns the data saved in the database.
   * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
   * @example
   * // Create many Schedules
   * const schedule = await prisma.schedule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Schedules and only return the `id`
   * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Schedule.
   * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
   * @example
   * // Delete one Schedule
   * const Schedule = await prisma.schedule.delete({
   *   where: {
   *     // ... filter to delete one Schedule
   *   }
   * })
   *
   */
  delete<T extends ScheduleDeleteArgs>(
    args: Prisma.SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Schedule.
   * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
   * @example
   * // Update one Schedule
   * const schedule = await prisma.schedule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ScheduleUpdateArgs>(
    args: Prisma.SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Schedules.
   * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
   * @example
   * // Delete a few Schedules
   * const { count } = await prisma.schedule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ScheduleDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Schedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Schedules
   * const schedule = await prisma.schedule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ScheduleUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Schedules and returns the data updated in the database.
   * @param {ScheduleUpdateManyAndReturnArgs} args - Arguments to update many Schedules.
   * @example
   * // Update many Schedules
   * const schedule = await prisma.schedule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Schedules and only return the `id`
   * const scheduleWithIdOnly = await prisma.schedule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ScheduleUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ScheduleUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Schedule.
   * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
   * @example
   * // Update or create a Schedule
   * const schedule = await prisma.schedule.upsert({
   *   create: {
   *     // ... data to create a Schedule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Schedule we want to update
   *   }
   * })
   */
  upsert<T extends ScheduleUpsertArgs>(
    args: Prisma.SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Schedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
   * @example
   * // Count the number of Schedules
   * const count = await prisma.schedule.count({
   *   where: {
   *     // ... the filter for the Schedules we want to count
   *   }
   * })
   **/
  count<T extends ScheduleCountArgs>(
    args?: Prisma.Subset<T, ScheduleCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ScheduleCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Schedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ScheduleAggregateArgs>(
    args: Prisma.Subset<T, ScheduleAggregateArgs>
  ): Prisma.PrismaPromise<GetScheduleAggregateType<T>>;

  /**
   * Group by Schedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ScheduleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScheduleGroupByArgs["orderBy"] }
      : { orderBy?: ScheduleGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Schedule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScheduleClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  eventType<T extends Prisma.Schedule$eventTypeArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Schedule$eventTypeArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$EventTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  instantMeetingEvents<T extends Prisma.Schedule$instantMeetingEventsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Schedule$instantMeetingEventsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$EventTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  restrictionSchedule<T extends Prisma.Schedule$restrictionScheduleArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Schedule$restrictionScheduleArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$EventTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  availability<T extends Prisma.Schedule$availabilityArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Schedule$availabilityArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
    | Null
  >;
  Host<T extends Prisma.Schedule$HostArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Schedule$HostArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$HostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Schedule model
 */
export interface ScheduleFieldRefs {
  readonly id: Prisma.FieldRef<"Schedule", "Int">;
  readonly userId: Prisma.FieldRef<"Schedule", "Int">;
  readonly name: Prisma.FieldRef<"Schedule", "String">;
  readonly timeZone: Prisma.FieldRef<"Schedule", "String">;
}

// Custom InputTypes
/**
 * Schedule findUnique
 */
export type ScheduleFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which Schedule to fetch.
   */
  where: Prisma.ScheduleWhereUniqueInput;
};

/**
 * Schedule findUniqueOrThrow
 */
export type ScheduleFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which Schedule to fetch.
   */
  where: Prisma.ScheduleWhereUniqueInput;
};

/**
 * Schedule findFirst
 */
export type ScheduleFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which Schedule to fetch.
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Schedules.
   */
  cursor?: Prisma.ScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Schedules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Schedules.
   */
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[];
};

/**
 * Schedule findFirstOrThrow
 */
export type ScheduleFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which Schedule to fetch.
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Schedules.
   */
  cursor?: Prisma.ScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Schedules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Schedules.
   */
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[];
};

/**
 * Schedule findMany
 */
export type ScheduleFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which Schedules to fetch.
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Schedules.
   */
  cursor?: Prisma.ScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Schedules.
   */
  skip?: number;
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[];
};

/**
 * Schedule create
 */
export type ScheduleCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * The data needed to create a Schedule.
   */
  data: Prisma.XOR<Prisma.ScheduleCreateInput, Prisma.ScheduleUncheckedCreateInput>;
};

/**
 * Schedule createMany
 */
export type ScheduleCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Schedules.
   */
  data: Prisma.ScheduleCreateManyInput | Prisma.ScheduleCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Schedule createManyAndReturn
 */
export type ScheduleCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * The data used to create many Schedules.
   */
  data: Prisma.ScheduleCreateManyInput | Prisma.ScheduleCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Schedule update
 */
export type ScheduleUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * The data needed to update a Schedule.
   */
  data: Prisma.XOR<Prisma.ScheduleUpdateInput, Prisma.ScheduleUncheckedUpdateInput>;
  /**
   * Choose, which Schedule to update.
   */
  where: Prisma.ScheduleWhereUniqueInput;
};

/**
 * Schedule updateMany
 */
export type ScheduleUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Schedules.
   */
  data: Prisma.XOR<Prisma.ScheduleUpdateManyMutationInput, Prisma.ScheduleUncheckedUpdateManyInput>;
  /**
   * Filter which Schedules to update
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * Limit how many Schedules to update.
   */
  limit?: number;
};

/**
 * Schedule updateManyAndReturn
 */
export type ScheduleUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * The data used to update Schedules.
   */
  data: Prisma.XOR<Prisma.ScheduleUpdateManyMutationInput, Prisma.ScheduleUncheckedUpdateManyInput>;
  /**
   * Filter which Schedules to update
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * Limit how many Schedules to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Schedule upsert
 */
export type ScheduleUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * The filter to search for the Schedule to update in case it exists.
   */
  where: Prisma.ScheduleWhereUniqueInput;
  /**
   * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
   */
  create: Prisma.XOR<Prisma.ScheduleCreateInput, Prisma.ScheduleUncheckedCreateInput>;
  /**
   * In case the Schedule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScheduleUpdateInput, Prisma.ScheduleUncheckedUpdateInput>;
};

/**
 * Schedule delete
 */
export type ScheduleDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  /**
   * Filter which Schedule to delete.
   */
  where: Prisma.ScheduleWhereUniqueInput;
};

/**
 * Schedule deleteMany
 */
export type ScheduleDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Schedules to delete
   */
  where?: Prisma.ScheduleWhereInput;
  /**
   * Limit how many Schedules to delete.
   */
  limit?: number;
};

/**
 * Schedule.eventType
 */
export type Schedule$eventTypeArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the EventType
   */
  select?: Prisma.EventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EventType
   */
  omit?: Prisma.EventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventTypeInclude<ExtArgs> | null;
  where?: Prisma.EventTypeWhereInput;
  orderBy?: Prisma.EventTypeOrderByWithRelationInput | Prisma.EventTypeOrderByWithRelationInput[];
  cursor?: Prisma.EventTypeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.EventTypeScalarFieldEnum | Prisma.EventTypeScalarFieldEnum[];
};

/**
 * Schedule.instantMeetingEvents
 */
export type Schedule$instantMeetingEventsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the EventType
   */
  select?: Prisma.EventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EventType
   */
  omit?: Prisma.EventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventTypeInclude<ExtArgs> | null;
  where?: Prisma.EventTypeWhereInput;
  orderBy?: Prisma.EventTypeOrderByWithRelationInput | Prisma.EventTypeOrderByWithRelationInput[];
  cursor?: Prisma.EventTypeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.EventTypeScalarFieldEnum | Prisma.EventTypeScalarFieldEnum[];
};

/**
 * Schedule.restrictionSchedule
 */
export type Schedule$restrictionScheduleArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the EventType
   */
  select?: Prisma.EventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EventType
   */
  omit?: Prisma.EventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventTypeInclude<ExtArgs> | null;
  where?: Prisma.EventTypeWhereInput;
  orderBy?: Prisma.EventTypeOrderByWithRelationInput | Prisma.EventTypeOrderByWithRelationInput[];
  cursor?: Prisma.EventTypeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.EventTypeScalarFieldEnum | Prisma.EventTypeScalarFieldEnum[];
};

/**
 * Schedule.availability
 */
export type Schedule$availabilityArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  where?: Prisma.AvailabilityWhereInput;
  orderBy?: Prisma.AvailabilityOrderByWithRelationInput | Prisma.AvailabilityOrderByWithRelationInput[];
  cursor?: Prisma.AvailabilityWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.AvailabilityScalarFieldEnum | Prisma.AvailabilityScalarFieldEnum[];
};

/**
 * Schedule.Host
 */
export type Schedule$HostArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Host
   */
  select?: Prisma.HostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Host
   */
  omit?: Prisma.HostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostInclude<ExtArgs> | null;
  where?: Prisma.HostWhereInput;
  orderBy?: Prisma.HostOrderByWithRelationInput | Prisma.HostOrderByWithRelationInput[];
  cursor?: Prisma.HostWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.HostScalarFieldEnum | Prisma.HostScalarFieldEnum[];
};

/**
 * Schedule without action
 */
export type ScheduleDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
};
