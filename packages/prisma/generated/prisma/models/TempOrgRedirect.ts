/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `TempOrgRedirect` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TempOrgRedirect
 *
 */
export type TempOrgRedirectModel = runtime.Types.Result.DefaultSelection<Prisma.$TempOrgRedirectPayload>;

export type AggregateTempOrgRedirect = {
  _count: TempOrgRedirectCountAggregateOutputType | null;
  _avg: TempOrgRedirectAvgAggregateOutputType | null;
  _sum: TempOrgRedirectSumAggregateOutputType | null;
  _min: TempOrgRedirectMinAggregateOutputType | null;
  _max: TempOrgRedirectMaxAggregateOutputType | null;
};

export type TempOrgRedirectAvgAggregateOutputType = {
  id: number | null;
  fromOrgId: number | null;
};

export type TempOrgRedirectSumAggregateOutputType = {
  id: number | null;
  fromOrgId: number | null;
};

export type TempOrgRedirectMinAggregateOutputType = {
  id: number | null;
  from: string | null;
  fromOrgId: number | null;
  type: $Enums.RedirectType | null;
  toUrl: string | null;
  enabled: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TempOrgRedirectMaxAggregateOutputType = {
  id: number | null;
  from: string | null;
  fromOrgId: number | null;
  type: $Enums.RedirectType | null;
  toUrl: string | null;
  enabled: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TempOrgRedirectCountAggregateOutputType = {
  id: number;
  from: number;
  fromOrgId: number;
  type: number;
  toUrl: number;
  enabled: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type TempOrgRedirectAvgAggregateInputType = {
  id?: true;
  fromOrgId?: true;
};

export type TempOrgRedirectSumAggregateInputType = {
  id?: true;
  fromOrgId?: true;
};

export type TempOrgRedirectMinAggregateInputType = {
  id?: true;
  from?: true;
  fromOrgId?: true;
  type?: true;
  toUrl?: true;
  enabled?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TempOrgRedirectMaxAggregateInputType = {
  id?: true;
  from?: true;
  fromOrgId?: true;
  type?: true;
  toUrl?: true;
  enabled?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TempOrgRedirectCountAggregateInputType = {
  id?: true;
  from?: true;
  fromOrgId?: true;
  type?: true;
  toUrl?: true;
  enabled?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type TempOrgRedirectAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TempOrgRedirect to aggregate.
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TempOrgRedirects to fetch.
   */
  orderBy?: Prisma.TempOrgRedirectOrderByWithRelationInput | Prisma.TempOrgRedirectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TempOrgRedirectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TempOrgRedirects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TempOrgRedirects.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TempOrgRedirects
   **/
  _count?: true | TempOrgRedirectCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TempOrgRedirectAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TempOrgRedirectSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TempOrgRedirectMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TempOrgRedirectMaxAggregateInputType;
};

export type GetTempOrgRedirectAggregateType<T extends TempOrgRedirectAggregateArgs> = {
  [P in keyof T & keyof AggregateTempOrgRedirect]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTempOrgRedirect[P]>
    : Prisma.GetScalarType<T[P], AggregateTempOrgRedirect[P]>;
};

export type TempOrgRedirectGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.TempOrgRedirectWhereInput;
  orderBy?:
    | Prisma.TempOrgRedirectOrderByWithAggregationInput
    | Prisma.TempOrgRedirectOrderByWithAggregationInput[];
  by: Prisma.TempOrgRedirectScalarFieldEnum[] | Prisma.TempOrgRedirectScalarFieldEnum;
  having?: Prisma.TempOrgRedirectScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TempOrgRedirectCountAggregateInputType | true;
  _avg?: TempOrgRedirectAvgAggregateInputType;
  _sum?: TempOrgRedirectSumAggregateInputType;
  _min?: TempOrgRedirectMinAggregateInputType;
  _max?: TempOrgRedirectMaxAggregateInputType;
};

export type TempOrgRedirectGroupByOutputType = {
  id: number;
  from: string;
  fromOrgId: number;
  type: $Enums.RedirectType;
  toUrl: string;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: TempOrgRedirectCountAggregateOutputType | null;
  _avg: TempOrgRedirectAvgAggregateOutputType | null;
  _sum: TempOrgRedirectSumAggregateOutputType | null;
  _min: TempOrgRedirectMinAggregateOutputType | null;
  _max: TempOrgRedirectMaxAggregateOutputType | null;
};

type GetTempOrgRedirectGroupByPayload<T extends TempOrgRedirectGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TempOrgRedirectGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof TempOrgRedirectGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TempOrgRedirectGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TempOrgRedirectGroupByOutputType[P]>;
    }
  >
>;

export type TempOrgRedirectWhereInput = {
  AND?: Prisma.TempOrgRedirectWhereInput | Prisma.TempOrgRedirectWhereInput[];
  OR?: Prisma.TempOrgRedirectWhereInput[];
  NOT?: Prisma.TempOrgRedirectWhereInput | Prisma.TempOrgRedirectWhereInput[];
  id?: Prisma.IntFilter<"TempOrgRedirect"> | number;
  from?: Prisma.StringFilter<"TempOrgRedirect"> | string;
  fromOrgId?: Prisma.IntFilter<"TempOrgRedirect"> | number;
  type?: Prisma.EnumRedirectTypeFilter<"TempOrgRedirect"> | $Enums.RedirectType;
  toUrl?: Prisma.StringFilter<"TempOrgRedirect"> | string;
  enabled?: Prisma.BoolFilter<"TempOrgRedirect"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"TempOrgRedirect"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"TempOrgRedirect"> | Date | string;
};

export type TempOrgRedirectOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  toUrl?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TempOrgRedirectWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    from_type_fromOrgId?: Prisma.TempOrgRedirectFromTypeFromOrgIdCompoundUniqueInput;
    AND?: Prisma.TempOrgRedirectWhereInput | Prisma.TempOrgRedirectWhereInput[];
    OR?: Prisma.TempOrgRedirectWhereInput[];
    NOT?: Prisma.TempOrgRedirectWhereInput | Prisma.TempOrgRedirectWhereInput[];
    from?: Prisma.StringFilter<"TempOrgRedirect"> | string;
    fromOrgId?: Prisma.IntFilter<"TempOrgRedirect"> | number;
    type?: Prisma.EnumRedirectTypeFilter<"TempOrgRedirect"> | $Enums.RedirectType;
    toUrl?: Prisma.StringFilter<"TempOrgRedirect"> | string;
    enabled?: Prisma.BoolFilter<"TempOrgRedirect"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"TempOrgRedirect"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"TempOrgRedirect"> | Date | string;
  },
  "id" | "from_type_fromOrgId"
>;

export type TempOrgRedirectOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  toUrl?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.TempOrgRedirectCountOrderByAggregateInput;
  _avg?: Prisma.TempOrgRedirectAvgOrderByAggregateInput;
  _max?: Prisma.TempOrgRedirectMaxOrderByAggregateInput;
  _min?: Prisma.TempOrgRedirectMinOrderByAggregateInput;
  _sum?: Prisma.TempOrgRedirectSumOrderByAggregateInput;
};

export type TempOrgRedirectScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TempOrgRedirectScalarWhereWithAggregatesInput
    | Prisma.TempOrgRedirectScalarWhereWithAggregatesInput[];
  OR?: Prisma.TempOrgRedirectScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TempOrgRedirectScalarWhereWithAggregatesInput
    | Prisma.TempOrgRedirectScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"TempOrgRedirect"> | number;
  from?: Prisma.StringWithAggregatesFilter<"TempOrgRedirect"> | string;
  fromOrgId?: Prisma.IntWithAggregatesFilter<"TempOrgRedirect"> | number;
  type?: Prisma.EnumRedirectTypeWithAggregatesFilter<"TempOrgRedirect"> | $Enums.RedirectType;
  toUrl?: Prisma.StringWithAggregatesFilter<"TempOrgRedirect"> | string;
  enabled?: Prisma.BoolWithAggregatesFilter<"TempOrgRedirect"> | boolean;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TempOrgRedirect"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TempOrgRedirect"> | Date | string;
};

export type TempOrgRedirectCreateInput = {
  from: string;
  fromOrgId: number;
  type: $Enums.RedirectType;
  toUrl: string;
  enabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TempOrgRedirectUncheckedCreateInput = {
  id?: number;
  from: string;
  fromOrgId: number;
  type: $Enums.RedirectType;
  toUrl: string;
  enabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TempOrgRedirectUpdateInput = {
  from?: Prisma.StringFieldUpdateOperationsInput | string;
  fromOrgId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumRedirectTypeFieldUpdateOperationsInput | $Enums.RedirectType;
  toUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TempOrgRedirectUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  from?: Prisma.StringFieldUpdateOperationsInput | string;
  fromOrgId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumRedirectTypeFieldUpdateOperationsInput | $Enums.RedirectType;
  toUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TempOrgRedirectCreateManyInput = {
  id?: number;
  from: string;
  fromOrgId: number;
  type: $Enums.RedirectType;
  toUrl: string;
  enabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TempOrgRedirectUpdateManyMutationInput = {
  from?: Prisma.StringFieldUpdateOperationsInput | string;
  fromOrgId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumRedirectTypeFieldUpdateOperationsInput | $Enums.RedirectType;
  toUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TempOrgRedirectUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  from?: Prisma.StringFieldUpdateOperationsInput | string;
  fromOrgId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumRedirectTypeFieldUpdateOperationsInput | $Enums.RedirectType;
  toUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TempOrgRedirectFromTypeFromOrgIdCompoundUniqueInput = {
  from: string;
  type: $Enums.RedirectType;
  fromOrgId: number;
};

export type TempOrgRedirectCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  toUrl?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TempOrgRedirectAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
};

export type TempOrgRedirectMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  toUrl?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TempOrgRedirectMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  from?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  toUrl?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TempOrgRedirectSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  fromOrgId?: Prisma.SortOrder;
};

export type EnumRedirectTypeFieldUpdateOperationsInput = {
  set?: $Enums.RedirectType;
};

export type TempOrgRedirectSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    from?: boolean;
    fromOrgId?: boolean;
    type?: boolean;
    toUrl?: boolean;
    enabled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["tempOrgRedirect"]
>;

export type TempOrgRedirectSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    from?: boolean;
    fromOrgId?: boolean;
    type?: boolean;
    toUrl?: boolean;
    enabled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["tempOrgRedirect"]
>;

export type TempOrgRedirectSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    from?: boolean;
    fromOrgId?: boolean;
    type?: boolean;
    toUrl?: boolean;
    enabled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["tempOrgRedirect"]
>;

export type TempOrgRedirectSelectScalar = {
  id?: boolean;
  from?: boolean;
  fromOrgId?: boolean;
  type?: boolean;
  toUrl?: boolean;
  enabled?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type TempOrgRedirectOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "from" | "fromOrgId" | "type" | "toUrl" | "enabled" | "createdAt" | "updatedAt",
  ExtArgs["result"]["tempOrgRedirect"]
>;

export type $TempOrgRedirectPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "TempOrgRedirect";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      from: string;
      fromOrgId: number;
      type: $Enums.RedirectType;
      toUrl: string;
      enabled: boolean;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["tempOrgRedirect"]
  >;
  composites: {};
};

export type TempOrgRedirectGetPayload<S extends boolean | null | undefined | TempOrgRedirectDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$TempOrgRedirectPayload, S>;

export type TempOrgRedirectCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<TempOrgRedirectFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: TempOrgRedirectCountAggregateInputType | true;
};

export interface TempOrgRedirectDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["TempOrgRedirect"];
    meta: { name: "TempOrgRedirect" };
  };
  /**
   * Find zero or one TempOrgRedirect that matches the filter.
   * @param {TempOrgRedirectFindUniqueArgs} args - Arguments to find a TempOrgRedirect
   * @example
   * // Get one TempOrgRedirect
   * const tempOrgRedirect = await prisma.tempOrgRedirect.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TempOrgRedirectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<
      Prisma.$TempOrgRedirectPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TempOrgRedirect that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TempOrgRedirectFindUniqueOrThrowArgs} args - Arguments to find a TempOrgRedirect
   * @example
   * // Get one TempOrgRedirect
   * const tempOrgRedirect = await prisma.tempOrgRedirect.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TempOrgRedirectFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<
      Prisma.$TempOrgRedirectPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TempOrgRedirect that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectFindFirstArgs} args - Arguments to find a TempOrgRedirect
   * @example
   * // Get one TempOrgRedirect
   * const tempOrgRedirect = await prisma.tempOrgRedirect.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TempOrgRedirectFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TempOrgRedirectFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<
      Prisma.$TempOrgRedirectPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TempOrgRedirect that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectFindFirstOrThrowArgs} args - Arguments to find a TempOrgRedirect
   * @example
   * // Get one TempOrgRedirect
   * const tempOrgRedirect = await prisma.tempOrgRedirect.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TempOrgRedirectFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TempOrgRedirectFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<
      Prisma.$TempOrgRedirectPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TempOrgRedirects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TempOrgRedirects
   * const tempOrgRedirects = await prisma.tempOrgRedirect.findMany()
   *
   * // Get first 10 TempOrgRedirects
   * const tempOrgRedirects = await prisma.tempOrgRedirect.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const tempOrgRedirectWithIdOnly = await prisma.tempOrgRedirect.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TempOrgRedirectFindManyArgs>(
    args?: Prisma.SelectSubset<T, TempOrgRedirectFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$TempOrgRedirectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a TempOrgRedirect.
   * @param {TempOrgRedirectCreateArgs} args - Arguments to create a TempOrgRedirect.
   * @example
   * // Create one TempOrgRedirect
   * const TempOrgRedirect = await prisma.tempOrgRedirect.create({
   *   data: {
   *     // ... data to create a TempOrgRedirect
   *   }
   * })
   *
   */
  create<T extends TempOrgRedirectCreateArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<Prisma.$TempOrgRedirectPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TempOrgRedirects.
   * @param {TempOrgRedirectCreateManyArgs} args - Arguments to create many TempOrgRedirects.
   * @example
   * // Create many TempOrgRedirects
   * const tempOrgRedirect = await prisma.tempOrgRedirect.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TempOrgRedirectCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TempOrgRedirectCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TempOrgRedirects and returns the data saved in the database.
   * @param {TempOrgRedirectCreateManyAndReturnArgs} args - Arguments to create many TempOrgRedirects.
   * @example
   * // Create many TempOrgRedirects
   * const tempOrgRedirect = await prisma.tempOrgRedirect.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TempOrgRedirects and only return the `id`
   * const tempOrgRedirectWithIdOnly = await prisma.tempOrgRedirect.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TempOrgRedirectCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TempOrgRedirectCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TempOrgRedirectPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TempOrgRedirect.
   * @param {TempOrgRedirectDeleteArgs} args - Arguments to delete one TempOrgRedirect.
   * @example
   * // Delete one TempOrgRedirect
   * const TempOrgRedirect = await prisma.tempOrgRedirect.delete({
   *   where: {
   *     // ... filter to delete one TempOrgRedirect
   *   }
   * })
   *
   */
  delete<T extends TempOrgRedirectDeleteArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<Prisma.$TempOrgRedirectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TempOrgRedirect.
   * @param {TempOrgRedirectUpdateArgs} args - Arguments to update one TempOrgRedirect.
   * @example
   * // Update one TempOrgRedirect
   * const tempOrgRedirect = await prisma.tempOrgRedirect.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TempOrgRedirectUpdateArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<Prisma.$TempOrgRedirectPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TempOrgRedirects.
   * @param {TempOrgRedirectDeleteManyArgs} args - Arguments to filter TempOrgRedirects to delete.
   * @example
   * // Delete a few TempOrgRedirects
   * const { count } = await prisma.tempOrgRedirect.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TempOrgRedirectDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TempOrgRedirectDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TempOrgRedirects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TempOrgRedirects
   * const tempOrgRedirect = await prisma.tempOrgRedirect.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TempOrgRedirectUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TempOrgRedirects and returns the data updated in the database.
   * @param {TempOrgRedirectUpdateManyAndReturnArgs} args - Arguments to update many TempOrgRedirects.
   * @example
   * // Update many TempOrgRedirects
   * const tempOrgRedirect = await prisma.tempOrgRedirect.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TempOrgRedirects and only return the `id`
   * const tempOrgRedirectWithIdOnly = await prisma.tempOrgRedirect.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TempOrgRedirectUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TempOrgRedirectPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TempOrgRedirect.
   * @param {TempOrgRedirectUpsertArgs} args - Arguments to update or create a TempOrgRedirect.
   * @example
   * // Update or create a TempOrgRedirect
   * const tempOrgRedirect = await prisma.tempOrgRedirect.upsert({
   *   create: {
   *     // ... data to create a TempOrgRedirect
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TempOrgRedirect we want to update
   *   }
   * })
   */
  upsert<T extends TempOrgRedirectUpsertArgs>(
    args: Prisma.SelectSubset<T, TempOrgRedirectUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TempOrgRedirectClient<
    runtime.Types.Result.GetResult<Prisma.$TempOrgRedirectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TempOrgRedirects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectCountArgs} args - Arguments to filter TempOrgRedirects to count.
   * @example
   * // Count the number of TempOrgRedirects
   * const count = await prisma.tempOrgRedirect.count({
   *   where: {
   *     // ... the filter for the TempOrgRedirects we want to count
   *   }
   * })
   **/
  count<T extends TempOrgRedirectCountArgs>(
    args?: Prisma.Subset<T, TempOrgRedirectCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TempOrgRedirectCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TempOrgRedirect.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TempOrgRedirectAggregateArgs>(
    args: Prisma.Subset<T, TempOrgRedirectAggregateArgs>
  ): Prisma.PrismaPromise<GetTempOrgRedirectAggregateType<T>>;

  /**
   * Group by TempOrgRedirect.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TempOrgRedirectGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TempOrgRedirectGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TempOrgRedirectGroupByArgs["orderBy"] }
      : { orderBy?: TempOrgRedirectGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, TempOrgRedirectGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetTempOrgRedirectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TempOrgRedirect model
   */
  readonly fields: TempOrgRedirectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TempOrgRedirect.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TempOrgRedirectClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TempOrgRedirect model
 */
export interface TempOrgRedirectFieldRefs {
  readonly id: Prisma.FieldRef<"TempOrgRedirect", "Int">;
  readonly from: Prisma.FieldRef<"TempOrgRedirect", "String">;
  readonly fromOrgId: Prisma.FieldRef<"TempOrgRedirect", "Int">;
  readonly type: Prisma.FieldRef<"TempOrgRedirect", "RedirectType">;
  readonly toUrl: Prisma.FieldRef<"TempOrgRedirect", "String">;
  readonly enabled: Prisma.FieldRef<"TempOrgRedirect", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"TempOrgRedirect", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"TempOrgRedirect", "DateTime">;
}

// Custom InputTypes
/**
 * TempOrgRedirect findUnique
 */
export type TempOrgRedirectFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * Filter, which TempOrgRedirect to fetch.
   */
  where: Prisma.TempOrgRedirectWhereUniqueInput;
};

/**
 * TempOrgRedirect findUniqueOrThrow
 */
export type TempOrgRedirectFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * Filter, which TempOrgRedirect to fetch.
   */
  where: Prisma.TempOrgRedirectWhereUniqueInput;
};

/**
 * TempOrgRedirect findFirst
 */
export type TempOrgRedirectFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * Filter, which TempOrgRedirect to fetch.
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TempOrgRedirects to fetch.
   */
  orderBy?: Prisma.TempOrgRedirectOrderByWithRelationInput | Prisma.TempOrgRedirectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TempOrgRedirects.
   */
  cursor?: Prisma.TempOrgRedirectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TempOrgRedirects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TempOrgRedirects.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TempOrgRedirects.
   */
  distinct?: Prisma.TempOrgRedirectScalarFieldEnum | Prisma.TempOrgRedirectScalarFieldEnum[];
};

/**
 * TempOrgRedirect findFirstOrThrow
 */
export type TempOrgRedirectFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * Filter, which TempOrgRedirect to fetch.
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TempOrgRedirects to fetch.
   */
  orderBy?: Prisma.TempOrgRedirectOrderByWithRelationInput | Prisma.TempOrgRedirectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TempOrgRedirects.
   */
  cursor?: Prisma.TempOrgRedirectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TempOrgRedirects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TempOrgRedirects.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TempOrgRedirects.
   */
  distinct?: Prisma.TempOrgRedirectScalarFieldEnum | Prisma.TempOrgRedirectScalarFieldEnum[];
};

/**
 * TempOrgRedirect findMany
 */
export type TempOrgRedirectFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * Filter, which TempOrgRedirects to fetch.
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TempOrgRedirects to fetch.
   */
  orderBy?: Prisma.TempOrgRedirectOrderByWithRelationInput | Prisma.TempOrgRedirectOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TempOrgRedirects.
   */
  cursor?: Prisma.TempOrgRedirectWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TempOrgRedirects from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TempOrgRedirects.
   */
  skip?: number;
  distinct?: Prisma.TempOrgRedirectScalarFieldEnum | Prisma.TempOrgRedirectScalarFieldEnum[];
};

/**
 * TempOrgRedirect create
 */
export type TempOrgRedirectCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * The data needed to create a TempOrgRedirect.
   */
  data: Prisma.XOR<Prisma.TempOrgRedirectCreateInput, Prisma.TempOrgRedirectUncheckedCreateInput>;
};

/**
 * TempOrgRedirect createMany
 */
export type TempOrgRedirectCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many TempOrgRedirects.
   */
  data: Prisma.TempOrgRedirectCreateManyInput | Prisma.TempOrgRedirectCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TempOrgRedirect createManyAndReturn
 */
export type TempOrgRedirectCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * The data used to create many TempOrgRedirects.
   */
  data: Prisma.TempOrgRedirectCreateManyInput | Prisma.TempOrgRedirectCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TempOrgRedirect update
 */
export type TempOrgRedirectUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * The data needed to update a TempOrgRedirect.
   */
  data: Prisma.XOR<Prisma.TempOrgRedirectUpdateInput, Prisma.TempOrgRedirectUncheckedUpdateInput>;
  /**
   * Choose, which TempOrgRedirect to update.
   */
  where: Prisma.TempOrgRedirectWhereUniqueInput;
};

/**
 * TempOrgRedirect updateMany
 */
export type TempOrgRedirectUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update TempOrgRedirects.
   */
  data: Prisma.XOR<
    Prisma.TempOrgRedirectUpdateManyMutationInput,
    Prisma.TempOrgRedirectUncheckedUpdateManyInput
  >;
  /**
   * Filter which TempOrgRedirects to update
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * Limit how many TempOrgRedirects to update.
   */
  limit?: number;
};

/**
 * TempOrgRedirect updateManyAndReturn
 */
export type TempOrgRedirectUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * The data used to update TempOrgRedirects.
   */
  data: Prisma.XOR<
    Prisma.TempOrgRedirectUpdateManyMutationInput,
    Prisma.TempOrgRedirectUncheckedUpdateManyInput
  >;
  /**
   * Filter which TempOrgRedirects to update
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * Limit how many TempOrgRedirects to update.
   */
  limit?: number;
};

/**
 * TempOrgRedirect upsert
 */
export type TempOrgRedirectUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * The filter to search for the TempOrgRedirect to update in case it exists.
   */
  where: Prisma.TempOrgRedirectWhereUniqueInput;
  /**
   * In case the TempOrgRedirect found by the `where` argument doesn't exist, create a new TempOrgRedirect with this data.
   */
  create: Prisma.XOR<Prisma.TempOrgRedirectCreateInput, Prisma.TempOrgRedirectUncheckedCreateInput>;
  /**
   * In case the TempOrgRedirect was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TempOrgRedirectUpdateInput, Prisma.TempOrgRedirectUncheckedUpdateInput>;
};

/**
 * TempOrgRedirect delete
 */
export type TempOrgRedirectDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
  /**
   * Filter which TempOrgRedirect to delete.
   */
  where: Prisma.TempOrgRedirectWhereUniqueInput;
};

/**
 * TempOrgRedirect deleteMany
 */
export type TempOrgRedirectDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TempOrgRedirects to delete
   */
  where?: Prisma.TempOrgRedirectWhereInput;
  /**
   * Limit how many TempOrgRedirects to delete.
   */
  limit?: number;
};

/**
 * TempOrgRedirect without action
 */
export type TempOrgRedirectDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TempOrgRedirect
   */
  select?: Prisma.TempOrgRedirectSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TempOrgRedirect
   */
  omit?: Prisma.TempOrgRedirectOmit<ExtArgs> | null;
};
