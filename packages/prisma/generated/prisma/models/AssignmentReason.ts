/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `AssignmentReason` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AssignmentReason
 *
 */
export type AssignmentReasonModel = runtime.Types.Result.DefaultSelection<Prisma.$AssignmentReasonPayload>;

export type AggregateAssignmentReason = {
  _count: AssignmentReasonCountAggregateOutputType | null;
  _avg: AssignmentReasonAvgAggregateOutputType | null;
  _sum: AssignmentReasonSumAggregateOutputType | null;
  _min: AssignmentReasonMinAggregateOutputType | null;
  _max: AssignmentReasonMaxAggregateOutputType | null;
};

export type AssignmentReasonAvgAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
};

export type AssignmentReasonSumAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
};

export type AssignmentReasonMinAggregateOutputType = {
  id: number | null;
  createdAt: Date | null;
  bookingId: number | null;
  reasonEnum: $Enums.AssignmentReasonEnum | null;
  reasonString: string | null;
};

export type AssignmentReasonMaxAggregateOutputType = {
  id: number | null;
  createdAt: Date | null;
  bookingId: number | null;
  reasonEnum: $Enums.AssignmentReasonEnum | null;
  reasonString: string | null;
};

export type AssignmentReasonCountAggregateOutputType = {
  id: number;
  createdAt: number;
  bookingId: number;
  reasonEnum: number;
  reasonString: number;
  _all: number;
};

export type AssignmentReasonAvgAggregateInputType = {
  id?: true;
  bookingId?: true;
};

export type AssignmentReasonSumAggregateInputType = {
  id?: true;
  bookingId?: true;
};

export type AssignmentReasonMinAggregateInputType = {
  id?: true;
  createdAt?: true;
  bookingId?: true;
  reasonEnum?: true;
  reasonString?: true;
};

export type AssignmentReasonMaxAggregateInputType = {
  id?: true;
  createdAt?: true;
  bookingId?: true;
  reasonEnum?: true;
  reasonString?: true;
};

export type AssignmentReasonCountAggregateInputType = {
  id?: true;
  createdAt?: true;
  bookingId?: true;
  reasonEnum?: true;
  reasonString?: true;
  _all?: true;
};

export type AssignmentReasonAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AssignmentReason to aggregate.
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentReasons to fetch.
   */
  orderBy?:
    | Prisma.AssignmentReasonOrderByWithRelationInput
    | Prisma.AssignmentReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AssignmentReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentReasons.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AssignmentReasons
   **/
  _count?: true | AssignmentReasonCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AssignmentReasonAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AssignmentReasonSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AssignmentReasonMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AssignmentReasonMaxAggregateInputType;
};

export type GetAssignmentReasonAggregateType<T extends AssignmentReasonAggregateArgs> = {
  [P in keyof T & keyof AggregateAssignmentReason]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssignmentReason[P]>
    : Prisma.GetScalarType<T[P], AggregateAssignmentReason[P]>;
};

export type AssignmentReasonGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AssignmentReasonWhereInput;
  orderBy?:
    | Prisma.AssignmentReasonOrderByWithAggregationInput
    | Prisma.AssignmentReasonOrderByWithAggregationInput[];
  by: Prisma.AssignmentReasonScalarFieldEnum[] | Prisma.AssignmentReasonScalarFieldEnum;
  having?: Prisma.AssignmentReasonScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AssignmentReasonCountAggregateInputType | true;
  _avg?: AssignmentReasonAvgAggregateInputType;
  _sum?: AssignmentReasonSumAggregateInputType;
  _min?: AssignmentReasonMinAggregateInputType;
  _max?: AssignmentReasonMaxAggregateInputType;
};

export type AssignmentReasonGroupByOutputType = {
  id: number;
  createdAt: Date;
  bookingId: number;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
  _count: AssignmentReasonCountAggregateOutputType | null;
  _avg: AssignmentReasonAvgAggregateOutputType | null;
  _sum: AssignmentReasonSumAggregateOutputType | null;
  _min: AssignmentReasonMinAggregateOutputType | null;
  _max: AssignmentReasonMaxAggregateOutputType | null;
};

type GetAssignmentReasonGroupByPayload<T extends AssignmentReasonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssignmentReasonGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AssignmentReasonGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AssignmentReasonGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AssignmentReasonGroupByOutputType[P]>;
    }
  >
>;

export type AssignmentReasonWhereInput = {
  AND?: Prisma.AssignmentReasonWhereInput | Prisma.AssignmentReasonWhereInput[];
  OR?: Prisma.AssignmentReasonWhereInput[];
  NOT?: Prisma.AssignmentReasonWhereInput | Prisma.AssignmentReasonWhereInput[];
  id?: Prisma.IntFilter<"AssignmentReason"> | number;
  createdAt?: Prisma.DateTimeFilter<"AssignmentReason"> | Date | string;
  bookingId?: Prisma.IntFilter<"AssignmentReason"> | number;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFilter<"AssignmentReason"> | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFilter<"AssignmentReason"> | string;
  booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
};

export type AssignmentReasonOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  reasonEnum?: Prisma.SortOrder;
  reasonString?: Prisma.SortOrder;
  booking?: Prisma.BookingOrderByWithRelationInput;
};

export type AssignmentReasonWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.AssignmentReasonWhereInput | Prisma.AssignmentReasonWhereInput[];
    OR?: Prisma.AssignmentReasonWhereInput[];
    NOT?: Prisma.AssignmentReasonWhereInput | Prisma.AssignmentReasonWhereInput[];
    createdAt?: Prisma.DateTimeFilter<"AssignmentReason"> | Date | string;
    bookingId?: Prisma.IntFilter<"AssignmentReason"> | number;
    reasonEnum?: Prisma.EnumAssignmentReasonEnumFilter<"AssignmentReason"> | $Enums.AssignmentReasonEnum;
    reasonString?: Prisma.StringFilter<"AssignmentReason"> | string;
    booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
  },
  "id" | "id"
>;

export type AssignmentReasonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  reasonEnum?: Prisma.SortOrder;
  reasonString?: Prisma.SortOrder;
  _count?: Prisma.AssignmentReasonCountOrderByAggregateInput;
  _avg?: Prisma.AssignmentReasonAvgOrderByAggregateInput;
  _max?: Prisma.AssignmentReasonMaxOrderByAggregateInput;
  _min?: Prisma.AssignmentReasonMinOrderByAggregateInput;
  _sum?: Prisma.AssignmentReasonSumOrderByAggregateInput;
};

export type AssignmentReasonScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AssignmentReasonScalarWhereWithAggregatesInput
    | Prisma.AssignmentReasonScalarWhereWithAggregatesInput[];
  OR?: Prisma.AssignmentReasonScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AssignmentReasonScalarWhereWithAggregatesInput
    | Prisma.AssignmentReasonScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"AssignmentReason"> | number;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AssignmentReason"> | Date | string;
  bookingId?: Prisma.IntWithAggregatesFilter<"AssignmentReason"> | number;
  reasonEnum?:
    | Prisma.EnumAssignmentReasonEnumWithAggregatesFilter<"AssignmentReason">
    | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringWithAggregatesFilter<"AssignmentReason"> | string;
};

export type AssignmentReasonCreateInput = {
  createdAt?: Date | string;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
  booking: Prisma.BookingCreateNestedOneWithoutAssignmentReasonInput;
};

export type AssignmentReasonUncheckedCreateInput = {
  id?: number;
  createdAt?: Date | string;
  bookingId: number;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
};

export type AssignmentReasonUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
  booking?: Prisma.BookingUpdateOneRequiredWithoutAssignmentReasonNestedInput;
};

export type AssignmentReasonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignmentReasonCreateManyInput = {
  id?: number;
  createdAt?: Date | string;
  bookingId: number;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
};

export type AssignmentReasonUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignmentReasonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignmentReasonListRelationFilter = {
  every?: Prisma.AssignmentReasonWhereInput;
  some?: Prisma.AssignmentReasonWhereInput;
  none?: Prisma.AssignmentReasonWhereInput;
};

export type AssignmentReasonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AssignmentReasonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  reasonEnum?: Prisma.SortOrder;
  reasonString?: Prisma.SortOrder;
};

export type AssignmentReasonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
};

export type AssignmentReasonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  reasonEnum?: Prisma.SortOrder;
  reasonString?: Prisma.SortOrder;
};

export type AssignmentReasonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  reasonEnum?: Prisma.SortOrder;
  reasonString?: Prisma.SortOrder;
};

export type AssignmentReasonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
};

export type AssignmentReasonCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignmentReasonCreateWithoutBookingInput,
        Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput
      >
    | Prisma.AssignmentReasonCreateWithoutBookingInput[]
    | Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.AssignmentReasonCreateManyBookingInputEnvelope;
  connect?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
};

export type AssignmentReasonUncheckedCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignmentReasonCreateWithoutBookingInput,
        Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput
      >
    | Prisma.AssignmentReasonCreateWithoutBookingInput[]
    | Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.AssignmentReasonCreateManyBookingInputEnvelope;
  connect?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
};

export type AssignmentReasonUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignmentReasonCreateWithoutBookingInput,
        Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput
      >
    | Prisma.AssignmentReasonCreateWithoutBookingInput[]
    | Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.AssignmentReasonUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.AssignmentReasonUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.AssignmentReasonCreateManyBookingInputEnvelope;
  set?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  disconnect?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  delete?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  connect?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  update?:
    | Prisma.AssignmentReasonUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.AssignmentReasonUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.AssignmentReasonUpdateManyWithWhereWithoutBookingInput
    | Prisma.AssignmentReasonUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.AssignmentReasonScalarWhereInput | Prisma.AssignmentReasonScalarWhereInput[];
};

export type AssignmentReasonUncheckedUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignmentReasonCreateWithoutBookingInput,
        Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput
      >
    | Prisma.AssignmentReasonCreateWithoutBookingInput[]
    | Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput
    | Prisma.AssignmentReasonCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.AssignmentReasonUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.AssignmentReasonUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.AssignmentReasonCreateManyBookingInputEnvelope;
  set?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  disconnect?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  delete?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  connect?: Prisma.AssignmentReasonWhereUniqueInput | Prisma.AssignmentReasonWhereUniqueInput[];
  update?:
    | Prisma.AssignmentReasonUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.AssignmentReasonUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.AssignmentReasonUpdateManyWithWhereWithoutBookingInput
    | Prisma.AssignmentReasonUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.AssignmentReasonScalarWhereInput | Prisma.AssignmentReasonScalarWhereInput[];
};

export type EnumAssignmentReasonEnumFieldUpdateOperationsInput = {
  set?: $Enums.AssignmentReasonEnum;
};

export type AssignmentReasonCreateWithoutBookingInput = {
  createdAt?: Date | string;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
};

export type AssignmentReasonUncheckedCreateWithoutBookingInput = {
  id?: number;
  createdAt?: Date | string;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
};

export type AssignmentReasonCreateOrConnectWithoutBookingInput = {
  where: Prisma.AssignmentReasonWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AssignmentReasonCreateWithoutBookingInput,
    Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput
  >;
};

export type AssignmentReasonCreateManyBookingInputEnvelope = {
  data: Prisma.AssignmentReasonCreateManyBookingInput | Prisma.AssignmentReasonCreateManyBookingInput[];
  skipDuplicates?: boolean;
};

export type AssignmentReasonUpsertWithWhereUniqueWithoutBookingInput = {
  where: Prisma.AssignmentReasonWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AssignmentReasonUpdateWithoutBookingInput,
    Prisma.AssignmentReasonUncheckedUpdateWithoutBookingInput
  >;
  create: Prisma.XOR<
    Prisma.AssignmentReasonCreateWithoutBookingInput,
    Prisma.AssignmentReasonUncheckedCreateWithoutBookingInput
  >;
};

export type AssignmentReasonUpdateWithWhereUniqueWithoutBookingInput = {
  where: Prisma.AssignmentReasonWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AssignmentReasonUpdateWithoutBookingInput,
    Prisma.AssignmentReasonUncheckedUpdateWithoutBookingInput
  >;
};

export type AssignmentReasonUpdateManyWithWhereWithoutBookingInput = {
  where: Prisma.AssignmentReasonScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AssignmentReasonUpdateManyMutationInput,
    Prisma.AssignmentReasonUncheckedUpdateManyWithoutBookingInput
  >;
};

export type AssignmentReasonScalarWhereInput = {
  AND?: Prisma.AssignmentReasonScalarWhereInput | Prisma.AssignmentReasonScalarWhereInput[];
  OR?: Prisma.AssignmentReasonScalarWhereInput[];
  NOT?: Prisma.AssignmentReasonScalarWhereInput | Prisma.AssignmentReasonScalarWhereInput[];
  id?: Prisma.IntFilter<"AssignmentReason"> | number;
  createdAt?: Prisma.DateTimeFilter<"AssignmentReason"> | Date | string;
  bookingId?: Prisma.IntFilter<"AssignmentReason"> | number;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFilter<"AssignmentReason"> | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFilter<"AssignmentReason"> | string;
};

export type AssignmentReasonCreateManyBookingInput = {
  id?: number;
  createdAt?: Date | string;
  reasonEnum: $Enums.AssignmentReasonEnum;
  reasonString: string;
};

export type AssignmentReasonUpdateWithoutBookingInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignmentReasonUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignmentReasonUncheckedUpdateManyWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reasonEnum?: Prisma.EnumAssignmentReasonEnumFieldUpdateOperationsInput | $Enums.AssignmentReasonEnum;
  reasonString?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignmentReasonSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    bookingId?: boolean;
    reasonEnum?: boolean;
    reasonString?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["assignmentReason"]
>;

export type AssignmentReasonSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    bookingId?: boolean;
    reasonEnum?: boolean;
    reasonString?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["assignmentReason"]
>;

export type AssignmentReasonSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    bookingId?: boolean;
    reasonEnum?: boolean;
    reasonString?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["assignmentReason"]
>;

export type AssignmentReasonSelectScalar = {
  id?: boolean;
  createdAt?: boolean;
  bookingId?: boolean;
  reasonEnum?: boolean;
  reasonString?: boolean;
};

export type AssignmentReasonOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "createdAt" | "bookingId" | "reasonEnum" | "reasonString",
  ExtArgs["result"]["assignmentReason"]
>;
export type AssignmentReasonInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
};
export type AssignmentReasonIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
};
export type AssignmentReasonIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
};

export type $AssignmentReasonPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "AssignmentReason";
  objects: {
    booking: Prisma.$BookingPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      createdAt: Date;
      bookingId: number;
      reasonEnum: $Enums.AssignmentReasonEnum;
      reasonString: string;
    },
    ExtArgs["result"]["assignmentReason"]
  >;
  composites: {};
};

export type AssignmentReasonGetPayload<S extends boolean | null | undefined | AssignmentReasonDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AssignmentReasonPayload, S>;

export type AssignmentReasonCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AssignmentReasonFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AssignmentReasonCountAggregateInputType | true;
};

export interface AssignmentReasonDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AssignmentReason"];
    meta: { name: "AssignmentReason" };
  };
  /**
   * Find zero or one AssignmentReason that matches the filter.
   * @param {AssignmentReasonFindUniqueArgs} args - Arguments to find a AssignmentReason
   * @example
   * // Get one AssignmentReason
   * const assignmentReason = await prisma.assignmentReason.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssignmentReasonFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentReasonPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AssignmentReason that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssignmentReasonFindUniqueOrThrowArgs} args - Arguments to find a AssignmentReason
   * @example
   * // Get one AssignmentReason
   * const assignmentReason = await prisma.assignmentReason.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssignmentReasonFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentReasonPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AssignmentReason that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonFindFirstArgs} args - Arguments to find a AssignmentReason
   * @example
   * // Get one AssignmentReason
   * const assignmentReason = await prisma.assignmentReason.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssignmentReasonFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AssignmentReasonFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentReasonPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AssignmentReason that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonFindFirstOrThrowArgs} args - Arguments to find a AssignmentReason
   * @example
   * // Get one AssignmentReason
   * const assignmentReason = await prisma.assignmentReason.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssignmentReasonFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AssignmentReasonFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentReasonPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AssignmentReasons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssignmentReasons
   * const assignmentReasons = await prisma.assignmentReason.findMany()
   *
   * // Get first 10 AssignmentReasons
   * const assignmentReasons = await prisma.assignmentReason.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const assignmentReasonWithIdOnly = await prisma.assignmentReason.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AssignmentReasonFindManyArgs>(
    args?: Prisma.SelectSubset<T, AssignmentReasonFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AssignmentReasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a AssignmentReason.
   * @param {AssignmentReasonCreateArgs} args - Arguments to create a AssignmentReason.
   * @example
   * // Create one AssignmentReason
   * const AssignmentReason = await prisma.assignmentReason.create({
   *   data: {
   *     // ... data to create a AssignmentReason
   *   }
   * })
   *
   */
  create<T extends AssignmentReasonCreateArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<Prisma.$AssignmentReasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AssignmentReasons.
   * @param {AssignmentReasonCreateManyArgs} args - Arguments to create many AssignmentReasons.
   * @example
   * // Create many AssignmentReasons
   * const assignmentReason = await prisma.assignmentReason.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AssignmentReasonCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AssignmentReasonCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AssignmentReasons and returns the data saved in the database.
   * @param {AssignmentReasonCreateManyAndReturnArgs} args - Arguments to create many AssignmentReasons.
   * @example
   * // Create many AssignmentReasons
   * const assignmentReason = await prisma.assignmentReason.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AssignmentReasons and only return the `id`
   * const assignmentReasonWithIdOnly = await prisma.assignmentReason.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AssignmentReasonCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AssignmentReasonCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentReasonPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AssignmentReason.
   * @param {AssignmentReasonDeleteArgs} args - Arguments to delete one AssignmentReason.
   * @example
   * // Delete one AssignmentReason
   * const AssignmentReason = await prisma.assignmentReason.delete({
   *   where: {
   *     // ... filter to delete one AssignmentReason
   *   }
   * })
   *
   */
  delete<T extends AssignmentReasonDeleteArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<Prisma.$AssignmentReasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AssignmentReason.
   * @param {AssignmentReasonUpdateArgs} args - Arguments to update one AssignmentReason.
   * @example
   * // Update one AssignmentReason
   * const assignmentReason = await prisma.assignmentReason.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AssignmentReasonUpdateArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<Prisma.$AssignmentReasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AssignmentReasons.
   * @param {AssignmentReasonDeleteManyArgs} args - Arguments to filter AssignmentReasons to delete.
   * @example
   * // Delete a few AssignmentReasons
   * const { count } = await prisma.assignmentReason.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AssignmentReasonDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AssignmentReasonDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AssignmentReasons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssignmentReasons
   * const assignmentReason = await prisma.assignmentReason.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AssignmentReasonUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AssignmentReasons and returns the data updated in the database.
   * @param {AssignmentReasonUpdateManyAndReturnArgs} args - Arguments to update many AssignmentReasons.
   * @example
   * // Update many AssignmentReasons
   * const assignmentReason = await prisma.assignmentReason.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AssignmentReasons and only return the `id`
   * const assignmentReasonWithIdOnly = await prisma.assignmentReason.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AssignmentReasonUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignmentReasonPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AssignmentReason.
   * @param {AssignmentReasonUpsertArgs} args - Arguments to update or create a AssignmentReason.
   * @example
   * // Update or create a AssignmentReason
   * const assignmentReason = await prisma.assignmentReason.upsert({
   *   create: {
   *     // ... data to create a AssignmentReason
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssignmentReason we want to update
   *   }
   * })
   */
  upsert<T extends AssignmentReasonUpsertArgs>(
    args: Prisma.SelectSubset<T, AssignmentReasonUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AssignmentReasonClient<
    runtime.Types.Result.GetResult<Prisma.$AssignmentReasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AssignmentReasons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonCountArgs} args - Arguments to filter AssignmentReasons to count.
   * @example
   * // Count the number of AssignmentReasons
   * const count = await prisma.assignmentReason.count({
   *   where: {
   *     // ... the filter for the AssignmentReasons we want to count
   *   }
   * })
   **/
  count<T extends AssignmentReasonCountArgs>(
    args?: Prisma.Subset<T, AssignmentReasonCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AssignmentReasonCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AssignmentReason.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AssignmentReasonAggregateArgs>(
    args: Prisma.Subset<T, AssignmentReasonAggregateArgs>
  ): Prisma.PrismaPromise<GetAssignmentReasonAggregateType<T>>;

  /**
   * Group by AssignmentReason.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignmentReasonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AssignmentReasonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssignmentReasonGroupByArgs["orderBy"] }
      : { orderBy?: AssignmentReasonGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AssignmentReasonGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAssignmentReasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AssignmentReason model
   */
  readonly fields: AssignmentReasonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssignmentReason.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssignmentReasonClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  booking<T extends Prisma.BookingDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__BookingClient<
    | runtime.Types.Result.GetResult<
        Prisma.$BookingPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AssignmentReason model
 */
export interface AssignmentReasonFieldRefs {
  readonly id: Prisma.FieldRef<"AssignmentReason", "Int">;
  readonly createdAt: Prisma.FieldRef<"AssignmentReason", "DateTime">;
  readonly bookingId: Prisma.FieldRef<"AssignmentReason", "Int">;
  readonly reasonEnum: Prisma.FieldRef<"AssignmentReason", "AssignmentReasonEnum">;
  readonly reasonString: Prisma.FieldRef<"AssignmentReason", "String">;
}

// Custom InputTypes
/**
 * AssignmentReason findUnique
 */
export type AssignmentReasonFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentReason to fetch.
   */
  where: Prisma.AssignmentReasonWhereUniqueInput;
};

/**
 * AssignmentReason findUniqueOrThrow
 */
export type AssignmentReasonFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentReason to fetch.
   */
  where: Prisma.AssignmentReasonWhereUniqueInput;
};

/**
 * AssignmentReason findFirst
 */
export type AssignmentReasonFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentReason to fetch.
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentReasons to fetch.
   */
  orderBy?:
    | Prisma.AssignmentReasonOrderByWithRelationInput
    | Prisma.AssignmentReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AssignmentReasons.
   */
  cursor?: Prisma.AssignmentReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentReasons.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AssignmentReasons.
   */
  distinct?: Prisma.AssignmentReasonScalarFieldEnum | Prisma.AssignmentReasonScalarFieldEnum[];
};

/**
 * AssignmentReason findFirstOrThrow
 */
export type AssignmentReasonFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentReason to fetch.
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentReasons to fetch.
   */
  orderBy?:
    | Prisma.AssignmentReasonOrderByWithRelationInput
    | Prisma.AssignmentReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AssignmentReasons.
   */
  cursor?: Prisma.AssignmentReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentReasons.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AssignmentReasons.
   */
  distinct?: Prisma.AssignmentReasonScalarFieldEnum | Prisma.AssignmentReasonScalarFieldEnum[];
};

/**
 * AssignmentReason findMany
 */
export type AssignmentReasonFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * Filter, which AssignmentReasons to fetch.
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignmentReasons to fetch.
   */
  orderBy?:
    | Prisma.AssignmentReasonOrderByWithRelationInput
    | Prisma.AssignmentReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AssignmentReasons.
   */
  cursor?: Prisma.AssignmentReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignmentReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignmentReasons.
   */
  skip?: number;
  distinct?: Prisma.AssignmentReasonScalarFieldEnum | Prisma.AssignmentReasonScalarFieldEnum[];
};

/**
 * AssignmentReason create
 */
export type AssignmentReasonCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * The data needed to create a AssignmentReason.
   */
  data: Prisma.XOR<Prisma.AssignmentReasonCreateInput, Prisma.AssignmentReasonUncheckedCreateInput>;
};

/**
 * AssignmentReason createMany
 */
export type AssignmentReasonCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many AssignmentReasons.
   */
  data: Prisma.AssignmentReasonCreateManyInput | Prisma.AssignmentReasonCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AssignmentReason createManyAndReturn
 */
export type AssignmentReasonCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * The data used to create many AssignmentReasons.
   */
  data: Prisma.AssignmentReasonCreateManyInput | Prisma.AssignmentReasonCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AssignmentReason update
 */
export type AssignmentReasonUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * The data needed to update a AssignmentReason.
   */
  data: Prisma.XOR<Prisma.AssignmentReasonUpdateInput, Prisma.AssignmentReasonUncheckedUpdateInput>;
  /**
   * Choose, which AssignmentReason to update.
   */
  where: Prisma.AssignmentReasonWhereUniqueInput;
};

/**
 * AssignmentReason updateMany
 */
export type AssignmentReasonUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update AssignmentReasons.
   */
  data: Prisma.XOR<
    Prisma.AssignmentReasonUpdateManyMutationInput,
    Prisma.AssignmentReasonUncheckedUpdateManyInput
  >;
  /**
   * Filter which AssignmentReasons to update
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * Limit how many AssignmentReasons to update.
   */
  limit?: number;
};

/**
 * AssignmentReason updateManyAndReturn
 */
export type AssignmentReasonUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * The data used to update AssignmentReasons.
   */
  data: Prisma.XOR<
    Prisma.AssignmentReasonUpdateManyMutationInput,
    Prisma.AssignmentReasonUncheckedUpdateManyInput
  >;
  /**
   * Filter which AssignmentReasons to update
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * Limit how many AssignmentReasons to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AssignmentReason upsert
 */
export type AssignmentReasonUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * The filter to search for the AssignmentReason to update in case it exists.
   */
  where: Prisma.AssignmentReasonWhereUniqueInput;
  /**
   * In case the AssignmentReason found by the `where` argument doesn't exist, create a new AssignmentReason with this data.
   */
  create: Prisma.XOR<Prisma.AssignmentReasonCreateInput, Prisma.AssignmentReasonUncheckedCreateInput>;
  /**
   * In case the AssignmentReason was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssignmentReasonUpdateInput, Prisma.AssignmentReasonUncheckedUpdateInput>;
};

/**
 * AssignmentReason delete
 */
export type AssignmentReasonDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
  /**
   * Filter which AssignmentReason to delete.
   */
  where: Prisma.AssignmentReasonWhereUniqueInput;
};

/**
 * AssignmentReason deleteMany
 */
export type AssignmentReasonDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AssignmentReasons to delete
   */
  where?: Prisma.AssignmentReasonWhereInput;
  /**
   * Limit how many AssignmentReasons to delete.
   */
  limit?: number;
};

/**
 * AssignmentReason without action
 */
export type AssignmentReasonDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AssignmentReason
   */
  select?: Prisma.AssignmentReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignmentReason
   */
  omit?: Prisma.AssignmentReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentReasonInclude<ExtArgs> | null;
};
