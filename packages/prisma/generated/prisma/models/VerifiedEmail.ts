/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `VerifiedEmail` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model VerifiedEmail
 *
 */
export type VerifiedEmailModel = runtime.Types.Result.DefaultSelection<Prisma.$VerifiedEmailPayload>;

export type AggregateVerifiedEmail = {
  _count: VerifiedEmailCountAggregateOutputType | null;
  _avg: VerifiedEmailAvgAggregateOutputType | null;
  _sum: VerifiedEmailSumAggregateOutputType | null;
  _min: VerifiedEmailMinAggregateOutputType | null;
  _max: VerifiedEmailMaxAggregateOutputType | null;
};

export type VerifiedEmailAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
};

export type VerifiedEmailSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
};

export type VerifiedEmailMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
  email: string | null;
};

export type VerifiedEmailMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
  email: string | null;
};

export type VerifiedEmailCountAggregateOutputType = {
  id: number;
  userId: number;
  teamId: number;
  email: number;
  _all: number;
};

export type VerifiedEmailAvgAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
};

export type VerifiedEmailSumAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
};

export type VerifiedEmailMinAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
  email?: true;
};

export type VerifiedEmailMaxAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
  email?: true;
};

export type VerifiedEmailCountAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
  email?: true;
  _all?: true;
};

export type VerifiedEmailAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which VerifiedEmail to aggregate.
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedEmails to fetch.
   */
  orderBy?: Prisma.VerifiedEmailOrderByWithRelationInput | Prisma.VerifiedEmailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.VerifiedEmailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedEmails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedEmails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned VerifiedEmails
   **/
  _count?: true | VerifiedEmailCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: VerifiedEmailAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: VerifiedEmailSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: VerifiedEmailMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: VerifiedEmailMaxAggregateInputType;
};

export type GetVerifiedEmailAggregateType<T extends VerifiedEmailAggregateArgs> = {
  [P in keyof T & keyof AggregateVerifiedEmail]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVerifiedEmail[P]>
    : Prisma.GetScalarType<T[P], AggregateVerifiedEmail[P]>;
};

export type VerifiedEmailGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.VerifiedEmailWhereInput;
  orderBy?:
    | Prisma.VerifiedEmailOrderByWithAggregationInput
    | Prisma.VerifiedEmailOrderByWithAggregationInput[];
  by: Prisma.VerifiedEmailScalarFieldEnum[] | Prisma.VerifiedEmailScalarFieldEnum;
  having?: Prisma.VerifiedEmailScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: VerifiedEmailCountAggregateInputType | true;
  _avg?: VerifiedEmailAvgAggregateInputType;
  _sum?: VerifiedEmailSumAggregateInputType;
  _min?: VerifiedEmailMinAggregateInputType;
  _max?: VerifiedEmailMaxAggregateInputType;
};

export type VerifiedEmailGroupByOutputType = {
  id: number;
  userId: number | null;
  teamId: number | null;
  email: string;
  _count: VerifiedEmailCountAggregateOutputType | null;
  _avg: VerifiedEmailAvgAggregateOutputType | null;
  _sum: VerifiedEmailSumAggregateOutputType | null;
  _min: VerifiedEmailMinAggregateOutputType | null;
  _max: VerifiedEmailMaxAggregateOutputType | null;
};

type GetVerifiedEmailGroupByPayload<T extends VerifiedEmailGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VerifiedEmailGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof VerifiedEmailGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], VerifiedEmailGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], VerifiedEmailGroupByOutputType[P]>;
    }
  >
>;

export type VerifiedEmailWhereInput = {
  AND?: Prisma.VerifiedEmailWhereInput | Prisma.VerifiedEmailWhereInput[];
  OR?: Prisma.VerifiedEmailWhereInput[];
  NOT?: Prisma.VerifiedEmailWhereInput | Prisma.VerifiedEmailWhereInput[];
  id?: Prisma.IntFilter<"VerifiedEmail"> | number;
  userId?: Prisma.IntNullableFilter<"VerifiedEmail"> | number | null;
  teamId?: Prisma.IntNullableFilter<"VerifiedEmail"> | number | null;
  email?: Prisma.StringFilter<"VerifiedEmail"> | string;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
};

export type VerifiedEmailOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
};

export type VerifiedEmailWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.VerifiedEmailWhereInput | Prisma.VerifiedEmailWhereInput[];
    OR?: Prisma.VerifiedEmailWhereInput[];
    NOT?: Prisma.VerifiedEmailWhereInput | Prisma.VerifiedEmailWhereInput[];
    userId?: Prisma.IntNullableFilter<"VerifiedEmail"> | number | null;
    teamId?: Prisma.IntNullableFilter<"VerifiedEmail"> | number | null;
    email?: Prisma.StringFilter<"VerifiedEmail"> | string;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  },
  "id"
>;

export type VerifiedEmailOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrder;
  _count?: Prisma.VerifiedEmailCountOrderByAggregateInput;
  _avg?: Prisma.VerifiedEmailAvgOrderByAggregateInput;
  _max?: Prisma.VerifiedEmailMaxOrderByAggregateInput;
  _min?: Prisma.VerifiedEmailMinOrderByAggregateInput;
  _sum?: Prisma.VerifiedEmailSumOrderByAggregateInput;
};

export type VerifiedEmailScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.VerifiedEmailScalarWhereWithAggregatesInput
    | Prisma.VerifiedEmailScalarWhereWithAggregatesInput[];
  OR?: Prisma.VerifiedEmailScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.VerifiedEmailScalarWhereWithAggregatesInput
    | Prisma.VerifiedEmailScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"VerifiedEmail"> | number;
  userId?: Prisma.IntNullableWithAggregatesFilter<"VerifiedEmail"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"VerifiedEmail"> | number | null;
  email?: Prisma.StringWithAggregatesFilter<"VerifiedEmail"> | string;
};

export type VerifiedEmailCreateInput = {
  email: string;
  user?: Prisma.UserCreateNestedOneWithoutVerifiedEmailsInput;
  team?: Prisma.TeamCreateNestedOneWithoutVerifiedEmailsInput;
};

export type VerifiedEmailUncheckedCreateInput = {
  id?: number;
  userId?: number | null;
  teamId?: number | null;
  email: string;
};

export type VerifiedEmailUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneWithoutVerifiedEmailsNestedInput;
  team?: Prisma.TeamUpdateOneWithoutVerifiedEmailsNestedInput;
};

export type VerifiedEmailUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailCreateManyInput = {
  id?: number;
  userId?: number | null;
  teamId?: number | null;
  email: string;
};

export type VerifiedEmailUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailListRelationFilter = {
  every?: Prisma.VerifiedEmailWhereInput;
  some?: Prisma.VerifiedEmailWhereInput;
  none?: Prisma.VerifiedEmailWhereInput;
};

export type VerifiedEmailOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type VerifiedEmailCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
};

export type VerifiedEmailAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type VerifiedEmailMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
};

export type VerifiedEmailMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
};

export type VerifiedEmailSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type VerifiedEmailCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutUserInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedEmailCreateWithoutUserInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.VerifiedEmailCreateManyUserInputEnvelope;
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
};

export type VerifiedEmailUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutUserInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedEmailCreateWithoutUserInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.VerifiedEmailCreateManyUserInputEnvelope;
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
};

export type VerifiedEmailUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutUserInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedEmailCreateWithoutUserInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.VerifiedEmailCreateManyUserInputEnvelope;
  set?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  disconnect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  delete?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  update?:
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutUserInput
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.VerifiedEmailScalarWhereInput | Prisma.VerifiedEmailScalarWhereInput[];
};

export type VerifiedEmailUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutUserInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedEmailCreateWithoutUserInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.VerifiedEmailCreateManyUserInputEnvelope;
  set?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  disconnect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  delete?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  update?:
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutUserInput
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.VerifiedEmailScalarWhereInput | Prisma.VerifiedEmailScalarWhereInput[];
};

export type VerifiedEmailCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutTeamInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedEmailCreateWithoutTeamInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.VerifiedEmailCreateManyTeamInputEnvelope;
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
};

export type VerifiedEmailUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutTeamInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedEmailCreateWithoutTeamInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.VerifiedEmailCreateManyTeamInputEnvelope;
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
};

export type VerifiedEmailUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutTeamInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedEmailCreateWithoutTeamInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.VerifiedEmailCreateManyTeamInputEnvelope;
  set?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  disconnect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  delete?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  update?:
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutTeamInput
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.VerifiedEmailScalarWhereInput | Prisma.VerifiedEmailScalarWhereInput[];
};

export type VerifiedEmailUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedEmailCreateWithoutTeamInput,
        Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedEmailCreateWithoutTeamInput[]
    | Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedEmailCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedEmailUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.VerifiedEmailCreateManyTeamInputEnvelope;
  set?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  disconnect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  delete?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  connect?: Prisma.VerifiedEmailWhereUniqueInput | Prisma.VerifiedEmailWhereUniqueInput[];
  update?:
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedEmailUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutTeamInput
    | Prisma.VerifiedEmailUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.VerifiedEmailScalarWhereInput | Prisma.VerifiedEmailScalarWhereInput[];
};

export type VerifiedEmailCreateWithoutUserInput = {
  email: string;
  team?: Prisma.TeamCreateNestedOneWithoutVerifiedEmailsInput;
};

export type VerifiedEmailUncheckedCreateWithoutUserInput = {
  id?: number;
  teamId?: number | null;
  email: string;
};

export type VerifiedEmailCreateOrConnectWithoutUserInput = {
  where: Prisma.VerifiedEmailWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.VerifiedEmailCreateWithoutUserInput,
    Prisma.VerifiedEmailUncheckedCreateWithoutUserInput
  >;
};

export type VerifiedEmailCreateManyUserInputEnvelope = {
  data: Prisma.VerifiedEmailCreateManyUserInput | Prisma.VerifiedEmailCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type VerifiedEmailUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.VerifiedEmailWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.VerifiedEmailUpdateWithoutUserInput,
    Prisma.VerifiedEmailUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.VerifiedEmailCreateWithoutUserInput,
    Prisma.VerifiedEmailUncheckedCreateWithoutUserInput
  >;
};

export type VerifiedEmailUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.VerifiedEmailWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.VerifiedEmailUpdateWithoutUserInput,
    Prisma.VerifiedEmailUncheckedUpdateWithoutUserInput
  >;
};

export type VerifiedEmailUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.VerifiedEmailScalarWhereInput;
  data: Prisma.XOR<
    Prisma.VerifiedEmailUpdateManyMutationInput,
    Prisma.VerifiedEmailUncheckedUpdateManyWithoutUserInput
  >;
};

export type VerifiedEmailScalarWhereInput = {
  AND?: Prisma.VerifiedEmailScalarWhereInput | Prisma.VerifiedEmailScalarWhereInput[];
  OR?: Prisma.VerifiedEmailScalarWhereInput[];
  NOT?: Prisma.VerifiedEmailScalarWhereInput | Prisma.VerifiedEmailScalarWhereInput[];
  id?: Prisma.IntFilter<"VerifiedEmail"> | number;
  userId?: Prisma.IntNullableFilter<"VerifiedEmail"> | number | null;
  teamId?: Prisma.IntNullableFilter<"VerifiedEmail"> | number | null;
  email?: Prisma.StringFilter<"VerifiedEmail"> | string;
};

export type VerifiedEmailCreateWithoutTeamInput = {
  email: string;
  user?: Prisma.UserCreateNestedOneWithoutVerifiedEmailsInput;
};

export type VerifiedEmailUncheckedCreateWithoutTeamInput = {
  id?: number;
  userId?: number | null;
  email: string;
};

export type VerifiedEmailCreateOrConnectWithoutTeamInput = {
  where: Prisma.VerifiedEmailWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.VerifiedEmailCreateWithoutTeamInput,
    Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput
  >;
};

export type VerifiedEmailCreateManyTeamInputEnvelope = {
  data: Prisma.VerifiedEmailCreateManyTeamInput | Prisma.VerifiedEmailCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type VerifiedEmailUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.VerifiedEmailWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.VerifiedEmailUpdateWithoutTeamInput,
    Prisma.VerifiedEmailUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.VerifiedEmailCreateWithoutTeamInput,
    Prisma.VerifiedEmailUncheckedCreateWithoutTeamInput
  >;
};

export type VerifiedEmailUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.VerifiedEmailWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.VerifiedEmailUpdateWithoutTeamInput,
    Prisma.VerifiedEmailUncheckedUpdateWithoutTeamInput
  >;
};

export type VerifiedEmailUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.VerifiedEmailScalarWhereInput;
  data: Prisma.XOR<
    Prisma.VerifiedEmailUpdateManyMutationInput,
    Prisma.VerifiedEmailUncheckedUpdateManyWithoutTeamInput
  >;
};

export type VerifiedEmailCreateManyUserInput = {
  id?: number;
  teamId?: number | null;
  email: string;
};

export type VerifiedEmailUpdateWithoutUserInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  team?: Prisma.TeamUpdateOneWithoutVerifiedEmailsNestedInput;
};

export type VerifiedEmailUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailCreateManyTeamInput = {
  id?: number;
  userId?: number | null;
  email: string;
};

export type VerifiedEmailUpdateWithoutTeamInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneWithoutVerifiedEmailsNestedInput;
};

export type VerifiedEmailUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedEmailSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    teamId?: boolean;
    email?: boolean;
    user?: boolean | Prisma.VerifiedEmail$userArgs<ExtArgs>;
    team?: boolean | Prisma.VerifiedEmail$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["verifiedEmail"]
>;

export type VerifiedEmailSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    teamId?: boolean;
    email?: boolean;
    user?: boolean | Prisma.VerifiedEmail$userArgs<ExtArgs>;
    team?: boolean | Prisma.VerifiedEmail$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["verifiedEmail"]
>;

export type VerifiedEmailSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    teamId?: boolean;
    email?: boolean;
    user?: boolean | Prisma.VerifiedEmail$userArgs<ExtArgs>;
    team?: boolean | Prisma.VerifiedEmail$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["verifiedEmail"]
>;

export type VerifiedEmailSelectScalar = {
  id?: boolean;
  userId?: boolean;
  teamId?: boolean;
  email?: boolean;
};

export type VerifiedEmailOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "teamId" | "email",
  ExtArgs["result"]["verifiedEmail"]
>;
export type VerifiedEmailInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.VerifiedEmail$userArgs<ExtArgs>;
  team?: boolean | Prisma.VerifiedEmail$teamArgs<ExtArgs>;
};
export type VerifiedEmailIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.VerifiedEmail$userArgs<ExtArgs>;
  team?: boolean | Prisma.VerifiedEmail$teamArgs<ExtArgs>;
};
export type VerifiedEmailIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.VerifiedEmail$userArgs<ExtArgs>;
  team?: boolean | Prisma.VerifiedEmail$teamArgs<ExtArgs>;
};

export type $VerifiedEmailPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "VerifiedEmail";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
    team: Prisma.$TeamPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number | null;
      teamId: number | null;
      email: string;
    },
    ExtArgs["result"]["verifiedEmail"]
  >;
  composites: {};
};

export type VerifiedEmailGetPayload<S extends boolean | null | undefined | VerifiedEmailDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$VerifiedEmailPayload, S>;

export type VerifiedEmailCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<VerifiedEmailFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: VerifiedEmailCountAggregateInputType | true;
};

export interface VerifiedEmailDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["VerifiedEmail"]; meta: { name: "VerifiedEmail" } };
  /**
   * Find zero or one VerifiedEmail that matches the filter.
   * @param {VerifiedEmailFindUniqueArgs} args - Arguments to find a VerifiedEmail
   * @example
   * // Get one VerifiedEmail
   * const verifiedEmail = await prisma.verifiedEmail.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VerifiedEmailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedEmailPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one VerifiedEmail that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VerifiedEmailFindUniqueOrThrowArgs} args - Arguments to find a VerifiedEmail
   * @example
   * // Get one VerifiedEmail
   * const verifiedEmail = await prisma.verifiedEmail.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VerifiedEmailFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedEmailPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VerifiedEmail that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailFindFirstArgs} args - Arguments to find a VerifiedEmail
   * @example
   * // Get one VerifiedEmail
   * const verifiedEmail = await prisma.verifiedEmail.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VerifiedEmailFindFirstArgs>(
    args?: Prisma.SelectSubset<T, VerifiedEmailFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedEmailPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VerifiedEmail that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailFindFirstOrThrowArgs} args - Arguments to find a VerifiedEmail
   * @example
   * // Get one VerifiedEmail
   * const verifiedEmail = await prisma.verifiedEmail.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VerifiedEmailFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, VerifiedEmailFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedEmailPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more VerifiedEmails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VerifiedEmails
   * const verifiedEmails = await prisma.verifiedEmail.findMany()
   *
   * // Get first 10 VerifiedEmails
   * const verifiedEmails = await prisma.verifiedEmail.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const verifiedEmailWithIdOnly = await prisma.verifiedEmail.findMany({ select: { id: true } })
   *
   */
  findMany<T extends VerifiedEmailFindManyArgs>(
    args?: Prisma.SelectSubset<T, VerifiedEmailFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$VerifiedEmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a VerifiedEmail.
   * @param {VerifiedEmailCreateArgs} args - Arguments to create a VerifiedEmail.
   * @example
   * // Create one VerifiedEmail
   * const VerifiedEmail = await prisma.verifiedEmail.create({
   *   data: {
   *     // ... data to create a VerifiedEmail
   *   }
   * })
   *
   */
  create<T extends VerifiedEmailCreateArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailCreateArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedEmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many VerifiedEmails.
   * @param {VerifiedEmailCreateManyArgs} args - Arguments to create many VerifiedEmails.
   * @example
   * // Create many VerifiedEmails
   * const verifiedEmail = await prisma.verifiedEmail.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends VerifiedEmailCreateManyArgs>(
    args?: Prisma.SelectSubset<T, VerifiedEmailCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many VerifiedEmails and returns the data saved in the database.
   * @param {VerifiedEmailCreateManyAndReturnArgs} args - Arguments to create many VerifiedEmails.
   * @example
   * // Create many VerifiedEmails
   * const verifiedEmail = await prisma.verifiedEmail.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many VerifiedEmails and only return the `id`
   * const verifiedEmailWithIdOnly = await prisma.verifiedEmail.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends VerifiedEmailCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, VerifiedEmailCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedEmailPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a VerifiedEmail.
   * @param {VerifiedEmailDeleteArgs} args - Arguments to delete one VerifiedEmail.
   * @example
   * // Delete one VerifiedEmail
   * const VerifiedEmail = await prisma.verifiedEmail.delete({
   *   where: {
   *     // ... filter to delete one VerifiedEmail
   *   }
   * })
   *
   */
  delete<T extends VerifiedEmailDeleteArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedEmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one VerifiedEmail.
   * @param {VerifiedEmailUpdateArgs} args - Arguments to update one VerifiedEmail.
   * @example
   * // Update one VerifiedEmail
   * const verifiedEmail = await prisma.verifiedEmail.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends VerifiedEmailUpdateArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedEmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more VerifiedEmails.
   * @param {VerifiedEmailDeleteManyArgs} args - Arguments to filter VerifiedEmails to delete.
   * @example
   * // Delete a few VerifiedEmails
   * const { count } = await prisma.verifiedEmail.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends VerifiedEmailDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, VerifiedEmailDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VerifiedEmails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VerifiedEmails
   * const verifiedEmail = await prisma.verifiedEmail.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends VerifiedEmailUpdateManyArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VerifiedEmails and returns the data updated in the database.
   * @param {VerifiedEmailUpdateManyAndReturnArgs} args - Arguments to update many VerifiedEmails.
   * @example
   * // Update many VerifiedEmails
   * const verifiedEmail = await prisma.verifiedEmail.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more VerifiedEmails and only return the `id`
   * const verifiedEmailWithIdOnly = await prisma.verifiedEmail.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends VerifiedEmailUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedEmailPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one VerifiedEmail.
   * @param {VerifiedEmailUpsertArgs} args - Arguments to update or create a VerifiedEmail.
   * @example
   * // Update or create a VerifiedEmail
   * const verifiedEmail = await prisma.verifiedEmail.upsert({
   *   create: {
   *     // ... data to create a VerifiedEmail
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VerifiedEmail we want to update
   *   }
   * })
   */
  upsert<T extends VerifiedEmailUpsertArgs>(
    args: Prisma.SelectSubset<T, VerifiedEmailUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedEmailClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedEmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of VerifiedEmails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailCountArgs} args - Arguments to filter VerifiedEmails to count.
   * @example
   * // Count the number of VerifiedEmails
   * const count = await prisma.verifiedEmail.count({
   *   where: {
   *     // ... the filter for the VerifiedEmails we want to count
   *   }
   * })
   **/
  count<T extends VerifiedEmailCountArgs>(
    args?: Prisma.Subset<T, VerifiedEmailCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], VerifiedEmailCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a VerifiedEmail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends VerifiedEmailAggregateArgs>(
    args: Prisma.Subset<T, VerifiedEmailAggregateArgs>
  ): Prisma.PrismaPromise<GetVerifiedEmailAggregateType<T>>;

  /**
   * Group by VerifiedEmail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedEmailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends VerifiedEmailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VerifiedEmailGroupByArgs["orderBy"] }
      : { orderBy?: VerifiedEmailGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, VerifiedEmailGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetVerifiedEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the VerifiedEmail model
   */
  readonly fields: VerifiedEmailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VerifiedEmail.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VerifiedEmailClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.VerifiedEmail$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VerifiedEmail$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.VerifiedEmail$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VerifiedEmail$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the VerifiedEmail model
 */
export interface VerifiedEmailFieldRefs {
  readonly id: Prisma.FieldRef<"VerifiedEmail", "Int">;
  readonly userId: Prisma.FieldRef<"VerifiedEmail", "Int">;
  readonly teamId: Prisma.FieldRef<"VerifiedEmail", "Int">;
  readonly email: Prisma.FieldRef<"VerifiedEmail", "String">;
}

// Custom InputTypes
/**
 * VerifiedEmail findUnique
 */
export type VerifiedEmailFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedEmail to fetch.
   */
  where: Prisma.VerifiedEmailWhereUniqueInput;
};

/**
 * VerifiedEmail findUniqueOrThrow
 */
export type VerifiedEmailFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedEmail to fetch.
   */
  where: Prisma.VerifiedEmailWhereUniqueInput;
};

/**
 * VerifiedEmail findFirst
 */
export type VerifiedEmailFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedEmail to fetch.
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedEmails to fetch.
   */
  orderBy?: Prisma.VerifiedEmailOrderByWithRelationInput | Prisma.VerifiedEmailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VerifiedEmails.
   */
  cursor?: Prisma.VerifiedEmailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedEmails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedEmails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VerifiedEmails.
   */
  distinct?: Prisma.VerifiedEmailScalarFieldEnum | Prisma.VerifiedEmailScalarFieldEnum[];
};

/**
 * VerifiedEmail findFirstOrThrow
 */
export type VerifiedEmailFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedEmail to fetch.
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedEmails to fetch.
   */
  orderBy?: Prisma.VerifiedEmailOrderByWithRelationInput | Prisma.VerifiedEmailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VerifiedEmails.
   */
  cursor?: Prisma.VerifiedEmailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedEmails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedEmails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VerifiedEmails.
   */
  distinct?: Prisma.VerifiedEmailScalarFieldEnum | Prisma.VerifiedEmailScalarFieldEnum[];
};

/**
 * VerifiedEmail findMany
 */
export type VerifiedEmailFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedEmails to fetch.
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedEmails to fetch.
   */
  orderBy?: Prisma.VerifiedEmailOrderByWithRelationInput | Prisma.VerifiedEmailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing VerifiedEmails.
   */
  cursor?: Prisma.VerifiedEmailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedEmails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedEmails.
   */
  skip?: number;
  distinct?: Prisma.VerifiedEmailScalarFieldEnum | Prisma.VerifiedEmailScalarFieldEnum[];
};

/**
 * VerifiedEmail create
 */
export type VerifiedEmailCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * The data needed to create a VerifiedEmail.
   */
  data: Prisma.XOR<Prisma.VerifiedEmailCreateInput, Prisma.VerifiedEmailUncheckedCreateInput>;
};

/**
 * VerifiedEmail createMany
 */
export type VerifiedEmailCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many VerifiedEmails.
   */
  data: Prisma.VerifiedEmailCreateManyInput | Prisma.VerifiedEmailCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * VerifiedEmail createManyAndReturn
 */
export type VerifiedEmailCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * The data used to create many VerifiedEmails.
   */
  data: Prisma.VerifiedEmailCreateManyInput | Prisma.VerifiedEmailCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * VerifiedEmail update
 */
export type VerifiedEmailUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * The data needed to update a VerifiedEmail.
   */
  data: Prisma.XOR<Prisma.VerifiedEmailUpdateInput, Prisma.VerifiedEmailUncheckedUpdateInput>;
  /**
   * Choose, which VerifiedEmail to update.
   */
  where: Prisma.VerifiedEmailWhereUniqueInput;
};

/**
 * VerifiedEmail updateMany
 */
export type VerifiedEmailUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update VerifiedEmails.
   */
  data: Prisma.XOR<Prisma.VerifiedEmailUpdateManyMutationInput, Prisma.VerifiedEmailUncheckedUpdateManyInput>;
  /**
   * Filter which VerifiedEmails to update
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * Limit how many VerifiedEmails to update.
   */
  limit?: number;
};

/**
 * VerifiedEmail updateManyAndReturn
 */
export type VerifiedEmailUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * The data used to update VerifiedEmails.
   */
  data: Prisma.XOR<Prisma.VerifiedEmailUpdateManyMutationInput, Prisma.VerifiedEmailUncheckedUpdateManyInput>;
  /**
   * Filter which VerifiedEmails to update
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * Limit how many VerifiedEmails to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * VerifiedEmail upsert
 */
export type VerifiedEmailUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * The filter to search for the VerifiedEmail to update in case it exists.
   */
  where: Prisma.VerifiedEmailWhereUniqueInput;
  /**
   * In case the VerifiedEmail found by the `where` argument doesn't exist, create a new VerifiedEmail with this data.
   */
  create: Prisma.XOR<Prisma.VerifiedEmailCreateInput, Prisma.VerifiedEmailUncheckedCreateInput>;
  /**
   * In case the VerifiedEmail was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VerifiedEmailUpdateInput, Prisma.VerifiedEmailUncheckedUpdateInput>;
};

/**
 * VerifiedEmail delete
 */
export type VerifiedEmailDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
  /**
   * Filter which VerifiedEmail to delete.
   */
  where: Prisma.VerifiedEmailWhereUniqueInput;
};

/**
 * VerifiedEmail deleteMany
 */
export type VerifiedEmailDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which VerifiedEmails to delete
   */
  where?: Prisma.VerifiedEmailWhereInput;
  /**
   * Limit how many VerifiedEmails to delete.
   */
  limit?: number;
};

/**
 * VerifiedEmail.user
 */
export type VerifiedEmail$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * VerifiedEmail.team
 */
export type VerifiedEmail$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * VerifiedEmail without action
 */
export type VerifiedEmailDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedEmail
   */
  select?: Prisma.VerifiedEmailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedEmail
   */
  omit?: Prisma.VerifiedEmailOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedEmailInclude<ExtArgs> | null;
};
