/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `OutOfOfficeReason` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model OutOfOfficeReason
 *
 */
export type OutOfOfficeReasonModel = runtime.Types.Result.DefaultSelection<Prisma.$OutOfOfficeReasonPayload>;

export type AggregateOutOfOfficeReason = {
  _count: OutOfOfficeReasonCountAggregateOutputType | null;
  _avg: OutOfOfficeReasonAvgAggregateOutputType | null;
  _sum: OutOfOfficeReasonSumAggregateOutputType | null;
  _min: OutOfOfficeReasonMinAggregateOutputType | null;
  _max: OutOfOfficeReasonMaxAggregateOutputType | null;
};

export type OutOfOfficeReasonAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type OutOfOfficeReasonSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type OutOfOfficeReasonMinAggregateOutputType = {
  id: number | null;
  emoji: string | null;
  reason: string | null;
  enabled: boolean | null;
  userId: number | null;
};

export type OutOfOfficeReasonMaxAggregateOutputType = {
  id: number | null;
  emoji: string | null;
  reason: string | null;
  enabled: boolean | null;
  userId: number | null;
};

export type OutOfOfficeReasonCountAggregateOutputType = {
  id: number;
  emoji: number;
  reason: number;
  enabled: number;
  userId: number;
  _all: number;
};

export type OutOfOfficeReasonAvgAggregateInputType = {
  id?: true;
  userId?: true;
};

export type OutOfOfficeReasonSumAggregateInputType = {
  id?: true;
  userId?: true;
};

export type OutOfOfficeReasonMinAggregateInputType = {
  id?: true;
  emoji?: true;
  reason?: true;
  enabled?: true;
  userId?: true;
};

export type OutOfOfficeReasonMaxAggregateInputType = {
  id?: true;
  emoji?: true;
  reason?: true;
  enabled?: true;
  userId?: true;
};

export type OutOfOfficeReasonCountAggregateInputType = {
  id?: true;
  emoji?: true;
  reason?: true;
  enabled?: true;
  userId?: true;
  _all?: true;
};

export type OutOfOfficeReasonAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which OutOfOfficeReason to aggregate.
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeReasons to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.OutOfOfficeReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeReasons.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned OutOfOfficeReasons
   **/
  _count?: true | OutOfOfficeReasonCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: OutOfOfficeReasonAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: OutOfOfficeReasonSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: OutOfOfficeReasonMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: OutOfOfficeReasonMaxAggregateInputType;
};

export type GetOutOfOfficeReasonAggregateType<T extends OutOfOfficeReasonAggregateArgs> = {
  [P in keyof T & keyof AggregateOutOfOfficeReason]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOutOfOfficeReason[P]>
    : Prisma.GetScalarType<T[P], AggregateOutOfOfficeReason[P]>;
};

export type OutOfOfficeReasonGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.OutOfOfficeReasonWhereInput;
  orderBy?:
    | Prisma.OutOfOfficeReasonOrderByWithAggregationInput
    | Prisma.OutOfOfficeReasonOrderByWithAggregationInput[];
  by: Prisma.OutOfOfficeReasonScalarFieldEnum[] | Prisma.OutOfOfficeReasonScalarFieldEnum;
  having?: Prisma.OutOfOfficeReasonScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: OutOfOfficeReasonCountAggregateInputType | true;
  _avg?: OutOfOfficeReasonAvgAggregateInputType;
  _sum?: OutOfOfficeReasonSumAggregateInputType;
  _min?: OutOfOfficeReasonMinAggregateInputType;
  _max?: OutOfOfficeReasonMaxAggregateInputType;
};

export type OutOfOfficeReasonGroupByOutputType = {
  id: number;
  emoji: string;
  reason: string;
  enabled: boolean;
  userId: number | null;
  _count: OutOfOfficeReasonCountAggregateOutputType | null;
  _avg: OutOfOfficeReasonAvgAggregateOutputType | null;
  _sum: OutOfOfficeReasonSumAggregateOutputType | null;
  _min: OutOfOfficeReasonMinAggregateOutputType | null;
  _max: OutOfOfficeReasonMaxAggregateOutputType | null;
};

type GetOutOfOfficeReasonGroupByPayload<T extends OutOfOfficeReasonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OutOfOfficeReasonGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof OutOfOfficeReasonGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], OutOfOfficeReasonGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], OutOfOfficeReasonGroupByOutputType[P]>;
    }
  >
>;

export type OutOfOfficeReasonWhereInput = {
  AND?: Prisma.OutOfOfficeReasonWhereInput | Prisma.OutOfOfficeReasonWhereInput[];
  OR?: Prisma.OutOfOfficeReasonWhereInput[];
  NOT?: Prisma.OutOfOfficeReasonWhereInput | Prisma.OutOfOfficeReasonWhereInput[];
  id?: Prisma.IntFilter<"OutOfOfficeReason"> | number;
  emoji?: Prisma.StringFilter<"OutOfOfficeReason"> | string;
  reason?: Prisma.StringFilter<"OutOfOfficeReason"> | string;
  enabled?: Prisma.BoolFilter<"OutOfOfficeReason"> | boolean;
  userId?: Prisma.IntNullableFilter<"OutOfOfficeReason"> | number | null;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  entries?: Prisma.OutOfOfficeEntryListRelationFilter;
};

export type OutOfOfficeReasonOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  emoji?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  entries?: Prisma.OutOfOfficeEntryOrderByRelationAggregateInput;
};

export type OutOfOfficeReasonWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    reason?: string;
    AND?: Prisma.OutOfOfficeReasonWhereInput | Prisma.OutOfOfficeReasonWhereInput[];
    OR?: Prisma.OutOfOfficeReasonWhereInput[];
    NOT?: Prisma.OutOfOfficeReasonWhereInput | Prisma.OutOfOfficeReasonWhereInput[];
    emoji?: Prisma.StringFilter<"OutOfOfficeReason"> | string;
    enabled?: Prisma.BoolFilter<"OutOfOfficeReason"> | boolean;
    userId?: Prisma.IntNullableFilter<"OutOfOfficeReason"> | number | null;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    entries?: Prisma.OutOfOfficeEntryListRelationFilter;
  },
  "id" | "reason"
>;

export type OutOfOfficeReasonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  emoji?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.OutOfOfficeReasonCountOrderByAggregateInput;
  _avg?: Prisma.OutOfOfficeReasonAvgOrderByAggregateInput;
  _max?: Prisma.OutOfOfficeReasonMaxOrderByAggregateInput;
  _min?: Prisma.OutOfOfficeReasonMinOrderByAggregateInput;
  _sum?: Prisma.OutOfOfficeReasonSumOrderByAggregateInput;
};

export type OutOfOfficeReasonScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.OutOfOfficeReasonScalarWhereWithAggregatesInput
    | Prisma.OutOfOfficeReasonScalarWhereWithAggregatesInput[];
  OR?: Prisma.OutOfOfficeReasonScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.OutOfOfficeReasonScalarWhereWithAggregatesInput
    | Prisma.OutOfOfficeReasonScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"OutOfOfficeReason"> | number;
  emoji?: Prisma.StringWithAggregatesFilter<"OutOfOfficeReason"> | string;
  reason?: Prisma.StringWithAggregatesFilter<"OutOfOfficeReason"> | string;
  enabled?: Prisma.BoolWithAggregatesFilter<"OutOfOfficeReason"> | boolean;
  userId?: Prisma.IntNullableWithAggregatesFilter<"OutOfOfficeReason"> | number | null;
};

export type OutOfOfficeReasonCreateInput = {
  emoji: string;
  reason: string;
  enabled?: boolean;
  user?: Prisma.UserCreateNestedOneWithoutOutOfOfficeReasonsInput;
  entries?: Prisma.OutOfOfficeEntryCreateNestedManyWithoutReasonInput;
};

export type OutOfOfficeReasonUncheckedCreateInput = {
  id?: number;
  emoji: string;
  reason: string;
  enabled?: boolean;
  userId?: number | null;
  entries?: Prisma.OutOfOfficeEntryUncheckedCreateNestedManyWithoutReasonInput;
};

export type OutOfOfficeReasonUpdateInput = {
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  user?: Prisma.UserUpdateOneWithoutOutOfOfficeReasonsNestedInput;
  entries?: Prisma.OutOfOfficeEntryUpdateManyWithoutReasonNestedInput;
};

export type OutOfOfficeReasonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  entries?: Prisma.OutOfOfficeEntryUncheckedUpdateManyWithoutReasonNestedInput;
};

export type OutOfOfficeReasonCreateManyInput = {
  id?: number;
  emoji: string;
  reason: string;
  enabled?: boolean;
  userId?: number | null;
};

export type OutOfOfficeReasonUpdateManyMutationInput = {
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type OutOfOfficeReasonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type OutOfOfficeReasonListRelationFilter = {
  every?: Prisma.OutOfOfficeReasonWhereInput;
  some?: Prisma.OutOfOfficeReasonWhereInput;
  none?: Prisma.OutOfOfficeReasonWhereInput;
};

export type OutOfOfficeReasonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type OutOfOfficeReasonNullableScalarRelationFilter = {
  is?: Prisma.OutOfOfficeReasonWhereInput | null;
  isNot?: Prisma.OutOfOfficeReasonWhereInput | null;
};

export type OutOfOfficeReasonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  emoji?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type OutOfOfficeReasonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type OutOfOfficeReasonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  emoji?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type OutOfOfficeReasonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  emoji?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type OutOfOfficeReasonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type OutOfOfficeReasonCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeReasonCreateWithoutUserInput,
        Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeReasonCreateWithoutUserInput[]
    | Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeReasonCreateManyUserInputEnvelope;
  connect?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
};

export type OutOfOfficeReasonUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeReasonCreateWithoutUserInput,
        Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeReasonCreateWithoutUserInput[]
    | Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeReasonCreateManyUserInputEnvelope;
  connect?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
};

export type OutOfOfficeReasonUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeReasonCreateWithoutUserInput,
        Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeReasonCreateWithoutUserInput[]
    | Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.OutOfOfficeReasonUpsertWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeReasonUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeReasonCreateManyUserInputEnvelope;
  set?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeReasonUpdateWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeReasonUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.OutOfOfficeReasonUpdateManyWithWhereWithoutUserInput
    | Prisma.OutOfOfficeReasonUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.OutOfOfficeReasonScalarWhereInput | Prisma.OutOfOfficeReasonScalarWhereInput[];
};

export type OutOfOfficeReasonUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeReasonCreateWithoutUserInput,
        Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeReasonCreateWithoutUserInput[]
    | Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeReasonCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.OutOfOfficeReasonUpsertWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeReasonUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeReasonCreateManyUserInputEnvelope;
  set?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeReasonWhereUniqueInput | Prisma.OutOfOfficeReasonWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeReasonUpdateWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeReasonUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.OutOfOfficeReasonUpdateManyWithWhereWithoutUserInput
    | Prisma.OutOfOfficeReasonUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.OutOfOfficeReasonScalarWhereInput | Prisma.OutOfOfficeReasonScalarWhereInput[];
};

export type OutOfOfficeReasonCreateNestedOneWithoutEntriesInput = {
  create?: Prisma.XOR<
    Prisma.OutOfOfficeReasonCreateWithoutEntriesInput,
    Prisma.OutOfOfficeReasonUncheckedCreateWithoutEntriesInput
  >;
  connectOrCreate?: Prisma.OutOfOfficeReasonCreateOrConnectWithoutEntriesInput;
  connect?: Prisma.OutOfOfficeReasonWhereUniqueInput;
};

export type OutOfOfficeReasonUpdateOneWithoutEntriesNestedInput = {
  create?: Prisma.XOR<
    Prisma.OutOfOfficeReasonCreateWithoutEntriesInput,
    Prisma.OutOfOfficeReasonUncheckedCreateWithoutEntriesInput
  >;
  connectOrCreate?: Prisma.OutOfOfficeReasonCreateOrConnectWithoutEntriesInput;
  upsert?: Prisma.OutOfOfficeReasonUpsertWithoutEntriesInput;
  disconnect?: Prisma.OutOfOfficeReasonWhereInput | boolean;
  delete?: Prisma.OutOfOfficeReasonWhereInput | boolean;
  connect?: Prisma.OutOfOfficeReasonWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.OutOfOfficeReasonUpdateToOneWithWhereWithoutEntriesInput,
      Prisma.OutOfOfficeReasonUpdateWithoutEntriesInput
    >,
    Prisma.OutOfOfficeReasonUncheckedUpdateWithoutEntriesInput
  >;
};

export type OutOfOfficeReasonCreateWithoutUserInput = {
  emoji: string;
  reason: string;
  enabled?: boolean;
  entries?: Prisma.OutOfOfficeEntryCreateNestedManyWithoutReasonInput;
};

export type OutOfOfficeReasonUncheckedCreateWithoutUserInput = {
  id?: number;
  emoji: string;
  reason: string;
  enabled?: boolean;
  entries?: Prisma.OutOfOfficeEntryUncheckedCreateNestedManyWithoutReasonInput;
};

export type OutOfOfficeReasonCreateOrConnectWithoutUserInput = {
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OutOfOfficeReasonCreateWithoutUserInput,
    Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput
  >;
};

export type OutOfOfficeReasonCreateManyUserInputEnvelope = {
  data: Prisma.OutOfOfficeReasonCreateManyUserInput | Prisma.OutOfOfficeReasonCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type OutOfOfficeReasonUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateWithoutUserInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.OutOfOfficeReasonCreateWithoutUserInput,
    Prisma.OutOfOfficeReasonUncheckedCreateWithoutUserInput
  >;
};

export type OutOfOfficeReasonUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateWithoutUserInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateWithoutUserInput
  >;
};

export type OutOfOfficeReasonUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.OutOfOfficeReasonScalarWhereInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateManyMutationInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateManyWithoutUserInput
  >;
};

export type OutOfOfficeReasonScalarWhereInput = {
  AND?: Prisma.OutOfOfficeReasonScalarWhereInput | Prisma.OutOfOfficeReasonScalarWhereInput[];
  OR?: Prisma.OutOfOfficeReasonScalarWhereInput[];
  NOT?: Prisma.OutOfOfficeReasonScalarWhereInput | Prisma.OutOfOfficeReasonScalarWhereInput[];
  id?: Prisma.IntFilter<"OutOfOfficeReason"> | number;
  emoji?: Prisma.StringFilter<"OutOfOfficeReason"> | string;
  reason?: Prisma.StringFilter<"OutOfOfficeReason"> | string;
  enabled?: Prisma.BoolFilter<"OutOfOfficeReason"> | boolean;
  userId?: Prisma.IntNullableFilter<"OutOfOfficeReason"> | number | null;
};

export type OutOfOfficeReasonCreateWithoutEntriesInput = {
  emoji: string;
  reason: string;
  enabled?: boolean;
  user?: Prisma.UserCreateNestedOneWithoutOutOfOfficeReasonsInput;
};

export type OutOfOfficeReasonUncheckedCreateWithoutEntriesInput = {
  id?: number;
  emoji: string;
  reason: string;
  enabled?: boolean;
  userId?: number | null;
};

export type OutOfOfficeReasonCreateOrConnectWithoutEntriesInput = {
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OutOfOfficeReasonCreateWithoutEntriesInput,
    Prisma.OutOfOfficeReasonUncheckedCreateWithoutEntriesInput
  >;
};

export type OutOfOfficeReasonUpsertWithoutEntriesInput = {
  update: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateWithoutEntriesInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateWithoutEntriesInput
  >;
  create: Prisma.XOR<
    Prisma.OutOfOfficeReasonCreateWithoutEntriesInput,
    Prisma.OutOfOfficeReasonUncheckedCreateWithoutEntriesInput
  >;
  where?: Prisma.OutOfOfficeReasonWhereInput;
};

export type OutOfOfficeReasonUpdateToOneWithWhereWithoutEntriesInput = {
  where?: Prisma.OutOfOfficeReasonWhereInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateWithoutEntriesInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateWithoutEntriesInput
  >;
};

export type OutOfOfficeReasonUpdateWithoutEntriesInput = {
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  user?: Prisma.UserUpdateOneWithoutOutOfOfficeReasonsNestedInput;
};

export type OutOfOfficeReasonUncheckedUpdateWithoutEntriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type OutOfOfficeReasonCreateManyUserInput = {
  id?: number;
  emoji: string;
  reason: string;
  enabled?: boolean;
};

export type OutOfOfficeReasonUpdateWithoutUserInput = {
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  entries?: Prisma.OutOfOfficeEntryUpdateManyWithoutReasonNestedInput;
};

export type OutOfOfficeReasonUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  entries?: Prisma.OutOfOfficeEntryUncheckedUpdateManyWithoutReasonNestedInput;
};

export type OutOfOfficeReasonUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  emoji?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

/**
 * Count Type OutOfOfficeReasonCountOutputType
 */

export type OutOfOfficeReasonCountOutputType = {
  entries: number;
};

export type OutOfOfficeReasonCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  entries?: boolean | OutOfOfficeReasonCountOutputTypeCountEntriesArgs;
};

/**
 * OutOfOfficeReasonCountOutputType without action
 */
export type OutOfOfficeReasonCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReasonCountOutputType
   */
  select?: Prisma.OutOfOfficeReasonCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * OutOfOfficeReasonCountOutputType without action
 */
export type OutOfOfficeReasonCountOutputTypeCountEntriesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.OutOfOfficeEntryWhereInput;
};

export type OutOfOfficeReasonSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    emoji?: boolean;
    reason?: boolean;
    enabled?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.OutOfOfficeReason$userArgs<ExtArgs>;
    entries?: boolean | Prisma.OutOfOfficeReason$entriesArgs<ExtArgs>;
    _count?: boolean | Prisma.OutOfOfficeReasonCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["outOfOfficeReason"]
>;

export type OutOfOfficeReasonSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    emoji?: boolean;
    reason?: boolean;
    enabled?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.OutOfOfficeReason$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["outOfOfficeReason"]
>;

export type OutOfOfficeReasonSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    emoji?: boolean;
    reason?: boolean;
    enabled?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.OutOfOfficeReason$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["outOfOfficeReason"]
>;

export type OutOfOfficeReasonSelectScalar = {
  id?: boolean;
  emoji?: boolean;
  reason?: boolean;
  enabled?: boolean;
  userId?: boolean;
};

export type OutOfOfficeReasonOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "emoji" | "reason" | "enabled" | "userId",
  ExtArgs["result"]["outOfOfficeReason"]
>;
export type OutOfOfficeReasonInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.OutOfOfficeReason$userArgs<ExtArgs>;
  entries?: boolean | Prisma.OutOfOfficeReason$entriesArgs<ExtArgs>;
  _count?: boolean | Prisma.OutOfOfficeReasonCountOutputTypeDefaultArgs<ExtArgs>;
};
export type OutOfOfficeReasonIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.OutOfOfficeReason$userArgs<ExtArgs>;
};
export type OutOfOfficeReasonIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.OutOfOfficeReason$userArgs<ExtArgs>;
};

export type $OutOfOfficeReasonPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "OutOfOfficeReason";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
    entries: Prisma.$OutOfOfficeEntryPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      emoji: string;
      reason: string;
      enabled: boolean;
      userId: number | null;
    },
    ExtArgs["result"]["outOfOfficeReason"]
  >;
  composites: {};
};

export type OutOfOfficeReasonGetPayload<S extends boolean | null | undefined | OutOfOfficeReasonDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$OutOfOfficeReasonPayload, S>;

export type OutOfOfficeReasonCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<OutOfOfficeReasonFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: OutOfOfficeReasonCountAggregateInputType | true;
};

export interface OutOfOfficeReasonDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["OutOfOfficeReason"];
    meta: { name: "OutOfOfficeReason" };
  };
  /**
   * Find zero or one OutOfOfficeReason that matches the filter.
   * @param {OutOfOfficeReasonFindUniqueArgs} args - Arguments to find a OutOfOfficeReason
   * @example
   * // Get one OutOfOfficeReason
   * const outOfOfficeReason = await prisma.outOfOfficeReason.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OutOfOfficeReasonFindUniqueArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one OutOfOfficeReason that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OutOfOfficeReasonFindUniqueOrThrowArgs} args - Arguments to find a OutOfOfficeReason
   * @example
   * // Get one OutOfOfficeReason
   * const outOfOfficeReason = await prisma.outOfOfficeReason.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OutOfOfficeReasonFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OutOfOfficeReason that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonFindFirstArgs} args - Arguments to find a OutOfOfficeReason
   * @example
   * // Get one OutOfOfficeReason
   * const outOfOfficeReason = await prisma.outOfOfficeReason.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OutOfOfficeReasonFindFirstArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeReasonFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OutOfOfficeReason that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonFindFirstOrThrowArgs} args - Arguments to find a OutOfOfficeReason
   * @example
   * // Get one OutOfOfficeReason
   * const outOfOfficeReason = await prisma.outOfOfficeReason.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OutOfOfficeReasonFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeReasonFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more OutOfOfficeReasons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OutOfOfficeReasons
   * const outOfOfficeReasons = await prisma.outOfOfficeReason.findMany()
   *
   * // Get first 10 OutOfOfficeReasons
   * const outOfOfficeReasons = await prisma.outOfOfficeReason.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const outOfOfficeReasonWithIdOnly = await prisma.outOfOfficeReason.findMany({ select: { id: true } })
   *
   */
  findMany<T extends OutOfOfficeReasonFindManyArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeReasonFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a OutOfOfficeReason.
   * @param {OutOfOfficeReasonCreateArgs} args - Arguments to create a OutOfOfficeReason.
   * @example
   * // Create one OutOfOfficeReason
   * const OutOfOfficeReason = await prisma.outOfOfficeReason.create({
   *   data: {
   *     // ... data to create a OutOfOfficeReason
   *   }
   * })
   *
   */
  create<T extends OutOfOfficeReasonCreateArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonCreateArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeReasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many OutOfOfficeReasons.
   * @param {OutOfOfficeReasonCreateManyArgs} args - Arguments to create many OutOfOfficeReasons.
   * @example
   * // Create many OutOfOfficeReasons
   * const outOfOfficeReason = await prisma.outOfOfficeReason.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends OutOfOfficeReasonCreateManyArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeReasonCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many OutOfOfficeReasons and returns the data saved in the database.
   * @param {OutOfOfficeReasonCreateManyAndReturnArgs} args - Arguments to create many OutOfOfficeReasons.
   * @example
   * // Create many OutOfOfficeReasons
   * const outOfOfficeReason = await prisma.outOfOfficeReason.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many OutOfOfficeReasons and only return the `id`
   * const outOfOfficeReasonWithIdOnly = await prisma.outOfOfficeReason.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends OutOfOfficeReasonCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeReasonCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a OutOfOfficeReason.
   * @param {OutOfOfficeReasonDeleteArgs} args - Arguments to delete one OutOfOfficeReason.
   * @example
   * // Delete one OutOfOfficeReason
   * const OutOfOfficeReason = await prisma.outOfOfficeReason.delete({
   *   where: {
   *     // ... filter to delete one OutOfOfficeReason
   *   }
   * })
   *
   */
  delete<T extends OutOfOfficeReasonDeleteArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeReasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one OutOfOfficeReason.
   * @param {OutOfOfficeReasonUpdateArgs} args - Arguments to update one OutOfOfficeReason.
   * @example
   * // Update one OutOfOfficeReason
   * const outOfOfficeReason = await prisma.outOfOfficeReason.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends OutOfOfficeReasonUpdateArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeReasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more OutOfOfficeReasons.
   * @param {OutOfOfficeReasonDeleteManyArgs} args - Arguments to filter OutOfOfficeReasons to delete.
   * @example
   * // Delete a few OutOfOfficeReasons
   * const { count } = await prisma.outOfOfficeReason.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends OutOfOfficeReasonDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeReasonDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OutOfOfficeReasons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OutOfOfficeReasons
   * const outOfOfficeReason = await prisma.outOfOfficeReason.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends OutOfOfficeReasonUpdateManyArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OutOfOfficeReasons and returns the data updated in the database.
   * @param {OutOfOfficeReasonUpdateManyAndReturnArgs} args - Arguments to update many OutOfOfficeReasons.
   * @example
   * // Update many OutOfOfficeReasons
   * const outOfOfficeReason = await prisma.outOfOfficeReason.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more OutOfOfficeReasons and only return the `id`
   * const outOfOfficeReasonWithIdOnly = await prisma.outOfOfficeReason.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends OutOfOfficeReasonUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one OutOfOfficeReason.
   * @param {OutOfOfficeReasonUpsertArgs} args - Arguments to update or create a OutOfOfficeReason.
   * @example
   * // Update or create a OutOfOfficeReason
   * const outOfOfficeReason = await prisma.outOfOfficeReason.upsert({
   *   create: {
   *     // ... data to create a OutOfOfficeReason
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OutOfOfficeReason we want to update
   *   }
   * })
   */
  upsert<T extends OutOfOfficeReasonUpsertArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeReasonUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeReasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of OutOfOfficeReasons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonCountArgs} args - Arguments to filter OutOfOfficeReasons to count.
   * @example
   * // Count the number of OutOfOfficeReasons
   * const count = await prisma.outOfOfficeReason.count({
   *   where: {
   *     // ... the filter for the OutOfOfficeReasons we want to count
   *   }
   * })
   **/
  count<T extends OutOfOfficeReasonCountArgs>(
    args?: Prisma.Subset<T, OutOfOfficeReasonCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], OutOfOfficeReasonCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a OutOfOfficeReason.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends OutOfOfficeReasonAggregateArgs>(
    args: Prisma.Subset<T, OutOfOfficeReasonAggregateArgs>
  ): Prisma.PrismaPromise<GetOutOfOfficeReasonAggregateType<T>>;

  /**
   * Group by OutOfOfficeReason.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeReasonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends OutOfOfficeReasonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OutOfOfficeReasonGroupByArgs["orderBy"] }
      : { orderBy?: OutOfOfficeReasonGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, OutOfOfficeReasonGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetOutOfOfficeReasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the OutOfOfficeReason model
   */
  readonly fields: OutOfOfficeReasonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OutOfOfficeReason.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OutOfOfficeReasonClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.OutOfOfficeReason$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OutOfOfficeReason$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  entries<T extends Prisma.OutOfOfficeReason$entriesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OutOfOfficeReason$entriesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the OutOfOfficeReason model
 */
export interface OutOfOfficeReasonFieldRefs {
  readonly id: Prisma.FieldRef<"OutOfOfficeReason", "Int">;
  readonly emoji: Prisma.FieldRef<"OutOfOfficeReason", "String">;
  readonly reason: Prisma.FieldRef<"OutOfOfficeReason", "String">;
  readonly enabled: Prisma.FieldRef<"OutOfOfficeReason", "Boolean">;
  readonly userId: Prisma.FieldRef<"OutOfOfficeReason", "Int">;
}

// Custom InputTypes
/**
 * OutOfOfficeReason findUnique
 */
export type OutOfOfficeReasonFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeReason to fetch.
   */
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
};

/**
 * OutOfOfficeReason findUniqueOrThrow
 */
export type OutOfOfficeReasonFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeReason to fetch.
   */
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
};

/**
 * OutOfOfficeReason findFirst
 */
export type OutOfOfficeReasonFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeReason to fetch.
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeReasons to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OutOfOfficeReasons.
   */
  cursor?: Prisma.OutOfOfficeReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeReasons.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OutOfOfficeReasons.
   */
  distinct?: Prisma.OutOfOfficeReasonScalarFieldEnum | Prisma.OutOfOfficeReasonScalarFieldEnum[];
};

/**
 * OutOfOfficeReason findFirstOrThrow
 */
export type OutOfOfficeReasonFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeReason to fetch.
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeReasons to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OutOfOfficeReasons.
   */
  cursor?: Prisma.OutOfOfficeReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeReasons.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OutOfOfficeReasons.
   */
  distinct?: Prisma.OutOfOfficeReasonScalarFieldEnum | Prisma.OutOfOfficeReasonScalarFieldEnum[];
};

/**
 * OutOfOfficeReason findMany
 */
export type OutOfOfficeReasonFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeReasons to fetch.
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeReasons to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput
    | Prisma.OutOfOfficeReasonOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing OutOfOfficeReasons.
   */
  cursor?: Prisma.OutOfOfficeReasonWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeReasons from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeReasons.
   */
  skip?: number;
  distinct?: Prisma.OutOfOfficeReasonScalarFieldEnum | Prisma.OutOfOfficeReasonScalarFieldEnum[];
};

/**
 * OutOfOfficeReason create
 */
export type OutOfOfficeReasonCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * The data needed to create a OutOfOfficeReason.
   */
  data: Prisma.XOR<Prisma.OutOfOfficeReasonCreateInput, Prisma.OutOfOfficeReasonUncheckedCreateInput>;
};

/**
 * OutOfOfficeReason createMany
 */
export type OutOfOfficeReasonCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many OutOfOfficeReasons.
   */
  data: Prisma.OutOfOfficeReasonCreateManyInput | Prisma.OutOfOfficeReasonCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * OutOfOfficeReason createManyAndReturn
 */
export type OutOfOfficeReasonCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * The data used to create many OutOfOfficeReasons.
   */
  data: Prisma.OutOfOfficeReasonCreateManyInput | Prisma.OutOfOfficeReasonCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * OutOfOfficeReason update
 */
export type OutOfOfficeReasonUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * The data needed to update a OutOfOfficeReason.
   */
  data: Prisma.XOR<Prisma.OutOfOfficeReasonUpdateInput, Prisma.OutOfOfficeReasonUncheckedUpdateInput>;
  /**
   * Choose, which OutOfOfficeReason to update.
   */
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
};

/**
 * OutOfOfficeReason updateMany
 */
export type OutOfOfficeReasonUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update OutOfOfficeReasons.
   */
  data: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateManyMutationInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateManyInput
  >;
  /**
   * Filter which OutOfOfficeReasons to update
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * Limit how many OutOfOfficeReasons to update.
   */
  limit?: number;
};

/**
 * OutOfOfficeReason updateManyAndReturn
 */
export type OutOfOfficeReasonUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * The data used to update OutOfOfficeReasons.
   */
  data: Prisma.XOR<
    Prisma.OutOfOfficeReasonUpdateManyMutationInput,
    Prisma.OutOfOfficeReasonUncheckedUpdateManyInput
  >;
  /**
   * Filter which OutOfOfficeReasons to update
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * Limit how many OutOfOfficeReasons to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * OutOfOfficeReason upsert
 */
export type OutOfOfficeReasonUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * The filter to search for the OutOfOfficeReason to update in case it exists.
   */
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
  /**
   * In case the OutOfOfficeReason found by the `where` argument doesn't exist, create a new OutOfOfficeReason with this data.
   */
  create: Prisma.XOR<Prisma.OutOfOfficeReasonCreateInput, Prisma.OutOfOfficeReasonUncheckedCreateInput>;
  /**
   * In case the OutOfOfficeReason was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OutOfOfficeReasonUpdateInput, Prisma.OutOfOfficeReasonUncheckedUpdateInput>;
};

/**
 * OutOfOfficeReason delete
 */
export type OutOfOfficeReasonDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  /**
   * Filter which OutOfOfficeReason to delete.
   */
  where: Prisma.OutOfOfficeReasonWhereUniqueInput;
};

/**
 * OutOfOfficeReason deleteMany
 */
export type OutOfOfficeReasonDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which OutOfOfficeReasons to delete
   */
  where?: Prisma.OutOfOfficeReasonWhereInput;
  /**
   * Limit how many OutOfOfficeReasons to delete.
   */
  limit?: number;
};

/**
 * OutOfOfficeReason.user
 */
export type OutOfOfficeReason$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * OutOfOfficeReason.entries
 */
export type OutOfOfficeReason$entriesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  where?: Prisma.OutOfOfficeEntryWhereInput;
  orderBy?:
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput[];
  cursor?: Prisma.OutOfOfficeEntryWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.OutOfOfficeEntryScalarFieldEnum | Prisma.OutOfOfficeEntryScalarFieldEnum[];
};

/**
 * OutOfOfficeReason without action
 */
export type OutOfOfficeReasonDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
};
