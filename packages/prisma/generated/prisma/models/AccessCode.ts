/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `AccessCode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AccessCode
 *
 */
export type AccessCodeModel = runtime.Types.Result.DefaultSelection<Prisma.$AccessCodePayload>;

export type AggregateAccessCode = {
  _count: AccessCodeCountAggregateOutputType | null;
  _avg: AccessCodeAvgAggregateOutputType | null;
  _sum: AccessCodeSumAggregateOutputType | null;
  _min: AccessCodeMinAggregateOutputType | null;
  _max: AccessCodeMaxAggregateOutputType | null;
};

export type AccessCodeAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
};

export type AccessCodeSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
};

export type AccessCodeMinAggregateOutputType = {
  id: number | null;
  code: string | null;
  clientId: string | null;
  expiresAt: Date | null;
  userId: number | null;
  teamId: number | null;
};

export type AccessCodeMaxAggregateOutputType = {
  id: number | null;
  code: string | null;
  clientId: string | null;
  expiresAt: Date | null;
  userId: number | null;
  teamId: number | null;
};

export type AccessCodeCountAggregateOutputType = {
  id: number;
  code: number;
  clientId: number;
  expiresAt: number;
  scopes: number;
  userId: number;
  teamId: number;
  _all: number;
};

export type AccessCodeAvgAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
};

export type AccessCodeSumAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
};

export type AccessCodeMinAggregateInputType = {
  id?: true;
  code?: true;
  clientId?: true;
  expiresAt?: true;
  userId?: true;
  teamId?: true;
};

export type AccessCodeMaxAggregateInputType = {
  id?: true;
  code?: true;
  clientId?: true;
  expiresAt?: true;
  userId?: true;
  teamId?: true;
};

export type AccessCodeCountAggregateInputType = {
  id?: true;
  code?: true;
  clientId?: true;
  expiresAt?: true;
  scopes?: true;
  userId?: true;
  teamId?: true;
  _all?: true;
};

export type AccessCodeAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AccessCode to aggregate.
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessCodes to fetch.
   */
  orderBy?: Prisma.AccessCodeOrderByWithRelationInput | Prisma.AccessCodeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccessCodeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessCodes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessCodes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AccessCodes
   **/
  _count?: true | AccessCodeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AccessCodeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AccessCodeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccessCodeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccessCodeMaxAggregateInputType;
};

export type GetAccessCodeAggregateType<T extends AccessCodeAggregateArgs> = {
  [P in keyof T & keyof AggregateAccessCode]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccessCode[P]>
    : Prisma.GetScalarType<T[P], AggregateAccessCode[P]>;
};

export type AccessCodeGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AccessCodeWhereInput;
  orderBy?: Prisma.AccessCodeOrderByWithAggregationInput | Prisma.AccessCodeOrderByWithAggregationInput[];
  by: Prisma.AccessCodeScalarFieldEnum[] | Prisma.AccessCodeScalarFieldEnum;
  having?: Prisma.AccessCodeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccessCodeCountAggregateInputType | true;
  _avg?: AccessCodeAvgAggregateInputType;
  _sum?: AccessCodeSumAggregateInputType;
  _min?: AccessCodeMinAggregateInputType;
  _max?: AccessCodeMaxAggregateInputType;
};

export type AccessCodeGroupByOutputType = {
  id: number;
  code: string;
  clientId: string | null;
  expiresAt: Date;
  scopes: $Enums.AccessScope[];
  userId: number | null;
  teamId: number | null;
  _count: AccessCodeCountAggregateOutputType | null;
  _avg: AccessCodeAvgAggregateOutputType | null;
  _sum: AccessCodeSumAggregateOutputType | null;
  _min: AccessCodeMinAggregateOutputType | null;
  _max: AccessCodeMaxAggregateOutputType | null;
};

type GetAccessCodeGroupByPayload<T extends AccessCodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccessCodeGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AccessCodeGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AccessCodeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AccessCodeGroupByOutputType[P]>;
    }
  >
>;

export type AccessCodeWhereInput = {
  AND?: Prisma.AccessCodeWhereInput | Prisma.AccessCodeWhereInput[];
  OR?: Prisma.AccessCodeWhereInput[];
  NOT?: Prisma.AccessCodeWhereInput | Prisma.AccessCodeWhereInput[];
  id?: Prisma.IntFilter<"AccessCode"> | number;
  code?: Prisma.StringFilter<"AccessCode"> | string;
  clientId?: Prisma.StringNullableFilter<"AccessCode"> | string | null;
  expiresAt?: Prisma.DateTimeFilter<"AccessCode"> | Date | string;
  scopes?: Prisma.EnumAccessScopeNullableListFilter<"AccessCode">;
  userId?: Prisma.IntNullableFilter<"AccessCode"> | number | null;
  teamId?: Prisma.IntNullableFilter<"AccessCode"> | number | null;
  client?: Prisma.XOR<Prisma.OAuthClientNullableScalarRelationFilter, Prisma.OAuthClientWhereInput> | null;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
};

export type AccessCodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  clientId?: Prisma.SortOrderInput | Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  scopes?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  client?: Prisma.OAuthClientOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
};

export type AccessCodeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.AccessCodeWhereInput | Prisma.AccessCodeWhereInput[];
    OR?: Prisma.AccessCodeWhereInput[];
    NOT?: Prisma.AccessCodeWhereInput | Prisma.AccessCodeWhereInput[];
    code?: Prisma.StringFilter<"AccessCode"> | string;
    clientId?: Prisma.StringNullableFilter<"AccessCode"> | string | null;
    expiresAt?: Prisma.DateTimeFilter<"AccessCode"> | Date | string;
    scopes?: Prisma.EnumAccessScopeNullableListFilter<"AccessCode">;
    userId?: Prisma.IntNullableFilter<"AccessCode"> | number | null;
    teamId?: Prisma.IntNullableFilter<"AccessCode"> | number | null;
    client?: Prisma.XOR<Prisma.OAuthClientNullableScalarRelationFilter, Prisma.OAuthClientWhereInput> | null;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  },
  "id"
>;

export type AccessCodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  clientId?: Prisma.SortOrderInput | Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  scopes?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AccessCodeCountOrderByAggregateInput;
  _avg?: Prisma.AccessCodeAvgOrderByAggregateInput;
  _max?: Prisma.AccessCodeMaxOrderByAggregateInput;
  _min?: Prisma.AccessCodeMinOrderByAggregateInput;
  _sum?: Prisma.AccessCodeSumOrderByAggregateInput;
};

export type AccessCodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccessCodeScalarWhereWithAggregatesInput | Prisma.AccessCodeScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccessCodeScalarWhereWithAggregatesInput[];
  NOT?: Prisma.AccessCodeScalarWhereWithAggregatesInput | Prisma.AccessCodeScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"AccessCode"> | number;
  code?: Prisma.StringWithAggregatesFilter<"AccessCode"> | string;
  clientId?: Prisma.StringNullableWithAggregatesFilter<"AccessCode"> | string | null;
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"AccessCode"> | Date | string;
  scopes?: Prisma.EnumAccessScopeNullableListFilter<"AccessCode">;
  userId?: Prisma.IntNullableWithAggregatesFilter<"AccessCode"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"AccessCode"> | number | null;
};

export type AccessCodeCreateInput = {
  code: string;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  client?: Prisma.OAuthClientCreateNestedOneWithoutAccessCodesInput;
  user?: Prisma.UserCreateNestedOneWithoutAccessCodesInput;
  team?: Prisma.TeamCreateNestedOneWithoutAccessCodesInput;
};

export type AccessCodeUncheckedCreateInput = {
  id?: number;
  code: string;
  clientId?: string | null;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  userId?: number | null;
  teamId?: number | null;
};

export type AccessCodeUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  client?: Prisma.OAuthClientUpdateOneWithoutAccessCodesNestedInput;
  user?: Prisma.UserUpdateOneWithoutAccessCodesNestedInput;
  team?: Prisma.TeamUpdateOneWithoutAccessCodesNestedInput;
};

export type AccessCodeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeCreateManyInput = {
  id?: number;
  code: string;
  clientId?: string | null;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  userId?: number | null;
  teamId?: number | null;
};

export type AccessCodeUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
};

export type AccessCodeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeListRelationFilter = {
  every?: Prisma.AccessCodeWhereInput;
  some?: Prisma.AccessCodeWhereInput;
  none?: Prisma.AccessCodeWhereInput;
};

export type AccessCodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type EnumAccessScopeNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.AccessScope[] | Prisma.ListEnumAccessScopeFieldRefInput<$PrismaModel> | null;
  has?: $Enums.AccessScope | Prisma.EnumAccessScopeFieldRefInput<$PrismaModel> | null;
  hasEvery?: $Enums.AccessScope[] | Prisma.ListEnumAccessScopeFieldRefInput<$PrismaModel>;
  hasSome?: $Enums.AccessScope[] | Prisma.ListEnumAccessScopeFieldRefInput<$PrismaModel>;
  isEmpty?: boolean;
};

export type AccessCodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  clientId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  scopes?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type AccessCodeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type AccessCodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  clientId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type AccessCodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  clientId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type AccessCodeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type AccessCodeCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutUserInput, Prisma.AccessCodeUncheckedCreateWithoutUserInput>
    | Prisma.AccessCodeCreateWithoutUserInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AccessCodeCreateManyUserInputEnvelope;
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
};

export type AccessCodeUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutUserInput, Prisma.AccessCodeUncheckedCreateWithoutUserInput>
    | Prisma.AccessCodeCreateWithoutUserInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AccessCodeCreateManyUserInputEnvelope;
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
};

export type AccessCodeUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutUserInput, Prisma.AccessCodeUncheckedCreateWithoutUserInput>
    | Prisma.AccessCodeCreateWithoutUserInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AccessCodeCreateManyUserInputEnvelope;
  set?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  disconnect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  delete?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  update?:
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AccessCodeUpdateManyWithWhereWithoutUserInput
    | Prisma.AccessCodeUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
};

export type AccessCodeUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutUserInput, Prisma.AccessCodeUncheckedCreateWithoutUserInput>
    | Prisma.AccessCodeCreateWithoutUserInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput
    | Prisma.AccessCodeCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AccessCodeCreateManyUserInputEnvelope;
  set?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  disconnect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  delete?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  update?:
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AccessCodeUpdateManyWithWhereWithoutUserInput
    | Prisma.AccessCodeUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
};

export type AccessCodeCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutTeamInput, Prisma.AccessCodeUncheckedCreateWithoutTeamInput>
    | Prisma.AccessCodeCreateWithoutTeamInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.AccessCodeCreateManyTeamInputEnvelope;
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
};

export type AccessCodeUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutTeamInput, Prisma.AccessCodeUncheckedCreateWithoutTeamInput>
    | Prisma.AccessCodeCreateWithoutTeamInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.AccessCodeCreateManyTeamInputEnvelope;
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
};

export type AccessCodeUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutTeamInput, Prisma.AccessCodeUncheckedCreateWithoutTeamInput>
    | Prisma.AccessCodeCreateWithoutTeamInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.AccessCodeCreateManyTeamInputEnvelope;
  set?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  disconnect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  delete?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  update?:
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.AccessCodeUpdateManyWithWhereWithoutTeamInput
    | Prisma.AccessCodeUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
};

export type AccessCodeUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AccessCodeCreateWithoutTeamInput, Prisma.AccessCodeUncheckedCreateWithoutTeamInput>
    | Prisma.AccessCodeCreateWithoutTeamInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput
    | Prisma.AccessCodeCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.AccessCodeCreateManyTeamInputEnvelope;
  set?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  disconnect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  delete?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  update?:
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.AccessCodeUpdateManyWithWhereWithoutTeamInput
    | Prisma.AccessCodeUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
};

export type AccessCodeCreateNestedManyWithoutClientInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessCodeCreateWithoutClientInput,
        Prisma.AccessCodeUncheckedCreateWithoutClientInput
      >
    | Prisma.AccessCodeCreateWithoutClientInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutClientInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput[];
  createMany?: Prisma.AccessCodeCreateManyClientInputEnvelope;
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
};

export type AccessCodeUncheckedCreateNestedManyWithoutClientInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessCodeCreateWithoutClientInput,
        Prisma.AccessCodeUncheckedCreateWithoutClientInput
      >
    | Prisma.AccessCodeCreateWithoutClientInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutClientInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput[];
  createMany?: Prisma.AccessCodeCreateManyClientInputEnvelope;
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
};

export type AccessCodeUpdateManyWithoutClientNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessCodeCreateWithoutClientInput,
        Prisma.AccessCodeUncheckedCreateWithoutClientInput
      >
    | Prisma.AccessCodeCreateWithoutClientInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutClientInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput[];
  upsert?:
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutClientInput
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutClientInput[];
  createMany?: Prisma.AccessCodeCreateManyClientInputEnvelope;
  set?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  disconnect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  delete?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  update?:
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutClientInput
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutClientInput[];
  updateMany?:
    | Prisma.AccessCodeUpdateManyWithWhereWithoutClientInput
    | Prisma.AccessCodeUpdateManyWithWhereWithoutClientInput[];
  deleteMany?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
};

export type AccessCodeUncheckedUpdateManyWithoutClientNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessCodeCreateWithoutClientInput,
        Prisma.AccessCodeUncheckedCreateWithoutClientInput
      >
    | Prisma.AccessCodeCreateWithoutClientInput[]
    | Prisma.AccessCodeUncheckedCreateWithoutClientInput[];
  connectOrCreate?:
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput
    | Prisma.AccessCodeCreateOrConnectWithoutClientInput[];
  upsert?:
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutClientInput
    | Prisma.AccessCodeUpsertWithWhereUniqueWithoutClientInput[];
  createMany?: Prisma.AccessCodeCreateManyClientInputEnvelope;
  set?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  disconnect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  delete?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  connect?: Prisma.AccessCodeWhereUniqueInput | Prisma.AccessCodeWhereUniqueInput[];
  update?:
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutClientInput
    | Prisma.AccessCodeUpdateWithWhereUniqueWithoutClientInput[];
  updateMany?:
    | Prisma.AccessCodeUpdateManyWithWhereWithoutClientInput
    | Prisma.AccessCodeUpdateManyWithWhereWithoutClientInput[];
  deleteMany?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
};

export type AccessCodeCreatescopesInput = {
  set: $Enums.AccessScope[];
};

export type AccessCodeUpdatescopesInput = {
  set?: $Enums.AccessScope[];
  push?: $Enums.AccessScope | $Enums.AccessScope[];
};

export type AccessCodeCreateWithoutUserInput = {
  code: string;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  client?: Prisma.OAuthClientCreateNestedOneWithoutAccessCodesInput;
  team?: Prisma.TeamCreateNestedOneWithoutAccessCodesInput;
};

export type AccessCodeUncheckedCreateWithoutUserInput = {
  id?: number;
  code: string;
  clientId?: string | null;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  teamId?: number | null;
};

export type AccessCodeCreateOrConnectWithoutUserInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessCodeCreateWithoutUserInput,
    Prisma.AccessCodeUncheckedCreateWithoutUserInput
  >;
};

export type AccessCodeCreateManyUserInputEnvelope = {
  data: Prisma.AccessCodeCreateManyUserInput | Prisma.AccessCodeCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AccessCodeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccessCodeUpdateWithoutUserInput,
    Prisma.AccessCodeUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AccessCodeCreateWithoutUserInput,
    Prisma.AccessCodeUncheckedCreateWithoutUserInput
  >;
};

export type AccessCodeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  data: Prisma.XOR<Prisma.AccessCodeUpdateWithoutUserInput, Prisma.AccessCodeUncheckedUpdateWithoutUserInput>;
};

export type AccessCodeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AccessCodeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccessCodeUpdateManyMutationInput,
    Prisma.AccessCodeUncheckedUpdateManyWithoutUserInput
  >;
};

export type AccessCodeScalarWhereInput = {
  AND?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
  OR?: Prisma.AccessCodeScalarWhereInput[];
  NOT?: Prisma.AccessCodeScalarWhereInput | Prisma.AccessCodeScalarWhereInput[];
  id?: Prisma.IntFilter<"AccessCode"> | number;
  code?: Prisma.StringFilter<"AccessCode"> | string;
  clientId?: Prisma.StringNullableFilter<"AccessCode"> | string | null;
  expiresAt?: Prisma.DateTimeFilter<"AccessCode"> | Date | string;
  scopes?: Prisma.EnumAccessScopeNullableListFilter<"AccessCode">;
  userId?: Prisma.IntNullableFilter<"AccessCode"> | number | null;
  teamId?: Prisma.IntNullableFilter<"AccessCode"> | number | null;
};

export type AccessCodeCreateWithoutTeamInput = {
  code: string;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  client?: Prisma.OAuthClientCreateNestedOneWithoutAccessCodesInput;
  user?: Prisma.UserCreateNestedOneWithoutAccessCodesInput;
};

export type AccessCodeUncheckedCreateWithoutTeamInput = {
  id?: number;
  code: string;
  clientId?: string | null;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  userId?: number | null;
};

export type AccessCodeCreateOrConnectWithoutTeamInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessCodeCreateWithoutTeamInput,
    Prisma.AccessCodeUncheckedCreateWithoutTeamInput
  >;
};

export type AccessCodeCreateManyTeamInputEnvelope = {
  data: Prisma.AccessCodeCreateManyTeamInput | Prisma.AccessCodeCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type AccessCodeUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccessCodeUpdateWithoutTeamInput,
    Prisma.AccessCodeUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.AccessCodeCreateWithoutTeamInput,
    Prisma.AccessCodeUncheckedCreateWithoutTeamInput
  >;
};

export type AccessCodeUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  data: Prisma.XOR<Prisma.AccessCodeUpdateWithoutTeamInput, Prisma.AccessCodeUncheckedUpdateWithoutTeamInput>;
};

export type AccessCodeUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.AccessCodeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccessCodeUpdateManyMutationInput,
    Prisma.AccessCodeUncheckedUpdateManyWithoutTeamInput
  >;
};

export type AccessCodeCreateWithoutClientInput = {
  code: string;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  user?: Prisma.UserCreateNestedOneWithoutAccessCodesInput;
  team?: Prisma.TeamCreateNestedOneWithoutAccessCodesInput;
};

export type AccessCodeUncheckedCreateWithoutClientInput = {
  id?: number;
  code: string;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  userId?: number | null;
  teamId?: number | null;
};

export type AccessCodeCreateOrConnectWithoutClientInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessCodeCreateWithoutClientInput,
    Prisma.AccessCodeUncheckedCreateWithoutClientInput
  >;
};

export type AccessCodeCreateManyClientInputEnvelope = {
  data: Prisma.AccessCodeCreateManyClientInput | Prisma.AccessCodeCreateManyClientInput[];
  skipDuplicates?: boolean;
};

export type AccessCodeUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccessCodeUpdateWithoutClientInput,
    Prisma.AccessCodeUncheckedUpdateWithoutClientInput
  >;
  create: Prisma.XOR<
    Prisma.AccessCodeCreateWithoutClientInput,
    Prisma.AccessCodeUncheckedCreateWithoutClientInput
  >;
};

export type AccessCodeUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.AccessCodeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccessCodeUpdateWithoutClientInput,
    Prisma.AccessCodeUncheckedUpdateWithoutClientInput
  >;
};

export type AccessCodeUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.AccessCodeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccessCodeUpdateManyMutationInput,
    Prisma.AccessCodeUncheckedUpdateManyWithoutClientInput
  >;
};

export type AccessCodeCreateManyUserInput = {
  id?: number;
  code: string;
  clientId?: string | null;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  teamId?: number | null;
};

export type AccessCodeUpdateWithoutUserInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  client?: Prisma.OAuthClientUpdateOneWithoutAccessCodesNestedInput;
  team?: Prisma.TeamUpdateOneWithoutAccessCodesNestedInput;
};

export type AccessCodeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeCreateManyTeamInput = {
  id?: number;
  code: string;
  clientId?: string | null;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  userId?: number | null;
};

export type AccessCodeUpdateWithoutTeamInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  client?: Prisma.OAuthClientUpdateOneWithoutAccessCodesNestedInput;
  user?: Prisma.UserUpdateOneWithoutAccessCodesNestedInput;
};

export type AccessCodeUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  clientId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeCreateManyClientInput = {
  id?: number;
  code: string;
  expiresAt: Date | string;
  scopes?: Prisma.AccessCodeCreatescopesInput | $Enums.AccessScope[];
  userId?: number | null;
  teamId?: number | null;
};

export type AccessCodeUpdateWithoutClientInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  user?: Prisma.UserUpdateOneWithoutAccessCodesNestedInput;
  team?: Prisma.TeamUpdateOneWithoutAccessCodesNestedInput;
};

export type AccessCodeUncheckedUpdateWithoutClientInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  scopes?: Prisma.AccessCodeUpdatescopesInput | $Enums.AccessScope[];
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AccessCodeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    code?: boolean;
    clientId?: boolean;
    expiresAt?: boolean;
    scopes?: boolean;
    userId?: boolean;
    teamId?: boolean;
    client?: boolean | Prisma.AccessCode$clientArgs<ExtArgs>;
    user?: boolean | Prisma.AccessCode$userArgs<ExtArgs>;
    team?: boolean | Prisma.AccessCode$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["accessCode"]
>;

export type AccessCodeSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    code?: boolean;
    clientId?: boolean;
    expiresAt?: boolean;
    scopes?: boolean;
    userId?: boolean;
    teamId?: boolean;
    client?: boolean | Prisma.AccessCode$clientArgs<ExtArgs>;
    user?: boolean | Prisma.AccessCode$userArgs<ExtArgs>;
    team?: boolean | Prisma.AccessCode$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["accessCode"]
>;

export type AccessCodeSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    code?: boolean;
    clientId?: boolean;
    expiresAt?: boolean;
    scopes?: boolean;
    userId?: boolean;
    teamId?: boolean;
    client?: boolean | Prisma.AccessCode$clientArgs<ExtArgs>;
    user?: boolean | Prisma.AccessCode$userArgs<ExtArgs>;
    team?: boolean | Prisma.AccessCode$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["accessCode"]
>;

export type AccessCodeSelectScalar = {
  id?: boolean;
  code?: boolean;
  clientId?: boolean;
  expiresAt?: boolean;
  scopes?: boolean;
  userId?: boolean;
  teamId?: boolean;
};

export type AccessCodeOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "code" | "clientId" | "expiresAt" | "scopes" | "userId" | "teamId",
  ExtArgs["result"]["accessCode"]
>;
export type AccessCodeInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  client?: boolean | Prisma.AccessCode$clientArgs<ExtArgs>;
  user?: boolean | Prisma.AccessCode$userArgs<ExtArgs>;
  team?: boolean | Prisma.AccessCode$teamArgs<ExtArgs>;
};
export type AccessCodeIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  client?: boolean | Prisma.AccessCode$clientArgs<ExtArgs>;
  user?: boolean | Prisma.AccessCode$userArgs<ExtArgs>;
  team?: boolean | Prisma.AccessCode$teamArgs<ExtArgs>;
};
export type AccessCodeIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  client?: boolean | Prisma.AccessCode$clientArgs<ExtArgs>;
  user?: boolean | Prisma.AccessCode$userArgs<ExtArgs>;
  team?: boolean | Prisma.AccessCode$teamArgs<ExtArgs>;
};

export type $AccessCodePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "AccessCode";
  objects: {
    client: Prisma.$OAuthClientPayload<ExtArgs> | null;
    user: Prisma.$UserPayload<ExtArgs> | null;
    team: Prisma.$TeamPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      code: string;
      clientId: string | null;
      expiresAt: Date;
      scopes: $Enums.AccessScope[];
      userId: number | null;
      teamId: number | null;
    },
    ExtArgs["result"]["accessCode"]
  >;
  composites: {};
};

export type AccessCodeGetPayload<S extends boolean | null | undefined | AccessCodeDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AccessCodePayload, S>;

export type AccessCodeCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AccessCodeFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AccessCodeCountAggregateInputType | true;
};

export interface AccessCodeDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["AccessCode"]; meta: { name: "AccessCode" } };
  /**
   * Find zero or one AccessCode that matches the filter.
   * @param {AccessCodeFindUniqueArgs} args - Arguments to find a AccessCode
   * @example
   * // Get one AccessCode
   * const accessCode = await prisma.accessCode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccessCodeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccessCodeFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessCodePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AccessCode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccessCodeFindUniqueOrThrowArgs} args - Arguments to find a AccessCode
   * @example
   * // Get one AccessCode
   * const accessCode = await prisma.accessCode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccessCodeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AccessCodeFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessCodePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccessCode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeFindFirstArgs} args - Arguments to find a AccessCode
   * @example
   * // Get one AccessCode
   * const accessCode = await prisma.accessCode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccessCodeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccessCodeFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessCodePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccessCode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeFindFirstOrThrowArgs} args - Arguments to find a AccessCode
   * @example
   * // Get one AccessCode
   * const accessCode = await prisma.accessCode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccessCodeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AccessCodeFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessCodePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AccessCodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccessCodes
   * const accessCodes = await prisma.accessCode.findMany()
   *
   * // Get first 10 AccessCodes
   * const accessCodes = await prisma.accessCode.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accessCodeWithIdOnly = await prisma.accessCode.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccessCodeFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccessCodeFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AccessCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a AccessCode.
   * @param {AccessCodeCreateArgs} args - Arguments to create a AccessCode.
   * @example
   * // Create one AccessCode
   * const AccessCode = await prisma.accessCode.create({
   *   data: {
   *     // ... data to create a AccessCode
   *   }
   * })
   *
   */
  create<T extends AccessCodeCreateArgs>(
    args: Prisma.SelectSubset<T, AccessCodeCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<Prisma.$AccessCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AccessCodes.
   * @param {AccessCodeCreateManyArgs} args - Arguments to create many AccessCodes.
   * @example
   * // Create many AccessCodes
   * const accessCode = await prisma.accessCode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccessCodeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccessCodeCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AccessCodes and returns the data saved in the database.
   * @param {AccessCodeCreateManyAndReturnArgs} args - Arguments to create many AccessCodes.
   * @example
   * // Create many AccessCodes
   * const accessCode = await prisma.accessCode.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AccessCodes and only return the `id`
   * const accessCodeWithIdOnly = await prisma.accessCode.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccessCodeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AccessCodeCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessCodePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AccessCode.
   * @param {AccessCodeDeleteArgs} args - Arguments to delete one AccessCode.
   * @example
   * // Delete one AccessCode
   * const AccessCode = await prisma.accessCode.delete({
   *   where: {
   *     // ... filter to delete one AccessCode
   *   }
   * })
   *
   */
  delete<T extends AccessCodeDeleteArgs>(
    args: Prisma.SelectSubset<T, AccessCodeDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<Prisma.$AccessCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AccessCode.
   * @param {AccessCodeUpdateArgs} args - Arguments to update one AccessCode.
   * @example
   * // Update one AccessCode
   * const accessCode = await prisma.accessCode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccessCodeUpdateArgs>(
    args: Prisma.SelectSubset<T, AccessCodeUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<Prisma.$AccessCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AccessCodes.
   * @param {AccessCodeDeleteManyArgs} args - Arguments to filter AccessCodes to delete.
   * @example
   * // Delete a few AccessCodes
   * const { count } = await prisma.accessCode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccessCodeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccessCodeDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccessCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccessCodes
   * const accessCode = await prisma.accessCode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccessCodeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccessCodeUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccessCodes and returns the data updated in the database.
   * @param {AccessCodeUpdateManyAndReturnArgs} args - Arguments to update many AccessCodes.
   * @example
   * // Update many AccessCodes
   * const accessCode = await prisma.accessCode.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AccessCodes and only return the `id`
   * const accessCodeWithIdOnly = await prisma.accessCode.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccessCodeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AccessCodeUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessCodePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AccessCode.
   * @param {AccessCodeUpsertArgs} args - Arguments to update or create a AccessCode.
   * @example
   * // Update or create a AccessCode
   * const accessCode = await prisma.accessCode.upsert({
   *   create: {
   *     // ... data to create a AccessCode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccessCode we want to update
   *   }
   * })
   */
  upsert<T extends AccessCodeUpsertArgs>(
    args: Prisma.SelectSubset<T, AccessCodeUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AccessCodeClient<
    runtime.Types.Result.GetResult<Prisma.$AccessCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AccessCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeCountArgs} args - Arguments to filter AccessCodes to count.
   * @example
   * // Count the number of AccessCodes
   * const count = await prisma.accessCode.count({
   *   where: {
   *     // ... the filter for the AccessCodes we want to count
   *   }
   * })
   **/
  count<T extends AccessCodeCountArgs>(
    args?: Prisma.Subset<T, AccessCodeCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AccessCodeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AccessCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccessCodeAggregateArgs>(
    args: Prisma.Subset<T, AccessCodeAggregateArgs>
  ): Prisma.PrismaPromise<GetAccessCodeAggregateType<T>>;

  /**
   * Group by AccessCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessCodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccessCodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccessCodeGroupByArgs["orderBy"] }
      : { orderBy?: AccessCodeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AccessCodeGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAccessCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AccessCode model
   */
  readonly fields: AccessCodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccessCode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccessCodeClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  client<T extends Prisma.AccessCode$clientArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccessCode$clientArgs<ExtArgs>>
  ): Prisma.Prisma__OAuthClientClient<
    runtime.Types.Result.GetResult<
      Prisma.$OAuthClientPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.AccessCode$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccessCode$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.AccessCode$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccessCode$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AccessCode model
 */
export interface AccessCodeFieldRefs {
  readonly id: Prisma.FieldRef<"AccessCode", "Int">;
  readonly code: Prisma.FieldRef<"AccessCode", "String">;
  readonly clientId: Prisma.FieldRef<"AccessCode", "String">;
  readonly expiresAt: Prisma.FieldRef<"AccessCode", "DateTime">;
  readonly scopes: Prisma.FieldRef<"AccessCode", "AccessScope[]">;
  readonly userId: Prisma.FieldRef<"AccessCode", "Int">;
  readonly teamId: Prisma.FieldRef<"AccessCode", "Int">;
}

// Custom InputTypes
/**
 * AccessCode findUnique
 */
export type AccessCodeFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * Filter, which AccessCode to fetch.
   */
  where: Prisma.AccessCodeWhereUniqueInput;
};

/**
 * AccessCode findUniqueOrThrow
 */
export type AccessCodeFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * Filter, which AccessCode to fetch.
   */
  where: Prisma.AccessCodeWhereUniqueInput;
};

/**
 * AccessCode findFirst
 */
export type AccessCodeFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * Filter, which AccessCode to fetch.
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessCodes to fetch.
   */
  orderBy?: Prisma.AccessCodeOrderByWithRelationInput | Prisma.AccessCodeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccessCodes.
   */
  cursor?: Prisma.AccessCodeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessCodes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessCodes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccessCodes.
   */
  distinct?: Prisma.AccessCodeScalarFieldEnum | Prisma.AccessCodeScalarFieldEnum[];
};

/**
 * AccessCode findFirstOrThrow
 */
export type AccessCodeFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * Filter, which AccessCode to fetch.
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessCodes to fetch.
   */
  orderBy?: Prisma.AccessCodeOrderByWithRelationInput | Prisma.AccessCodeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccessCodes.
   */
  cursor?: Prisma.AccessCodeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessCodes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessCodes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccessCodes.
   */
  distinct?: Prisma.AccessCodeScalarFieldEnum | Prisma.AccessCodeScalarFieldEnum[];
};

/**
 * AccessCode findMany
 */
export type AccessCodeFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * Filter, which AccessCodes to fetch.
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessCodes to fetch.
   */
  orderBy?: Prisma.AccessCodeOrderByWithRelationInput | Prisma.AccessCodeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AccessCodes.
   */
  cursor?: Prisma.AccessCodeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessCodes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessCodes.
   */
  skip?: number;
  distinct?: Prisma.AccessCodeScalarFieldEnum | Prisma.AccessCodeScalarFieldEnum[];
};

/**
 * AccessCode create
 */
export type AccessCodeCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * The data needed to create a AccessCode.
   */
  data: Prisma.XOR<Prisma.AccessCodeCreateInput, Prisma.AccessCodeUncheckedCreateInput>;
};

/**
 * AccessCode createMany
 */
export type AccessCodeCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many AccessCodes.
   */
  data: Prisma.AccessCodeCreateManyInput | Prisma.AccessCodeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AccessCode createManyAndReturn
 */
export type AccessCodeCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * The data used to create many AccessCodes.
   */
  data: Prisma.AccessCodeCreateManyInput | Prisma.AccessCodeCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AccessCode update
 */
export type AccessCodeUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * The data needed to update a AccessCode.
   */
  data: Prisma.XOR<Prisma.AccessCodeUpdateInput, Prisma.AccessCodeUncheckedUpdateInput>;
  /**
   * Choose, which AccessCode to update.
   */
  where: Prisma.AccessCodeWhereUniqueInput;
};

/**
 * AccessCode updateMany
 */
export type AccessCodeUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update AccessCodes.
   */
  data: Prisma.XOR<Prisma.AccessCodeUpdateManyMutationInput, Prisma.AccessCodeUncheckedUpdateManyInput>;
  /**
   * Filter which AccessCodes to update
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * Limit how many AccessCodes to update.
   */
  limit?: number;
};

/**
 * AccessCode updateManyAndReturn
 */
export type AccessCodeUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * The data used to update AccessCodes.
   */
  data: Prisma.XOR<Prisma.AccessCodeUpdateManyMutationInput, Prisma.AccessCodeUncheckedUpdateManyInput>;
  /**
   * Filter which AccessCodes to update
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * Limit how many AccessCodes to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AccessCode upsert
 */
export type AccessCodeUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * The filter to search for the AccessCode to update in case it exists.
   */
  where: Prisma.AccessCodeWhereUniqueInput;
  /**
   * In case the AccessCode found by the `where` argument doesn't exist, create a new AccessCode with this data.
   */
  create: Prisma.XOR<Prisma.AccessCodeCreateInput, Prisma.AccessCodeUncheckedCreateInput>;
  /**
   * In case the AccessCode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccessCodeUpdateInput, Prisma.AccessCodeUncheckedUpdateInput>;
};

/**
 * AccessCode delete
 */
export type AccessCodeDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
  /**
   * Filter which AccessCode to delete.
   */
  where: Prisma.AccessCodeWhereUniqueInput;
};

/**
 * AccessCode deleteMany
 */
export type AccessCodeDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AccessCodes to delete
   */
  where?: Prisma.AccessCodeWhereInput;
  /**
   * Limit how many AccessCodes to delete.
   */
  limit?: number;
};

/**
 * AccessCode.client
 */
export type AccessCode$clientArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OAuthClient
   */
  select?: Prisma.OAuthClientSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OAuthClient
   */
  omit?: Prisma.OAuthClientOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OAuthClientInclude<ExtArgs> | null;
  where?: Prisma.OAuthClientWhereInput;
};

/**
 * AccessCode.user
 */
export type AccessCode$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * AccessCode.team
 */
export type AccessCode$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * AccessCode without action
 */
export type AccessCodeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccessCode
   */
  select?: Prisma.AccessCodeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessCode
   */
  omit?: Prisma.AccessCodeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessCodeInclude<ExtArgs> | null;
};
