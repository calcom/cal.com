/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Account` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Account
 *
 */
export type AccountModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountPayload>;

export type AggregateAccount = {
  _count: AccountCountAggregateOutputType | null;
  _avg: AccountAvgAggregateOutputType | null;
  _sum: AccountSumAggregateOutputType | null;
  _min: AccountMinAggregateOutputType | null;
  _max: AccountMaxAggregateOutputType | null;
};

export type AccountAvgAggregateOutputType = {
  userId: number | null;
  expires_at: number | null;
};

export type AccountSumAggregateOutputType = {
  userId: number | null;
  expires_at: number | null;
};

export type AccountMinAggregateOutputType = {
  id: string | null;
  userId: number | null;
  type: string | null;
  provider: string | null;
  providerAccountId: string | null;
  providerEmail: string | null;
  refresh_token: string | null;
  access_token: string | null;
  expires_at: number | null;
  token_type: string | null;
  scope: string | null;
  id_token: string | null;
  session_state: string | null;
};

export type AccountMaxAggregateOutputType = {
  id: string | null;
  userId: number | null;
  type: string | null;
  provider: string | null;
  providerAccountId: string | null;
  providerEmail: string | null;
  refresh_token: string | null;
  access_token: string | null;
  expires_at: number | null;
  token_type: string | null;
  scope: string | null;
  id_token: string | null;
  session_state: string | null;
};

export type AccountCountAggregateOutputType = {
  id: number;
  userId: number;
  type: number;
  provider: number;
  providerAccountId: number;
  providerEmail: number;
  refresh_token: number;
  access_token: number;
  expires_at: number;
  token_type: number;
  scope: number;
  id_token: number;
  session_state: number;
  _all: number;
};

export type AccountAvgAggregateInputType = {
  userId?: true;
  expires_at?: true;
};

export type AccountSumAggregateInputType = {
  userId?: true;
  expires_at?: true;
};

export type AccountMinAggregateInputType = {
  id?: true;
  userId?: true;
  type?: true;
  provider?: true;
  providerAccountId?: true;
  providerEmail?: true;
  refresh_token?: true;
  access_token?: true;
  expires_at?: true;
  token_type?: true;
  scope?: true;
  id_token?: true;
  session_state?: true;
};

export type AccountMaxAggregateInputType = {
  id?: true;
  userId?: true;
  type?: true;
  provider?: true;
  providerAccountId?: true;
  providerEmail?: true;
  refresh_token?: true;
  access_token?: true;
  expires_at?: true;
  token_type?: true;
  scope?: true;
  id_token?: true;
  session_state?: true;
};

export type AccountCountAggregateInputType = {
  id?: true;
  userId?: true;
  type?: true;
  provider?: true;
  providerAccountId?: true;
  providerEmail?: true;
  refresh_token?: true;
  access_token?: true;
  expires_at?: true;
  token_type?: true;
  scope?: true;
  id_token?: true;
  session_state?: true;
  _all?: true;
};

export type AccountAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Account to aggregate.
   */
  where?: Prisma.AccountWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccountWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Accounts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Accounts
   **/
  _count?: true | AccountCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AccountAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AccountSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccountMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccountMaxAggregateInputType;
};

export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
  [P in keyof T & keyof AggregateAccount]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateAccount[P]>;
};

export type AccountGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AccountWhereInput;
  orderBy?: Prisma.AccountOrderByWithAggregationInput | Prisma.AccountOrderByWithAggregationInput[];
  by: Prisma.AccountScalarFieldEnum[] | Prisma.AccountScalarFieldEnum;
  having?: Prisma.AccountScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccountCountAggregateInputType | true;
  _avg?: AccountAvgAggregateInputType;
  _sum?: AccountSumAggregateInputType;
  _min?: AccountMinAggregateInputType;
  _max?: AccountMaxAggregateInputType;
};

export type AccountGroupByOutputType = {
  id: string;
  userId: number;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail: string | null;
  refresh_token: string | null;
  access_token: string | null;
  expires_at: number | null;
  token_type: string | null;
  scope: string | null;
  id_token: string | null;
  session_state: string | null;
  _count: AccountCountAggregateOutputType | null;
  _avg: AccountAvgAggregateOutputType | null;
  _sum: AccountSumAggregateOutputType | null;
  _min: AccountMinAggregateOutputType | null;
  _max: AccountMaxAggregateOutputType | null;
};

type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AccountGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AccountGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AccountGroupByOutputType[P]>;
    }
  >
>;

export type AccountWhereInput = {
  AND?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[];
  OR?: Prisma.AccountWhereInput[];
  NOT?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[];
  id?: Prisma.StringFilter<"Account"> | string;
  userId?: Prisma.IntFilter<"Account"> | number;
  type?: Prisma.StringFilter<"Account"> | string;
  provider?: Prisma.StringFilter<"Account"> | string;
  providerAccountId?: Prisma.StringFilter<"Account"> | string;
  providerEmail?: Prisma.StringNullableFilter<"Account"> | string | null;
  refresh_token?: Prisma.StringNullableFilter<"Account"> | string | null;
  access_token?: Prisma.StringNullableFilter<"Account"> | string | null;
  expires_at?: Prisma.IntNullableFilter<"Account"> | number | null;
  token_type?: Prisma.StringNullableFilter<"Account"> | string | null;
  scope?: Prisma.StringNullableFilter<"Account"> | string | null;
  id_token?: Prisma.StringNullableFilter<"Account"> | string | null;
  session_state?: Prisma.StringNullableFilter<"Account"> | string | null;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
};

export type AccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  provider?: Prisma.SortOrder;
  providerAccountId?: Prisma.SortOrder;
  providerEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  refresh_token?: Prisma.SortOrderInput | Prisma.SortOrder;
  access_token?: Prisma.SortOrderInput | Prisma.SortOrder;
  expires_at?: Prisma.SortOrderInput | Prisma.SortOrder;
  token_type?: Prisma.SortOrderInput | Prisma.SortOrder;
  scope?: Prisma.SortOrderInput | Prisma.SortOrder;
  id_token?: Prisma.SortOrderInput | Prisma.SortOrder;
  session_state?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type AccountWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    provider_providerAccountId?: Prisma.AccountProviderProviderAccountIdCompoundUniqueInput;
    AND?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[];
    OR?: Prisma.AccountWhereInput[];
    NOT?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[];
    userId?: Prisma.IntFilter<"Account"> | number;
    type?: Prisma.StringFilter<"Account"> | string;
    provider?: Prisma.StringFilter<"Account"> | string;
    providerAccountId?: Prisma.StringFilter<"Account"> | string;
    providerEmail?: Prisma.StringNullableFilter<"Account"> | string | null;
    refresh_token?: Prisma.StringNullableFilter<"Account"> | string | null;
    access_token?: Prisma.StringNullableFilter<"Account"> | string | null;
    expires_at?: Prisma.IntNullableFilter<"Account"> | number | null;
    token_type?: Prisma.StringNullableFilter<"Account"> | string | null;
    scope?: Prisma.StringNullableFilter<"Account"> | string | null;
    id_token?: Prisma.StringNullableFilter<"Account"> | string | null;
    session_state?: Prisma.StringNullableFilter<"Account"> | string | null;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  },
  "id" | "provider_providerAccountId"
>;

export type AccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  provider?: Prisma.SortOrder;
  providerAccountId?: Prisma.SortOrder;
  providerEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  refresh_token?: Prisma.SortOrderInput | Prisma.SortOrder;
  access_token?: Prisma.SortOrderInput | Prisma.SortOrder;
  expires_at?: Prisma.SortOrderInput | Prisma.SortOrder;
  token_type?: Prisma.SortOrderInput | Prisma.SortOrder;
  scope?: Prisma.SortOrderInput | Prisma.SortOrder;
  id_token?: Prisma.SortOrderInput | Prisma.SortOrder;
  session_state?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AccountCountOrderByAggregateInput;
  _avg?: Prisma.AccountAvgOrderByAggregateInput;
  _max?: Prisma.AccountMaxOrderByAggregateInput;
  _min?: Prisma.AccountMinOrderByAggregateInput;
  _sum?: Prisma.AccountSumOrderByAggregateInput;
};

export type AccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountScalarWhereWithAggregatesInput | Prisma.AccountScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccountScalarWhereWithAggregatesInput[];
  NOT?: Prisma.AccountScalarWhereWithAggregatesInput | Prisma.AccountScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Account"> | string;
  userId?: Prisma.IntWithAggregatesFilter<"Account"> | number;
  type?: Prisma.StringWithAggregatesFilter<"Account"> | string;
  provider?: Prisma.StringWithAggregatesFilter<"Account"> | string;
  providerAccountId?: Prisma.StringWithAggregatesFilter<"Account"> | string;
  providerEmail?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
  refresh_token?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
  access_token?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
  expires_at?: Prisma.IntNullableWithAggregatesFilter<"Account"> | number | null;
  token_type?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
  scope?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
  id_token?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
  session_state?: Prisma.StringNullableWithAggregatesFilter<"Account"> | string | null;
};

export type AccountCreateInput = {
  id?: string;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail?: string | null;
  refresh_token?: string | null;
  access_token?: string | null;
  expires_at?: number | null;
  token_type?: string | null;
  scope?: string | null;
  id_token?: string | null;
  session_state?: string | null;
  user?: Prisma.UserCreateNestedOneWithoutAccountsInput;
};

export type AccountUncheckedCreateInput = {
  id?: string;
  userId: number;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail?: string | null;
  refresh_token?: string | null;
  access_token?: string | null;
  expires_at?: number | null;
  token_type?: string | null;
  scope?: string | null;
  id_token?: string | null;
  session_state?: string | null;
};

export type AccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneWithoutAccountsNestedInput;
};

export type AccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountCreateManyInput = {
  id?: string;
  userId: number;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail?: string | null;
  refresh_token?: string | null;
  access_token?: string | null;
  expires_at?: number | null;
  token_type?: string | null;
  scope?: string | null;
  id_token?: string | null;
  session_state?: string | null;
};

export type AccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountListRelationFilter = {
  every?: Prisma.AccountWhereInput;
  some?: Prisma.AccountWhereInput;
  none?: Prisma.AccountWhereInput;
};

export type AccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AccountProviderProviderAccountIdCompoundUniqueInput = {
  provider: string;
  providerAccountId: string;
};

export type AccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  provider?: Prisma.SortOrder;
  providerAccountId?: Prisma.SortOrder;
  providerEmail?: Prisma.SortOrder;
  refresh_token?: Prisma.SortOrder;
  access_token?: Prisma.SortOrder;
  expires_at?: Prisma.SortOrder;
  token_type?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  id_token?: Prisma.SortOrder;
  session_state?: Prisma.SortOrder;
};

export type AccountAvgOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  expires_at?: Prisma.SortOrder;
};

export type AccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  provider?: Prisma.SortOrder;
  providerAccountId?: Prisma.SortOrder;
  providerEmail?: Prisma.SortOrder;
  refresh_token?: Prisma.SortOrder;
  access_token?: Prisma.SortOrder;
  expires_at?: Prisma.SortOrder;
  token_type?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  id_token?: Prisma.SortOrder;
  session_state?: Prisma.SortOrder;
};

export type AccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  provider?: Prisma.SortOrder;
  providerAccountId?: Prisma.SortOrder;
  providerEmail?: Prisma.SortOrder;
  refresh_token?: Prisma.SortOrder;
  access_token?: Prisma.SortOrder;
  expires_at?: Prisma.SortOrder;
  token_type?: Prisma.SortOrder;
  scope?: Prisma.SortOrder;
  id_token?: Prisma.SortOrder;
  session_state?: Prisma.SortOrder;
};

export type AccountSumOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  expires_at?: Prisma.SortOrder;
};

export type AccountCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>
    | Prisma.AccountCreateWithoutUserInput[]
    | Prisma.AccountUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountCreateOrConnectWithoutUserInput
    | Prisma.AccountCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AccountCreateManyUserInputEnvelope;
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
};

export type AccountUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>
    | Prisma.AccountCreateWithoutUserInput[]
    | Prisma.AccountUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountCreateOrConnectWithoutUserInput
    | Prisma.AccountCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AccountCreateManyUserInputEnvelope;
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
};

export type AccountUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>
    | Prisma.AccountCreateWithoutUserInput[]
    | Prisma.AccountUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountCreateOrConnectWithoutUserInput
    | Prisma.AccountCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AccountUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AccountUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AccountCreateManyUserInputEnvelope;
  set?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  disconnect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  delete?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  update?:
    | Prisma.AccountUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AccountUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AccountUpdateManyWithWhereWithoutUserInput
    | Prisma.AccountUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[];
};

export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>
    | Prisma.AccountCreateWithoutUserInput[]
    | Prisma.AccountUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AccountCreateOrConnectWithoutUserInput
    | Prisma.AccountCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AccountUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AccountUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AccountCreateManyUserInputEnvelope;
  set?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  disconnect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  delete?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[];
  update?:
    | Prisma.AccountUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AccountUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AccountUpdateManyWithWhereWithoutUserInput
    | Prisma.AccountUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[];
};

export type AccountCreateWithoutUserInput = {
  id?: string;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail?: string | null;
  refresh_token?: string | null;
  access_token?: string | null;
  expires_at?: number | null;
  token_type?: string | null;
  scope?: string | null;
  id_token?: string | null;
  session_state?: string | null;
};

export type AccountUncheckedCreateWithoutUserInput = {
  id?: string;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail?: string | null;
  refresh_token?: string | null;
  access_token?: string | null;
  expires_at?: number | null;
  token_type?: string | null;
  scope?: string | null;
  id_token?: string | null;
  session_state?: string | null;
};

export type AccountCreateOrConnectWithoutUserInput = {
  where: Prisma.AccountWhereUniqueInput;
  create: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>;
};

export type AccountCreateManyUserInputEnvelope = {
  data: Prisma.AccountCreateManyUserInput | Prisma.AccountCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AccountUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccountWhereUniqueInput;
  update: Prisma.XOR<Prisma.AccountUpdateWithoutUserInput, Prisma.AccountUncheckedUpdateWithoutUserInput>;
  create: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>;
};

export type AccountUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccountWhereUniqueInput;
  data: Prisma.XOR<Prisma.AccountUpdateWithoutUserInput, Prisma.AccountUncheckedUpdateWithoutUserInput>;
};

export type AccountUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AccountScalarWhereInput;
  data: Prisma.XOR<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUncheckedUpdateManyWithoutUserInput>;
};

export type AccountScalarWhereInput = {
  AND?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[];
  OR?: Prisma.AccountScalarWhereInput[];
  NOT?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[];
  id?: Prisma.StringFilter<"Account"> | string;
  userId?: Prisma.IntFilter<"Account"> | number;
  type?: Prisma.StringFilter<"Account"> | string;
  provider?: Prisma.StringFilter<"Account"> | string;
  providerAccountId?: Prisma.StringFilter<"Account"> | string;
  providerEmail?: Prisma.StringNullableFilter<"Account"> | string | null;
  refresh_token?: Prisma.StringNullableFilter<"Account"> | string | null;
  access_token?: Prisma.StringNullableFilter<"Account"> | string | null;
  expires_at?: Prisma.IntNullableFilter<"Account"> | number | null;
  token_type?: Prisma.StringNullableFilter<"Account"> | string | null;
  scope?: Prisma.StringNullableFilter<"Account"> | string | null;
  id_token?: Prisma.StringNullableFilter<"Account"> | string | null;
  session_state?: Prisma.StringNullableFilter<"Account"> | string | null;
};

export type AccountCreateManyUserInput = {
  id?: string;
  type: string;
  provider: string;
  providerAccountId: string;
  providerEmail?: string | null;
  refresh_token?: string | null;
  access_token?: string | null;
  expires_at?: number | null;
  token_type?: string | null;
  scope?: string | null;
  id_token?: string | null;
  session_state?: string | null;
};

export type AccountUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.StringFieldUpdateOperationsInput | string;
  provider?: Prisma.StringFieldUpdateOperationsInput | string;
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string;
  providerEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  refresh_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  access_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  expires_at?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  token_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  scope?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  id_token?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  session_state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type AccountSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    type?: boolean;
    provider?: boolean;
    providerAccountId?: boolean;
    providerEmail?: boolean;
    refresh_token?: boolean;
    access_token?: boolean;
    expires_at?: boolean;
    token_type?: boolean;
    scope?: boolean;
    id_token?: boolean;
    session_state?: boolean;
    user?: boolean | Prisma.Account$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["account"]
>;

export type AccountSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    type?: boolean;
    provider?: boolean;
    providerAccountId?: boolean;
    providerEmail?: boolean;
    refresh_token?: boolean;
    access_token?: boolean;
    expires_at?: boolean;
    token_type?: boolean;
    scope?: boolean;
    id_token?: boolean;
    session_state?: boolean;
    user?: boolean | Prisma.Account$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["account"]
>;

export type AccountSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    type?: boolean;
    provider?: boolean;
    providerAccountId?: boolean;
    providerEmail?: boolean;
    refresh_token?: boolean;
    access_token?: boolean;
    expires_at?: boolean;
    token_type?: boolean;
    scope?: boolean;
    id_token?: boolean;
    session_state?: boolean;
    user?: boolean | Prisma.Account$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["account"]
>;

export type AccountSelectScalar = {
  id?: boolean;
  userId?: boolean;
  type?: boolean;
  provider?: boolean;
  providerAccountId?: boolean;
  providerEmail?: boolean;
  refresh_token?: boolean;
  access_token?: boolean;
  expires_at?: boolean;
  token_type?: boolean;
  scope?: boolean;
  id_token?: boolean;
  session_state?: boolean;
};

export type AccountOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "type"
  | "provider"
  | "providerAccountId"
  | "providerEmail"
  | "refresh_token"
  | "access_token"
  | "expires_at"
  | "token_type"
  | "scope"
  | "id_token"
  | "session_state",
  ExtArgs["result"]["account"]
>;
export type AccountInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Account$userArgs<ExtArgs>;
};
export type AccountIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Account$userArgs<ExtArgs>;
};
export type AccountIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Account$userArgs<ExtArgs>;
};

export type $AccountPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Account";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: number;
      type: string;
      provider: string;
      providerAccountId: string;
      providerEmail: string | null;
      refresh_token: string | null;
      access_token: string | null;
      expires_at: number | null;
      token_type: string | null;
      scope: string | null;
      id_token: string | null;
      session_state: string | null;
    },
    ExtArgs["result"]["account"]
  >;
  composites: {};
};

export type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AccountPayload, S>;

export type AccountCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AccountFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AccountCountAggregateInputType | true;
};

export interface AccountDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Account"]; meta: { name: "Account" } };
  /**
   * Find zero or one Account that matches the filter.
   * @param {AccountFindUniqueArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Account that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Account that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountFindFirstArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Account that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Accounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Accounts
   * const accounts = await prisma.account.findMany()
   *
   * // Get first 10 Accounts
   * const accounts = await prisma.account.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccountFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccountFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Account.
   * @param {AccountCreateArgs} args - Arguments to create a Account.
   * @example
   * // Create one Account
   * const Account = await prisma.account.create({
   *   data: {
   *     // ... data to create a Account
   *   }
   * })
   *
   */
  create<T extends AccountCreateArgs>(
    args: Prisma.SelectSubset<T, AccountCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Accounts.
   * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const account = await prisma.account.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccountCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Accounts and returns the data saved in the database.
   * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const account = await prisma.account.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Accounts and only return the `id`
   * const accountWithIdOnly = await prisma.account.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Account.
   * @param {AccountDeleteArgs} args - Arguments to delete one Account.
   * @example
   * // Delete one Account
   * const Account = await prisma.account.delete({
   *   where: {
   *     // ... filter to delete one Account
   *   }
   * })
   *
   */
  delete<T extends AccountDeleteArgs>(
    args: Prisma.SelectSubset<T, AccountDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Account.
   * @param {AccountUpdateArgs} args - Arguments to update one Account.
   * @example
   * // Update one Account
   * const account = await prisma.account.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccountUpdateArgs>(
    args: Prisma.SelectSubset<T, AccountUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Accounts.
   * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
   * @example
   * // Delete a few Accounts
   * const { count } = await prisma.account.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccountDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccountUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Accounts and returns the data updated in the database.
   * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Accounts and only return the `id`
   * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Account.
   * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
   * @example
   * // Update or create a Account
   * const account = await prisma.account.upsert({
   *   create: {
   *     // ... data to create a Account
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Account we want to update
   *   }
   * })
   */
  upsert<T extends AccountUpsertArgs>(
    args: Prisma.SelectSubset<T, AccountUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AccountClient<
    runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
   * @example
   * // Count the number of Accounts
   * const count = await prisma.account.count({
   *   where: {
   *     // ... the filter for the Accounts we want to count
   *   }
   * })
   **/
  count<T extends AccountCountArgs>(
    args?: Prisma.Subset<T, AccountCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AccountCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Account.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccountAggregateArgs>(
    args: Prisma.Subset<T, AccountAggregateArgs>
  ): Prisma.PrismaPromise<GetAccountAggregateType<T>>;

  /**
   * Group by Account.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountGroupByArgs["orderBy"] }
      : { orderBy?: AccountGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Account.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.Account$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Account$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Account model
 */
export interface AccountFieldRefs {
  readonly id: Prisma.FieldRef<"Account", "String">;
  readonly userId: Prisma.FieldRef<"Account", "Int">;
  readonly type: Prisma.FieldRef<"Account", "String">;
  readonly provider: Prisma.FieldRef<"Account", "String">;
  readonly providerAccountId: Prisma.FieldRef<"Account", "String">;
  readonly providerEmail: Prisma.FieldRef<"Account", "String">;
  readonly refresh_token: Prisma.FieldRef<"Account", "String">;
  readonly access_token: Prisma.FieldRef<"Account", "String">;
  readonly expires_at: Prisma.FieldRef<"Account", "Int">;
  readonly token_type: Prisma.FieldRef<"Account", "String">;
  readonly scope: Prisma.FieldRef<"Account", "String">;
  readonly id_token: Prisma.FieldRef<"Account", "String">;
  readonly session_state: Prisma.FieldRef<"Account", "String">;
}

// Custom InputTypes
/**
 * Account findUnique
 */
export type AccountFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * Filter, which Account to fetch.
   */
  where: Prisma.AccountWhereUniqueInput;
};

/**
 * Account findUniqueOrThrow
 */
export type AccountFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * Filter, which Account to fetch.
   */
  where: Prisma.AccountWhereUniqueInput;
};

/**
 * Account findFirst
 */
export type AccountFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * Filter, which Account to fetch.
   */
  where?: Prisma.AccountWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Accounts.
   */
  cursor?: Prisma.AccountWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Accounts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Accounts.
   */
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[];
};

/**
 * Account findFirstOrThrow
 */
export type AccountFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * Filter, which Account to fetch.
   */
  where?: Prisma.AccountWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Accounts.
   */
  cursor?: Prisma.AccountWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Accounts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Accounts.
   */
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[];
};

/**
 * Account findMany
 */
export type AccountFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * Filter, which Accounts to fetch.
   */
  where?: Prisma.AccountWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Accounts.
   */
  cursor?: Prisma.AccountWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Accounts.
   */
  skip?: number;
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[];
};

/**
 * Account create
 */
export type AccountCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * The data needed to create a Account.
   */
  data: Prisma.XOR<Prisma.AccountCreateInput, Prisma.AccountUncheckedCreateInput>;
};

/**
 * Account createMany
 */
export type AccountCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Accounts.
   */
  data: Prisma.AccountCreateManyInput | Prisma.AccountCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Account createManyAndReturn
 */
export type AccountCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * The data used to create many Accounts.
   */
  data: Prisma.AccountCreateManyInput | Prisma.AccountCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Account update
 */
export type AccountUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * The data needed to update a Account.
   */
  data: Prisma.XOR<Prisma.AccountUpdateInput, Prisma.AccountUncheckedUpdateInput>;
  /**
   * Choose, which Account to update.
   */
  where: Prisma.AccountWhereUniqueInput;
};

/**
 * Account updateMany
 */
export type AccountUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Accounts.
   */
  data: Prisma.XOR<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUncheckedUpdateManyInput>;
  /**
   * Filter which Accounts to update
   */
  where?: Prisma.AccountWhereInput;
  /**
   * Limit how many Accounts to update.
   */
  limit?: number;
};

/**
 * Account updateManyAndReturn
 */
export type AccountUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * The data used to update Accounts.
   */
  data: Prisma.XOR<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUncheckedUpdateManyInput>;
  /**
   * Filter which Accounts to update
   */
  where?: Prisma.AccountWhereInput;
  /**
   * Limit how many Accounts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Account upsert
 */
export type AccountUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * The filter to search for the Account to update in case it exists.
   */
  where: Prisma.AccountWhereUniqueInput;
  /**
   * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
   */
  create: Prisma.XOR<Prisma.AccountCreateInput, Prisma.AccountUncheckedCreateInput>;
  /**
   * In case the Account was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountUpdateInput, Prisma.AccountUncheckedUpdateInput>;
};

/**
 * Account delete
 */
export type AccountDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
  /**
   * Filter which Account to delete.
   */
  where: Prisma.AccountWhereUniqueInput;
};

/**
 * Account deleteMany
 */
export type AccountDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Accounts to delete
   */
  where?: Prisma.AccountWhereInput;
  /**
   * Limit how many Accounts to delete.
   */
  limit?: number;
};

/**
 * Account.user
 */
export type Account$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Account without action
 */
export type AccountDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null;
};
