/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `UserFilterSegmentPreference` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model UserFilterSegmentPreference
 *
 */
export type UserFilterSegmentPreferenceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$UserFilterSegmentPreferencePayload>;

export type AggregateUserFilterSegmentPreference = {
  _count: UserFilterSegmentPreferenceCountAggregateOutputType | null;
  _avg: UserFilterSegmentPreferenceAvgAggregateOutputType | null;
  _sum: UserFilterSegmentPreferenceSumAggregateOutputType | null;
  _min: UserFilterSegmentPreferenceMinAggregateOutputType | null;
  _max: UserFilterSegmentPreferenceMaxAggregateOutputType | null;
};

export type UserFilterSegmentPreferenceAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  segmentId: number | null;
};

export type UserFilterSegmentPreferenceSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  segmentId: number | null;
};

export type UserFilterSegmentPreferenceMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  tableIdentifier: string | null;
  segmentId: number | null;
  systemSegmentId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type UserFilterSegmentPreferenceMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  tableIdentifier: string | null;
  segmentId: number | null;
  systemSegmentId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type UserFilterSegmentPreferenceCountAggregateOutputType = {
  id: number;
  userId: number;
  tableIdentifier: number;
  segmentId: number;
  systemSegmentId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type UserFilterSegmentPreferenceAvgAggregateInputType = {
  id?: true;
  userId?: true;
  segmentId?: true;
};

export type UserFilterSegmentPreferenceSumAggregateInputType = {
  id?: true;
  userId?: true;
  segmentId?: true;
};

export type UserFilterSegmentPreferenceMinAggregateInputType = {
  id?: true;
  userId?: true;
  tableIdentifier?: true;
  segmentId?: true;
  systemSegmentId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type UserFilterSegmentPreferenceMaxAggregateInputType = {
  id?: true;
  userId?: true;
  tableIdentifier?: true;
  segmentId?: true;
  systemSegmentId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type UserFilterSegmentPreferenceCountAggregateInputType = {
  id?: true;
  userId?: true;
  tableIdentifier?: true;
  segmentId?: true;
  systemSegmentId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type UserFilterSegmentPreferenceAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which UserFilterSegmentPreference to aggregate.
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFilterSegmentPreferences to fetch.
   */
  orderBy?:
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFilterSegmentPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFilterSegmentPreferences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserFilterSegmentPreferences
   **/
  _count?: true | UserFilterSegmentPreferenceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: UserFilterSegmentPreferenceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: UserFilterSegmentPreferenceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserFilterSegmentPreferenceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserFilterSegmentPreferenceMaxAggregateInputType;
};

export type GetUserFilterSegmentPreferenceAggregateType<T extends UserFilterSegmentPreferenceAggregateArgs> =
  {
    [P in keyof T & keyof AggregateUserFilterSegmentPreference]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateUserFilterSegmentPreference[P]>
      : Prisma.GetScalarType<T[P], AggregateUserFilterSegmentPreference[P]>;
  };

export type UserFilterSegmentPreferenceGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  orderBy?:
    | Prisma.UserFilterSegmentPreferenceOrderByWithAggregationInput
    | Prisma.UserFilterSegmentPreferenceOrderByWithAggregationInput[];
  by: Prisma.UserFilterSegmentPreferenceScalarFieldEnum[] | Prisma.UserFilterSegmentPreferenceScalarFieldEnum;
  having?: Prisma.UserFilterSegmentPreferenceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: UserFilterSegmentPreferenceCountAggregateInputType | true;
  _avg?: UserFilterSegmentPreferenceAvgAggregateInputType;
  _sum?: UserFilterSegmentPreferenceSumAggregateInputType;
  _min?: UserFilterSegmentPreferenceMinAggregateInputType;
  _max?: UserFilterSegmentPreferenceMaxAggregateInputType;
};

export type UserFilterSegmentPreferenceGroupByOutputType = {
  id: number;
  userId: number;
  tableIdentifier: string;
  segmentId: number | null;
  systemSegmentId: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: UserFilterSegmentPreferenceCountAggregateOutputType | null;
  _avg: UserFilterSegmentPreferenceAvgAggregateOutputType | null;
  _sum: UserFilterSegmentPreferenceSumAggregateOutputType | null;
  _min: UserFilterSegmentPreferenceMinAggregateOutputType | null;
  _max: UserFilterSegmentPreferenceMaxAggregateOutputType | null;
};

type GetUserFilterSegmentPreferenceGroupByPayload<T extends UserFilterSegmentPreferenceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<UserFilterSegmentPreferenceGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof UserFilterSegmentPreferenceGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserFilterSegmentPreferenceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserFilterSegmentPreferenceGroupByOutputType[P]>;
      }
    >
  >;

export type UserFilterSegmentPreferenceWhereInput = {
  AND?: Prisma.UserFilterSegmentPreferenceWhereInput | Prisma.UserFilterSegmentPreferenceWhereInput[];
  OR?: Prisma.UserFilterSegmentPreferenceWhereInput[];
  NOT?: Prisma.UserFilterSegmentPreferenceWhereInput | Prisma.UserFilterSegmentPreferenceWhereInput[];
  id?: Prisma.IntFilter<"UserFilterSegmentPreference"> | number;
  userId?: Prisma.IntFilter<"UserFilterSegmentPreference"> | number;
  tableIdentifier?: Prisma.StringFilter<"UserFilterSegmentPreference"> | string;
  segmentId?: Prisma.IntNullableFilter<"UserFilterSegmentPreference"> | number | null;
  systemSegmentId?: Prisma.StringNullableFilter<"UserFilterSegmentPreference"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"UserFilterSegmentPreference"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"UserFilterSegmentPreference"> | Date | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  segment?: Prisma.XOR<
    Prisma.FilterSegmentNullableScalarRelationFilter,
    Prisma.FilterSegmentWhereInput
  > | null;
};

export type UserFilterSegmentPreferenceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  systemSegmentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  segment?: Prisma.FilterSegmentOrderByWithRelationInput;
};

export type UserFilterSegmentPreferenceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    userId_tableIdentifier?: Prisma.UserFilterSegmentPreferenceUserIdTableIdentifierCompoundUniqueInput;
    AND?: Prisma.UserFilterSegmentPreferenceWhereInput | Prisma.UserFilterSegmentPreferenceWhereInput[];
    OR?: Prisma.UserFilterSegmentPreferenceWhereInput[];
    NOT?: Prisma.UserFilterSegmentPreferenceWhereInput | Prisma.UserFilterSegmentPreferenceWhereInput[];
    userId?: Prisma.IntFilter<"UserFilterSegmentPreference"> | number;
    tableIdentifier?: Prisma.StringFilter<"UserFilterSegmentPreference"> | string;
    segmentId?: Prisma.IntNullableFilter<"UserFilterSegmentPreference"> | number | null;
    systemSegmentId?: Prisma.StringNullableFilter<"UserFilterSegmentPreference"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"UserFilterSegmentPreference"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"UserFilterSegmentPreference"> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    segment?: Prisma.XOR<
      Prisma.FilterSegmentNullableScalarRelationFilter,
      Prisma.FilterSegmentWhereInput
    > | null;
  },
  "id" | "userId_tableIdentifier"
>;

export type UserFilterSegmentPreferenceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  systemSegmentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.UserFilterSegmentPreferenceCountOrderByAggregateInput;
  _avg?: Prisma.UserFilterSegmentPreferenceAvgOrderByAggregateInput;
  _max?: Prisma.UserFilterSegmentPreferenceMaxOrderByAggregateInput;
  _min?: Prisma.UserFilterSegmentPreferenceMinOrderByAggregateInput;
  _sum?: Prisma.UserFilterSegmentPreferenceSumOrderByAggregateInput;
};

export type UserFilterSegmentPreferenceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereWithAggregatesInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereWithAggregatesInput[];
  OR?: Prisma.UserFilterSegmentPreferenceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereWithAggregatesInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"UserFilterSegmentPreference"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"UserFilterSegmentPreference"> | number;
  tableIdentifier?: Prisma.StringWithAggregatesFilter<"UserFilterSegmentPreference"> | string;
  segmentId?: Prisma.IntNullableWithAggregatesFilter<"UserFilterSegmentPreference"> | number | null;
  systemSegmentId?: Prisma.StringNullableWithAggregatesFilter<"UserFilterSegmentPreference"> | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserFilterSegmentPreference"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserFilterSegmentPreference"> | Date | string;
};

export type UserFilterSegmentPreferenceCreateInput = {
  tableIdentifier: string;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFilterSegmentPreferencesInput;
  segment?: Prisma.FilterSegmentCreateNestedOneWithoutUserPreferencesInput;
};

export type UserFilterSegmentPreferenceUncheckedCreateInput = {
  id?: number;
  userId: number;
  tableIdentifier: string;
  segmentId?: number | null;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserFilterSegmentPreferenceUpdateInput = {
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFilterSegmentPreferencesNestedInput;
  segment?: Prisma.FilterSegmentUpdateOneWithoutUserPreferencesNestedInput;
};

export type UserFilterSegmentPreferenceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  segmentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceCreateManyInput = {
  id?: number;
  userId: number;
  tableIdentifier: string;
  segmentId?: number | null;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserFilterSegmentPreferenceUpdateManyMutationInput = {
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  segmentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceListRelationFilter = {
  every?: Prisma.UserFilterSegmentPreferenceWhereInput;
  some?: Prisma.UserFilterSegmentPreferenceWhereInput;
  none?: Prisma.UserFilterSegmentPreferenceWhereInput;
};

export type UserFilterSegmentPreferenceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type UserFilterSegmentPreferenceUserIdTableIdentifierCompoundUniqueInput = {
  userId: number;
  tableIdentifier: string;
};

export type UserFilterSegmentPreferenceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrder;
  systemSegmentId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserFilterSegmentPreferenceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrder;
};

export type UserFilterSegmentPreferenceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrder;
  systemSegmentId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserFilterSegmentPreferenceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  tableIdentifier?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrder;
  systemSegmentId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserFilterSegmentPreferenceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  segmentId?: Prisma.SortOrder;
};

export type UserFilterSegmentPreferenceCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManyUserInputEnvelope;
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
};

export type UserFilterSegmentPreferenceUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManyUserInputEnvelope;
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
};

export type UserFilterSegmentPreferenceUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManyUserInputEnvelope;
  set?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  disconnect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  delete?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  update?:
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
};

export type UserFilterSegmentPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManyUserInputEnvelope;
  set?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  disconnect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  delete?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  update?:
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutUserInput
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
};

export type UserFilterSegmentPreferenceCreateNestedManyWithoutSegmentInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManySegmentInputEnvelope;
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
};

export type UserFilterSegmentPreferenceUncheckedCreateNestedManyWithoutSegmentInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManySegmentInputEnvelope;
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
};

export type UserFilterSegmentPreferenceUpdateManyWithoutSegmentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput[];
  upsert?:
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutSegmentInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManySegmentInputEnvelope;
  set?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  disconnect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  delete?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  update?:
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutSegmentInput[];
  updateMany?:
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutSegmentInput[];
  deleteMany?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
};

export type UserFilterSegmentPreferenceUncheckedUpdateManyWithoutSegmentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput,
        Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput
      >
    | Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput[]
    | Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput[];
  connectOrCreate?:
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput[];
  upsert?:
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutSegmentInput[];
  createMany?: Prisma.UserFilterSegmentPreferenceCreateManySegmentInputEnvelope;
  set?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  disconnect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  delete?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  connect?:
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput
    | Prisma.UserFilterSegmentPreferenceWhereUniqueInput[];
  update?:
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutSegmentInput[];
  updateMany?:
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutSegmentInput
    | Prisma.UserFilterSegmentPreferenceUpdateManyWithWhereWithoutSegmentInput[];
  deleteMany?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
};

export type UserFilterSegmentPreferenceCreateWithoutUserInput = {
  tableIdentifier: string;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  segment?: Prisma.FilterSegmentCreateNestedOneWithoutUserPreferencesInput;
};

export type UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput = {
  id?: number;
  tableIdentifier: string;
  segmentId?: number | null;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserFilterSegmentPreferenceCreateOrConnectWithoutUserInput = {
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput,
    Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput
  >;
};

export type UserFilterSegmentPreferenceCreateManyUserInputEnvelope = {
  data:
    | Prisma.UserFilterSegmentPreferenceCreateManyUserInput
    | Prisma.UserFilterSegmentPreferenceCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateWithoutUserInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceCreateWithoutUserInput,
    Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutUserInput
  >;
};

export type UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateWithoutUserInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateWithoutUserInput
  >;
};

export type UserFilterSegmentPreferenceUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserFilterSegmentPreferenceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateManyMutationInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyWithoutUserInput
  >;
};

export type UserFilterSegmentPreferenceScalarWhereInput = {
  AND?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
  OR?: Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
  NOT?:
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput
    | Prisma.UserFilterSegmentPreferenceScalarWhereInput[];
  id?: Prisma.IntFilter<"UserFilterSegmentPreference"> | number;
  userId?: Prisma.IntFilter<"UserFilterSegmentPreference"> | number;
  tableIdentifier?: Prisma.StringFilter<"UserFilterSegmentPreference"> | string;
  segmentId?: Prisma.IntNullableFilter<"UserFilterSegmentPreference"> | number | null;
  systemSegmentId?: Prisma.StringNullableFilter<"UserFilterSegmentPreference"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"UserFilterSegmentPreference"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"UserFilterSegmentPreference"> | Date | string;
};

export type UserFilterSegmentPreferenceCreateWithoutSegmentInput = {
  tableIdentifier: string;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFilterSegmentPreferencesInput;
};

export type UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput = {
  id?: number;
  userId: number;
  tableIdentifier: string;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserFilterSegmentPreferenceCreateOrConnectWithoutSegmentInput = {
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput,
    Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput
  >;
};

export type UserFilterSegmentPreferenceCreateManySegmentInputEnvelope = {
  data:
    | Prisma.UserFilterSegmentPreferenceCreateManySegmentInput
    | Prisma.UserFilterSegmentPreferenceCreateManySegmentInput[];
  skipDuplicates?: boolean;
};

export type UserFilterSegmentPreferenceUpsertWithWhereUniqueWithoutSegmentInput = {
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateWithoutSegmentInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateWithoutSegmentInput
  >;
  create: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceCreateWithoutSegmentInput,
    Prisma.UserFilterSegmentPreferenceUncheckedCreateWithoutSegmentInput
  >;
};

export type UserFilterSegmentPreferenceUpdateWithWhereUniqueWithoutSegmentInput = {
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateWithoutSegmentInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateWithoutSegmentInput
  >;
};

export type UserFilterSegmentPreferenceUpdateManyWithWhereWithoutSegmentInput = {
  where: Prisma.UserFilterSegmentPreferenceScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateManyMutationInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyWithoutSegmentInput
  >;
};

export type UserFilterSegmentPreferenceCreateManyUserInput = {
  id?: number;
  tableIdentifier: string;
  segmentId?: number | null;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserFilterSegmentPreferenceUpdateWithoutUserInput = {
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  segment?: Prisma.FilterSegmentUpdateOneWithoutUserPreferencesNestedInput;
};

export type UserFilterSegmentPreferenceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  segmentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  segmentId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceCreateManySegmentInput = {
  id?: number;
  userId: number;
  tableIdentifier: string;
  systemSegmentId?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type UserFilterSegmentPreferenceUpdateWithoutSegmentInput = {
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFilterSegmentPreferencesNestedInput;
};

export type UserFilterSegmentPreferenceUncheckedUpdateWithoutSegmentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceUncheckedUpdateManyWithoutSegmentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  tableIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  systemSegmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFilterSegmentPreferenceSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    tableIdentifier?: boolean;
    segmentId?: boolean;
    systemSegmentId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    segment?: boolean | Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFilterSegmentPreference"]
>;

export type UserFilterSegmentPreferenceSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    tableIdentifier?: boolean;
    segmentId?: boolean;
    systemSegmentId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    segment?: boolean | Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFilterSegmentPreference"]
>;

export type UserFilterSegmentPreferenceSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    tableIdentifier?: boolean;
    segmentId?: boolean;
    systemSegmentId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    segment?: boolean | Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFilterSegmentPreference"]
>;

export type UserFilterSegmentPreferenceSelectScalar = {
  id?: boolean;
  userId?: boolean;
  tableIdentifier?: boolean;
  segmentId?: boolean;
  systemSegmentId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type UserFilterSegmentPreferenceOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "tableIdentifier" | "segmentId" | "systemSegmentId" | "createdAt" | "updatedAt",
  ExtArgs["result"]["userFilterSegmentPreference"]
>;
export type UserFilterSegmentPreferenceInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  segment?: boolean | Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>;
};
export type UserFilterSegmentPreferenceIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  segment?: boolean | Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>;
};
export type UserFilterSegmentPreferenceIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  segment?: boolean | Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>;
};

export type $UserFilterSegmentPreferencePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "UserFilterSegmentPreference";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    segment: Prisma.$FilterSegmentPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number;
      tableIdentifier: string;
      segmentId: number | null;
      systemSegmentId: string | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["userFilterSegmentPreference"]
  >;
  composites: {};
};

export type UserFilterSegmentPreferenceGetPayload<
  S extends boolean | null | undefined | UserFilterSegmentPreferenceDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$UserFilterSegmentPreferencePayload, S>;

export type UserFilterSegmentPreferenceCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<UserFilterSegmentPreferenceFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: UserFilterSegmentPreferenceCountAggregateInputType | true;
};

export interface UserFilterSegmentPreferenceDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["UserFilterSegmentPreference"];
    meta: { name: "UserFilterSegmentPreference" };
  };
  /**
   * Find zero or one UserFilterSegmentPreference that matches the filter.
   * @param {UserFilterSegmentPreferenceFindUniqueArgs} args - Arguments to find a UserFilterSegmentPreference
   * @example
   * // Get one UserFilterSegmentPreference
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFilterSegmentPreferenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one UserFilterSegmentPreference that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFilterSegmentPreferenceFindUniqueOrThrowArgs} args - Arguments to find a UserFilterSegmentPreference
   * @example
   * // Get one UserFilterSegmentPreference
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFilterSegmentPreferenceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserFilterSegmentPreference that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceFindFirstArgs} args - Arguments to find a UserFilterSegmentPreference
   * @example
   * // Get one UserFilterSegmentPreference
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFilterSegmentPreferenceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserFilterSegmentPreferenceFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserFilterSegmentPreference that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceFindFirstOrThrowArgs} args - Arguments to find a UserFilterSegmentPreference
   * @example
   * // Get one UserFilterSegmentPreference
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFilterSegmentPreferenceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, UserFilterSegmentPreferenceFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more UserFilterSegmentPreferences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserFilterSegmentPreferences
   * const userFilterSegmentPreferences = await prisma.userFilterSegmentPreference.findMany()
   *
   * // Get first 10 UserFilterSegmentPreferences
   * const userFilterSegmentPreferences = await prisma.userFilterSegmentPreference.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const userFilterSegmentPreferenceWithIdOnly = await prisma.userFilterSegmentPreference.findMany({ select: { id: true } })
   *
   */
  findMany<T extends UserFilterSegmentPreferenceFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserFilterSegmentPreferenceFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a UserFilterSegmentPreference.
   * @param {UserFilterSegmentPreferenceCreateArgs} args - Arguments to create a UserFilterSegmentPreference.
   * @example
   * // Create one UserFilterSegmentPreference
   * const UserFilterSegmentPreference = await prisma.userFilterSegmentPreference.create({
   *   data: {
   *     // ... data to create a UserFilterSegmentPreference
   *   }
   * })
   *
   */
  create<T extends UserFilterSegmentPreferenceCreateArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceCreateArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many UserFilterSegmentPreferences.
   * @param {UserFilterSegmentPreferenceCreateManyArgs} args - Arguments to create many UserFilterSegmentPreferences.
   * @example
   * // Create many UserFilterSegmentPreferences
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserFilterSegmentPreferenceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserFilterSegmentPreferenceCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many UserFilterSegmentPreferences and returns the data saved in the database.
   * @param {UserFilterSegmentPreferenceCreateManyAndReturnArgs} args - Arguments to create many UserFilterSegmentPreferences.
   * @example
   * // Create many UserFilterSegmentPreferences
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserFilterSegmentPreferences and only return the `id`
   * const userFilterSegmentPreferenceWithIdOnly = await prisma.userFilterSegmentPreference.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserFilterSegmentPreferenceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, UserFilterSegmentPreferenceCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a UserFilterSegmentPreference.
   * @param {UserFilterSegmentPreferenceDeleteArgs} args - Arguments to delete one UserFilterSegmentPreference.
   * @example
   * // Delete one UserFilterSegmentPreference
   * const UserFilterSegmentPreference = await prisma.userFilterSegmentPreference.delete({
   *   where: {
   *     // ... filter to delete one UserFilterSegmentPreference
   *   }
   * })
   *
   */
  delete<T extends UserFilterSegmentPreferenceDeleteArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one UserFilterSegmentPreference.
   * @param {UserFilterSegmentPreferenceUpdateArgs} args - Arguments to update one UserFilterSegmentPreference.
   * @example
   * // Update one UserFilterSegmentPreference
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserFilterSegmentPreferenceUpdateArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more UserFilterSegmentPreferences.
   * @param {UserFilterSegmentPreferenceDeleteManyArgs} args - Arguments to filter UserFilterSegmentPreferences to delete.
   * @example
   * // Delete a few UserFilterSegmentPreferences
   * const { count } = await prisma.userFilterSegmentPreference.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserFilterSegmentPreferenceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserFilterSegmentPreferenceDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserFilterSegmentPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserFilterSegmentPreferences
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserFilterSegmentPreferenceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserFilterSegmentPreferences and returns the data updated in the database.
   * @param {UserFilterSegmentPreferenceUpdateManyAndReturnArgs} args - Arguments to update many UserFilterSegmentPreferences.
   * @example
   * // Update many UserFilterSegmentPreferences
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserFilterSegmentPreferences and only return the `id`
   * const userFilterSegmentPreferenceWithIdOnly = await prisma.userFilterSegmentPreference.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserFilterSegmentPreferenceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one UserFilterSegmentPreference.
   * @param {UserFilterSegmentPreferenceUpsertArgs} args - Arguments to update or create a UserFilterSegmentPreference.
   * @example
   * // Update or create a UserFilterSegmentPreference
   * const userFilterSegmentPreference = await prisma.userFilterSegmentPreference.upsert({
   *   create: {
   *     // ... data to create a UserFilterSegmentPreference
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserFilterSegmentPreference we want to update
   *   }
   * })
   */
  upsert<T extends UserFilterSegmentPreferenceUpsertArgs>(
    args: Prisma.SelectSubset<T, UserFilterSegmentPreferenceUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__UserFilterSegmentPreferenceClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of UserFilterSegmentPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceCountArgs} args - Arguments to filter UserFilterSegmentPreferences to count.
   * @example
   * // Count the number of UserFilterSegmentPreferences
   * const count = await prisma.userFilterSegmentPreference.count({
   *   where: {
   *     // ... the filter for the UserFilterSegmentPreferences we want to count
   *   }
   * })
   **/
  count<T extends UserFilterSegmentPreferenceCountArgs>(
    args?: Prisma.Subset<T, UserFilterSegmentPreferenceCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], UserFilterSegmentPreferenceCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a UserFilterSegmentPreference.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserFilterSegmentPreferenceAggregateArgs>(
    args: Prisma.Subset<T, UserFilterSegmentPreferenceAggregateArgs>
  ): Prisma.PrismaPromise<GetUserFilterSegmentPreferenceAggregateType<T>>;

  /**
   * Group by UserFilterSegmentPreference.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFilterSegmentPreferenceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserFilterSegmentPreferenceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserFilterSegmentPreferenceGroupByArgs["orderBy"] }
      : { orderBy?: UserFilterSegmentPreferenceGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, UserFilterSegmentPreferenceGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors
    ? GetUserFilterSegmentPreferenceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the UserFilterSegmentPreference model
   */
  readonly fields: UserFilterSegmentPreferenceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserFilterSegmentPreference.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserFilterSegmentPreferenceClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  segment<T extends Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserFilterSegmentPreference$segmentArgs<ExtArgs>>
  ): Prisma.Prisma__FilterSegmentClient<
    runtime.Types.Result.GetResult<
      Prisma.$FilterSegmentPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the UserFilterSegmentPreference model
 */
export interface UserFilterSegmentPreferenceFieldRefs {
  readonly id: Prisma.FieldRef<"UserFilterSegmentPreference", "Int">;
  readonly userId: Prisma.FieldRef<"UserFilterSegmentPreference", "Int">;
  readonly tableIdentifier: Prisma.FieldRef<"UserFilterSegmentPreference", "String">;
  readonly segmentId: Prisma.FieldRef<"UserFilterSegmentPreference", "Int">;
  readonly systemSegmentId: Prisma.FieldRef<"UserFilterSegmentPreference", "String">;
  readonly createdAt: Prisma.FieldRef<"UserFilterSegmentPreference", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"UserFilterSegmentPreference", "DateTime">;
}

// Custom InputTypes
/**
 * UserFilterSegmentPreference findUnique
 */
export type UserFilterSegmentPreferenceFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which UserFilterSegmentPreference to fetch.
   */
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
};

/**
 * UserFilterSegmentPreference findUniqueOrThrow
 */
export type UserFilterSegmentPreferenceFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which UserFilterSegmentPreference to fetch.
   */
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
};

/**
 * UserFilterSegmentPreference findFirst
 */
export type UserFilterSegmentPreferenceFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which UserFilterSegmentPreference to fetch.
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFilterSegmentPreferences to fetch.
   */
  orderBy?:
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserFilterSegmentPreferences.
   */
  cursor?: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFilterSegmentPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFilterSegmentPreferences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserFilterSegmentPreferences.
   */
  distinct?:
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum[];
};

/**
 * UserFilterSegmentPreference findFirstOrThrow
 */
export type UserFilterSegmentPreferenceFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which UserFilterSegmentPreference to fetch.
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFilterSegmentPreferences to fetch.
   */
  orderBy?:
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserFilterSegmentPreferences.
   */
  cursor?: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFilterSegmentPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFilterSegmentPreferences.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserFilterSegmentPreferences.
   */
  distinct?:
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum[];
};

/**
 * UserFilterSegmentPreference findMany
 */
export type UserFilterSegmentPreferenceFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * Filter, which UserFilterSegmentPreferences to fetch.
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFilterSegmentPreferences to fetch.
   */
  orderBy?:
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput
    | Prisma.UserFilterSegmentPreferenceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserFilterSegmentPreferences.
   */
  cursor?: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFilterSegmentPreferences from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFilterSegmentPreferences.
   */
  skip?: number;
  distinct?:
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum
    | Prisma.UserFilterSegmentPreferenceScalarFieldEnum[];
};

/**
 * UserFilterSegmentPreference create
 */
export type UserFilterSegmentPreferenceCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * The data needed to create a UserFilterSegmentPreference.
   */
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceCreateInput,
    Prisma.UserFilterSegmentPreferenceUncheckedCreateInput
  >;
};

/**
 * UserFilterSegmentPreference createMany
 */
export type UserFilterSegmentPreferenceCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many UserFilterSegmentPreferences.
   */
  data:
    | Prisma.UserFilterSegmentPreferenceCreateManyInput
    | Prisma.UserFilterSegmentPreferenceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * UserFilterSegmentPreference createManyAndReturn
 */
export type UserFilterSegmentPreferenceCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * The data used to create many UserFilterSegmentPreferences.
   */
  data:
    | Prisma.UserFilterSegmentPreferenceCreateManyInput
    | Prisma.UserFilterSegmentPreferenceCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * UserFilterSegmentPreference update
 */
export type UserFilterSegmentPreferenceUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * The data needed to update a UserFilterSegmentPreference.
   */
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateInput
  >;
  /**
   * Choose, which UserFilterSegmentPreference to update.
   */
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
};

/**
 * UserFilterSegmentPreference updateMany
 */
export type UserFilterSegmentPreferenceUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update UserFilterSegmentPreferences.
   */
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateManyMutationInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserFilterSegmentPreferences to update
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * Limit how many UserFilterSegmentPreferences to update.
   */
  limit?: number;
};

/**
 * UserFilterSegmentPreference updateManyAndReturn
 */
export type UserFilterSegmentPreferenceUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * The data used to update UserFilterSegmentPreferences.
   */
  data: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateManyMutationInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateManyInput
  >;
  /**
   * Filter which UserFilterSegmentPreferences to update
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * Limit how many UserFilterSegmentPreferences to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * UserFilterSegmentPreference upsert
 */
export type UserFilterSegmentPreferenceUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * The filter to search for the UserFilterSegmentPreference to update in case it exists.
   */
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
  /**
   * In case the UserFilterSegmentPreference found by the `where` argument doesn't exist, create a new UserFilterSegmentPreference with this data.
   */
  create: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceCreateInput,
    Prisma.UserFilterSegmentPreferenceUncheckedCreateInput
  >;
  /**
   * In case the UserFilterSegmentPreference was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.UserFilterSegmentPreferenceUpdateInput,
    Prisma.UserFilterSegmentPreferenceUncheckedUpdateInput
  >;
};

/**
 * UserFilterSegmentPreference delete
 */
export type UserFilterSegmentPreferenceDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
  /**
   * Filter which UserFilterSegmentPreference to delete.
   */
  where: Prisma.UserFilterSegmentPreferenceWhereUniqueInput;
};

/**
 * UserFilterSegmentPreference deleteMany
 */
export type UserFilterSegmentPreferenceDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which UserFilterSegmentPreferences to delete
   */
  where?: Prisma.UserFilterSegmentPreferenceWhereInput;
  /**
   * Limit how many UserFilterSegmentPreferences to delete.
   */
  limit?: number;
};

/**
 * UserFilterSegmentPreference.segment
 */
export type UserFilterSegmentPreference$segmentArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the FilterSegment
   */
  select?: Prisma.FilterSegmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FilterSegment
   */
  omit?: Prisma.FilterSegmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FilterSegmentInclude<ExtArgs> | null;
  where?: Prisma.FilterSegmentWhereInput;
};

/**
 * UserFilterSegmentPreference without action
 */
export type UserFilterSegmentPreferenceDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFilterSegmentPreference
   */
  select?: Prisma.UserFilterSegmentPreferenceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFilterSegmentPreference
   */
  omit?: Prisma.UserFilterSegmentPreferenceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFilterSegmentPreferenceInclude<ExtArgs> | null;
};
