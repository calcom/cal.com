/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `CalendarCacheEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CalendarCacheEvent
 *
 */
export type CalendarCacheEventModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CalendarCacheEventPayload>;

export type AggregateCalendarCacheEvent = {
  _count: CalendarCacheEventCountAggregateOutputType | null;
  _avg: CalendarCacheEventAvgAggregateOutputType | null;
  _sum: CalendarCacheEventSumAggregateOutputType | null;
  _min: CalendarCacheEventMinAggregateOutputType | null;
  _max: CalendarCacheEventMaxAggregateOutputType | null;
};

export type CalendarCacheEventAvgAggregateOutputType = {
  iCalSequence: number | null;
};

export type CalendarCacheEventSumAggregateOutputType = {
  iCalSequence: number | null;
};

export type CalendarCacheEventMinAggregateOutputType = {
  id: string | null;
  selectedCalendarId: string | null;
  externalId: string | null;
  externalEtag: string | null;
  iCalUID: string | null;
  iCalSequence: number | null;
  summary: string | null;
  description: string | null;
  location: string | null;
  start: Date | null;
  end: Date | null;
  isAllDay: boolean | null;
  timeZone: string | null;
  status: $Enums.CalendarCacheEventStatus | null;
  recurringEventId: string | null;
  originalStartTime: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  externalCreatedAt: Date | null;
  externalUpdatedAt: Date | null;
};

export type CalendarCacheEventMaxAggregateOutputType = {
  id: string | null;
  selectedCalendarId: string | null;
  externalId: string | null;
  externalEtag: string | null;
  iCalUID: string | null;
  iCalSequence: number | null;
  summary: string | null;
  description: string | null;
  location: string | null;
  start: Date | null;
  end: Date | null;
  isAllDay: boolean | null;
  timeZone: string | null;
  status: $Enums.CalendarCacheEventStatus | null;
  recurringEventId: string | null;
  originalStartTime: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  externalCreatedAt: Date | null;
  externalUpdatedAt: Date | null;
};

export type CalendarCacheEventCountAggregateOutputType = {
  id: number;
  selectedCalendarId: number;
  externalId: number;
  externalEtag: number;
  iCalUID: number;
  iCalSequence: number;
  summary: number;
  description: number;
  location: number;
  start: number;
  end: number;
  isAllDay: number;
  timeZone: number;
  status: number;
  recurringEventId: number;
  originalStartTime: number;
  createdAt: number;
  updatedAt: number;
  externalCreatedAt: number;
  externalUpdatedAt: number;
  _all: number;
};

export type CalendarCacheEventAvgAggregateInputType = {
  iCalSequence?: true;
};

export type CalendarCacheEventSumAggregateInputType = {
  iCalSequence?: true;
};

export type CalendarCacheEventMinAggregateInputType = {
  id?: true;
  selectedCalendarId?: true;
  externalId?: true;
  externalEtag?: true;
  iCalUID?: true;
  iCalSequence?: true;
  summary?: true;
  description?: true;
  location?: true;
  start?: true;
  end?: true;
  isAllDay?: true;
  timeZone?: true;
  status?: true;
  recurringEventId?: true;
  originalStartTime?: true;
  createdAt?: true;
  updatedAt?: true;
  externalCreatedAt?: true;
  externalUpdatedAt?: true;
};

export type CalendarCacheEventMaxAggregateInputType = {
  id?: true;
  selectedCalendarId?: true;
  externalId?: true;
  externalEtag?: true;
  iCalUID?: true;
  iCalSequence?: true;
  summary?: true;
  description?: true;
  location?: true;
  start?: true;
  end?: true;
  isAllDay?: true;
  timeZone?: true;
  status?: true;
  recurringEventId?: true;
  originalStartTime?: true;
  createdAt?: true;
  updatedAt?: true;
  externalCreatedAt?: true;
  externalUpdatedAt?: true;
};

export type CalendarCacheEventCountAggregateInputType = {
  id?: true;
  selectedCalendarId?: true;
  externalId?: true;
  externalEtag?: true;
  iCalUID?: true;
  iCalSequence?: true;
  summary?: true;
  description?: true;
  location?: true;
  start?: true;
  end?: true;
  isAllDay?: true;
  timeZone?: true;
  status?: true;
  recurringEventId?: true;
  originalStartTime?: true;
  createdAt?: true;
  updatedAt?: true;
  externalCreatedAt?: true;
  externalUpdatedAt?: true;
  _all?: true;
};

export type CalendarCacheEventAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CalendarCacheEvent to aggregate.
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCacheEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarCacheEventOrderByWithRelationInput
    | Prisma.CalendarCacheEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CalendarCacheEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCacheEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCacheEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CalendarCacheEvents
   **/
  _count?: true | CalendarCacheEventCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CalendarCacheEventAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CalendarCacheEventSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CalendarCacheEventMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CalendarCacheEventMaxAggregateInputType;
};

export type GetCalendarCacheEventAggregateType<T extends CalendarCacheEventAggregateArgs> = {
  [P in keyof T & keyof AggregateCalendarCacheEvent]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCalendarCacheEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateCalendarCacheEvent[P]>;
};

export type CalendarCacheEventGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CalendarCacheEventWhereInput;
  orderBy?:
    | Prisma.CalendarCacheEventOrderByWithAggregationInput
    | Prisma.CalendarCacheEventOrderByWithAggregationInput[];
  by: Prisma.CalendarCacheEventScalarFieldEnum[] | Prisma.CalendarCacheEventScalarFieldEnum;
  having?: Prisma.CalendarCacheEventScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CalendarCacheEventCountAggregateInputType | true;
  _avg?: CalendarCacheEventAvgAggregateInputType;
  _sum?: CalendarCacheEventSumAggregateInputType;
  _min?: CalendarCacheEventMinAggregateInputType;
  _max?: CalendarCacheEventMaxAggregateInputType;
};

export type CalendarCacheEventGroupByOutputType = {
  id: string;
  selectedCalendarId: string;
  externalId: string;
  externalEtag: string;
  iCalUID: string | null;
  iCalSequence: number;
  summary: string | null;
  description: string | null;
  location: string | null;
  start: Date;
  end: Date;
  isAllDay: boolean;
  timeZone: string | null;
  status: $Enums.CalendarCacheEventStatus;
  recurringEventId: string | null;
  originalStartTime: Date | null;
  createdAt: Date;
  updatedAt: Date;
  externalCreatedAt: Date | null;
  externalUpdatedAt: Date | null;
  _count: CalendarCacheEventCountAggregateOutputType | null;
  _avg: CalendarCacheEventAvgAggregateOutputType | null;
  _sum: CalendarCacheEventSumAggregateOutputType | null;
  _min: CalendarCacheEventMinAggregateOutputType | null;
  _max: CalendarCacheEventMaxAggregateOutputType | null;
};

type GetCalendarCacheEventGroupByPayload<T extends CalendarCacheEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CalendarCacheEventGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof CalendarCacheEventGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], CalendarCacheEventGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], CalendarCacheEventGroupByOutputType[P]>;
    }
  >
>;

export type CalendarCacheEventWhereInput = {
  AND?: Prisma.CalendarCacheEventWhereInput | Prisma.CalendarCacheEventWhereInput[];
  OR?: Prisma.CalendarCacheEventWhereInput[];
  NOT?: Prisma.CalendarCacheEventWhereInput | Prisma.CalendarCacheEventWhereInput[];
  id?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  selectedCalendarId?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  externalId?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  externalEtag?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  iCalUID?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  iCalSequence?: Prisma.IntFilter<"CalendarCacheEvent"> | number;
  summary?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  description?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  location?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  start?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  end?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  isAllDay?: Prisma.BoolFilter<"CalendarCacheEvent"> | boolean;
  timeZone?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFilter<"CalendarCacheEvent"> | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  originalStartTime?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  externalCreatedAt?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
  externalUpdatedAt?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
  selectedCalendar?: Prisma.XOR<
    Prisma.SelectedCalendarScalarRelationFilter,
    Prisma.SelectedCalendarWhereInput
  >;
};

export type CalendarCacheEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  selectedCalendarId?: Prisma.SortOrder;
  externalId?: Prisma.SortOrder;
  externalEtag?: Prisma.SortOrder;
  iCalUID?: Prisma.SortOrderInput | Prisma.SortOrder;
  iCalSequence?: Prisma.SortOrder;
  summary?: Prisma.SortOrderInput | Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  isAllDay?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  recurringEventId?: Prisma.SortOrderInput | Prisma.SortOrder;
  originalStartTime?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  externalCreatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  externalUpdatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  selectedCalendar?: Prisma.SelectedCalendarOrderByWithRelationInput;
};

export type CalendarCacheEventWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    selectedCalendarId_externalId?: Prisma.CalendarCacheEventSelectedCalendarIdExternalIdCompoundUniqueInput;
    AND?: Prisma.CalendarCacheEventWhereInput | Prisma.CalendarCacheEventWhereInput[];
    OR?: Prisma.CalendarCacheEventWhereInput[];
    NOT?: Prisma.CalendarCacheEventWhereInput | Prisma.CalendarCacheEventWhereInput[];
    selectedCalendarId?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
    externalId?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
    externalEtag?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
    iCalUID?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
    iCalSequence?: Prisma.IntFilter<"CalendarCacheEvent"> | number;
    summary?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
    description?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
    location?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
    start?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
    end?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
    isAllDay?: Prisma.BoolFilter<"CalendarCacheEvent"> | boolean;
    timeZone?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
    status?:
      | Prisma.EnumCalendarCacheEventStatusFilter<"CalendarCacheEvent">
      | $Enums.CalendarCacheEventStatus;
    recurringEventId?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
    originalStartTime?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
    createdAt?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
    externalCreatedAt?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
    externalUpdatedAt?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
    selectedCalendar?: Prisma.XOR<
      Prisma.SelectedCalendarScalarRelationFilter,
      Prisma.SelectedCalendarWhereInput
    >;
  },
  "id" | "selectedCalendarId_externalId"
>;

export type CalendarCacheEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  selectedCalendarId?: Prisma.SortOrder;
  externalId?: Prisma.SortOrder;
  externalEtag?: Prisma.SortOrder;
  iCalUID?: Prisma.SortOrderInput | Prisma.SortOrder;
  iCalSequence?: Prisma.SortOrder;
  summary?: Prisma.SortOrderInput | Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  isAllDay?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrderInput | Prisma.SortOrder;
  status?: Prisma.SortOrder;
  recurringEventId?: Prisma.SortOrderInput | Prisma.SortOrder;
  originalStartTime?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  externalCreatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  externalUpdatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CalendarCacheEventCountOrderByAggregateInput;
  _avg?: Prisma.CalendarCacheEventAvgOrderByAggregateInput;
  _max?: Prisma.CalendarCacheEventMaxOrderByAggregateInput;
  _min?: Prisma.CalendarCacheEventMinOrderByAggregateInput;
  _sum?: Prisma.CalendarCacheEventSumOrderByAggregateInput;
};

export type CalendarCacheEventScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CalendarCacheEventScalarWhereWithAggregatesInput
    | Prisma.CalendarCacheEventScalarWhereWithAggregatesInput[];
  OR?: Prisma.CalendarCacheEventScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CalendarCacheEventScalarWhereWithAggregatesInput
    | Prisma.CalendarCacheEventScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"CalendarCacheEvent"> | string;
  selectedCalendarId?: Prisma.StringWithAggregatesFilter<"CalendarCacheEvent"> | string;
  externalId?: Prisma.StringWithAggregatesFilter<"CalendarCacheEvent"> | string;
  externalEtag?: Prisma.StringWithAggregatesFilter<"CalendarCacheEvent"> | string;
  iCalUID?: Prisma.StringNullableWithAggregatesFilter<"CalendarCacheEvent"> | string | null;
  iCalSequence?: Prisma.IntWithAggregatesFilter<"CalendarCacheEvent"> | number;
  summary?: Prisma.StringNullableWithAggregatesFilter<"CalendarCacheEvent"> | string | null;
  description?: Prisma.StringNullableWithAggregatesFilter<"CalendarCacheEvent"> | string | null;
  location?: Prisma.StringNullableWithAggregatesFilter<"CalendarCacheEvent"> | string | null;
  start?: Prisma.DateTimeWithAggregatesFilter<"CalendarCacheEvent"> | Date | string;
  end?: Prisma.DateTimeWithAggregatesFilter<"CalendarCacheEvent"> | Date | string;
  isAllDay?: Prisma.BoolWithAggregatesFilter<"CalendarCacheEvent"> | boolean;
  timeZone?: Prisma.StringNullableWithAggregatesFilter<"CalendarCacheEvent"> | string | null;
  status?:
    | Prisma.EnumCalendarCacheEventStatusWithAggregatesFilter<"CalendarCacheEvent">
    | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.StringNullableWithAggregatesFilter<"CalendarCacheEvent"> | string | null;
  originalStartTime?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"CalendarCacheEvent">
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CalendarCacheEvent"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CalendarCacheEvent"> | Date | string;
  externalCreatedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"CalendarCacheEvent">
    | Date
    | string
    | null;
  externalUpdatedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"CalendarCacheEvent">
    | Date
    | string
    | null;
};

export type CalendarCacheEventCreateInput = {
  id?: string;
  externalId: string;
  externalEtag: string;
  iCalUID?: string | null;
  iCalSequence?: number;
  summary?: string | null;
  description?: string | null;
  location?: string | null;
  start: Date | string;
  end: Date | string;
  isAllDay?: boolean;
  timeZone?: string | null;
  status?: $Enums.CalendarCacheEventStatus;
  recurringEventId?: string | null;
  originalStartTime?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  externalCreatedAt?: Date | string | null;
  externalUpdatedAt?: Date | string | null;
  selectedCalendar: Prisma.SelectedCalendarCreateNestedOneWithoutCalendarCacheEventsInput;
};

export type CalendarCacheEventUncheckedCreateInput = {
  id?: string;
  selectedCalendarId: string;
  externalId: string;
  externalEtag: string;
  iCalUID?: string | null;
  iCalSequence?: number;
  summary?: string | null;
  description?: string | null;
  location?: string | null;
  start: Date | string;
  end: Date | string;
  isAllDay?: boolean;
  timeZone?: string | null;
  status?: $Enums.CalendarCacheEventStatus;
  recurringEventId?: string | null;
  originalStartTime?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  externalCreatedAt?: Date | string | null;
  externalUpdatedAt?: Date | string | null;
};

export type CalendarCacheEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  selectedCalendar?: Prisma.SelectedCalendarUpdateOneRequiredWithoutCalendarCacheEventsNestedInput;
};

export type CalendarCacheEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  selectedCalendarId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CalendarCacheEventCreateManyInput = {
  id?: string;
  selectedCalendarId: string;
  externalId: string;
  externalEtag: string;
  iCalUID?: string | null;
  iCalSequence?: number;
  summary?: string | null;
  description?: string | null;
  location?: string | null;
  start: Date | string;
  end: Date | string;
  isAllDay?: boolean;
  timeZone?: string | null;
  status?: $Enums.CalendarCacheEventStatus;
  recurringEventId?: string | null;
  originalStartTime?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  externalCreatedAt?: Date | string | null;
  externalUpdatedAt?: Date | string | null;
};

export type CalendarCacheEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CalendarCacheEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  selectedCalendarId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CalendarCacheEventListRelationFilter = {
  every?: Prisma.CalendarCacheEventWhereInput;
  some?: Prisma.CalendarCacheEventWhereInput;
  none?: Prisma.CalendarCacheEventWhereInput;
};

export type CalendarCacheEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CalendarCacheEventSelectedCalendarIdExternalIdCompoundUniqueInput = {
  selectedCalendarId: string;
  externalId: string;
};

export type CalendarCacheEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  selectedCalendarId?: Prisma.SortOrder;
  externalId?: Prisma.SortOrder;
  externalEtag?: Prisma.SortOrder;
  iCalUID?: Prisma.SortOrder;
  iCalSequence?: Prisma.SortOrder;
  summary?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  isAllDay?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  recurringEventId?: Prisma.SortOrder;
  originalStartTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  externalCreatedAt?: Prisma.SortOrder;
  externalUpdatedAt?: Prisma.SortOrder;
};

export type CalendarCacheEventAvgOrderByAggregateInput = {
  iCalSequence?: Prisma.SortOrder;
};

export type CalendarCacheEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  selectedCalendarId?: Prisma.SortOrder;
  externalId?: Prisma.SortOrder;
  externalEtag?: Prisma.SortOrder;
  iCalUID?: Prisma.SortOrder;
  iCalSequence?: Prisma.SortOrder;
  summary?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  isAllDay?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  recurringEventId?: Prisma.SortOrder;
  originalStartTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  externalCreatedAt?: Prisma.SortOrder;
  externalUpdatedAt?: Prisma.SortOrder;
};

export type CalendarCacheEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  selectedCalendarId?: Prisma.SortOrder;
  externalId?: Prisma.SortOrder;
  externalEtag?: Prisma.SortOrder;
  iCalUID?: Prisma.SortOrder;
  iCalSequence?: Prisma.SortOrder;
  summary?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  isAllDay?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  recurringEventId?: Prisma.SortOrder;
  originalStartTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  externalCreatedAt?: Prisma.SortOrder;
  externalUpdatedAt?: Prisma.SortOrder;
};

export type CalendarCacheEventSumOrderByAggregateInput = {
  iCalSequence?: Prisma.SortOrder;
};

export type CalendarCacheEventCreateNestedManyWithoutSelectedCalendarInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput,
        Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput
      >
    | Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput[]
    | Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput[];
  createMany?: Prisma.CalendarCacheEventCreateManySelectedCalendarInputEnvelope;
  connect?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
};

export type CalendarCacheEventUncheckedCreateNestedManyWithoutSelectedCalendarInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput,
        Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput
      >
    | Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput[]
    | Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput[];
  createMany?: Prisma.CalendarCacheEventCreateManySelectedCalendarInputEnvelope;
  connect?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
};

export type CalendarCacheEventUpdateManyWithoutSelectedCalendarNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput,
        Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput
      >
    | Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput[]
    | Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput[];
  upsert?:
    | Prisma.CalendarCacheEventUpsertWithWhereUniqueWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventUpsertWithWhereUniqueWithoutSelectedCalendarInput[];
  createMany?: Prisma.CalendarCacheEventCreateManySelectedCalendarInputEnvelope;
  set?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  disconnect?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  delete?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  connect?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  update?:
    | Prisma.CalendarCacheEventUpdateWithWhereUniqueWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventUpdateWithWhereUniqueWithoutSelectedCalendarInput[];
  updateMany?:
    | Prisma.CalendarCacheEventUpdateManyWithWhereWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventUpdateManyWithWhereWithoutSelectedCalendarInput[];
  deleteMany?: Prisma.CalendarCacheEventScalarWhereInput | Prisma.CalendarCacheEventScalarWhereInput[];
};

export type CalendarCacheEventUncheckedUpdateManyWithoutSelectedCalendarNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput,
        Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput
      >
    | Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput[]
    | Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput[];
  connectOrCreate?:
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput[];
  upsert?:
    | Prisma.CalendarCacheEventUpsertWithWhereUniqueWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventUpsertWithWhereUniqueWithoutSelectedCalendarInput[];
  createMany?: Prisma.CalendarCacheEventCreateManySelectedCalendarInputEnvelope;
  set?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  disconnect?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  delete?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  connect?: Prisma.CalendarCacheEventWhereUniqueInput | Prisma.CalendarCacheEventWhereUniqueInput[];
  update?:
    | Prisma.CalendarCacheEventUpdateWithWhereUniqueWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventUpdateWithWhereUniqueWithoutSelectedCalendarInput[];
  updateMany?:
    | Prisma.CalendarCacheEventUpdateManyWithWhereWithoutSelectedCalendarInput
    | Prisma.CalendarCacheEventUpdateManyWithWhereWithoutSelectedCalendarInput[];
  deleteMany?: Prisma.CalendarCacheEventScalarWhereInput | Prisma.CalendarCacheEventScalarWhereInput[];
};

export type EnumCalendarCacheEventStatusFieldUpdateOperationsInput = {
  set?: $Enums.CalendarCacheEventStatus;
};

export type CalendarCacheEventCreateWithoutSelectedCalendarInput = {
  id?: string;
  externalId: string;
  externalEtag: string;
  iCalUID?: string | null;
  iCalSequence?: number;
  summary?: string | null;
  description?: string | null;
  location?: string | null;
  start: Date | string;
  end: Date | string;
  isAllDay?: boolean;
  timeZone?: string | null;
  status?: $Enums.CalendarCacheEventStatus;
  recurringEventId?: string | null;
  originalStartTime?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  externalCreatedAt?: Date | string | null;
  externalUpdatedAt?: Date | string | null;
};

export type CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput = {
  id?: string;
  externalId: string;
  externalEtag: string;
  iCalUID?: string | null;
  iCalSequence?: number;
  summary?: string | null;
  description?: string | null;
  location?: string | null;
  start: Date | string;
  end: Date | string;
  isAllDay?: boolean;
  timeZone?: string | null;
  status?: $Enums.CalendarCacheEventStatus;
  recurringEventId?: string | null;
  originalStartTime?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  externalCreatedAt?: Date | string | null;
  externalUpdatedAt?: Date | string | null;
};

export type CalendarCacheEventCreateOrConnectWithoutSelectedCalendarInput = {
  where: Prisma.CalendarCacheEventWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput,
    Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput
  >;
};

export type CalendarCacheEventCreateManySelectedCalendarInputEnvelope = {
  data:
    | Prisma.CalendarCacheEventCreateManySelectedCalendarInput
    | Prisma.CalendarCacheEventCreateManySelectedCalendarInput[];
  skipDuplicates?: boolean;
};

export type CalendarCacheEventUpsertWithWhereUniqueWithoutSelectedCalendarInput = {
  where: Prisma.CalendarCacheEventWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CalendarCacheEventUpdateWithoutSelectedCalendarInput,
    Prisma.CalendarCacheEventUncheckedUpdateWithoutSelectedCalendarInput
  >;
  create: Prisma.XOR<
    Prisma.CalendarCacheEventCreateWithoutSelectedCalendarInput,
    Prisma.CalendarCacheEventUncheckedCreateWithoutSelectedCalendarInput
  >;
};

export type CalendarCacheEventUpdateWithWhereUniqueWithoutSelectedCalendarInput = {
  where: Prisma.CalendarCacheEventWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CalendarCacheEventUpdateWithoutSelectedCalendarInput,
    Prisma.CalendarCacheEventUncheckedUpdateWithoutSelectedCalendarInput
  >;
};

export type CalendarCacheEventUpdateManyWithWhereWithoutSelectedCalendarInput = {
  where: Prisma.CalendarCacheEventScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CalendarCacheEventUpdateManyMutationInput,
    Prisma.CalendarCacheEventUncheckedUpdateManyWithoutSelectedCalendarInput
  >;
};

export type CalendarCacheEventScalarWhereInput = {
  AND?: Prisma.CalendarCacheEventScalarWhereInput | Prisma.CalendarCacheEventScalarWhereInput[];
  OR?: Prisma.CalendarCacheEventScalarWhereInput[];
  NOT?: Prisma.CalendarCacheEventScalarWhereInput | Prisma.CalendarCacheEventScalarWhereInput[];
  id?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  selectedCalendarId?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  externalId?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  externalEtag?: Prisma.StringFilter<"CalendarCacheEvent"> | string;
  iCalUID?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  iCalSequence?: Prisma.IntFilter<"CalendarCacheEvent"> | number;
  summary?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  description?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  location?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  start?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  end?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  isAllDay?: Prisma.BoolFilter<"CalendarCacheEvent"> | boolean;
  timeZone?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFilter<"CalendarCacheEvent"> | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.StringNullableFilter<"CalendarCacheEvent"> | string | null;
  originalStartTime?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"CalendarCacheEvent"> | Date | string;
  externalCreatedAt?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
  externalUpdatedAt?: Prisma.DateTimeNullableFilter<"CalendarCacheEvent"> | Date | string | null;
};

export type CalendarCacheEventCreateManySelectedCalendarInput = {
  id?: string;
  externalId: string;
  externalEtag: string;
  iCalUID?: string | null;
  iCalSequence?: number;
  summary?: string | null;
  description?: string | null;
  location?: string | null;
  start: Date | string;
  end: Date | string;
  isAllDay?: boolean;
  timeZone?: string | null;
  status?: $Enums.CalendarCacheEventStatus;
  recurringEventId?: string | null;
  originalStartTime?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  externalCreatedAt?: Date | string | null;
  externalUpdatedAt?: Date | string | null;
};

export type CalendarCacheEventUpdateWithoutSelectedCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CalendarCacheEventUncheckedUpdateWithoutSelectedCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CalendarCacheEventUncheckedUpdateManyWithoutSelectedCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  externalId?: Prisma.StringFieldUpdateOperationsInput | string;
  externalEtag?: Prisma.StringFieldUpdateOperationsInput | string;
  iCalUID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  iCalSequence?: Prisma.IntFieldUpdateOperationsInput | number;
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isAllDay?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  timeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  status?: Prisma.EnumCalendarCacheEventStatusFieldUpdateOperationsInput | $Enums.CalendarCacheEventStatus;
  recurringEventId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  originalStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  externalCreatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  externalUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CalendarCacheEventSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    selectedCalendarId?: boolean;
    externalId?: boolean;
    externalEtag?: boolean;
    iCalUID?: boolean;
    iCalSequence?: boolean;
    summary?: boolean;
    description?: boolean;
    location?: boolean;
    start?: boolean;
    end?: boolean;
    isAllDay?: boolean;
    timeZone?: boolean;
    status?: boolean;
    recurringEventId?: boolean;
    originalStartTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    externalCreatedAt?: boolean;
    externalUpdatedAt?: boolean;
    selectedCalendar?: boolean | Prisma.SelectedCalendarDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarCacheEvent"]
>;

export type CalendarCacheEventSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    selectedCalendarId?: boolean;
    externalId?: boolean;
    externalEtag?: boolean;
    iCalUID?: boolean;
    iCalSequence?: boolean;
    summary?: boolean;
    description?: boolean;
    location?: boolean;
    start?: boolean;
    end?: boolean;
    isAllDay?: boolean;
    timeZone?: boolean;
    status?: boolean;
    recurringEventId?: boolean;
    originalStartTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    externalCreatedAt?: boolean;
    externalUpdatedAt?: boolean;
    selectedCalendar?: boolean | Prisma.SelectedCalendarDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarCacheEvent"]
>;

export type CalendarCacheEventSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    selectedCalendarId?: boolean;
    externalId?: boolean;
    externalEtag?: boolean;
    iCalUID?: boolean;
    iCalSequence?: boolean;
    summary?: boolean;
    description?: boolean;
    location?: boolean;
    start?: boolean;
    end?: boolean;
    isAllDay?: boolean;
    timeZone?: boolean;
    status?: boolean;
    recurringEventId?: boolean;
    originalStartTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    externalCreatedAt?: boolean;
    externalUpdatedAt?: boolean;
    selectedCalendar?: boolean | Prisma.SelectedCalendarDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["calendarCacheEvent"]
>;

export type CalendarCacheEventSelectScalar = {
  id?: boolean;
  selectedCalendarId?: boolean;
  externalId?: boolean;
  externalEtag?: boolean;
  iCalUID?: boolean;
  iCalSequence?: boolean;
  summary?: boolean;
  description?: boolean;
  location?: boolean;
  start?: boolean;
  end?: boolean;
  isAllDay?: boolean;
  timeZone?: boolean;
  status?: boolean;
  recurringEventId?: boolean;
  originalStartTime?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  externalCreatedAt?: boolean;
  externalUpdatedAt?: boolean;
};

export type CalendarCacheEventOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "selectedCalendarId"
  | "externalId"
  | "externalEtag"
  | "iCalUID"
  | "iCalSequence"
  | "summary"
  | "description"
  | "location"
  | "start"
  | "end"
  | "isAllDay"
  | "timeZone"
  | "status"
  | "recurringEventId"
  | "originalStartTime"
  | "createdAt"
  | "updatedAt"
  | "externalCreatedAt"
  | "externalUpdatedAt",
  ExtArgs["result"]["calendarCacheEvent"]
>;
export type CalendarCacheEventInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  selectedCalendar?: boolean | Prisma.SelectedCalendarDefaultArgs<ExtArgs>;
};
export type CalendarCacheEventIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  selectedCalendar?: boolean | Prisma.SelectedCalendarDefaultArgs<ExtArgs>;
};
export type CalendarCacheEventIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  selectedCalendar?: boolean | Prisma.SelectedCalendarDefaultArgs<ExtArgs>;
};

export type $CalendarCacheEventPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "CalendarCacheEvent";
  objects: {
    selectedCalendar: Prisma.$SelectedCalendarPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      selectedCalendarId: string;
      externalId: string;
      externalEtag: string;
      iCalUID: string | null;
      iCalSequence: number;
      summary: string | null;
      description: string | null;
      location: string | null;
      start: Date;
      end: Date;
      isAllDay: boolean;
      timeZone: string | null;
      status: $Enums.CalendarCacheEventStatus;
      recurringEventId: string | null;
      originalStartTime: Date | null;
      createdAt: Date;
      updatedAt: Date;
      externalCreatedAt: Date | null;
      externalUpdatedAt: Date | null;
    },
    ExtArgs["result"]["calendarCacheEvent"]
  >;
  composites: {};
};

export type CalendarCacheEventGetPayload<
  S extends boolean | null | undefined | CalendarCacheEventDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$CalendarCacheEventPayload, S>;

export type CalendarCacheEventCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<CalendarCacheEventFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: CalendarCacheEventCountAggregateInputType | true;
};

export interface CalendarCacheEventDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["CalendarCacheEvent"];
    meta: { name: "CalendarCacheEvent" };
  };
  /**
   * Find zero or one CalendarCacheEvent that matches the filter.
   * @param {CalendarCacheEventFindUniqueArgs} args - Arguments to find a CalendarCacheEvent
   * @example
   * // Get one CalendarCacheEvent
   * const calendarCacheEvent = await prisma.calendarCacheEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CalendarCacheEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CalendarCacheEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CalendarCacheEventFindUniqueOrThrowArgs} args - Arguments to find a CalendarCacheEvent
   * @example
   * // Get one CalendarCacheEvent
   * const calendarCacheEvent = await prisma.calendarCacheEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CalendarCacheEventFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarCacheEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventFindFirstArgs} args - Arguments to find a CalendarCacheEvent
   * @example
   * // Get one CalendarCacheEvent
   * const calendarCacheEvent = await prisma.calendarCacheEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CalendarCacheEventFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheEventFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CalendarCacheEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventFindFirstOrThrowArgs} args - Arguments to find a CalendarCacheEvent
   * @example
   * // Get one CalendarCacheEvent
   * const calendarCacheEvent = await prisma.calendarCacheEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CalendarCacheEventFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheEventFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CalendarCacheEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CalendarCacheEvents
   * const calendarCacheEvents = await prisma.calendarCacheEvent.findMany()
   *
   * // Get first 10 CalendarCacheEvents
   * const calendarCacheEvents = await prisma.calendarCacheEvent.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const calendarCacheEventWithIdOnly = await prisma.calendarCacheEvent.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CalendarCacheEventFindManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheEventFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CalendarCacheEvent.
   * @param {CalendarCacheEventCreateArgs} args - Arguments to create a CalendarCacheEvent.
   * @example
   * // Create one CalendarCacheEvent
   * const CalendarCacheEvent = await prisma.calendarCacheEvent.create({
   *   data: {
   *     // ... data to create a CalendarCacheEvent
   *   }
   * })
   *
   */
  create<T extends CalendarCacheEventCreateArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventCreateArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CalendarCacheEvents.
   * @param {CalendarCacheEventCreateManyArgs} args - Arguments to create many CalendarCacheEvents.
   * @example
   * // Create many CalendarCacheEvents
   * const calendarCacheEvent = await prisma.calendarCacheEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CalendarCacheEventCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheEventCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CalendarCacheEvents and returns the data saved in the database.
   * @param {CalendarCacheEventCreateManyAndReturnArgs} args - Arguments to create many CalendarCacheEvents.
   * @example
   * // Create many CalendarCacheEvents
   * const calendarCacheEvent = await prisma.calendarCacheEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CalendarCacheEvents and only return the `id`
   * const calendarCacheEventWithIdOnly = await prisma.calendarCacheEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CalendarCacheEventCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheEventCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CalendarCacheEvent.
   * @param {CalendarCacheEventDeleteArgs} args - Arguments to delete one CalendarCacheEvent.
   * @example
   * // Delete one CalendarCacheEvent
   * const CalendarCacheEvent = await prisma.calendarCacheEvent.delete({
   *   where: {
   *     // ... filter to delete one CalendarCacheEvent
   *   }
   * })
   *
   */
  delete<T extends CalendarCacheEventDeleteArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CalendarCacheEvent.
   * @param {CalendarCacheEventUpdateArgs} args - Arguments to update one CalendarCacheEvent.
   * @example
   * // Update one CalendarCacheEvent
   * const calendarCacheEvent = await prisma.calendarCacheEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CalendarCacheEventUpdateArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CalendarCacheEvents.
   * @param {CalendarCacheEventDeleteManyArgs} args - Arguments to filter CalendarCacheEvents to delete.
   * @example
   * // Delete a few CalendarCacheEvents
   * const { count } = await prisma.calendarCacheEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CalendarCacheEventDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CalendarCacheEventDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarCacheEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CalendarCacheEvents
   * const calendarCacheEvent = await prisma.calendarCacheEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CalendarCacheEventUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CalendarCacheEvents and returns the data updated in the database.
   * @param {CalendarCacheEventUpdateManyAndReturnArgs} args - Arguments to update many CalendarCacheEvents.
   * @example
   * // Update many CalendarCacheEvents
   * const calendarCacheEvent = await prisma.calendarCacheEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CalendarCacheEvents and only return the `id`
   * const calendarCacheEventWithIdOnly = await prisma.calendarCacheEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CalendarCacheEventUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CalendarCacheEvent.
   * @param {CalendarCacheEventUpsertArgs} args - Arguments to update or create a CalendarCacheEvent.
   * @example
   * // Update or create a CalendarCacheEvent
   * const calendarCacheEvent = await prisma.calendarCacheEvent.upsert({
   *   create: {
   *     // ... data to create a CalendarCacheEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CalendarCacheEvent we want to update
   *   }
   * })
   */
  upsert<T extends CalendarCacheEventUpsertArgs>(
    args: Prisma.SelectSubset<T, CalendarCacheEventUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__CalendarCacheEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$CalendarCacheEventPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CalendarCacheEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventCountArgs} args - Arguments to filter CalendarCacheEvents to count.
   * @example
   * // Count the number of CalendarCacheEvents
   * const count = await prisma.calendarCacheEvent.count({
   *   where: {
   *     // ... the filter for the CalendarCacheEvents we want to count
   *   }
   * })
   **/
  count<T extends CalendarCacheEventCountArgs>(
    args?: Prisma.Subset<T, CalendarCacheEventCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], CalendarCacheEventCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CalendarCacheEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CalendarCacheEventAggregateArgs>(
    args: Prisma.Subset<T, CalendarCacheEventAggregateArgs>
  ): Prisma.PrismaPromise<GetCalendarCacheEventAggregateType<T>>;

  /**
   * Group by CalendarCacheEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCacheEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CalendarCacheEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CalendarCacheEventGroupByArgs["orderBy"] }
      : { orderBy?: CalendarCacheEventGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, CalendarCacheEventGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetCalendarCacheEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CalendarCacheEvent model
   */
  readonly fields: CalendarCacheEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CalendarCacheEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CalendarCacheEventClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  selectedCalendar<T extends Prisma.SelectedCalendarDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SelectedCalendarDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__SelectedCalendarClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SelectedCalendarPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CalendarCacheEvent model
 */
export interface CalendarCacheEventFieldRefs {
  readonly id: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly selectedCalendarId: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly externalId: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly externalEtag: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly iCalUID: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly iCalSequence: Prisma.FieldRef<"CalendarCacheEvent", "Int">;
  readonly summary: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly description: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly location: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly start: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
  readonly end: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
  readonly isAllDay: Prisma.FieldRef<"CalendarCacheEvent", "Boolean">;
  readonly timeZone: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly status: Prisma.FieldRef<"CalendarCacheEvent", "CalendarCacheEventStatus">;
  readonly recurringEventId: Prisma.FieldRef<"CalendarCacheEvent", "String">;
  readonly originalStartTime: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
  readonly externalCreatedAt: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
  readonly externalUpdatedAt: Prisma.FieldRef<"CalendarCacheEvent", "DateTime">;
}

// Custom InputTypes
/**
 * CalendarCacheEvent findUnique
 */
export type CalendarCacheEventFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCacheEvent to fetch.
   */
  where: Prisma.CalendarCacheEventWhereUniqueInput;
};

/**
 * CalendarCacheEvent findUniqueOrThrow
 */
export type CalendarCacheEventFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCacheEvent to fetch.
   */
  where: Prisma.CalendarCacheEventWhereUniqueInput;
};

/**
 * CalendarCacheEvent findFirst
 */
export type CalendarCacheEventFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCacheEvent to fetch.
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCacheEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarCacheEventOrderByWithRelationInput
    | Prisma.CalendarCacheEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarCacheEvents.
   */
  cursor?: Prisma.CalendarCacheEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCacheEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCacheEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarCacheEvents.
   */
  distinct?: Prisma.CalendarCacheEventScalarFieldEnum | Prisma.CalendarCacheEventScalarFieldEnum[];
};

/**
 * CalendarCacheEvent findFirstOrThrow
 */
export type CalendarCacheEventFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCacheEvent to fetch.
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCacheEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarCacheEventOrderByWithRelationInput
    | Prisma.CalendarCacheEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CalendarCacheEvents.
   */
  cursor?: Prisma.CalendarCacheEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCacheEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCacheEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CalendarCacheEvents.
   */
  distinct?: Prisma.CalendarCacheEventScalarFieldEnum | Prisma.CalendarCacheEventScalarFieldEnum[];
};

/**
 * CalendarCacheEvent findMany
 */
export type CalendarCacheEventFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * Filter, which CalendarCacheEvents to fetch.
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CalendarCacheEvents to fetch.
   */
  orderBy?:
    | Prisma.CalendarCacheEventOrderByWithRelationInput
    | Prisma.CalendarCacheEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CalendarCacheEvents.
   */
  cursor?: Prisma.CalendarCacheEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CalendarCacheEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CalendarCacheEvents.
   */
  skip?: number;
  distinct?: Prisma.CalendarCacheEventScalarFieldEnum | Prisma.CalendarCacheEventScalarFieldEnum[];
};

/**
 * CalendarCacheEvent create
 */
export type CalendarCacheEventCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * The data needed to create a CalendarCacheEvent.
   */
  data: Prisma.XOR<Prisma.CalendarCacheEventCreateInput, Prisma.CalendarCacheEventUncheckedCreateInput>;
};

/**
 * CalendarCacheEvent createMany
 */
export type CalendarCacheEventCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many CalendarCacheEvents.
   */
  data: Prisma.CalendarCacheEventCreateManyInput | Prisma.CalendarCacheEventCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CalendarCacheEvent createManyAndReturn
 */
export type CalendarCacheEventCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * The data used to create many CalendarCacheEvents.
   */
  data: Prisma.CalendarCacheEventCreateManyInput | Prisma.CalendarCacheEventCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CalendarCacheEvent update
 */
export type CalendarCacheEventUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * The data needed to update a CalendarCacheEvent.
   */
  data: Prisma.XOR<Prisma.CalendarCacheEventUpdateInput, Prisma.CalendarCacheEventUncheckedUpdateInput>;
  /**
   * Choose, which CalendarCacheEvent to update.
   */
  where: Prisma.CalendarCacheEventWhereUniqueInput;
};

/**
 * CalendarCacheEvent updateMany
 */
export type CalendarCacheEventUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update CalendarCacheEvents.
   */
  data: Prisma.XOR<
    Prisma.CalendarCacheEventUpdateManyMutationInput,
    Prisma.CalendarCacheEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which CalendarCacheEvents to update
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * Limit how many CalendarCacheEvents to update.
   */
  limit?: number;
};

/**
 * CalendarCacheEvent updateManyAndReturn
 */
export type CalendarCacheEventUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * The data used to update CalendarCacheEvents.
   */
  data: Prisma.XOR<
    Prisma.CalendarCacheEventUpdateManyMutationInput,
    Prisma.CalendarCacheEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which CalendarCacheEvents to update
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * Limit how many CalendarCacheEvents to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CalendarCacheEvent upsert
 */
export type CalendarCacheEventUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * The filter to search for the CalendarCacheEvent to update in case it exists.
   */
  where: Prisma.CalendarCacheEventWhereUniqueInput;
  /**
   * In case the CalendarCacheEvent found by the `where` argument doesn't exist, create a new CalendarCacheEvent with this data.
   */
  create: Prisma.XOR<Prisma.CalendarCacheEventCreateInput, Prisma.CalendarCacheEventUncheckedCreateInput>;
  /**
   * In case the CalendarCacheEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CalendarCacheEventUpdateInput, Prisma.CalendarCacheEventUncheckedUpdateInput>;
};

/**
 * CalendarCacheEvent delete
 */
export type CalendarCacheEventDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
  /**
   * Filter which CalendarCacheEvent to delete.
   */
  where: Prisma.CalendarCacheEventWhereUniqueInput;
};

/**
 * CalendarCacheEvent deleteMany
 */
export type CalendarCacheEventDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CalendarCacheEvents to delete
   */
  where?: Prisma.CalendarCacheEventWhereInput;
  /**
   * Limit how many CalendarCacheEvents to delete.
   */
  limit?: number;
};

/**
 * CalendarCacheEvent without action
 */
export type CalendarCacheEventDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CalendarCacheEvent
   */
  select?: Prisma.CalendarCacheEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CalendarCacheEvent
   */
  omit?: Prisma.CalendarCacheEventOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarCacheEventInclude<ExtArgs> | null;
};
