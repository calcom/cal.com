/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `HashedLink` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model HashedLink
 *
 */
export type HashedLinkModel = runtime.Types.Result.DefaultSelection<Prisma.$HashedLinkPayload>;

export type AggregateHashedLink = {
  _count: HashedLinkCountAggregateOutputType | null;
  _avg: HashedLinkAvgAggregateOutputType | null;
  _sum: HashedLinkSumAggregateOutputType | null;
  _min: HashedLinkMinAggregateOutputType | null;
  _max: HashedLinkMaxAggregateOutputType | null;
};

export type HashedLinkAvgAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  maxUsageCount: number | null;
  usageCount: number | null;
};

export type HashedLinkSumAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  maxUsageCount: number | null;
  usageCount: number | null;
};

export type HashedLinkMinAggregateOutputType = {
  id: number | null;
  link: string | null;
  eventTypeId: number | null;
  expiresAt: Date | null;
  maxUsageCount: number | null;
  usageCount: number | null;
};

export type HashedLinkMaxAggregateOutputType = {
  id: number | null;
  link: string | null;
  eventTypeId: number | null;
  expiresAt: Date | null;
  maxUsageCount: number | null;
  usageCount: number | null;
};

export type HashedLinkCountAggregateOutputType = {
  id: number;
  link: number;
  eventTypeId: number;
  expiresAt: number;
  maxUsageCount: number;
  usageCount: number;
  _all: number;
};

export type HashedLinkAvgAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  maxUsageCount?: true;
  usageCount?: true;
};

export type HashedLinkSumAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  maxUsageCount?: true;
  usageCount?: true;
};

export type HashedLinkMinAggregateInputType = {
  id?: true;
  link?: true;
  eventTypeId?: true;
  expiresAt?: true;
  maxUsageCount?: true;
  usageCount?: true;
};

export type HashedLinkMaxAggregateInputType = {
  id?: true;
  link?: true;
  eventTypeId?: true;
  expiresAt?: true;
  maxUsageCount?: true;
  usageCount?: true;
};

export type HashedLinkCountAggregateInputType = {
  id?: true;
  link?: true;
  eventTypeId?: true;
  expiresAt?: true;
  maxUsageCount?: true;
  usageCount?: true;
  _all?: true;
};

export type HashedLinkAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which HashedLink to aggregate.
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HashedLinks to fetch.
   */
  orderBy?: Prisma.HashedLinkOrderByWithRelationInput | Prisma.HashedLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.HashedLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HashedLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HashedLinks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned HashedLinks
   **/
  _count?: true | HashedLinkCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: HashedLinkAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: HashedLinkSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: HashedLinkMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: HashedLinkMaxAggregateInputType;
};

export type GetHashedLinkAggregateType<T extends HashedLinkAggregateArgs> = {
  [P in keyof T & keyof AggregateHashedLink]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHashedLink[P]>
    : Prisma.GetScalarType<T[P], AggregateHashedLink[P]>;
};

export type HashedLinkGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.HashedLinkWhereInput;
  orderBy?: Prisma.HashedLinkOrderByWithAggregationInput | Prisma.HashedLinkOrderByWithAggregationInput[];
  by: Prisma.HashedLinkScalarFieldEnum[] | Prisma.HashedLinkScalarFieldEnum;
  having?: Prisma.HashedLinkScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: HashedLinkCountAggregateInputType | true;
  _avg?: HashedLinkAvgAggregateInputType;
  _sum?: HashedLinkSumAggregateInputType;
  _min?: HashedLinkMinAggregateInputType;
  _max?: HashedLinkMaxAggregateInputType;
};

export type HashedLinkGroupByOutputType = {
  id: number;
  link: string;
  eventTypeId: number;
  expiresAt: Date | null;
  maxUsageCount: number;
  usageCount: number;
  _count: HashedLinkCountAggregateOutputType | null;
  _avg: HashedLinkAvgAggregateOutputType | null;
  _sum: HashedLinkSumAggregateOutputType | null;
  _min: HashedLinkMinAggregateOutputType | null;
  _max: HashedLinkMaxAggregateOutputType | null;
};

type GetHashedLinkGroupByPayload<T extends HashedLinkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HashedLinkGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof HashedLinkGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], HashedLinkGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], HashedLinkGroupByOutputType[P]>;
    }
  >
>;

export type HashedLinkWhereInput = {
  AND?: Prisma.HashedLinkWhereInput | Prisma.HashedLinkWhereInput[];
  OR?: Prisma.HashedLinkWhereInput[];
  NOT?: Prisma.HashedLinkWhereInput | Prisma.HashedLinkWhereInput[];
  id?: Prisma.IntFilter<"HashedLink"> | number;
  link?: Prisma.StringFilter<"HashedLink"> | string;
  eventTypeId?: Prisma.IntFilter<"HashedLink"> | number;
  expiresAt?: Prisma.DateTimeNullableFilter<"HashedLink"> | Date | string | null;
  maxUsageCount?: Prisma.IntFilter<"HashedLink"> | number;
  usageCount?: Prisma.IntFilter<"HashedLink"> | number;
  eventType?: Prisma.XOR<Prisma.EventTypeScalarRelationFilter, Prisma.EventTypeWhereInput>;
};

export type HashedLinkOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
  eventType?: Prisma.EventTypeOrderByWithRelationInput;
};

export type HashedLinkWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    link?: string;
    AND?: Prisma.HashedLinkWhereInput | Prisma.HashedLinkWhereInput[];
    OR?: Prisma.HashedLinkWhereInput[];
    NOT?: Prisma.HashedLinkWhereInput | Prisma.HashedLinkWhereInput[];
    eventTypeId?: Prisma.IntFilter<"HashedLink"> | number;
    expiresAt?: Prisma.DateTimeNullableFilter<"HashedLink"> | Date | string | null;
    maxUsageCount?: Prisma.IntFilter<"HashedLink"> | number;
    usageCount?: Prisma.IntFilter<"HashedLink"> | number;
    eventType?: Prisma.XOR<Prisma.EventTypeScalarRelationFilter, Prisma.EventTypeWhereInput>;
  },
  "id" | "link"
>;

export type HashedLinkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
  _count?: Prisma.HashedLinkCountOrderByAggregateInput;
  _avg?: Prisma.HashedLinkAvgOrderByAggregateInput;
  _max?: Prisma.HashedLinkMaxOrderByAggregateInput;
  _min?: Prisma.HashedLinkMinOrderByAggregateInput;
  _sum?: Prisma.HashedLinkSumOrderByAggregateInput;
};

export type HashedLinkScalarWhereWithAggregatesInput = {
  AND?: Prisma.HashedLinkScalarWhereWithAggregatesInput | Prisma.HashedLinkScalarWhereWithAggregatesInput[];
  OR?: Prisma.HashedLinkScalarWhereWithAggregatesInput[];
  NOT?: Prisma.HashedLinkScalarWhereWithAggregatesInput | Prisma.HashedLinkScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"HashedLink"> | number;
  link?: Prisma.StringWithAggregatesFilter<"HashedLink"> | string;
  eventTypeId?: Prisma.IntWithAggregatesFilter<"HashedLink"> | number;
  expiresAt?: Prisma.DateTimeNullableWithAggregatesFilter<"HashedLink"> | Date | string | null;
  maxUsageCount?: Prisma.IntWithAggregatesFilter<"HashedLink"> | number;
  usageCount?: Prisma.IntWithAggregatesFilter<"HashedLink"> | number;
};

export type HashedLinkCreateInput = {
  link: string;
  expiresAt?: Date | string | null;
  maxUsageCount?: number;
  usageCount?: number;
  eventType: Prisma.EventTypeCreateNestedOneWithoutHashedLinkInput;
};

export type HashedLinkUncheckedCreateInput = {
  id?: number;
  link: string;
  eventTypeId: number;
  expiresAt?: Date | string | null;
  maxUsageCount?: number;
  usageCount?: number;
};

export type HashedLinkUpdateInput = {
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  eventType?: Prisma.EventTypeUpdateOneRequiredWithoutHashedLinkNestedInput;
};

export type HashedLinkUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type HashedLinkCreateManyInput = {
  id?: number;
  link: string;
  eventTypeId: number;
  expiresAt?: Date | string | null;
  maxUsageCount?: number;
  usageCount?: number;
};

export type HashedLinkUpdateManyMutationInput = {
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type HashedLinkUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type HashedLinkListRelationFilter = {
  every?: Prisma.HashedLinkWhereInput;
  some?: Prisma.HashedLinkWhereInput;
  none?: Prisma.HashedLinkWhereInput;
};

export type HashedLinkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type HashedLinkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
};

export type HashedLinkAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
};

export type HashedLinkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
};

export type HashedLinkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  link?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
};

export type HashedLinkSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  maxUsageCount?: Prisma.SortOrder;
  usageCount?: Prisma.SortOrder;
};

export type HashedLinkCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.HashedLinkCreateWithoutEventTypeInput,
        Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HashedLinkCreateWithoutEventTypeInput[]
    | Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.HashedLinkCreateManyEventTypeInputEnvelope;
  connect?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
};

export type HashedLinkUncheckedCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.HashedLinkCreateWithoutEventTypeInput,
        Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HashedLinkCreateWithoutEventTypeInput[]
    | Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.HashedLinkCreateManyEventTypeInputEnvelope;
  connect?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
};

export type HashedLinkUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.HashedLinkCreateWithoutEventTypeInput,
        Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HashedLinkCreateWithoutEventTypeInput[]
    | Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.HashedLinkUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.HashedLinkUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.HashedLinkCreateManyEventTypeInputEnvelope;
  set?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  disconnect?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  delete?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  connect?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  update?:
    | Prisma.HashedLinkUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.HashedLinkUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.HashedLinkUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.HashedLinkUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.HashedLinkScalarWhereInput | Prisma.HashedLinkScalarWhereInput[];
};

export type HashedLinkUncheckedUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.HashedLinkCreateWithoutEventTypeInput,
        Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HashedLinkCreateWithoutEventTypeInput[]
    | Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput
    | Prisma.HashedLinkCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.HashedLinkUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.HashedLinkUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.HashedLinkCreateManyEventTypeInputEnvelope;
  set?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  disconnect?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  delete?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  connect?: Prisma.HashedLinkWhereUniqueInput | Prisma.HashedLinkWhereUniqueInput[];
  update?:
    | Prisma.HashedLinkUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.HashedLinkUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.HashedLinkUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.HashedLinkUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.HashedLinkScalarWhereInput | Prisma.HashedLinkScalarWhereInput[];
};

export type HashedLinkCreateWithoutEventTypeInput = {
  link: string;
  expiresAt?: Date | string | null;
  maxUsageCount?: number;
  usageCount?: number;
};

export type HashedLinkUncheckedCreateWithoutEventTypeInput = {
  id?: number;
  link: string;
  expiresAt?: Date | string | null;
  maxUsageCount?: number;
  usageCount?: number;
};

export type HashedLinkCreateOrConnectWithoutEventTypeInput = {
  where: Prisma.HashedLinkWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.HashedLinkCreateWithoutEventTypeInput,
    Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput
  >;
};

export type HashedLinkCreateManyEventTypeInputEnvelope = {
  data: Prisma.HashedLinkCreateManyEventTypeInput | Prisma.HashedLinkCreateManyEventTypeInput[];
  skipDuplicates?: boolean;
};

export type HashedLinkUpsertWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.HashedLinkWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.HashedLinkUpdateWithoutEventTypeInput,
    Prisma.HashedLinkUncheckedUpdateWithoutEventTypeInput
  >;
  create: Prisma.XOR<
    Prisma.HashedLinkCreateWithoutEventTypeInput,
    Prisma.HashedLinkUncheckedCreateWithoutEventTypeInput
  >;
};

export type HashedLinkUpdateWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.HashedLinkWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.HashedLinkUpdateWithoutEventTypeInput,
    Prisma.HashedLinkUncheckedUpdateWithoutEventTypeInput
  >;
};

export type HashedLinkUpdateManyWithWhereWithoutEventTypeInput = {
  where: Prisma.HashedLinkScalarWhereInput;
  data: Prisma.XOR<
    Prisma.HashedLinkUpdateManyMutationInput,
    Prisma.HashedLinkUncheckedUpdateManyWithoutEventTypeInput
  >;
};

export type HashedLinkScalarWhereInput = {
  AND?: Prisma.HashedLinkScalarWhereInput | Prisma.HashedLinkScalarWhereInput[];
  OR?: Prisma.HashedLinkScalarWhereInput[];
  NOT?: Prisma.HashedLinkScalarWhereInput | Prisma.HashedLinkScalarWhereInput[];
  id?: Prisma.IntFilter<"HashedLink"> | number;
  link?: Prisma.StringFilter<"HashedLink"> | string;
  eventTypeId?: Prisma.IntFilter<"HashedLink"> | number;
  expiresAt?: Prisma.DateTimeNullableFilter<"HashedLink"> | Date | string | null;
  maxUsageCount?: Prisma.IntFilter<"HashedLink"> | number;
  usageCount?: Prisma.IntFilter<"HashedLink"> | number;
};

export type HashedLinkCreateManyEventTypeInput = {
  id?: number;
  link: string;
  expiresAt?: Date | string | null;
  maxUsageCount?: number;
  usageCount?: number;
};

export type HashedLinkUpdateWithoutEventTypeInput = {
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type HashedLinkUncheckedUpdateWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type HashedLinkUncheckedUpdateManyWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  link?: Prisma.StringFieldUpdateOperationsInput | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  maxUsageCount?: Prisma.IntFieldUpdateOperationsInput | number;
  usageCount?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type HashedLinkSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    link?: boolean;
    eventTypeId?: boolean;
    expiresAt?: boolean;
    maxUsageCount?: boolean;
    usageCount?: boolean;
    eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["hashedLink"]
>;

export type HashedLinkSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    link?: boolean;
    eventTypeId?: boolean;
    expiresAt?: boolean;
    maxUsageCount?: boolean;
    usageCount?: boolean;
    eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["hashedLink"]
>;

export type HashedLinkSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    link?: boolean;
    eventTypeId?: boolean;
    expiresAt?: boolean;
    maxUsageCount?: boolean;
    usageCount?: boolean;
    eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["hashedLink"]
>;

export type HashedLinkSelectScalar = {
  id?: boolean;
  link?: boolean;
  eventTypeId?: boolean;
  expiresAt?: boolean;
  maxUsageCount?: boolean;
  usageCount?: boolean;
};

export type HashedLinkOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "link" | "eventTypeId" | "expiresAt" | "maxUsageCount" | "usageCount",
  ExtArgs["result"]["hashedLink"]
>;
export type HashedLinkInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
};
export type HashedLinkIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
};
export type HashedLinkIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
};

export type $HashedLinkPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "HashedLink";
  objects: {
    eventType: Prisma.$EventTypePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      link: string;
      eventTypeId: number;
      expiresAt: Date | null;
      maxUsageCount: number;
      usageCount: number;
    },
    ExtArgs["result"]["hashedLink"]
  >;
  composites: {};
};

export type HashedLinkGetPayload<S extends boolean | null | undefined | HashedLinkDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$HashedLinkPayload, S>;

export type HashedLinkCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<HashedLinkFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: HashedLinkCountAggregateInputType | true;
};

export interface HashedLinkDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["HashedLink"]; meta: { name: "HashedLink" } };
  /**
   * Find zero or one HashedLink that matches the filter.
   * @param {HashedLinkFindUniqueArgs} args - Arguments to find a HashedLink
   * @example
   * // Get one HashedLink
   * const hashedLink = await prisma.hashedLink.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HashedLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, HashedLinkFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$HashedLinkPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one HashedLink that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HashedLinkFindUniqueOrThrowArgs} args - Arguments to find a HashedLink
   * @example
   * // Get one HashedLink
   * const hashedLink = await prisma.hashedLink.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HashedLinkFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, HashedLinkFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$HashedLinkPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HashedLink that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkFindFirstArgs} args - Arguments to find a HashedLink
   * @example
   * // Get one HashedLink
   * const hashedLink = await prisma.hashedLink.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HashedLinkFindFirstArgs>(
    args?: Prisma.SelectSubset<T, HashedLinkFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$HashedLinkPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HashedLink that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkFindFirstOrThrowArgs} args - Arguments to find a HashedLink
   * @example
   * // Get one HashedLink
   * const hashedLink = await prisma.hashedLink.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HashedLinkFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, HashedLinkFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<
      Prisma.$HashedLinkPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more HashedLinks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HashedLinks
   * const hashedLinks = await prisma.hashedLink.findMany()
   *
   * // Get first 10 HashedLinks
   * const hashedLinks = await prisma.hashedLink.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const hashedLinkWithIdOnly = await prisma.hashedLink.findMany({ select: { id: true } })
   *
   */
  findMany<T extends HashedLinkFindManyArgs>(
    args?: Prisma.SelectSubset<T, HashedLinkFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$HashedLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a HashedLink.
   * @param {HashedLinkCreateArgs} args - Arguments to create a HashedLink.
   * @example
   * // Create one HashedLink
   * const HashedLink = await prisma.hashedLink.create({
   *   data: {
   *     // ... data to create a HashedLink
   *   }
   * })
   *
   */
  create<T extends HashedLinkCreateArgs>(
    args: Prisma.SelectSubset<T, HashedLinkCreateArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<Prisma.$HashedLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many HashedLinks.
   * @param {HashedLinkCreateManyArgs} args - Arguments to create many HashedLinks.
   * @example
   * // Create many HashedLinks
   * const hashedLink = await prisma.hashedLink.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends HashedLinkCreateManyArgs>(
    args?: Prisma.SelectSubset<T, HashedLinkCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many HashedLinks and returns the data saved in the database.
   * @param {HashedLinkCreateManyAndReturnArgs} args - Arguments to create many HashedLinks.
   * @example
   * // Create many HashedLinks
   * const hashedLink = await prisma.hashedLink.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many HashedLinks and only return the `id`
   * const hashedLinkWithIdOnly = await prisma.hashedLink.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends HashedLinkCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, HashedLinkCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HashedLinkPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a HashedLink.
   * @param {HashedLinkDeleteArgs} args - Arguments to delete one HashedLink.
   * @example
   * // Delete one HashedLink
   * const HashedLink = await prisma.hashedLink.delete({
   *   where: {
   *     // ... filter to delete one HashedLink
   *   }
   * })
   *
   */
  delete<T extends HashedLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, HashedLinkDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<Prisma.$HashedLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one HashedLink.
   * @param {HashedLinkUpdateArgs} args - Arguments to update one HashedLink.
   * @example
   * // Update one HashedLink
   * const hashedLink = await prisma.hashedLink.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends HashedLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, HashedLinkUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<Prisma.$HashedLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more HashedLinks.
   * @param {HashedLinkDeleteManyArgs} args - Arguments to filter HashedLinks to delete.
   * @example
   * // Delete a few HashedLinks
   * const { count } = await prisma.hashedLink.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends HashedLinkDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, HashedLinkDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HashedLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HashedLinks
   * const hashedLink = await prisma.hashedLink.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends HashedLinkUpdateManyArgs>(
    args: Prisma.SelectSubset<T, HashedLinkUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HashedLinks and returns the data updated in the database.
   * @param {HashedLinkUpdateManyAndReturnArgs} args - Arguments to update many HashedLinks.
   * @example
   * // Update many HashedLinks
   * const hashedLink = await prisma.hashedLink.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more HashedLinks and only return the `id`
   * const hashedLinkWithIdOnly = await prisma.hashedLink.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends HashedLinkUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, HashedLinkUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HashedLinkPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one HashedLink.
   * @param {HashedLinkUpsertArgs} args - Arguments to update or create a HashedLink.
   * @example
   * // Update or create a HashedLink
   * const hashedLink = await prisma.hashedLink.upsert({
   *   create: {
   *     // ... data to create a HashedLink
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HashedLink we want to update
   *   }
   * })
   */
  upsert<T extends HashedLinkUpsertArgs>(
    args: Prisma.SelectSubset<T, HashedLinkUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__HashedLinkClient<
    runtime.Types.Result.GetResult<Prisma.$HashedLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of HashedLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkCountArgs} args - Arguments to filter HashedLinks to count.
   * @example
   * // Count the number of HashedLinks
   * const count = await prisma.hashedLink.count({
   *   where: {
   *     // ... the filter for the HashedLinks we want to count
   *   }
   * })
   **/
  count<T extends HashedLinkCountArgs>(
    args?: Prisma.Subset<T, HashedLinkCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], HashedLinkCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a HashedLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends HashedLinkAggregateArgs>(
    args: Prisma.Subset<T, HashedLinkAggregateArgs>
  ): Prisma.PrismaPromise<GetHashedLinkAggregateType<T>>;

  /**
   * Group by HashedLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HashedLinkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends HashedLinkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HashedLinkGroupByArgs["orderBy"] }
      : { orderBy?: HashedLinkGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, HashedLinkGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetHashedLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the HashedLink model
   */
  readonly fields: HashedLinkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HashedLink.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HashedLinkClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  eventType<T extends Prisma.EventTypeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.EventTypeDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__EventTypeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$EventTypePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the HashedLink model
 */
export interface HashedLinkFieldRefs {
  readonly id: Prisma.FieldRef<"HashedLink", "Int">;
  readonly link: Prisma.FieldRef<"HashedLink", "String">;
  readonly eventTypeId: Prisma.FieldRef<"HashedLink", "Int">;
  readonly expiresAt: Prisma.FieldRef<"HashedLink", "DateTime">;
  readonly maxUsageCount: Prisma.FieldRef<"HashedLink", "Int">;
  readonly usageCount: Prisma.FieldRef<"HashedLink", "Int">;
}

// Custom InputTypes
/**
 * HashedLink findUnique
 */
export type HashedLinkFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * Filter, which HashedLink to fetch.
   */
  where: Prisma.HashedLinkWhereUniqueInput;
};

/**
 * HashedLink findUniqueOrThrow
 */
export type HashedLinkFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * Filter, which HashedLink to fetch.
   */
  where: Prisma.HashedLinkWhereUniqueInput;
};

/**
 * HashedLink findFirst
 */
export type HashedLinkFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * Filter, which HashedLink to fetch.
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HashedLinks to fetch.
   */
  orderBy?: Prisma.HashedLinkOrderByWithRelationInput | Prisma.HashedLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HashedLinks.
   */
  cursor?: Prisma.HashedLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HashedLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HashedLinks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HashedLinks.
   */
  distinct?: Prisma.HashedLinkScalarFieldEnum | Prisma.HashedLinkScalarFieldEnum[];
};

/**
 * HashedLink findFirstOrThrow
 */
export type HashedLinkFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * Filter, which HashedLink to fetch.
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HashedLinks to fetch.
   */
  orderBy?: Prisma.HashedLinkOrderByWithRelationInput | Prisma.HashedLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HashedLinks.
   */
  cursor?: Prisma.HashedLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HashedLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HashedLinks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HashedLinks.
   */
  distinct?: Prisma.HashedLinkScalarFieldEnum | Prisma.HashedLinkScalarFieldEnum[];
};

/**
 * HashedLink findMany
 */
export type HashedLinkFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * Filter, which HashedLinks to fetch.
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HashedLinks to fetch.
   */
  orderBy?: Prisma.HashedLinkOrderByWithRelationInput | Prisma.HashedLinkOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing HashedLinks.
   */
  cursor?: Prisma.HashedLinkWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HashedLinks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HashedLinks.
   */
  skip?: number;
  distinct?: Prisma.HashedLinkScalarFieldEnum | Prisma.HashedLinkScalarFieldEnum[];
};

/**
 * HashedLink create
 */
export type HashedLinkCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * The data needed to create a HashedLink.
   */
  data: Prisma.XOR<Prisma.HashedLinkCreateInput, Prisma.HashedLinkUncheckedCreateInput>;
};

/**
 * HashedLink createMany
 */
export type HashedLinkCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many HashedLinks.
   */
  data: Prisma.HashedLinkCreateManyInput | Prisma.HashedLinkCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HashedLink createManyAndReturn
 */
export type HashedLinkCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * The data used to create many HashedLinks.
   */
  data: Prisma.HashedLinkCreateManyInput | Prisma.HashedLinkCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * HashedLink update
 */
export type HashedLinkUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * The data needed to update a HashedLink.
   */
  data: Prisma.XOR<Prisma.HashedLinkUpdateInput, Prisma.HashedLinkUncheckedUpdateInput>;
  /**
   * Choose, which HashedLink to update.
   */
  where: Prisma.HashedLinkWhereUniqueInput;
};

/**
 * HashedLink updateMany
 */
export type HashedLinkUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update HashedLinks.
   */
  data: Prisma.XOR<Prisma.HashedLinkUpdateManyMutationInput, Prisma.HashedLinkUncheckedUpdateManyInput>;
  /**
   * Filter which HashedLinks to update
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * Limit how many HashedLinks to update.
   */
  limit?: number;
};

/**
 * HashedLink updateManyAndReturn
 */
export type HashedLinkUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * The data used to update HashedLinks.
   */
  data: Prisma.XOR<Prisma.HashedLinkUpdateManyMutationInput, Prisma.HashedLinkUncheckedUpdateManyInput>;
  /**
   * Filter which HashedLinks to update
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * Limit how many HashedLinks to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * HashedLink upsert
 */
export type HashedLinkUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * The filter to search for the HashedLink to update in case it exists.
   */
  where: Prisma.HashedLinkWhereUniqueInput;
  /**
   * In case the HashedLink found by the `where` argument doesn't exist, create a new HashedLink with this data.
   */
  create: Prisma.XOR<Prisma.HashedLinkCreateInput, Prisma.HashedLinkUncheckedCreateInput>;
  /**
   * In case the HashedLink was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HashedLinkUpdateInput, Prisma.HashedLinkUncheckedUpdateInput>;
};

/**
 * HashedLink delete
 */
export type HashedLinkDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
  /**
   * Filter which HashedLink to delete.
   */
  where: Prisma.HashedLinkWhereUniqueInput;
};

/**
 * HashedLink deleteMany
 */
export type HashedLinkDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which HashedLinks to delete
   */
  where?: Prisma.HashedLinkWhereInput;
  /**
   * Limit how many HashedLinks to delete.
   */
  limit?: number;
};

/**
 * HashedLink without action
 */
export type HashedLinkDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HashedLink
   */
  select?: Prisma.HashedLinkSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HashedLink
   */
  omit?: Prisma.HashedLinkOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HashedLinkInclude<ExtArgs> | null;
};
