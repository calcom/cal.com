/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `UserFeatures` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model UserFeatures
 *
 */
export type UserFeaturesModel = runtime.Types.Result.DefaultSelection<Prisma.$UserFeaturesPayload>;

export type AggregateUserFeatures = {
  _count: UserFeaturesCountAggregateOutputType | null;
  _avg: UserFeaturesAvgAggregateOutputType | null;
  _sum: UserFeaturesSumAggregateOutputType | null;
  _min: UserFeaturesMinAggregateOutputType | null;
  _max: UserFeaturesMaxAggregateOutputType | null;
};

export type UserFeaturesAvgAggregateOutputType = {
  userId: number | null;
};

export type UserFeaturesSumAggregateOutputType = {
  userId: number | null;
};

export type UserFeaturesMinAggregateOutputType = {
  userId: number | null;
  featureId: string | null;
  assignedAt: Date | null;
  assignedBy: string | null;
  updatedAt: Date | null;
};

export type UserFeaturesMaxAggregateOutputType = {
  userId: number | null;
  featureId: string | null;
  assignedAt: Date | null;
  assignedBy: string | null;
  updatedAt: Date | null;
};

export type UserFeaturesCountAggregateOutputType = {
  userId: number;
  featureId: number;
  assignedAt: number;
  assignedBy: number;
  updatedAt: number;
  _all: number;
};

export type UserFeaturesAvgAggregateInputType = {
  userId?: true;
};

export type UserFeaturesSumAggregateInputType = {
  userId?: true;
};

export type UserFeaturesMinAggregateInputType = {
  userId?: true;
  featureId?: true;
  assignedAt?: true;
  assignedBy?: true;
  updatedAt?: true;
};

export type UserFeaturesMaxAggregateInputType = {
  userId?: true;
  featureId?: true;
  assignedAt?: true;
  assignedBy?: true;
  updatedAt?: true;
};

export type UserFeaturesCountAggregateInputType = {
  userId?: true;
  featureId?: true;
  assignedAt?: true;
  assignedBy?: true;
  updatedAt?: true;
  _all?: true;
};

export type UserFeaturesAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which UserFeatures to aggregate.
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?: Prisma.UserFeaturesOrderByWithRelationInput | Prisma.UserFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserFeatures
   **/
  _count?: true | UserFeaturesCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: UserFeaturesAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: UserFeaturesSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserFeaturesMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserFeaturesMaxAggregateInputType;
};

export type GetUserFeaturesAggregateType<T extends UserFeaturesAggregateArgs> = {
  [P in keyof T & keyof AggregateUserFeatures]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserFeatures[P]>
    : Prisma.GetScalarType<T[P], AggregateUserFeatures[P]>;
};

export type UserFeaturesGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.UserFeaturesWhereInput;
  orderBy?: Prisma.UserFeaturesOrderByWithAggregationInput | Prisma.UserFeaturesOrderByWithAggregationInput[];
  by: Prisma.UserFeaturesScalarFieldEnum[] | Prisma.UserFeaturesScalarFieldEnum;
  having?: Prisma.UserFeaturesScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: UserFeaturesCountAggregateInputType | true;
  _avg?: UserFeaturesAvgAggregateInputType;
  _sum?: UserFeaturesSumAggregateInputType;
  _min?: UserFeaturesMinAggregateInputType;
  _max?: UserFeaturesMaxAggregateInputType;
};

export type UserFeaturesGroupByOutputType = {
  userId: number;
  featureId: string;
  assignedAt: Date;
  assignedBy: string;
  updatedAt: Date;
  _count: UserFeaturesCountAggregateOutputType | null;
  _avg: UserFeaturesAvgAggregateOutputType | null;
  _sum: UserFeaturesSumAggregateOutputType | null;
  _min: UserFeaturesMinAggregateOutputType | null;
  _max: UserFeaturesMaxAggregateOutputType | null;
};

type GetUserFeaturesGroupByPayload<T extends UserFeaturesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserFeaturesGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof UserFeaturesGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], UserFeaturesGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], UserFeaturesGroupByOutputType[P]>;
    }
  >
>;

export type UserFeaturesWhereInput = {
  AND?: Prisma.UserFeaturesWhereInput | Prisma.UserFeaturesWhereInput[];
  OR?: Prisma.UserFeaturesWhereInput[];
  NOT?: Prisma.UserFeaturesWhereInput | Prisma.UserFeaturesWhereInput[];
  userId?: Prisma.IntFilter<"UserFeatures"> | number;
  featureId?: Prisma.StringFilter<"UserFeatures"> | string;
  assignedAt?: Prisma.DateTimeFilter<"UserFeatures"> | Date | string;
  assignedBy?: Prisma.StringFilter<"UserFeatures"> | string;
  updatedAt?: Prisma.DateTimeFilter<"UserFeatures"> | Date | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  feature?: Prisma.XOR<Prisma.FeatureScalarRelationFilter, Prisma.FeatureWhereInput>;
};

export type UserFeaturesOrderByWithRelationInput = {
  userId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  feature?: Prisma.FeatureOrderByWithRelationInput;
};

export type UserFeaturesWhereUniqueInput = Prisma.AtLeast<
  {
    userId_featureId?: Prisma.UserFeaturesUserIdFeatureIdCompoundUniqueInput;
    AND?: Prisma.UserFeaturesWhereInput | Prisma.UserFeaturesWhereInput[];
    OR?: Prisma.UserFeaturesWhereInput[];
    NOT?: Prisma.UserFeaturesWhereInput | Prisma.UserFeaturesWhereInput[];
    userId?: Prisma.IntFilter<"UserFeatures"> | number;
    featureId?: Prisma.StringFilter<"UserFeatures"> | string;
    assignedAt?: Prisma.DateTimeFilter<"UserFeatures"> | Date | string;
    assignedBy?: Prisma.StringFilter<"UserFeatures"> | string;
    updatedAt?: Prisma.DateTimeFilter<"UserFeatures"> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    feature?: Prisma.XOR<Prisma.FeatureScalarRelationFilter, Prisma.FeatureWhereInput>;
  },
  "userId_featureId"
>;

export type UserFeaturesOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.UserFeaturesCountOrderByAggregateInput;
  _avg?: Prisma.UserFeaturesAvgOrderByAggregateInput;
  _max?: Prisma.UserFeaturesMaxOrderByAggregateInput;
  _min?: Prisma.UserFeaturesMinOrderByAggregateInput;
  _sum?: Prisma.UserFeaturesSumOrderByAggregateInput;
};

export type UserFeaturesScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserFeaturesScalarWhereWithAggregatesInput
    | Prisma.UserFeaturesScalarWhereWithAggregatesInput[];
  OR?: Prisma.UserFeaturesScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.UserFeaturesScalarWhereWithAggregatesInput
    | Prisma.UserFeaturesScalarWhereWithAggregatesInput[];
  userId?: Prisma.IntWithAggregatesFilter<"UserFeatures"> | number;
  featureId?: Prisma.StringWithAggregatesFilter<"UserFeatures"> | string;
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"UserFeatures"> | Date | string;
  assignedBy?: Prisma.StringWithAggregatesFilter<"UserFeatures"> | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserFeatures"> | Date | string;
};

export type UserFeaturesCreateInput = {
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFeaturesInput;
  feature: Prisma.FeatureCreateNestedOneWithoutUsersInput;
};

export type UserFeaturesUncheckedCreateInput = {
  userId: number;
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type UserFeaturesUpdateInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFeaturesNestedInput;
  feature?: Prisma.FeatureUpdateOneRequiredWithoutUsersNestedInput;
};

export type UserFeaturesUncheckedUpdateInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesCreateManyInput = {
  userId: number;
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type UserFeaturesUpdateManyMutationInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesUncheckedUpdateManyInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesListRelationFilter = {
  every?: Prisma.UserFeaturesWhereInput;
  some?: Prisma.UserFeaturesWhereInput;
  none?: Prisma.UserFeaturesWhereInput;
};

export type UserFeaturesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type UserFeaturesUserIdFeatureIdCompoundUniqueInput = {
  userId: number;
  featureId: string;
};

export type UserFeaturesCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserFeaturesAvgOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
};

export type UserFeaturesMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserFeaturesMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  featureId?: Prisma.SortOrder;
  assignedAt?: Prisma.SortOrder;
  assignedBy?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type UserFeaturesSumOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
};

export type UserFeaturesCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutUserInput,
        Prisma.UserFeaturesUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeaturesCreateWithoutUserInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserFeaturesCreateManyUserInputEnvelope;
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
};

export type UserFeaturesUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutUserInput,
        Prisma.UserFeaturesUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeaturesCreateWithoutUserInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.UserFeaturesCreateManyUserInputEnvelope;
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
};

export type UserFeaturesUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutUserInput,
        Prisma.UserFeaturesUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeaturesCreateWithoutUserInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserFeaturesCreateManyUserInputEnvelope;
  set?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  disconnect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  delete?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  update?:
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutUserInput
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.UserFeaturesScalarWhereInput | Prisma.UserFeaturesScalarWhereInput[];
};

export type UserFeaturesUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutUserInput,
        Prisma.UserFeaturesUncheckedCreateWithoutUserInput
      >
    | Prisma.UserFeaturesCreateWithoutUserInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput
    | Prisma.UserFeaturesCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutUserInput
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.UserFeaturesCreateManyUserInputEnvelope;
  set?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  disconnect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  delete?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  update?:
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutUserInput
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutUserInput
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.UserFeaturesScalarWhereInput | Prisma.UserFeaturesScalarWhereInput[];
};

export type UserFeaturesCreateNestedManyWithoutFeatureInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutFeatureInput,
        Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.UserFeaturesCreateWithoutFeatureInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput[];
  createMany?: Prisma.UserFeaturesCreateManyFeatureInputEnvelope;
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
};

export type UserFeaturesUncheckedCreateNestedManyWithoutFeatureInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutFeatureInput,
        Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.UserFeaturesCreateWithoutFeatureInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput[];
  createMany?: Prisma.UserFeaturesCreateManyFeatureInputEnvelope;
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
};

export type UserFeaturesUpdateManyWithoutFeatureNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutFeatureInput,
        Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.UserFeaturesCreateWithoutFeatureInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput[];
  upsert?:
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutFeatureInput
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutFeatureInput[];
  createMany?: Prisma.UserFeaturesCreateManyFeatureInputEnvelope;
  set?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  disconnect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  delete?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  update?:
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutFeatureInput
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutFeatureInput[];
  updateMany?:
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutFeatureInput
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutFeatureInput[];
  deleteMany?: Prisma.UserFeaturesScalarWhereInput | Prisma.UserFeaturesScalarWhereInput[];
};

export type UserFeaturesUncheckedUpdateManyWithoutFeatureNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.UserFeaturesCreateWithoutFeatureInput,
        Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput
      >
    | Prisma.UserFeaturesCreateWithoutFeatureInput[]
    | Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput[];
  connectOrCreate?:
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput
    | Prisma.UserFeaturesCreateOrConnectWithoutFeatureInput[];
  upsert?:
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutFeatureInput
    | Prisma.UserFeaturesUpsertWithWhereUniqueWithoutFeatureInput[];
  createMany?: Prisma.UserFeaturesCreateManyFeatureInputEnvelope;
  set?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  disconnect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  delete?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  connect?: Prisma.UserFeaturesWhereUniqueInput | Prisma.UserFeaturesWhereUniqueInput[];
  update?:
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutFeatureInput
    | Prisma.UserFeaturesUpdateWithWhereUniqueWithoutFeatureInput[];
  updateMany?:
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutFeatureInput
    | Prisma.UserFeaturesUpdateManyWithWhereWithoutFeatureInput[];
  deleteMany?: Prisma.UserFeaturesScalarWhereInput | Prisma.UserFeaturesScalarWhereInput[];
};

export type UserFeaturesCreateWithoutUserInput = {
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
  feature: Prisma.FeatureCreateNestedOneWithoutUsersInput;
};

export type UserFeaturesUncheckedCreateWithoutUserInput = {
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type UserFeaturesCreateOrConnectWithoutUserInput = {
  where: Prisma.UserFeaturesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserFeaturesCreateWithoutUserInput,
    Prisma.UserFeaturesUncheckedCreateWithoutUserInput
  >;
};

export type UserFeaturesCreateManyUserInputEnvelope = {
  data: Prisma.UserFeaturesCreateManyUserInput | Prisma.UserFeaturesCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type UserFeaturesUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFeaturesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserFeaturesUpdateWithoutUserInput,
    Prisma.UserFeaturesUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.UserFeaturesCreateWithoutUserInput,
    Prisma.UserFeaturesUncheckedCreateWithoutUserInput
  >;
};

export type UserFeaturesUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFeaturesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserFeaturesUpdateWithoutUserInput,
    Prisma.UserFeaturesUncheckedUpdateWithoutUserInput
  >;
};

export type UserFeaturesUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserFeaturesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserFeaturesUpdateManyMutationInput,
    Prisma.UserFeaturesUncheckedUpdateManyWithoutUserInput
  >;
};

export type UserFeaturesScalarWhereInput = {
  AND?: Prisma.UserFeaturesScalarWhereInput | Prisma.UserFeaturesScalarWhereInput[];
  OR?: Prisma.UserFeaturesScalarWhereInput[];
  NOT?: Prisma.UserFeaturesScalarWhereInput | Prisma.UserFeaturesScalarWhereInput[];
  userId?: Prisma.IntFilter<"UserFeatures"> | number;
  featureId?: Prisma.StringFilter<"UserFeatures"> | string;
  assignedAt?: Prisma.DateTimeFilter<"UserFeatures"> | Date | string;
  assignedBy?: Prisma.StringFilter<"UserFeatures"> | string;
  updatedAt?: Prisma.DateTimeFilter<"UserFeatures"> | Date | string;
};

export type UserFeaturesCreateWithoutFeatureInput = {
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutFeaturesInput;
};

export type UserFeaturesUncheckedCreateWithoutFeatureInput = {
  userId: number;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type UserFeaturesCreateOrConnectWithoutFeatureInput = {
  where: Prisma.UserFeaturesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserFeaturesCreateWithoutFeatureInput,
    Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput
  >;
};

export type UserFeaturesCreateManyFeatureInputEnvelope = {
  data: Prisma.UserFeaturesCreateManyFeatureInput | Prisma.UserFeaturesCreateManyFeatureInput[];
  skipDuplicates?: boolean;
};

export type UserFeaturesUpsertWithWhereUniqueWithoutFeatureInput = {
  where: Prisma.UserFeaturesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.UserFeaturesUpdateWithoutFeatureInput,
    Prisma.UserFeaturesUncheckedUpdateWithoutFeatureInput
  >;
  create: Prisma.XOR<
    Prisma.UserFeaturesCreateWithoutFeatureInput,
    Prisma.UserFeaturesUncheckedCreateWithoutFeatureInput
  >;
};

export type UserFeaturesUpdateWithWhereUniqueWithoutFeatureInput = {
  where: Prisma.UserFeaturesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.UserFeaturesUpdateWithoutFeatureInput,
    Prisma.UserFeaturesUncheckedUpdateWithoutFeatureInput
  >;
};

export type UserFeaturesUpdateManyWithWhereWithoutFeatureInput = {
  where: Prisma.UserFeaturesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.UserFeaturesUpdateManyMutationInput,
    Prisma.UserFeaturesUncheckedUpdateManyWithoutFeatureInput
  >;
};

export type UserFeaturesCreateManyUserInput = {
  featureId: string;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type UserFeaturesUpdateWithoutUserInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  feature?: Prisma.FeatureUpdateOneRequiredWithoutUsersNestedInput;
};

export type UserFeaturesUncheckedUpdateWithoutUserInput = {
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesUncheckedUpdateManyWithoutUserInput = {
  featureId?: Prisma.StringFieldUpdateOperationsInput | string;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesCreateManyFeatureInput = {
  userId: number;
  assignedAt?: Date | string;
  assignedBy: string;
  updatedAt?: Date | string;
};

export type UserFeaturesUpdateWithoutFeatureInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutFeaturesNestedInput;
};

export type UserFeaturesUncheckedUpdateWithoutFeatureInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesUncheckedUpdateManyWithoutFeatureInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserFeaturesSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    featureId?: boolean;
    assignedAt?: boolean;
    assignedBy?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFeatures"]
>;

export type UserFeaturesSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    featureId?: boolean;
    assignedAt?: boolean;
    assignedBy?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFeatures"]
>;

export type UserFeaturesSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    featureId?: boolean;
    assignedAt?: boolean;
    assignedBy?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userFeatures"]
>;

export type UserFeaturesSelectScalar = {
  userId?: boolean;
  featureId?: boolean;
  assignedAt?: boolean;
  assignedBy?: boolean;
  updatedAt?: boolean;
};

export type UserFeaturesOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "userId" | "featureId" | "assignedAt" | "assignedBy" | "updatedAt",
  ExtArgs["result"]["userFeatures"]
>;
export type UserFeaturesInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
};
export type UserFeaturesIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
};
export type UserFeaturesIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  feature?: boolean | Prisma.FeatureDefaultArgs<ExtArgs>;
};

export type $UserFeaturesPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "UserFeatures";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    feature: Prisma.$FeaturePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      userId: number;
      featureId: string;
      assignedAt: Date;
      assignedBy: string;
      updatedAt: Date;
    },
    ExtArgs["result"]["userFeatures"]
  >;
  composites: {};
};

export type UserFeaturesGetPayload<S extends boolean | null | undefined | UserFeaturesDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$UserFeaturesPayload, S>;

export type UserFeaturesCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<UserFeaturesFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: UserFeaturesCountAggregateInputType | true;
};

export interface UserFeaturesDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["UserFeatures"]; meta: { name: "UserFeatures" } };
  /**
   * Find zero or one UserFeatures that matches the filter.
   * @param {UserFeaturesFindUniqueArgs} args - Arguments to find a UserFeatures
   * @example
   * // Get one UserFeatures
   * const userFeatures = await prisma.userFeatures.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFeaturesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturesPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one UserFeatures that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFeaturesFindUniqueOrThrowArgs} args - Arguments to find a UserFeatures
   * @example
   * // Get one UserFeatures
   * const userFeatures = await prisma.userFeatures.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFeaturesFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturesPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesFindFirstArgs} args - Arguments to find a UserFeatures
   * @example
   * // Get one UserFeatures
   * const userFeatures = await prisma.userFeatures.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFeaturesFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserFeaturesFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturesPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserFeatures that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesFindFirstOrThrowArgs} args - Arguments to find a UserFeatures
   * @example
   * // Get one UserFeatures
   * const userFeatures = await prisma.userFeatures.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFeaturesFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, UserFeaturesFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturesPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more UserFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserFeatures
   * const userFeatures = await prisma.userFeatures.findMany()
   *
   * // Get first 10 UserFeatures
   * const userFeatures = await prisma.userFeatures.findMany({ take: 10 })
   *
   * // Only select the `userId`
   * const userFeaturesWithUserIdOnly = await prisma.userFeatures.findMany({ select: { userId: true } })
   *
   */
  findMany<T extends UserFeaturesFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserFeaturesFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$UserFeaturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a UserFeatures.
   * @param {UserFeaturesCreateArgs} args - Arguments to create a UserFeatures.
   * @example
   * // Create one UserFeatures
   * const UserFeatures = await prisma.userFeatures.create({
   *   data: {
   *     // ... data to create a UserFeatures
   *   }
   * })
   *
   */
  create<T extends UserFeaturesCreateArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesCreateArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$UserFeaturesPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many UserFeatures.
   * @param {UserFeaturesCreateManyArgs} args - Arguments to create many UserFeatures.
   * @example
   * // Create many UserFeatures
   * const userFeatures = await prisma.userFeatures.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserFeaturesCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserFeaturesCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many UserFeatures and returns the data saved in the database.
   * @param {UserFeaturesCreateManyAndReturnArgs} args - Arguments to create many UserFeatures.
   * @example
   * // Create many UserFeatures
   * const userFeatures = await prisma.userFeatures.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserFeatures and only return the `userId`
   * const userFeaturesWithUserIdOnly = await prisma.userFeatures.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserFeaturesCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, UserFeaturesCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturesPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a UserFeatures.
   * @param {UserFeaturesDeleteArgs} args - Arguments to delete one UserFeatures.
   * @example
   * // Delete one UserFeatures
   * const UserFeatures = await prisma.userFeatures.delete({
   *   where: {
   *     // ... filter to delete one UserFeatures
   *   }
   * })
   *
   */
  delete<T extends UserFeaturesDeleteArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$UserFeaturesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one UserFeatures.
   * @param {UserFeaturesUpdateArgs} args - Arguments to update one UserFeatures.
   * @example
   * // Update one UserFeatures
   * const userFeatures = await prisma.userFeatures.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserFeaturesUpdateArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$UserFeaturesPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more UserFeatures.
   * @param {UserFeaturesDeleteManyArgs} args - Arguments to filter UserFeatures to delete.
   * @example
   * // Delete a few UserFeatures
   * const { count } = await prisma.userFeatures.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserFeaturesDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserFeaturesDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserFeatures
   * const userFeatures = await prisma.userFeatures.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserFeaturesUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserFeatures and returns the data updated in the database.
   * @param {UserFeaturesUpdateManyAndReturnArgs} args - Arguments to update many UserFeatures.
   * @example
   * // Update many UserFeatures
   * const userFeatures = await prisma.userFeatures.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserFeatures and only return the `userId`
   * const userFeaturesWithUserIdOnly = await prisma.userFeatures.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserFeaturesUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserFeaturesPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one UserFeatures.
   * @param {UserFeaturesUpsertArgs} args - Arguments to update or create a UserFeatures.
   * @example
   * // Update or create a UserFeatures
   * const userFeatures = await prisma.userFeatures.upsert({
   *   create: {
   *     // ... data to create a UserFeatures
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserFeatures we want to update
   *   }
   * })
   */
  upsert<T extends UserFeaturesUpsertArgs>(
    args: Prisma.SelectSubset<T, UserFeaturesUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__UserFeaturesClient<
    runtime.Types.Result.GetResult<Prisma.$UserFeaturesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of UserFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesCountArgs} args - Arguments to filter UserFeatures to count.
   * @example
   * // Count the number of UserFeatures
   * const count = await prisma.userFeatures.count({
   *   where: {
   *     // ... the filter for the UserFeatures we want to count
   *   }
   * })
   **/
  count<T extends UserFeaturesCountArgs>(
    args?: Prisma.Subset<T, UserFeaturesCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], UserFeaturesCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a UserFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserFeaturesAggregateArgs>(
    args: Prisma.Subset<T, UserFeaturesAggregateArgs>
  ): Prisma.PrismaPromise<GetUserFeaturesAggregateType<T>>;

  /**
   * Group by UserFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFeaturesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserFeaturesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserFeaturesGroupByArgs["orderBy"] }
      : { orderBy?: UserFeaturesGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, UserFeaturesGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetUserFeaturesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the UserFeatures model
   */
  readonly fields: UserFeaturesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserFeatures.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserFeaturesClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  feature<T extends Prisma.FeatureDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeatureDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__FeatureClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FeaturePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the UserFeatures model
 */
export interface UserFeaturesFieldRefs {
  readonly userId: Prisma.FieldRef<"UserFeatures", "Int">;
  readonly featureId: Prisma.FieldRef<"UserFeatures", "String">;
  readonly assignedAt: Prisma.FieldRef<"UserFeatures", "DateTime">;
  readonly assignedBy: Prisma.FieldRef<"UserFeatures", "String">;
  readonly updatedAt: Prisma.FieldRef<"UserFeatures", "DateTime">;
}

// Custom InputTypes
/**
 * UserFeatures findUnique
 */
export type UserFeaturesFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeatures to fetch.
   */
  where: Prisma.UserFeaturesWhereUniqueInput;
};

/**
 * UserFeatures findUniqueOrThrow
 */
export type UserFeaturesFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeatures to fetch.
   */
  where: Prisma.UserFeaturesWhereUniqueInput;
};

/**
 * UserFeatures findFirst
 */
export type UserFeaturesFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeatures to fetch.
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?: Prisma.UserFeaturesOrderByWithRelationInput | Prisma.UserFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserFeatures.
   */
  cursor?: Prisma.UserFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserFeatures.
   */
  distinct?: Prisma.UserFeaturesScalarFieldEnum | Prisma.UserFeaturesScalarFieldEnum[];
};

/**
 * UserFeatures findFirstOrThrow
 */
export type UserFeaturesFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeatures to fetch.
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?: Prisma.UserFeaturesOrderByWithRelationInput | Prisma.UserFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserFeatures.
   */
  cursor?: Prisma.UserFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserFeatures.
   */
  distinct?: Prisma.UserFeaturesScalarFieldEnum | Prisma.UserFeaturesScalarFieldEnum[];
};

/**
 * UserFeatures findMany
 */
export type UserFeaturesFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * Filter, which UserFeatures to fetch.
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserFeatures to fetch.
   */
  orderBy?: Prisma.UserFeaturesOrderByWithRelationInput | Prisma.UserFeaturesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserFeatures.
   */
  cursor?: Prisma.UserFeaturesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserFeatures from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserFeatures.
   */
  skip?: number;
  distinct?: Prisma.UserFeaturesScalarFieldEnum | Prisma.UserFeaturesScalarFieldEnum[];
};

/**
 * UserFeatures create
 */
export type UserFeaturesCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * The data needed to create a UserFeatures.
   */
  data: Prisma.XOR<Prisma.UserFeaturesCreateInput, Prisma.UserFeaturesUncheckedCreateInput>;
};

/**
 * UserFeatures createMany
 */
export type UserFeaturesCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many UserFeatures.
   */
  data: Prisma.UserFeaturesCreateManyInput | Prisma.UserFeaturesCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * UserFeatures createManyAndReturn
 */
export type UserFeaturesCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * The data used to create many UserFeatures.
   */
  data: Prisma.UserFeaturesCreateManyInput | Prisma.UserFeaturesCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * UserFeatures update
 */
export type UserFeaturesUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * The data needed to update a UserFeatures.
   */
  data: Prisma.XOR<Prisma.UserFeaturesUpdateInput, Prisma.UserFeaturesUncheckedUpdateInput>;
  /**
   * Choose, which UserFeatures to update.
   */
  where: Prisma.UserFeaturesWhereUniqueInput;
};

/**
 * UserFeatures updateMany
 */
export type UserFeaturesUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update UserFeatures.
   */
  data: Prisma.XOR<Prisma.UserFeaturesUpdateManyMutationInput, Prisma.UserFeaturesUncheckedUpdateManyInput>;
  /**
   * Filter which UserFeatures to update
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * Limit how many UserFeatures to update.
   */
  limit?: number;
};

/**
 * UserFeatures updateManyAndReturn
 */
export type UserFeaturesUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * The data used to update UserFeatures.
   */
  data: Prisma.XOR<Prisma.UserFeaturesUpdateManyMutationInput, Prisma.UserFeaturesUncheckedUpdateManyInput>;
  /**
   * Filter which UserFeatures to update
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * Limit how many UserFeatures to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * UserFeatures upsert
 */
export type UserFeaturesUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * The filter to search for the UserFeatures to update in case it exists.
   */
  where: Prisma.UserFeaturesWhereUniqueInput;
  /**
   * In case the UserFeatures found by the `where` argument doesn't exist, create a new UserFeatures with this data.
   */
  create: Prisma.XOR<Prisma.UserFeaturesCreateInput, Prisma.UserFeaturesUncheckedCreateInput>;
  /**
   * In case the UserFeatures was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserFeaturesUpdateInput, Prisma.UserFeaturesUncheckedUpdateInput>;
};

/**
 * UserFeatures delete
 */
export type UserFeaturesDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
  /**
   * Filter which UserFeatures to delete.
   */
  where: Prisma.UserFeaturesWhereUniqueInput;
};

/**
 * UserFeatures deleteMany
 */
export type UserFeaturesDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which UserFeatures to delete
   */
  where?: Prisma.UserFeaturesWhereInput;
  /**
   * Limit how many UserFeatures to delete.
   */
  limit?: number;
};

/**
 * UserFeatures without action
 */
export type UserFeaturesDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserFeatures
   */
  select?: Prisma.UserFeaturesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserFeatures
   */
  omit?: Prisma.UserFeaturesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFeaturesInclude<ExtArgs> | null;
};
