/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Tracking` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Tracking
 *
 */
export type TrackingModel = runtime.Types.Result.DefaultSelection<Prisma.$TrackingPayload>;

export type AggregateTracking = {
  _count: TrackingCountAggregateOutputType | null;
  _avg: TrackingAvgAggregateOutputType | null;
  _sum: TrackingSumAggregateOutputType | null;
  _min: TrackingMinAggregateOutputType | null;
  _max: TrackingMaxAggregateOutputType | null;
};

export type TrackingAvgAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
};

export type TrackingSumAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
};

export type TrackingMinAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
  utm_source: string | null;
  utm_medium: string | null;
  utm_campaign: string | null;
  utm_term: string | null;
  utm_content: string | null;
};

export type TrackingMaxAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
  utm_source: string | null;
  utm_medium: string | null;
  utm_campaign: string | null;
  utm_term: string | null;
  utm_content: string | null;
};

export type TrackingCountAggregateOutputType = {
  id: number;
  bookingId: number;
  utm_source: number;
  utm_medium: number;
  utm_campaign: number;
  utm_term: number;
  utm_content: number;
  _all: number;
};

export type TrackingAvgAggregateInputType = {
  id?: true;
  bookingId?: true;
};

export type TrackingSumAggregateInputType = {
  id?: true;
  bookingId?: true;
};

export type TrackingMinAggregateInputType = {
  id?: true;
  bookingId?: true;
  utm_source?: true;
  utm_medium?: true;
  utm_campaign?: true;
  utm_term?: true;
  utm_content?: true;
};

export type TrackingMaxAggregateInputType = {
  id?: true;
  bookingId?: true;
  utm_source?: true;
  utm_medium?: true;
  utm_campaign?: true;
  utm_term?: true;
  utm_content?: true;
};

export type TrackingCountAggregateInputType = {
  id?: true;
  bookingId?: true;
  utm_source?: true;
  utm_medium?: true;
  utm_campaign?: true;
  utm_term?: true;
  utm_content?: true;
  _all?: true;
};

export type TrackingAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Tracking to aggregate.
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Trackings to fetch.
   */
  orderBy?: Prisma.TrackingOrderByWithRelationInput | Prisma.TrackingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TrackingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Trackings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Trackings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Trackings
   **/
  _count?: true | TrackingCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TrackingAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TrackingSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TrackingMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TrackingMaxAggregateInputType;
};

export type GetTrackingAggregateType<T extends TrackingAggregateArgs> = {
  [P in keyof T & keyof AggregateTracking]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTracking[P]>
    : Prisma.GetScalarType<T[P], AggregateTracking[P]>;
};

export type TrackingGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.TrackingWhereInput;
  orderBy?: Prisma.TrackingOrderByWithAggregationInput | Prisma.TrackingOrderByWithAggregationInput[];
  by: Prisma.TrackingScalarFieldEnum[] | Prisma.TrackingScalarFieldEnum;
  having?: Prisma.TrackingScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TrackingCountAggregateInputType | true;
  _avg?: TrackingAvgAggregateInputType;
  _sum?: TrackingSumAggregateInputType;
  _min?: TrackingMinAggregateInputType;
  _max?: TrackingMaxAggregateInputType;
};

export type TrackingGroupByOutputType = {
  id: number;
  bookingId: number;
  utm_source: string | null;
  utm_medium: string | null;
  utm_campaign: string | null;
  utm_term: string | null;
  utm_content: string | null;
  _count: TrackingCountAggregateOutputType | null;
  _avg: TrackingAvgAggregateOutputType | null;
  _sum: TrackingSumAggregateOutputType | null;
  _min: TrackingMinAggregateOutputType | null;
  _max: TrackingMaxAggregateOutputType | null;
};

type GetTrackingGroupByPayload<T extends TrackingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TrackingGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof TrackingGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TrackingGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TrackingGroupByOutputType[P]>;
    }
  >
>;

export type TrackingWhereInput = {
  AND?: Prisma.TrackingWhereInput | Prisma.TrackingWhereInput[];
  OR?: Prisma.TrackingWhereInput[];
  NOT?: Prisma.TrackingWhereInput | Prisma.TrackingWhereInput[];
  id?: Prisma.IntFilter<"Tracking"> | number;
  bookingId?: Prisma.IntFilter<"Tracking"> | number;
  utm_source?: Prisma.StringNullableFilter<"Tracking"> | string | null;
  utm_medium?: Prisma.StringNullableFilter<"Tracking"> | string | null;
  utm_campaign?: Prisma.StringNullableFilter<"Tracking"> | string | null;
  utm_term?: Prisma.StringNullableFilter<"Tracking"> | string | null;
  utm_content?: Prisma.StringNullableFilter<"Tracking"> | string | null;
  booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
};

export type TrackingOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  utm_source?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_medium?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_campaign?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_term?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_content?: Prisma.SortOrderInput | Prisma.SortOrder;
  booking?: Prisma.BookingOrderByWithRelationInput;
};

export type TrackingWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    bookingId?: number;
    AND?: Prisma.TrackingWhereInput | Prisma.TrackingWhereInput[];
    OR?: Prisma.TrackingWhereInput[];
    NOT?: Prisma.TrackingWhereInput | Prisma.TrackingWhereInput[];
    utm_source?: Prisma.StringNullableFilter<"Tracking"> | string | null;
    utm_medium?: Prisma.StringNullableFilter<"Tracking"> | string | null;
    utm_campaign?: Prisma.StringNullableFilter<"Tracking"> | string | null;
    utm_term?: Prisma.StringNullableFilter<"Tracking"> | string | null;
    utm_content?: Prisma.StringNullableFilter<"Tracking"> | string | null;
    booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
  },
  "id" | "bookingId"
>;

export type TrackingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  utm_source?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_medium?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_campaign?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_term?: Prisma.SortOrderInput | Prisma.SortOrder;
  utm_content?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.TrackingCountOrderByAggregateInput;
  _avg?: Prisma.TrackingAvgOrderByAggregateInput;
  _max?: Prisma.TrackingMaxOrderByAggregateInput;
  _min?: Prisma.TrackingMinOrderByAggregateInput;
  _sum?: Prisma.TrackingSumOrderByAggregateInput;
};

export type TrackingScalarWhereWithAggregatesInput = {
  AND?: Prisma.TrackingScalarWhereWithAggregatesInput | Prisma.TrackingScalarWhereWithAggregatesInput[];
  OR?: Prisma.TrackingScalarWhereWithAggregatesInput[];
  NOT?: Prisma.TrackingScalarWhereWithAggregatesInput | Prisma.TrackingScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Tracking"> | number;
  bookingId?: Prisma.IntWithAggregatesFilter<"Tracking"> | number;
  utm_source?: Prisma.StringNullableWithAggregatesFilter<"Tracking"> | string | null;
  utm_medium?: Prisma.StringNullableWithAggregatesFilter<"Tracking"> | string | null;
  utm_campaign?: Prisma.StringNullableWithAggregatesFilter<"Tracking"> | string | null;
  utm_term?: Prisma.StringNullableWithAggregatesFilter<"Tracking"> | string | null;
  utm_content?: Prisma.StringNullableWithAggregatesFilter<"Tracking"> | string | null;
};

export type TrackingCreateInput = {
  utm_source?: string | null;
  utm_medium?: string | null;
  utm_campaign?: string | null;
  utm_term?: string | null;
  utm_content?: string | null;
  booking: Prisma.BookingCreateNestedOneWithoutTrackingInput;
};

export type TrackingUncheckedCreateInput = {
  id?: number;
  bookingId: number;
  utm_source?: string | null;
  utm_medium?: string | null;
  utm_campaign?: string | null;
  utm_term?: string | null;
  utm_content?: string | null;
};

export type TrackingUpdateInput = {
  utm_source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_medium?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_campaign?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  booking?: Prisma.BookingUpdateOneRequiredWithoutTrackingNestedInput;
};

export type TrackingUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  utm_source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_medium?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_campaign?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TrackingCreateManyInput = {
  id?: number;
  bookingId: number;
  utm_source?: string | null;
  utm_medium?: string | null;
  utm_campaign?: string | null;
  utm_term?: string | null;
  utm_content?: string | null;
};

export type TrackingUpdateManyMutationInput = {
  utm_source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_medium?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_campaign?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TrackingUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  bookingId?: Prisma.IntFieldUpdateOperationsInput | number;
  utm_source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_medium?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_campaign?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TrackingNullableScalarRelationFilter = {
  is?: Prisma.TrackingWhereInput | null;
  isNot?: Prisma.TrackingWhereInput | null;
};

export type TrackingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  utm_source?: Prisma.SortOrder;
  utm_medium?: Prisma.SortOrder;
  utm_campaign?: Prisma.SortOrder;
  utm_term?: Prisma.SortOrder;
  utm_content?: Prisma.SortOrder;
};

export type TrackingAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
};

export type TrackingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  utm_source?: Prisma.SortOrder;
  utm_medium?: Prisma.SortOrder;
  utm_campaign?: Prisma.SortOrder;
  utm_term?: Prisma.SortOrder;
  utm_content?: Prisma.SortOrder;
};

export type TrackingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  utm_source?: Prisma.SortOrder;
  utm_medium?: Prisma.SortOrder;
  utm_campaign?: Prisma.SortOrder;
  utm_term?: Prisma.SortOrder;
  utm_content?: Prisma.SortOrder;
};

export type TrackingSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
};

export type TrackingCreateNestedOneWithoutBookingInput = {
  create?: Prisma.XOR<
    Prisma.TrackingCreateWithoutBookingInput,
    Prisma.TrackingUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.TrackingCreateOrConnectWithoutBookingInput;
  connect?: Prisma.TrackingWhereUniqueInput;
};

export type TrackingUncheckedCreateNestedOneWithoutBookingInput = {
  create?: Prisma.XOR<
    Prisma.TrackingCreateWithoutBookingInput,
    Prisma.TrackingUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.TrackingCreateOrConnectWithoutBookingInput;
  connect?: Prisma.TrackingWhereUniqueInput;
};

export type TrackingUpdateOneWithoutBookingNestedInput = {
  create?: Prisma.XOR<
    Prisma.TrackingCreateWithoutBookingInput,
    Prisma.TrackingUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.TrackingCreateOrConnectWithoutBookingInput;
  upsert?: Prisma.TrackingUpsertWithoutBookingInput;
  disconnect?: Prisma.TrackingWhereInput | boolean;
  delete?: Prisma.TrackingWhereInput | boolean;
  connect?: Prisma.TrackingWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TrackingUpdateToOneWithWhereWithoutBookingInput,
      Prisma.TrackingUpdateWithoutBookingInput
    >,
    Prisma.TrackingUncheckedUpdateWithoutBookingInput
  >;
};

export type TrackingUncheckedUpdateOneWithoutBookingNestedInput = {
  create?: Prisma.XOR<
    Prisma.TrackingCreateWithoutBookingInput,
    Prisma.TrackingUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.TrackingCreateOrConnectWithoutBookingInput;
  upsert?: Prisma.TrackingUpsertWithoutBookingInput;
  disconnect?: Prisma.TrackingWhereInput | boolean;
  delete?: Prisma.TrackingWhereInput | boolean;
  connect?: Prisma.TrackingWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TrackingUpdateToOneWithWhereWithoutBookingInput,
      Prisma.TrackingUpdateWithoutBookingInput
    >,
    Prisma.TrackingUncheckedUpdateWithoutBookingInput
  >;
};

export type TrackingCreateWithoutBookingInput = {
  utm_source?: string | null;
  utm_medium?: string | null;
  utm_campaign?: string | null;
  utm_term?: string | null;
  utm_content?: string | null;
};

export type TrackingUncheckedCreateWithoutBookingInput = {
  id?: number;
  utm_source?: string | null;
  utm_medium?: string | null;
  utm_campaign?: string | null;
  utm_term?: string | null;
  utm_content?: string | null;
};

export type TrackingCreateOrConnectWithoutBookingInput = {
  where: Prisma.TrackingWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TrackingCreateWithoutBookingInput,
    Prisma.TrackingUncheckedCreateWithoutBookingInput
  >;
};

export type TrackingUpsertWithoutBookingInput = {
  update: Prisma.XOR<
    Prisma.TrackingUpdateWithoutBookingInput,
    Prisma.TrackingUncheckedUpdateWithoutBookingInput
  >;
  create: Prisma.XOR<
    Prisma.TrackingCreateWithoutBookingInput,
    Prisma.TrackingUncheckedCreateWithoutBookingInput
  >;
  where?: Prisma.TrackingWhereInput;
};

export type TrackingUpdateToOneWithWhereWithoutBookingInput = {
  where?: Prisma.TrackingWhereInput;
  data: Prisma.XOR<
    Prisma.TrackingUpdateWithoutBookingInput,
    Prisma.TrackingUncheckedUpdateWithoutBookingInput
  >;
};

export type TrackingUpdateWithoutBookingInput = {
  utm_source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_medium?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_campaign?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TrackingUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  utm_source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_medium?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_campaign?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  utm_content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TrackingSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    bookingId?: boolean;
    utm_source?: boolean;
    utm_medium?: boolean;
    utm_campaign?: boolean;
    utm_term?: boolean;
    utm_content?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["tracking"]
>;

export type TrackingSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    bookingId?: boolean;
    utm_source?: boolean;
    utm_medium?: boolean;
    utm_campaign?: boolean;
    utm_term?: boolean;
    utm_content?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["tracking"]
>;

export type TrackingSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    bookingId?: boolean;
    utm_source?: boolean;
    utm_medium?: boolean;
    utm_campaign?: boolean;
    utm_term?: boolean;
    utm_content?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["tracking"]
>;

export type TrackingSelectScalar = {
  id?: boolean;
  bookingId?: boolean;
  utm_source?: boolean;
  utm_medium?: boolean;
  utm_campaign?: boolean;
  utm_term?: boolean;
  utm_content?: boolean;
};

export type TrackingOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "bookingId" | "utm_source" | "utm_medium" | "utm_campaign" | "utm_term" | "utm_content",
  ExtArgs["result"]["tracking"]
>;
export type TrackingInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
};
export type TrackingIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
};
export type TrackingIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
};

export type $TrackingPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Tracking";
  objects: {
    booking: Prisma.$BookingPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      bookingId: number;
      utm_source: string | null;
      utm_medium: string | null;
      utm_campaign: string | null;
      utm_term: string | null;
      utm_content: string | null;
    },
    ExtArgs["result"]["tracking"]
  >;
  composites: {};
};

export type TrackingGetPayload<S extends boolean | null | undefined | TrackingDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$TrackingPayload, S>;

export type TrackingCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<TrackingFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: TrackingCountAggregateInputType | true;
};

export interface TrackingDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Tracking"]; meta: { name: "Tracking" } };
  /**
   * Find zero or one Tracking that matches the filter.
   * @param {TrackingFindUniqueArgs} args - Arguments to find a Tracking
   * @example
   * // Get one Tracking
   * const tracking = await prisma.tracking.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TrackingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TrackingFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TrackingPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Tracking that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TrackingFindUniqueOrThrowArgs} args - Arguments to find a Tracking
   * @example
   * // Get one Tracking
   * const tracking = await prisma.tracking.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TrackingFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TrackingFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TrackingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Tracking that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingFindFirstArgs} args - Arguments to find a Tracking
   * @example
   * // Get one Tracking
   * const tracking = await prisma.tracking.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TrackingFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TrackingFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TrackingPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Tracking that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingFindFirstOrThrowArgs} args - Arguments to find a Tracking
   * @example
   * // Get one Tracking
   * const tracking = await prisma.tracking.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TrackingFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TrackingFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TrackingPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Trackings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Trackings
   * const trackings = await prisma.tracking.findMany()
   *
   * // Get first 10 Trackings
   * const trackings = await prisma.tracking.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const trackingWithIdOnly = await prisma.tracking.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TrackingFindManyArgs>(
    args?: Prisma.SelectSubset<T, TrackingFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$TrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Tracking.
   * @param {TrackingCreateArgs} args - Arguments to create a Tracking.
   * @example
   * // Create one Tracking
   * const Tracking = await prisma.tracking.create({
   *   data: {
   *     // ... data to create a Tracking
   *   }
   * })
   *
   */
  create<T extends TrackingCreateArgs>(
    args: Prisma.SelectSubset<T, TrackingCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<Prisma.$TrackingPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Trackings.
   * @param {TrackingCreateManyArgs} args - Arguments to create many Trackings.
   * @example
   * // Create many Trackings
   * const tracking = await prisma.tracking.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TrackingCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TrackingCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Trackings and returns the data saved in the database.
   * @param {TrackingCreateManyAndReturnArgs} args - Arguments to create many Trackings.
   * @example
   * // Create many Trackings
   * const tracking = await prisma.tracking.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Trackings and only return the `id`
   * const trackingWithIdOnly = await prisma.tracking.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TrackingCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TrackingCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TrackingPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Tracking.
   * @param {TrackingDeleteArgs} args - Arguments to delete one Tracking.
   * @example
   * // Delete one Tracking
   * const Tracking = await prisma.tracking.delete({
   *   where: {
   *     // ... filter to delete one Tracking
   *   }
   * })
   *
   */
  delete<T extends TrackingDeleteArgs>(
    args: Prisma.SelectSubset<T, TrackingDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<Prisma.$TrackingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Tracking.
   * @param {TrackingUpdateArgs} args - Arguments to update one Tracking.
   * @example
   * // Update one Tracking
   * const tracking = await prisma.tracking.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TrackingUpdateArgs>(
    args: Prisma.SelectSubset<T, TrackingUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<Prisma.$TrackingPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Trackings.
   * @param {TrackingDeleteManyArgs} args - Arguments to filter Trackings to delete.
   * @example
   * // Delete a few Trackings
   * const { count } = await prisma.tracking.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TrackingDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TrackingDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Trackings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Trackings
   * const tracking = await prisma.tracking.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TrackingUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TrackingUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Trackings and returns the data updated in the database.
   * @param {TrackingUpdateManyAndReturnArgs} args - Arguments to update many Trackings.
   * @example
   * // Update many Trackings
   * const tracking = await prisma.tracking.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Trackings and only return the `id`
   * const trackingWithIdOnly = await prisma.tracking.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TrackingUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TrackingUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TrackingPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Tracking.
   * @param {TrackingUpsertArgs} args - Arguments to update or create a Tracking.
   * @example
   * // Update or create a Tracking
   * const tracking = await prisma.tracking.upsert({
   *   create: {
   *     // ... data to create a Tracking
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tracking we want to update
   *   }
   * })
   */
  upsert<T extends TrackingUpsertArgs>(
    args: Prisma.SelectSubset<T, TrackingUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TrackingClient<
    runtime.Types.Result.GetResult<Prisma.$TrackingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Trackings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingCountArgs} args - Arguments to filter Trackings to count.
   * @example
   * // Count the number of Trackings
   * const count = await prisma.tracking.count({
   *   where: {
   *     // ... the filter for the Trackings we want to count
   *   }
   * })
   **/
  count<T extends TrackingCountArgs>(
    args?: Prisma.Subset<T, TrackingCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TrackingCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Tracking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TrackingAggregateArgs>(
    args: Prisma.Subset<T, TrackingAggregateArgs>
  ): Prisma.PrismaPromise<GetTrackingAggregateType<T>>;

  /**
   * Group by Tracking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TrackingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TrackingGroupByArgs["orderBy"] }
      : { orderBy?: TrackingGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, TrackingGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetTrackingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Tracking model
   */
  readonly fields: TrackingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tracking.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TrackingClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  booking<T extends Prisma.BookingDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__BookingClient<
    | runtime.Types.Result.GetResult<
        Prisma.$BookingPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Tracking model
 */
export interface TrackingFieldRefs {
  readonly id: Prisma.FieldRef<"Tracking", "Int">;
  readonly bookingId: Prisma.FieldRef<"Tracking", "Int">;
  readonly utm_source: Prisma.FieldRef<"Tracking", "String">;
  readonly utm_medium: Prisma.FieldRef<"Tracking", "String">;
  readonly utm_campaign: Prisma.FieldRef<"Tracking", "String">;
  readonly utm_term: Prisma.FieldRef<"Tracking", "String">;
  readonly utm_content: Prisma.FieldRef<"Tracking", "String">;
}

// Custom InputTypes
/**
 * Tracking findUnique
 */
export type TrackingFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * Filter, which Tracking to fetch.
   */
  where: Prisma.TrackingWhereUniqueInput;
};

/**
 * Tracking findUniqueOrThrow
 */
export type TrackingFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * Filter, which Tracking to fetch.
   */
  where: Prisma.TrackingWhereUniqueInput;
};

/**
 * Tracking findFirst
 */
export type TrackingFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * Filter, which Tracking to fetch.
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Trackings to fetch.
   */
  orderBy?: Prisma.TrackingOrderByWithRelationInput | Prisma.TrackingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Trackings.
   */
  cursor?: Prisma.TrackingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Trackings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Trackings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Trackings.
   */
  distinct?: Prisma.TrackingScalarFieldEnum | Prisma.TrackingScalarFieldEnum[];
};

/**
 * Tracking findFirstOrThrow
 */
export type TrackingFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * Filter, which Tracking to fetch.
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Trackings to fetch.
   */
  orderBy?: Prisma.TrackingOrderByWithRelationInput | Prisma.TrackingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Trackings.
   */
  cursor?: Prisma.TrackingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Trackings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Trackings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Trackings.
   */
  distinct?: Prisma.TrackingScalarFieldEnum | Prisma.TrackingScalarFieldEnum[];
};

/**
 * Tracking findMany
 */
export type TrackingFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * Filter, which Trackings to fetch.
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Trackings to fetch.
   */
  orderBy?: Prisma.TrackingOrderByWithRelationInput | Prisma.TrackingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Trackings.
   */
  cursor?: Prisma.TrackingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Trackings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Trackings.
   */
  skip?: number;
  distinct?: Prisma.TrackingScalarFieldEnum | Prisma.TrackingScalarFieldEnum[];
};

/**
 * Tracking create
 */
export type TrackingCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * The data needed to create a Tracking.
   */
  data: Prisma.XOR<Prisma.TrackingCreateInput, Prisma.TrackingUncheckedCreateInput>;
};

/**
 * Tracking createMany
 */
export type TrackingCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Trackings.
   */
  data: Prisma.TrackingCreateManyInput | Prisma.TrackingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Tracking createManyAndReturn
 */
export type TrackingCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * The data used to create many Trackings.
   */
  data: Prisma.TrackingCreateManyInput | Prisma.TrackingCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Tracking update
 */
export type TrackingUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * The data needed to update a Tracking.
   */
  data: Prisma.XOR<Prisma.TrackingUpdateInput, Prisma.TrackingUncheckedUpdateInput>;
  /**
   * Choose, which Tracking to update.
   */
  where: Prisma.TrackingWhereUniqueInput;
};

/**
 * Tracking updateMany
 */
export type TrackingUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Trackings.
   */
  data: Prisma.XOR<Prisma.TrackingUpdateManyMutationInput, Prisma.TrackingUncheckedUpdateManyInput>;
  /**
   * Filter which Trackings to update
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * Limit how many Trackings to update.
   */
  limit?: number;
};

/**
 * Tracking updateManyAndReturn
 */
export type TrackingUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * The data used to update Trackings.
   */
  data: Prisma.XOR<Prisma.TrackingUpdateManyMutationInput, Prisma.TrackingUncheckedUpdateManyInput>;
  /**
   * Filter which Trackings to update
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * Limit how many Trackings to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Tracking upsert
 */
export type TrackingUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * The filter to search for the Tracking to update in case it exists.
   */
  where: Prisma.TrackingWhereUniqueInput;
  /**
   * In case the Tracking found by the `where` argument doesn't exist, create a new Tracking with this data.
   */
  create: Prisma.XOR<Prisma.TrackingCreateInput, Prisma.TrackingUncheckedCreateInput>;
  /**
   * In case the Tracking was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TrackingUpdateInput, Prisma.TrackingUncheckedUpdateInput>;
};

/**
 * Tracking delete
 */
export type TrackingDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
  /**
   * Filter which Tracking to delete.
   */
  where: Prisma.TrackingWhereUniqueInput;
};

/**
 * Tracking deleteMany
 */
export type TrackingDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Trackings to delete
   */
  where?: Prisma.TrackingWhereInput;
  /**
   * Limit how many Trackings to delete.
   */
  limit?: number;
};

/**
 * Tracking without action
 */
export type TrackingDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Tracking
   */
  select?: Prisma.TrackingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tracking
   */
  omit?: Prisma.TrackingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingInclude<ExtArgs> | null;
};
