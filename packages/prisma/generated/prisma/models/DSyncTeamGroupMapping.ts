/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `DSyncTeamGroupMapping` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model DSyncTeamGroupMapping
 *
 */
export type DSyncTeamGroupMappingModel =
  runtime.Types.Result.DefaultSelection<Prisma.$DSyncTeamGroupMappingPayload>;

export type AggregateDSyncTeamGroupMapping = {
  _count: DSyncTeamGroupMappingCountAggregateOutputType | null;
  _avg: DSyncTeamGroupMappingAvgAggregateOutputType | null;
  _sum: DSyncTeamGroupMappingSumAggregateOutputType | null;
  _min: DSyncTeamGroupMappingMinAggregateOutputType | null;
  _max: DSyncTeamGroupMappingMaxAggregateOutputType | null;
};

export type DSyncTeamGroupMappingAvgAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
  teamId: number | null;
};

export type DSyncTeamGroupMappingSumAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
  teamId: number | null;
};

export type DSyncTeamGroupMappingMinAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
  teamId: number | null;
  directoryId: string | null;
  groupName: string | null;
};

export type DSyncTeamGroupMappingMaxAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
  teamId: number | null;
  directoryId: string | null;
  groupName: string | null;
};

export type DSyncTeamGroupMappingCountAggregateOutputType = {
  id: number;
  organizationId: number;
  teamId: number;
  directoryId: number;
  groupName: number;
  _all: number;
};

export type DSyncTeamGroupMappingAvgAggregateInputType = {
  id?: true;
  organizationId?: true;
  teamId?: true;
};

export type DSyncTeamGroupMappingSumAggregateInputType = {
  id?: true;
  organizationId?: true;
  teamId?: true;
};

export type DSyncTeamGroupMappingMinAggregateInputType = {
  id?: true;
  organizationId?: true;
  teamId?: true;
  directoryId?: true;
  groupName?: true;
};

export type DSyncTeamGroupMappingMaxAggregateInputType = {
  id?: true;
  organizationId?: true;
  teamId?: true;
  directoryId?: true;
  groupName?: true;
};

export type DSyncTeamGroupMappingCountAggregateInputType = {
  id?: true;
  organizationId?: true;
  teamId?: true;
  directoryId?: true;
  groupName?: true;
  _all?: true;
};

export type DSyncTeamGroupMappingAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which DSyncTeamGroupMapping to aggregate.
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncTeamGroupMappings to fetch.
   */
  orderBy?:
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncTeamGroupMappings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncTeamGroupMappings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned DSyncTeamGroupMappings
   **/
  _count?: true | DSyncTeamGroupMappingCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: DSyncTeamGroupMappingAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: DSyncTeamGroupMappingSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DSyncTeamGroupMappingMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DSyncTeamGroupMappingMaxAggregateInputType;
};

export type GetDSyncTeamGroupMappingAggregateType<T extends DSyncTeamGroupMappingAggregateArgs> = {
  [P in keyof T & keyof AggregateDSyncTeamGroupMapping]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDSyncTeamGroupMapping[P]>
    : Prisma.GetScalarType<T[P], AggregateDSyncTeamGroupMapping[P]>;
};

export type DSyncTeamGroupMappingGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  orderBy?:
    | Prisma.DSyncTeamGroupMappingOrderByWithAggregationInput
    | Prisma.DSyncTeamGroupMappingOrderByWithAggregationInput[];
  by: Prisma.DSyncTeamGroupMappingScalarFieldEnum[] | Prisma.DSyncTeamGroupMappingScalarFieldEnum;
  having?: Prisma.DSyncTeamGroupMappingScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DSyncTeamGroupMappingCountAggregateInputType | true;
  _avg?: DSyncTeamGroupMappingAvgAggregateInputType;
  _sum?: DSyncTeamGroupMappingSumAggregateInputType;
  _min?: DSyncTeamGroupMappingMinAggregateInputType;
  _max?: DSyncTeamGroupMappingMaxAggregateInputType;
};

export type DSyncTeamGroupMappingGroupByOutputType = {
  id: number;
  organizationId: number;
  teamId: number;
  directoryId: string;
  groupName: string;
  _count: DSyncTeamGroupMappingCountAggregateOutputType | null;
  _avg: DSyncTeamGroupMappingAvgAggregateOutputType | null;
  _sum: DSyncTeamGroupMappingSumAggregateOutputType | null;
  _min: DSyncTeamGroupMappingMinAggregateOutputType | null;
  _max: DSyncTeamGroupMappingMaxAggregateOutputType | null;
};

type GetDSyncTeamGroupMappingGroupByPayload<T extends DSyncTeamGroupMappingGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<DSyncTeamGroupMappingGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof DSyncTeamGroupMappingGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DSyncTeamGroupMappingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DSyncTeamGroupMappingGroupByOutputType[P]>;
      }
    >
  >;

export type DSyncTeamGroupMappingWhereInput = {
  AND?: Prisma.DSyncTeamGroupMappingWhereInput | Prisma.DSyncTeamGroupMappingWhereInput[];
  OR?: Prisma.DSyncTeamGroupMappingWhereInput[];
  NOT?: Prisma.DSyncTeamGroupMappingWhereInput | Prisma.DSyncTeamGroupMappingWhereInput[];
  id?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
  organizationId?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
  teamId?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
  directoryId?: Prisma.StringFilter<"DSyncTeamGroupMapping"> | string;
  groupName?: Prisma.StringFilter<"DSyncTeamGroupMapping"> | string;
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  directory?: Prisma.XOR<Prisma.DSyncDataScalarRelationFilter, Prisma.DSyncDataWhereInput>;
};

export type DSyncTeamGroupMappingOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  groupName?: Prisma.SortOrder;
  team?: Prisma.TeamOrderByWithRelationInput;
  directory?: Prisma.DSyncDataOrderByWithRelationInput;
};

export type DSyncTeamGroupMappingWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    teamId_groupName?: Prisma.DSyncTeamGroupMappingTeamIdGroupNameCompoundUniqueInput;
    AND?: Prisma.DSyncTeamGroupMappingWhereInput | Prisma.DSyncTeamGroupMappingWhereInput[];
    OR?: Prisma.DSyncTeamGroupMappingWhereInput[];
    NOT?: Prisma.DSyncTeamGroupMappingWhereInput | Prisma.DSyncTeamGroupMappingWhereInput[];
    organizationId?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
    teamId?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
    directoryId?: Prisma.StringFilter<"DSyncTeamGroupMapping"> | string;
    groupName?: Prisma.StringFilter<"DSyncTeamGroupMapping"> | string;
    team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    directory?: Prisma.XOR<Prisma.DSyncDataScalarRelationFilter, Prisma.DSyncDataWhereInput>;
  },
  "id" | "teamId_groupName"
>;

export type DSyncTeamGroupMappingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  groupName?: Prisma.SortOrder;
  _count?: Prisma.DSyncTeamGroupMappingCountOrderByAggregateInput;
  _avg?: Prisma.DSyncTeamGroupMappingAvgOrderByAggregateInput;
  _max?: Prisma.DSyncTeamGroupMappingMaxOrderByAggregateInput;
  _min?: Prisma.DSyncTeamGroupMappingMinOrderByAggregateInput;
  _sum?: Prisma.DSyncTeamGroupMappingSumOrderByAggregateInput;
};

export type DSyncTeamGroupMappingScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.DSyncTeamGroupMappingScalarWhereWithAggregatesInput
    | Prisma.DSyncTeamGroupMappingScalarWhereWithAggregatesInput[];
  OR?: Prisma.DSyncTeamGroupMappingScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.DSyncTeamGroupMappingScalarWhereWithAggregatesInput
    | Prisma.DSyncTeamGroupMappingScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"DSyncTeamGroupMapping"> | number;
  organizationId?: Prisma.IntWithAggregatesFilter<"DSyncTeamGroupMapping"> | number;
  teamId?: Prisma.IntWithAggregatesFilter<"DSyncTeamGroupMapping"> | number;
  directoryId?: Prisma.StringWithAggregatesFilter<"DSyncTeamGroupMapping"> | string;
  groupName?: Prisma.StringWithAggregatesFilter<"DSyncTeamGroupMapping"> | string;
};

export type DSyncTeamGroupMappingCreateInput = {
  organizationId: number;
  groupName: string;
  team: Prisma.TeamCreateNestedOneWithoutDsyncTeamGroupMappingInput;
  directory: Prisma.DSyncDataCreateNestedOneWithoutTeamGroupMappingInput;
};

export type DSyncTeamGroupMappingUncheckedCreateInput = {
  id?: number;
  organizationId: number;
  teamId: number;
  directoryId: string;
  groupName: string;
};

export type DSyncTeamGroupMappingUpdateInput = {
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
  team?: Prisma.TeamUpdateOneRequiredWithoutDsyncTeamGroupMappingNestedInput;
  directory?: Prisma.DSyncDataUpdateOneRequiredWithoutTeamGroupMappingNestedInput;
};

export type DSyncTeamGroupMappingUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingCreateManyInput = {
  id?: number;
  organizationId: number;
  teamId: number;
  directoryId: string;
  groupName: string;
};

export type DSyncTeamGroupMappingUpdateManyMutationInput = {
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingListRelationFilter = {
  every?: Prisma.DSyncTeamGroupMappingWhereInput;
  some?: Prisma.DSyncTeamGroupMappingWhereInput;
  none?: Prisma.DSyncTeamGroupMappingWhereInput;
};

export type DSyncTeamGroupMappingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type DSyncTeamGroupMappingTeamIdGroupNameCompoundUniqueInput = {
  teamId: number;
  groupName: string;
};

export type DSyncTeamGroupMappingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  groupName?: Prisma.SortOrder;
};

export type DSyncTeamGroupMappingAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type DSyncTeamGroupMappingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  groupName?: Prisma.SortOrder;
};

export type DSyncTeamGroupMappingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  groupName?: Prisma.SortOrder;
};

export type DSyncTeamGroupMappingSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type DSyncTeamGroupMappingCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyTeamInputEnvelope;
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
};

export type DSyncTeamGroupMappingUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyTeamInputEnvelope;
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
};

export type DSyncTeamGroupMappingUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyTeamInputEnvelope;
  set?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  disconnect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  delete?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  update?:
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.DSyncTeamGroupMappingScalarWhereInput | Prisma.DSyncTeamGroupMappingScalarWhereInput[];
};

export type DSyncTeamGroupMappingUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyTeamInputEnvelope;
  set?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  disconnect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  delete?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  update?:
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutTeamInput
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.DSyncTeamGroupMappingScalarWhereInput | Prisma.DSyncTeamGroupMappingScalarWhereInput[];
};

export type DSyncTeamGroupMappingCreateNestedManyWithoutDirectoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyDirectoryInputEnvelope;
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
};

export type DSyncTeamGroupMappingUncheckedCreateNestedManyWithoutDirectoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyDirectoryInputEnvelope;
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
};

export type DSyncTeamGroupMappingUpdateManyWithoutDirectoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput[];
  upsert?:
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutDirectoryInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyDirectoryInputEnvelope;
  set?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  disconnect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  delete?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  update?:
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutDirectoryInput[];
  updateMany?:
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutDirectoryInput[];
  deleteMany?: Prisma.DSyncTeamGroupMappingScalarWhereInput | Prisma.DSyncTeamGroupMappingScalarWhereInput[];
};

export type DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput,
        Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput
      >
    | Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput[]
    | Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput[];
  connectOrCreate?:
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput[];
  upsert?:
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutDirectoryInput[];
  createMany?: Prisma.DSyncTeamGroupMappingCreateManyDirectoryInputEnvelope;
  set?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  disconnect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  delete?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  connect?: Prisma.DSyncTeamGroupMappingWhereUniqueInput | Prisma.DSyncTeamGroupMappingWhereUniqueInput[];
  update?:
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutDirectoryInput[];
  updateMany?:
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutDirectoryInput
    | Prisma.DSyncTeamGroupMappingUpdateManyWithWhereWithoutDirectoryInput[];
  deleteMany?: Prisma.DSyncTeamGroupMappingScalarWhereInput | Prisma.DSyncTeamGroupMappingScalarWhereInput[];
};

export type DSyncTeamGroupMappingCreateWithoutTeamInput = {
  organizationId: number;
  groupName: string;
  directory: Prisma.DSyncDataCreateNestedOneWithoutTeamGroupMappingInput;
};

export type DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput = {
  id?: number;
  organizationId: number;
  directoryId: string;
  groupName: string;
};

export type DSyncTeamGroupMappingCreateOrConnectWithoutTeamInput = {
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput,
    Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput
  >;
};

export type DSyncTeamGroupMappingCreateManyTeamInputEnvelope = {
  data: Prisma.DSyncTeamGroupMappingCreateManyTeamInput | Prisma.DSyncTeamGroupMappingCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateWithoutTeamInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingCreateWithoutTeamInput,
    Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutTeamInput
  >;
};

export type DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateWithoutTeamInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateWithoutTeamInput
  >;
};

export type DSyncTeamGroupMappingUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.DSyncTeamGroupMappingScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateManyMutationInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateManyWithoutTeamInput
  >;
};

export type DSyncTeamGroupMappingScalarWhereInput = {
  AND?: Prisma.DSyncTeamGroupMappingScalarWhereInput | Prisma.DSyncTeamGroupMappingScalarWhereInput[];
  OR?: Prisma.DSyncTeamGroupMappingScalarWhereInput[];
  NOT?: Prisma.DSyncTeamGroupMappingScalarWhereInput | Prisma.DSyncTeamGroupMappingScalarWhereInput[];
  id?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
  organizationId?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
  teamId?: Prisma.IntFilter<"DSyncTeamGroupMapping"> | number;
  directoryId?: Prisma.StringFilter<"DSyncTeamGroupMapping"> | string;
  groupName?: Prisma.StringFilter<"DSyncTeamGroupMapping"> | string;
};

export type DSyncTeamGroupMappingCreateWithoutDirectoryInput = {
  organizationId: number;
  groupName: string;
  team: Prisma.TeamCreateNestedOneWithoutDsyncTeamGroupMappingInput;
};

export type DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput = {
  id?: number;
  organizationId: number;
  teamId: number;
  groupName: string;
};

export type DSyncTeamGroupMappingCreateOrConnectWithoutDirectoryInput = {
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput,
    Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput
  >;
};

export type DSyncTeamGroupMappingCreateManyDirectoryInputEnvelope = {
  data:
    | Prisma.DSyncTeamGroupMappingCreateManyDirectoryInput
    | Prisma.DSyncTeamGroupMappingCreateManyDirectoryInput[];
  skipDuplicates?: boolean;
};

export type DSyncTeamGroupMappingUpsertWithWhereUniqueWithoutDirectoryInput = {
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateWithoutDirectoryInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateWithoutDirectoryInput
  >;
  create: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingCreateWithoutDirectoryInput,
    Prisma.DSyncTeamGroupMappingUncheckedCreateWithoutDirectoryInput
  >;
};

export type DSyncTeamGroupMappingUpdateWithWhereUniqueWithoutDirectoryInput = {
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateWithoutDirectoryInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateWithoutDirectoryInput
  >;
};

export type DSyncTeamGroupMappingUpdateManyWithWhereWithoutDirectoryInput = {
  where: Prisma.DSyncTeamGroupMappingScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateManyMutationInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryInput
  >;
};

export type DSyncTeamGroupMappingCreateManyTeamInput = {
  id?: number;
  organizationId: number;
  directoryId: string;
  groupName: string;
};

export type DSyncTeamGroupMappingUpdateWithoutTeamInput = {
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
  directory?: Prisma.DSyncDataUpdateOneRequiredWithoutTeamGroupMappingNestedInput;
};

export type DSyncTeamGroupMappingUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingCreateManyDirectoryInput = {
  id?: number;
  organizationId: number;
  teamId: number;
  groupName: string;
};

export type DSyncTeamGroupMappingUpdateWithoutDirectoryInput = {
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
  team?: Prisma.TeamUpdateOneRequiredWithoutDsyncTeamGroupMappingNestedInput;
};

export type DSyncTeamGroupMappingUncheckedUpdateWithoutDirectoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  groupName?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncTeamGroupMappingSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    organizationId?: boolean;
    teamId?: boolean;
    directoryId?: boolean;
    groupName?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    directory?: boolean | Prisma.DSyncDataDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["dSyncTeamGroupMapping"]
>;

export type DSyncTeamGroupMappingSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    organizationId?: boolean;
    teamId?: boolean;
    directoryId?: boolean;
    groupName?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    directory?: boolean | Prisma.DSyncDataDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["dSyncTeamGroupMapping"]
>;

export type DSyncTeamGroupMappingSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    organizationId?: boolean;
    teamId?: boolean;
    directoryId?: boolean;
    groupName?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    directory?: boolean | Prisma.DSyncDataDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["dSyncTeamGroupMapping"]
>;

export type DSyncTeamGroupMappingSelectScalar = {
  id?: boolean;
  organizationId?: boolean;
  teamId?: boolean;
  directoryId?: boolean;
  groupName?: boolean;
};

export type DSyncTeamGroupMappingOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "organizationId" | "teamId" | "directoryId" | "groupName",
  ExtArgs["result"]["dSyncTeamGroupMapping"]
>;
export type DSyncTeamGroupMappingInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  directory?: boolean | Prisma.DSyncDataDefaultArgs<ExtArgs>;
};
export type DSyncTeamGroupMappingIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  directory?: boolean | Prisma.DSyncDataDefaultArgs<ExtArgs>;
};
export type DSyncTeamGroupMappingIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  directory?: boolean | Prisma.DSyncDataDefaultArgs<ExtArgs>;
};

export type $DSyncTeamGroupMappingPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "DSyncTeamGroupMapping";
  objects: {
    team: Prisma.$TeamPayload<ExtArgs>;
    directory: Prisma.$DSyncDataPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      organizationId: number;
      teamId: number;
      directoryId: string;
      groupName: string;
    },
    ExtArgs["result"]["dSyncTeamGroupMapping"]
  >;
  composites: {};
};

export type DSyncTeamGroupMappingGetPayload<
  S extends boolean | null | undefined | DSyncTeamGroupMappingDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$DSyncTeamGroupMappingPayload, S>;

export type DSyncTeamGroupMappingCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<DSyncTeamGroupMappingFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: DSyncTeamGroupMappingCountAggregateInputType | true;
};

export interface DSyncTeamGroupMappingDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["DSyncTeamGroupMapping"];
    meta: { name: "DSyncTeamGroupMapping" };
  };
  /**
   * Find zero or one DSyncTeamGroupMapping that matches the filter.
   * @param {DSyncTeamGroupMappingFindUniqueArgs} args - Arguments to find a DSyncTeamGroupMapping
   * @example
   * // Get one DSyncTeamGroupMapping
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DSyncTeamGroupMappingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one DSyncTeamGroupMapping that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DSyncTeamGroupMappingFindUniqueOrThrowArgs} args - Arguments to find a DSyncTeamGroupMapping
   * @example
   * // Get one DSyncTeamGroupMapping
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DSyncTeamGroupMappingFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first DSyncTeamGroupMapping that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingFindFirstArgs} args - Arguments to find a DSyncTeamGroupMapping
   * @example
   * // Get one DSyncTeamGroupMapping
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DSyncTeamGroupMappingFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DSyncTeamGroupMappingFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first DSyncTeamGroupMapping that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingFindFirstOrThrowArgs} args - Arguments to find a DSyncTeamGroupMapping
   * @example
   * // Get one DSyncTeamGroupMapping
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DSyncTeamGroupMappingFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DSyncTeamGroupMappingFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more DSyncTeamGroupMappings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DSyncTeamGroupMappings
   * const dSyncTeamGroupMappings = await prisma.dSyncTeamGroupMapping.findMany()
   *
   * // Get first 10 DSyncTeamGroupMappings
   * const dSyncTeamGroupMappings = await prisma.dSyncTeamGroupMapping.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const dSyncTeamGroupMappingWithIdOnly = await prisma.dSyncTeamGroupMapping.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DSyncTeamGroupMappingFindManyArgs>(
    args?: Prisma.SelectSubset<T, DSyncTeamGroupMappingFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a DSyncTeamGroupMapping.
   * @param {DSyncTeamGroupMappingCreateArgs} args - Arguments to create a DSyncTeamGroupMapping.
   * @example
   * // Create one DSyncTeamGroupMapping
   * const DSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.create({
   *   data: {
   *     // ... data to create a DSyncTeamGroupMapping
   *   }
   * })
   *
   */
  create<T extends DSyncTeamGroupMappingCreateArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingCreateArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many DSyncTeamGroupMappings.
   * @param {DSyncTeamGroupMappingCreateManyArgs} args - Arguments to create many DSyncTeamGroupMappings.
   * @example
   * // Create many DSyncTeamGroupMappings
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DSyncTeamGroupMappingCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DSyncTeamGroupMappingCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many DSyncTeamGroupMappings and returns the data saved in the database.
   * @param {DSyncTeamGroupMappingCreateManyAndReturnArgs} args - Arguments to create many DSyncTeamGroupMappings.
   * @example
   * // Create many DSyncTeamGroupMappings
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many DSyncTeamGroupMappings and only return the `id`
   * const dSyncTeamGroupMappingWithIdOnly = await prisma.dSyncTeamGroupMapping.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DSyncTeamGroupMappingCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DSyncTeamGroupMappingCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a DSyncTeamGroupMapping.
   * @param {DSyncTeamGroupMappingDeleteArgs} args - Arguments to delete one DSyncTeamGroupMapping.
   * @example
   * // Delete one DSyncTeamGroupMapping
   * const DSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.delete({
   *   where: {
   *     // ... filter to delete one DSyncTeamGroupMapping
   *   }
   * })
   *
   */
  delete<T extends DSyncTeamGroupMappingDeleteArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one DSyncTeamGroupMapping.
   * @param {DSyncTeamGroupMappingUpdateArgs} args - Arguments to update one DSyncTeamGroupMapping.
   * @example
   * // Update one DSyncTeamGroupMapping
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DSyncTeamGroupMappingUpdateArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more DSyncTeamGroupMappings.
   * @param {DSyncTeamGroupMappingDeleteManyArgs} args - Arguments to filter DSyncTeamGroupMappings to delete.
   * @example
   * // Delete a few DSyncTeamGroupMappings
   * const { count } = await prisma.dSyncTeamGroupMapping.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DSyncTeamGroupMappingDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DSyncTeamGroupMappingDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more DSyncTeamGroupMappings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DSyncTeamGroupMappings
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DSyncTeamGroupMappingUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more DSyncTeamGroupMappings and returns the data updated in the database.
   * @param {DSyncTeamGroupMappingUpdateManyAndReturnArgs} args - Arguments to update many DSyncTeamGroupMappings.
   * @example
   * // Update many DSyncTeamGroupMappings
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more DSyncTeamGroupMappings and only return the `id`
   * const dSyncTeamGroupMappingWithIdOnly = await prisma.dSyncTeamGroupMapping.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DSyncTeamGroupMappingUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one DSyncTeamGroupMapping.
   * @param {DSyncTeamGroupMappingUpsertArgs} args - Arguments to update or create a DSyncTeamGroupMapping.
   * @example
   * // Update or create a DSyncTeamGroupMapping
   * const dSyncTeamGroupMapping = await prisma.dSyncTeamGroupMapping.upsert({
   *   create: {
   *     // ... data to create a DSyncTeamGroupMapping
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DSyncTeamGroupMapping we want to update
   *   }
   * })
   */
  upsert<T extends DSyncTeamGroupMappingUpsertArgs>(
    args: Prisma.SelectSubset<T, DSyncTeamGroupMappingUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncTeamGroupMappingClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of DSyncTeamGroupMappings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingCountArgs} args - Arguments to filter DSyncTeamGroupMappings to count.
   * @example
   * // Count the number of DSyncTeamGroupMappings
   * const count = await prisma.dSyncTeamGroupMapping.count({
   *   where: {
   *     // ... the filter for the DSyncTeamGroupMappings we want to count
   *   }
   * })
   **/
  count<T extends DSyncTeamGroupMappingCountArgs>(
    args?: Prisma.Subset<T, DSyncTeamGroupMappingCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], DSyncTeamGroupMappingCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a DSyncTeamGroupMapping.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DSyncTeamGroupMappingAggregateArgs>(
    args: Prisma.Subset<T, DSyncTeamGroupMappingAggregateArgs>
  ): Prisma.PrismaPromise<GetDSyncTeamGroupMappingAggregateType<T>>;

  /**
   * Group by DSyncTeamGroupMapping.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncTeamGroupMappingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DSyncTeamGroupMappingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DSyncTeamGroupMappingGroupByArgs["orderBy"] }
      : { orderBy?: DSyncTeamGroupMappingGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, DSyncTeamGroupMappingGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetDSyncTeamGroupMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the DSyncTeamGroupMapping model
   */
  readonly fields: DSyncTeamGroupMappingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DSyncTeamGroupMapping.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DSyncTeamGroupMappingClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  directory<T extends Prisma.DSyncDataDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.DSyncDataDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    | runtime.Types.Result.GetResult<
        Prisma.$DSyncDataPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the DSyncTeamGroupMapping model
 */
export interface DSyncTeamGroupMappingFieldRefs {
  readonly id: Prisma.FieldRef<"DSyncTeamGroupMapping", "Int">;
  readonly organizationId: Prisma.FieldRef<"DSyncTeamGroupMapping", "Int">;
  readonly teamId: Prisma.FieldRef<"DSyncTeamGroupMapping", "Int">;
  readonly directoryId: Prisma.FieldRef<"DSyncTeamGroupMapping", "String">;
  readonly groupName: Prisma.FieldRef<"DSyncTeamGroupMapping", "String">;
}

// Custom InputTypes
/**
 * DSyncTeamGroupMapping findUnique
 */
export type DSyncTeamGroupMappingFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncTeamGroupMapping to fetch.
   */
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
};

/**
 * DSyncTeamGroupMapping findUniqueOrThrow
 */
export type DSyncTeamGroupMappingFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncTeamGroupMapping to fetch.
   */
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
};

/**
 * DSyncTeamGroupMapping findFirst
 */
export type DSyncTeamGroupMappingFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncTeamGroupMapping to fetch.
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncTeamGroupMappings to fetch.
   */
  orderBy?:
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for DSyncTeamGroupMappings.
   */
  cursor?: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncTeamGroupMappings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncTeamGroupMappings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of DSyncTeamGroupMappings.
   */
  distinct?: Prisma.DSyncTeamGroupMappingScalarFieldEnum | Prisma.DSyncTeamGroupMappingScalarFieldEnum[];
};

/**
 * DSyncTeamGroupMapping findFirstOrThrow
 */
export type DSyncTeamGroupMappingFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncTeamGroupMapping to fetch.
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncTeamGroupMappings to fetch.
   */
  orderBy?:
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for DSyncTeamGroupMappings.
   */
  cursor?: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncTeamGroupMappings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncTeamGroupMappings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of DSyncTeamGroupMappings.
   */
  distinct?: Prisma.DSyncTeamGroupMappingScalarFieldEnum | Prisma.DSyncTeamGroupMappingScalarFieldEnum[];
};

/**
 * DSyncTeamGroupMapping findMany
 */
export type DSyncTeamGroupMappingFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncTeamGroupMappings to fetch.
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncTeamGroupMappings to fetch.
   */
  orderBy?:
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing DSyncTeamGroupMappings.
   */
  cursor?: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncTeamGroupMappings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncTeamGroupMappings.
   */
  skip?: number;
  distinct?: Prisma.DSyncTeamGroupMappingScalarFieldEnum | Prisma.DSyncTeamGroupMappingScalarFieldEnum[];
};

/**
 * DSyncTeamGroupMapping create
 */
export type DSyncTeamGroupMappingCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * The data needed to create a DSyncTeamGroupMapping.
   */
  data: Prisma.XOR<Prisma.DSyncTeamGroupMappingCreateInput, Prisma.DSyncTeamGroupMappingUncheckedCreateInput>;
};

/**
 * DSyncTeamGroupMapping createMany
 */
export type DSyncTeamGroupMappingCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many DSyncTeamGroupMappings.
   */
  data: Prisma.DSyncTeamGroupMappingCreateManyInput | Prisma.DSyncTeamGroupMappingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * DSyncTeamGroupMapping createManyAndReturn
 */
export type DSyncTeamGroupMappingCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * The data used to create many DSyncTeamGroupMappings.
   */
  data: Prisma.DSyncTeamGroupMappingCreateManyInput | Prisma.DSyncTeamGroupMappingCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * DSyncTeamGroupMapping update
 */
export type DSyncTeamGroupMappingUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * The data needed to update a DSyncTeamGroupMapping.
   */
  data: Prisma.XOR<Prisma.DSyncTeamGroupMappingUpdateInput, Prisma.DSyncTeamGroupMappingUncheckedUpdateInput>;
  /**
   * Choose, which DSyncTeamGroupMapping to update.
   */
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
};

/**
 * DSyncTeamGroupMapping updateMany
 */
export type DSyncTeamGroupMappingUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update DSyncTeamGroupMappings.
   */
  data: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateManyMutationInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateManyInput
  >;
  /**
   * Filter which DSyncTeamGroupMappings to update
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * Limit how many DSyncTeamGroupMappings to update.
   */
  limit?: number;
};

/**
 * DSyncTeamGroupMapping updateManyAndReturn
 */
export type DSyncTeamGroupMappingUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * The data used to update DSyncTeamGroupMappings.
   */
  data: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateManyMutationInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateManyInput
  >;
  /**
   * Filter which DSyncTeamGroupMappings to update
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * Limit how many DSyncTeamGroupMappings to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * DSyncTeamGroupMapping upsert
 */
export type DSyncTeamGroupMappingUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * The filter to search for the DSyncTeamGroupMapping to update in case it exists.
   */
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  /**
   * In case the DSyncTeamGroupMapping found by the `where` argument doesn't exist, create a new DSyncTeamGroupMapping with this data.
   */
  create: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingCreateInput,
    Prisma.DSyncTeamGroupMappingUncheckedCreateInput
  >;
  /**
   * In case the DSyncTeamGroupMapping was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.DSyncTeamGroupMappingUpdateInput,
    Prisma.DSyncTeamGroupMappingUncheckedUpdateInput
  >;
};

/**
 * DSyncTeamGroupMapping delete
 */
export type DSyncTeamGroupMappingDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  /**
   * Filter which DSyncTeamGroupMapping to delete.
   */
  where: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
};

/**
 * DSyncTeamGroupMapping deleteMany
 */
export type DSyncTeamGroupMappingDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which DSyncTeamGroupMappings to delete
   */
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  /**
   * Limit how many DSyncTeamGroupMappings to delete.
   */
  limit?: number;
};

/**
 * DSyncTeamGroupMapping without action
 */
export type DSyncTeamGroupMappingDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
};
