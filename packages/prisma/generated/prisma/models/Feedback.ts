/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Feedback` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Feedback
 *
 */
export type FeedbackModel = runtime.Types.Result.DefaultSelection<Prisma.$FeedbackPayload>;

export type AggregateFeedback = {
  _count: FeedbackCountAggregateOutputType | null;
  _avg: FeedbackAvgAggregateOutputType | null;
  _sum: FeedbackSumAggregateOutputType | null;
  _min: FeedbackMinAggregateOutputType | null;
  _max: FeedbackMaxAggregateOutputType | null;
};

export type FeedbackAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type FeedbackSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type FeedbackMinAggregateOutputType = {
  id: number | null;
  date: Date | null;
  userId: number | null;
  rating: string | null;
  comment: string | null;
};

export type FeedbackMaxAggregateOutputType = {
  id: number | null;
  date: Date | null;
  userId: number | null;
  rating: string | null;
  comment: string | null;
};

export type FeedbackCountAggregateOutputType = {
  id: number;
  date: number;
  userId: number;
  rating: number;
  comment: number;
  _all: number;
};

export type FeedbackAvgAggregateInputType = {
  id?: true;
  userId?: true;
};

export type FeedbackSumAggregateInputType = {
  id?: true;
  userId?: true;
};

export type FeedbackMinAggregateInputType = {
  id?: true;
  date?: true;
  userId?: true;
  rating?: true;
  comment?: true;
};

export type FeedbackMaxAggregateInputType = {
  id?: true;
  date?: true;
  userId?: true;
  rating?: true;
  comment?: true;
};

export type FeedbackCountAggregateInputType = {
  id?: true;
  date?: true;
  userId?: true;
  rating?: true;
  comment?: true;
  _all?: true;
};

export type FeedbackAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Feedback to aggregate.
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Feedbacks to fetch.
   */
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FeedbackWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Feedbacks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Feedbacks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Feedbacks
   **/
  _count?: true | FeedbackCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: FeedbackAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: FeedbackSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FeedbackMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FeedbackMaxAggregateInputType;
};

export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
  [P in keyof T & keyof AggregateFeedback]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedback[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedback[P]>;
};

export type FeedbackGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.FeedbackWhereInput;
  orderBy?: Prisma.FeedbackOrderByWithAggregationInput | Prisma.FeedbackOrderByWithAggregationInput[];
  by: Prisma.FeedbackScalarFieldEnum[] | Prisma.FeedbackScalarFieldEnum;
  having?: Prisma.FeedbackScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FeedbackCountAggregateInputType | true;
  _avg?: FeedbackAvgAggregateInputType;
  _sum?: FeedbackSumAggregateInputType;
  _min?: FeedbackMinAggregateInputType;
  _max?: FeedbackMaxAggregateInputType;
};

export type FeedbackGroupByOutputType = {
  id: number;
  date: Date;
  userId: number;
  rating: string;
  comment: string | null;
  _count: FeedbackCountAggregateOutputType | null;
  _avg: FeedbackAvgAggregateOutputType | null;
  _sum: FeedbackSumAggregateOutputType | null;
  _min: FeedbackMinAggregateOutputType | null;
  _max: FeedbackMaxAggregateOutputType | null;
};

type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FeedbackGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof FeedbackGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], FeedbackGroupByOutputType[P]>;
    }
  >
>;

export type FeedbackWhereInput = {
  AND?: Prisma.FeedbackWhereInput | Prisma.FeedbackWhereInput[];
  OR?: Prisma.FeedbackWhereInput[];
  NOT?: Prisma.FeedbackWhereInput | Prisma.FeedbackWhereInput[];
  id?: Prisma.IntFilter<"Feedback"> | number;
  date?: Prisma.DateTimeFilter<"Feedback"> | Date | string;
  userId?: Prisma.IntFilter<"Feedback"> | number;
  rating?: Prisma.StringFilter<"Feedback"> | string;
  comment?: Prisma.StringNullableFilter<"Feedback"> | string | null;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type FeedbackOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  comment?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type FeedbackWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.FeedbackWhereInput | Prisma.FeedbackWhereInput[];
    OR?: Prisma.FeedbackWhereInput[];
    NOT?: Prisma.FeedbackWhereInput | Prisma.FeedbackWhereInput[];
    date?: Prisma.DateTimeFilter<"Feedback"> | Date | string;
    userId?: Prisma.IntFilter<"Feedback"> | number;
    rating?: Prisma.StringFilter<"Feedback"> | string;
    comment?: Prisma.StringNullableFilter<"Feedback"> | string | null;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type FeedbackOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  comment?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.FeedbackCountOrderByAggregateInput;
  _avg?: Prisma.FeedbackAvgOrderByAggregateInput;
  _max?: Prisma.FeedbackMaxOrderByAggregateInput;
  _min?: Prisma.FeedbackMinOrderByAggregateInput;
  _sum?: Prisma.FeedbackSumOrderByAggregateInput;
};

export type FeedbackScalarWhereWithAggregatesInput = {
  AND?: Prisma.FeedbackScalarWhereWithAggregatesInput | Prisma.FeedbackScalarWhereWithAggregatesInput[];
  OR?: Prisma.FeedbackScalarWhereWithAggregatesInput[];
  NOT?: Prisma.FeedbackScalarWhereWithAggregatesInput | Prisma.FeedbackScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Feedback"> | number;
  date?: Prisma.DateTimeWithAggregatesFilter<"Feedback"> | Date | string;
  userId?: Prisma.IntWithAggregatesFilter<"Feedback"> | number;
  rating?: Prisma.StringWithAggregatesFilter<"Feedback"> | string;
  comment?: Prisma.StringNullableWithAggregatesFilter<"Feedback"> | string | null;
};

export type FeedbackCreateInput = {
  date?: Date | string;
  rating: string;
  comment?: string | null;
  user: Prisma.UserCreateNestedOneWithoutFeedbackInput;
};

export type FeedbackUncheckedCreateInput = {
  id?: number;
  date?: Date | string;
  userId: number;
  rating: string;
  comment?: string | null;
};

export type FeedbackUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutFeedbackNestedInput;
};

export type FeedbackUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeedbackCreateManyInput = {
  id?: number;
  date?: Date | string;
  userId: number;
  rating: string;
  comment?: string | null;
};

export type FeedbackUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeedbackUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeedbackListRelationFilter = {
  every?: Prisma.FeedbackWhereInput;
  some?: Prisma.FeedbackWhereInput;
  none?: Prisma.FeedbackWhereInput;
};

export type FeedbackOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type FeedbackCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
};

export type FeedbackAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type FeedbackMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
};

export type FeedbackMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  comment?: Prisma.SortOrder;
};

export type FeedbackSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type FeedbackCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.FeedbackCreateWithoutUserInput, Prisma.FeedbackUncheckedCreateWithoutUserInput>
    | Prisma.FeedbackCreateWithoutUserInput[]
    | Prisma.FeedbackUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FeedbackCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.FeedbackCreateManyUserInputEnvelope;
  connect?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
};

export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.FeedbackCreateWithoutUserInput, Prisma.FeedbackUncheckedCreateWithoutUserInput>
    | Prisma.FeedbackCreateWithoutUserInput[]
    | Prisma.FeedbackUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FeedbackCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.FeedbackCreateManyUserInputEnvelope;
  connect?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
};

export type FeedbackUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.FeedbackCreateWithoutUserInput, Prisma.FeedbackUncheckedCreateWithoutUserInput>
    | Prisma.FeedbackCreateWithoutUserInput[]
    | Prisma.FeedbackUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FeedbackCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.FeedbackUpsertWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.FeedbackCreateManyUserInputEnvelope;
  set?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  disconnect?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  delete?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  connect?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  update?:
    | Prisma.FeedbackUpdateWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.FeedbackUpdateManyWithWhereWithoutUserInput
    | Prisma.FeedbackUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.FeedbackScalarWhereInput | Prisma.FeedbackScalarWhereInput[];
};

export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.FeedbackCreateWithoutUserInput, Prisma.FeedbackUncheckedCreateWithoutUserInput>
    | Prisma.FeedbackCreateWithoutUserInput[]
    | Prisma.FeedbackUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.FeedbackCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.FeedbackUpsertWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.FeedbackCreateManyUserInputEnvelope;
  set?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  disconnect?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  delete?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  connect?: Prisma.FeedbackWhereUniqueInput | Prisma.FeedbackWhereUniqueInput[];
  update?:
    | Prisma.FeedbackUpdateWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.FeedbackUpdateManyWithWhereWithoutUserInput
    | Prisma.FeedbackUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.FeedbackScalarWhereInput | Prisma.FeedbackScalarWhereInput[];
};

export type FeedbackCreateWithoutUserInput = {
  date?: Date | string;
  rating: string;
  comment?: string | null;
};

export type FeedbackUncheckedCreateWithoutUserInput = {
  id?: number;
  date?: Date | string;
  rating: string;
  comment?: string | null;
};

export type FeedbackCreateOrConnectWithoutUserInput = {
  where: Prisma.FeedbackWhereUniqueInput;
  create: Prisma.XOR<Prisma.FeedbackCreateWithoutUserInput, Prisma.FeedbackUncheckedCreateWithoutUserInput>;
};

export type FeedbackCreateManyUserInputEnvelope = {
  data: Prisma.FeedbackCreateManyUserInput | Prisma.FeedbackCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.FeedbackWhereUniqueInput;
  update: Prisma.XOR<Prisma.FeedbackUpdateWithoutUserInput, Prisma.FeedbackUncheckedUpdateWithoutUserInput>;
  create: Prisma.XOR<Prisma.FeedbackCreateWithoutUserInput, Prisma.FeedbackUncheckedCreateWithoutUserInput>;
};

export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.FeedbackWhereUniqueInput;
  data: Prisma.XOR<Prisma.FeedbackUpdateWithoutUserInput, Prisma.FeedbackUncheckedUpdateWithoutUserInput>;
};

export type FeedbackUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.FeedbackScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FeedbackUpdateManyMutationInput,
    Prisma.FeedbackUncheckedUpdateManyWithoutUserInput
  >;
};

export type FeedbackScalarWhereInput = {
  AND?: Prisma.FeedbackScalarWhereInput | Prisma.FeedbackScalarWhereInput[];
  OR?: Prisma.FeedbackScalarWhereInput[];
  NOT?: Prisma.FeedbackScalarWhereInput | Prisma.FeedbackScalarWhereInput[];
  id?: Prisma.IntFilter<"Feedback"> | number;
  date?: Prisma.DateTimeFilter<"Feedback"> | Date | string;
  userId?: Prisma.IntFilter<"Feedback"> | number;
  rating?: Prisma.StringFilter<"Feedback"> | string;
  comment?: Prisma.StringNullableFilter<"Feedback"> | string | null;
};

export type FeedbackCreateManyUserInput = {
  id?: number;
  date?: Date | string;
  rating: string;
  comment?: string | null;
};

export type FeedbackUpdateWithoutUserInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeedbackUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeedbackUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rating?: Prisma.StringFieldUpdateOperationsInput | string;
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type FeedbackSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    userId?: boolean;
    rating?: boolean;
    comment?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["feedback"]
>;

export type FeedbackSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    userId?: boolean;
    rating?: boolean;
    comment?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["feedback"]
>;

export type FeedbackSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    date?: boolean;
    userId?: boolean;
    rating?: boolean;
    comment?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["feedback"]
>;

export type FeedbackSelectScalar = {
  id?: boolean;
  date?: boolean;
  userId?: boolean;
  rating?: boolean;
  comment?: boolean;
};

export type FeedbackOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "date" | "userId" | "rating" | "comment",
  ExtArgs["result"]["feedback"]
>;
export type FeedbackInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type FeedbackIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type FeedbackIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $FeedbackPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Feedback";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      date: Date;
      userId: number;
      rating: string;
      comment: string | null;
    },
    ExtArgs["result"]["feedback"]
  >;
  composites: {};
};

export type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$FeedbackPayload, S>;

export type FeedbackCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<FeedbackFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: FeedbackCountAggregateInputType | true;
};

export interface FeedbackDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Feedback"]; meta: { name: "Feedback" } };
  /**
   * Find zero or one Feedback that matches the filter.
   * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
   * @example
   * // Get one Feedback
   * const feedback = await prisma.feedback.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
   * @example
   * // Get one Feedback
   * const feedback = await prisma.feedback.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Feedback that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
   * @example
   * // Get one Feedback
   * const feedback = await prisma.feedback.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Feedback that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
   * @example
   * // Get one Feedback
   * const feedback = await prisma.feedback.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Feedbacks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Feedbacks
   * const feedbacks = await prisma.feedback.findMany()
   *
   * // Get first 10 Feedbacks
   * const feedbacks = await prisma.feedback.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FeedbackFindManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Feedback.
   * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
   * @example
   * // Create one Feedback
   * const Feedback = await prisma.feedback.create({
   *   data: {
   *     // ... data to create a Feedback
   *   }
   * })
   *
   */
  create<T extends FeedbackCreateArgs>(
    args: Prisma.SelectSubset<T, FeedbackCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Feedbacks.
   * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
   * @example
   * // Create many Feedbacks
   * const feedback = await prisma.feedback.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FeedbackCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Feedbacks and returns the data saved in the database.
   * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
   * @example
   * // Create many Feedbacks
   * const feedback = await prisma.feedback.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Feedbacks and only return the `id`
   * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Feedback.
   * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
   * @example
   * // Delete one Feedback
   * const Feedback = await prisma.feedback.delete({
   *   where: {
   *     // ... filter to delete one Feedback
   *   }
   * })
   *
   */
  delete<T extends FeedbackDeleteArgs>(
    args: Prisma.SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Feedback.
   * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
   * @example
   * // Update one Feedback
   * const feedback = await prisma.feedback.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FeedbackUpdateArgs>(
    args: Prisma.SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Feedbacks.
   * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
   * @example
   * // Delete a few Feedbacks
   * const { count } = await prisma.feedback.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FeedbackDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Feedbacks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Feedbacks
   * const feedback = await prisma.feedback.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FeedbackUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Feedbacks and returns the data updated in the database.
   * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
   * @example
   * // Update many Feedbacks
   * const feedback = await prisma.feedback.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Feedbacks and only return the `id`
   * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Feedback.
   * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
   * @example
   * // Update or create a Feedback
   * const feedback = await prisma.feedback.upsert({
   *   create: {
   *     // ... data to create a Feedback
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Feedback we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackUpsertArgs>(
    args: Prisma.SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackClient<
    runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Feedbacks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
   * @example
   * // Count the number of Feedbacks
   * const count = await prisma.feedback.count({
   *   where: {
   *     // ... the filter for the Feedbacks we want to count
   *   }
   * })
   **/
  count<T extends FeedbackCountArgs>(
    args?: Prisma.Subset<T, FeedbackCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], FeedbackCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Feedback.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FeedbackAggregateArgs>(
    args: Prisma.Subset<T, FeedbackAggregateArgs>
  ): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>;

  /**
   * Group by Feedback.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FeedbackGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackGroupByArgs["orderBy"] }
      : { orderBy?: FeedbackGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Feedback.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Feedback model
 */
export interface FeedbackFieldRefs {
  readonly id: Prisma.FieldRef<"Feedback", "Int">;
  readonly date: Prisma.FieldRef<"Feedback", "DateTime">;
  readonly userId: Prisma.FieldRef<"Feedback", "Int">;
  readonly rating: Prisma.FieldRef<"Feedback", "String">;
  readonly comment: Prisma.FieldRef<"Feedback", "String">;
}

// Custom InputTypes
/**
 * Feedback findUnique
 */
export type FeedbackFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * Filter, which Feedback to fetch.
   */
  where: Prisma.FeedbackWhereUniqueInput;
};

/**
 * Feedback findUniqueOrThrow
 */
export type FeedbackFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * Filter, which Feedback to fetch.
   */
  where: Prisma.FeedbackWhereUniqueInput;
};

/**
 * Feedback findFirst
 */
export type FeedbackFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * Filter, which Feedback to fetch.
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Feedbacks to fetch.
   */
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Feedbacks.
   */
  cursor?: Prisma.FeedbackWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Feedbacks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Feedbacks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Feedbacks.
   */
  distinct?: Prisma.FeedbackScalarFieldEnum | Prisma.FeedbackScalarFieldEnum[];
};

/**
 * Feedback findFirstOrThrow
 */
export type FeedbackFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * Filter, which Feedback to fetch.
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Feedbacks to fetch.
   */
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Feedbacks.
   */
  cursor?: Prisma.FeedbackWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Feedbacks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Feedbacks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Feedbacks.
   */
  distinct?: Prisma.FeedbackScalarFieldEnum | Prisma.FeedbackScalarFieldEnum[];
};

/**
 * Feedback findMany
 */
export type FeedbackFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * Filter, which Feedbacks to fetch.
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Feedbacks to fetch.
   */
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Feedbacks.
   */
  cursor?: Prisma.FeedbackWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Feedbacks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Feedbacks.
   */
  skip?: number;
  distinct?: Prisma.FeedbackScalarFieldEnum | Prisma.FeedbackScalarFieldEnum[];
};

/**
 * Feedback create
 */
export type FeedbackCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * The data needed to create a Feedback.
   */
  data: Prisma.XOR<Prisma.FeedbackCreateInput, Prisma.FeedbackUncheckedCreateInput>;
};

/**
 * Feedback createMany
 */
export type FeedbackCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Feedbacks.
   */
  data: Prisma.FeedbackCreateManyInput | Prisma.FeedbackCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Feedback createManyAndReturn
 */
export type FeedbackCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * The data used to create many Feedbacks.
   */
  data: Prisma.FeedbackCreateManyInput | Prisma.FeedbackCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Feedback update
 */
export type FeedbackUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * The data needed to update a Feedback.
   */
  data: Prisma.XOR<Prisma.FeedbackUpdateInput, Prisma.FeedbackUncheckedUpdateInput>;
  /**
   * Choose, which Feedback to update.
   */
  where: Prisma.FeedbackWhereUniqueInput;
};

/**
 * Feedback updateMany
 */
export type FeedbackUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Feedbacks.
   */
  data: Prisma.XOR<Prisma.FeedbackUpdateManyMutationInput, Prisma.FeedbackUncheckedUpdateManyInput>;
  /**
   * Filter which Feedbacks to update
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * Limit how many Feedbacks to update.
   */
  limit?: number;
};

/**
 * Feedback updateManyAndReturn
 */
export type FeedbackUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * The data used to update Feedbacks.
   */
  data: Prisma.XOR<Prisma.FeedbackUpdateManyMutationInput, Prisma.FeedbackUncheckedUpdateManyInput>;
  /**
   * Filter which Feedbacks to update
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * Limit how many Feedbacks to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Feedback upsert
 */
export type FeedbackUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * The filter to search for the Feedback to update in case it exists.
   */
  where: Prisma.FeedbackWhereUniqueInput;
  /**
   * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
   */
  create: Prisma.XOR<Prisma.FeedbackCreateInput, Prisma.FeedbackUncheckedCreateInput>;
  /**
   * In case the Feedback was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FeedbackUpdateInput, Prisma.FeedbackUncheckedUpdateInput>;
};

/**
 * Feedback delete
 */
export type FeedbackDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
  /**
   * Filter which Feedback to delete.
   */
  where: Prisma.FeedbackWhereUniqueInput;
};

/**
 * Feedback deleteMany
 */
export type FeedbackDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Feedbacks to delete
   */
  where?: Prisma.FeedbackWhereInput;
  /**
   * Limit how many Feedbacks to delete.
   */
  limit?: number;
};

/**
 * Feedback without action
 */
export type FeedbackDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null;
};
