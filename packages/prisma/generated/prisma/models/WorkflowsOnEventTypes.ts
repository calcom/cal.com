/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `WorkflowsOnEventTypes` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model WorkflowsOnEventTypes
 *
 */
export type WorkflowsOnEventTypesModel =
  runtime.Types.Result.DefaultSelection<Prisma.$WorkflowsOnEventTypesPayload>;

export type AggregateWorkflowsOnEventTypes = {
  _count: WorkflowsOnEventTypesCountAggregateOutputType | null;
  _avg: WorkflowsOnEventTypesAvgAggregateOutputType | null;
  _sum: WorkflowsOnEventTypesSumAggregateOutputType | null;
  _min: WorkflowsOnEventTypesMinAggregateOutputType | null;
  _max: WorkflowsOnEventTypesMaxAggregateOutputType | null;
};

export type WorkflowsOnEventTypesAvgAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  eventTypeId: number | null;
};

export type WorkflowsOnEventTypesSumAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  eventTypeId: number | null;
};

export type WorkflowsOnEventTypesMinAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  eventTypeId: number | null;
};

export type WorkflowsOnEventTypesMaxAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  eventTypeId: number | null;
};

export type WorkflowsOnEventTypesCountAggregateOutputType = {
  id: number;
  workflowId: number;
  eventTypeId: number;
  _all: number;
};

export type WorkflowsOnEventTypesAvgAggregateInputType = {
  id?: true;
  workflowId?: true;
  eventTypeId?: true;
};

export type WorkflowsOnEventTypesSumAggregateInputType = {
  id?: true;
  workflowId?: true;
  eventTypeId?: true;
};

export type WorkflowsOnEventTypesMinAggregateInputType = {
  id?: true;
  workflowId?: true;
  eventTypeId?: true;
};

export type WorkflowsOnEventTypesMaxAggregateInputType = {
  id?: true;
  workflowId?: true;
  eventTypeId?: true;
};

export type WorkflowsOnEventTypesCountAggregateInputType = {
  id?: true;
  workflowId?: true;
  eventTypeId?: true;
  _all?: true;
};

export type WorkflowsOnEventTypesAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WorkflowsOnEventTypes to aggregate.
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnEventTypes to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnEventTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned WorkflowsOnEventTypes
   **/
  _count?: true | WorkflowsOnEventTypesCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WorkflowsOnEventTypesAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WorkflowsOnEventTypesSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WorkflowsOnEventTypesMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WorkflowsOnEventTypesMaxAggregateInputType;
};

export type GetWorkflowsOnEventTypesAggregateType<T extends WorkflowsOnEventTypesAggregateArgs> = {
  [P in keyof T & keyof AggregateWorkflowsOnEventTypes]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkflowsOnEventTypes[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkflowsOnEventTypes[P]>;
};

export type WorkflowsOnEventTypesGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  orderBy?:
    | Prisma.WorkflowsOnEventTypesOrderByWithAggregationInput
    | Prisma.WorkflowsOnEventTypesOrderByWithAggregationInput[];
  by: Prisma.WorkflowsOnEventTypesScalarFieldEnum[] | Prisma.WorkflowsOnEventTypesScalarFieldEnum;
  having?: Prisma.WorkflowsOnEventTypesScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WorkflowsOnEventTypesCountAggregateInputType | true;
  _avg?: WorkflowsOnEventTypesAvgAggregateInputType;
  _sum?: WorkflowsOnEventTypesSumAggregateInputType;
  _min?: WorkflowsOnEventTypesMinAggregateInputType;
  _max?: WorkflowsOnEventTypesMaxAggregateInputType;
};

export type WorkflowsOnEventTypesGroupByOutputType = {
  id: number;
  workflowId: number;
  eventTypeId: number;
  _count: WorkflowsOnEventTypesCountAggregateOutputType | null;
  _avg: WorkflowsOnEventTypesAvgAggregateOutputType | null;
  _sum: WorkflowsOnEventTypesSumAggregateOutputType | null;
  _min: WorkflowsOnEventTypesMinAggregateOutputType | null;
  _max: WorkflowsOnEventTypesMaxAggregateOutputType | null;
};

type GetWorkflowsOnEventTypesGroupByPayload<T extends WorkflowsOnEventTypesGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<WorkflowsOnEventTypesGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof WorkflowsOnEventTypesGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkflowsOnEventTypesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkflowsOnEventTypesGroupByOutputType[P]>;
      }
    >
  >;

export type WorkflowsOnEventTypesWhereInput = {
  AND?: Prisma.WorkflowsOnEventTypesWhereInput | Prisma.WorkflowsOnEventTypesWhereInput[];
  OR?: Prisma.WorkflowsOnEventTypesWhereInput[];
  NOT?: Prisma.WorkflowsOnEventTypesWhereInput | Prisma.WorkflowsOnEventTypesWhereInput[];
  id?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
  workflowId?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
  eventTypeId?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
  workflow?: Prisma.XOR<Prisma.WorkflowScalarRelationFilter, Prisma.WorkflowWhereInput>;
  eventType?: Prisma.XOR<Prisma.EventTypeScalarRelationFilter, Prisma.EventTypeWhereInput>;
};

export type WorkflowsOnEventTypesOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  workflow?: Prisma.WorkflowOrderByWithRelationInput;
  eventType?: Prisma.EventTypeOrderByWithRelationInput;
};

export type WorkflowsOnEventTypesWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    workflowId_eventTypeId?: Prisma.WorkflowsOnEventTypesWorkflowIdEventTypeIdCompoundUniqueInput;
    AND?: Prisma.WorkflowsOnEventTypesWhereInput | Prisma.WorkflowsOnEventTypesWhereInput[];
    OR?: Prisma.WorkflowsOnEventTypesWhereInput[];
    NOT?: Prisma.WorkflowsOnEventTypesWhereInput | Prisma.WorkflowsOnEventTypesWhereInput[];
    workflowId?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
    eventTypeId?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
    workflow?: Prisma.XOR<Prisma.WorkflowScalarRelationFilter, Prisma.WorkflowWhereInput>;
    eventType?: Prisma.XOR<Prisma.EventTypeScalarRelationFilter, Prisma.EventTypeWhereInput>;
  },
  "id" | "workflowId_eventTypeId"
>;

export type WorkflowsOnEventTypesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  _count?: Prisma.WorkflowsOnEventTypesCountOrderByAggregateInput;
  _avg?: Prisma.WorkflowsOnEventTypesAvgOrderByAggregateInput;
  _max?: Prisma.WorkflowsOnEventTypesMaxOrderByAggregateInput;
  _min?: Prisma.WorkflowsOnEventTypesMinOrderByAggregateInput;
  _sum?: Prisma.WorkflowsOnEventTypesSumOrderByAggregateInput;
};

export type WorkflowsOnEventTypesScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.WorkflowsOnEventTypesScalarWhereWithAggregatesInput
    | Prisma.WorkflowsOnEventTypesScalarWhereWithAggregatesInput[];
  OR?: Prisma.WorkflowsOnEventTypesScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.WorkflowsOnEventTypesScalarWhereWithAggregatesInput
    | Prisma.WorkflowsOnEventTypesScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"WorkflowsOnEventTypes"> | number;
  workflowId?: Prisma.IntWithAggregatesFilter<"WorkflowsOnEventTypes"> | number;
  eventTypeId?: Prisma.IntWithAggregatesFilter<"WorkflowsOnEventTypes"> | number;
};

export type WorkflowsOnEventTypesCreateInput = {
  workflow: Prisma.WorkflowCreateNestedOneWithoutActiveOnInput;
  eventType: Prisma.EventTypeCreateNestedOneWithoutWorkflowsInput;
};

export type WorkflowsOnEventTypesUncheckedCreateInput = {
  id?: number;
  workflowId: number;
  eventTypeId: number;
};

export type WorkflowsOnEventTypesUpdateInput = {
  workflow?: Prisma.WorkflowUpdateOneRequiredWithoutActiveOnNestedInput;
  eventType?: Prisma.EventTypeUpdateOneRequiredWithoutWorkflowsNestedInput;
};

export type WorkflowsOnEventTypesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnEventTypesCreateManyInput = {
  id?: number;
  workflowId: number;
  eventTypeId: number;
};

export type WorkflowsOnEventTypesUpdateManyMutationInput = {};

export type WorkflowsOnEventTypesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnEventTypesListRelationFilter = {
  every?: Prisma.WorkflowsOnEventTypesWhereInput;
  some?: Prisma.WorkflowsOnEventTypesWhereInput;
  none?: Prisma.WorkflowsOnEventTypesWhereInput;
};

export type WorkflowsOnEventTypesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type WorkflowsOnEventTypesWorkflowIdEventTypeIdCompoundUniqueInput = {
  workflowId: number;
  eventTypeId: number;
};

export type WorkflowsOnEventTypesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
};

export type WorkflowsOnEventTypesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
};

export type WorkflowsOnEventTypesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
};

export type WorkflowsOnEventTypesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
};

export type WorkflowsOnEventTypesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
};

export type WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope;
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
};

export type WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope;
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
};

export type WorkflowsOnEventTypesUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope;
  set?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.WorkflowsOnEventTypesScalarWhereInput | Prisma.WorkflowsOnEventTypesScalarWhereInput[];
};

export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope;
  set?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.WorkflowsOnEventTypesScalarWhereInput | Prisma.WorkflowsOnEventTypesScalarWhereInput[];
};

export type WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope;
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
};

export type WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope;
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
};

export type WorkflowsOnEventTypesUpdateManyWithoutWorkflowNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput[];
  upsert?:
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope;
  set?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput[];
  updateMany?:
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput[];
  deleteMany?: Prisma.WorkflowsOnEventTypesScalarWhereInput | Prisma.WorkflowsOnEventTypesScalarWhereInput[];
};

export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput[];
  upsert?:
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope;
  set?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnEventTypesWhereUniqueInput | Prisma.WorkflowsOnEventTypesWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput[];
  updateMany?:
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput
    | Prisma.WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput[];
  deleteMany?: Prisma.WorkflowsOnEventTypesScalarWhereInput | Prisma.WorkflowsOnEventTypesScalarWhereInput[];
};

export type WorkflowsOnEventTypesCreateWithoutEventTypeInput = {
  workflow: Prisma.WorkflowCreateNestedOneWithoutActiveOnInput;
};

export type WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput = {
  id?: number;
  workflowId: number;
};

export type WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput = {
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput,
    Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput
  >;
};

export type WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope = {
  data:
    | Prisma.WorkflowsOnEventTypesCreateManyEventTypeInput
    | Prisma.WorkflowsOnEventTypesCreateManyEventTypeInput[];
  skipDuplicates?: boolean;
};

export type WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateWithoutEventTypeInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateWithoutEventTypeInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesCreateWithoutEventTypeInput,
    Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput
  >;
};

export type WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateWithoutEventTypeInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateWithoutEventTypeInput
  >;
};

export type WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput = {
  where: Prisma.WorkflowsOnEventTypesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateManyMutationInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  >;
};

export type WorkflowsOnEventTypesScalarWhereInput = {
  AND?: Prisma.WorkflowsOnEventTypesScalarWhereInput | Prisma.WorkflowsOnEventTypesScalarWhereInput[];
  OR?: Prisma.WorkflowsOnEventTypesScalarWhereInput[];
  NOT?: Prisma.WorkflowsOnEventTypesScalarWhereInput | Prisma.WorkflowsOnEventTypesScalarWhereInput[];
  id?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
  workflowId?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
  eventTypeId?: Prisma.IntFilter<"WorkflowsOnEventTypes"> | number;
};

export type WorkflowsOnEventTypesCreateWithoutWorkflowInput = {
  eventType: Prisma.EventTypeCreateNestedOneWithoutWorkflowsInput;
};

export type WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput = {
  id?: number;
  eventTypeId: number;
};

export type WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput,
    Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput
  >;
};

export type WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope = {
  data:
    | Prisma.WorkflowsOnEventTypesCreateManyWorkflowInput
    | Prisma.WorkflowsOnEventTypesCreateManyWorkflowInput[];
  skipDuplicates?: boolean;
};

export type WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateWithoutWorkflowInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateWithoutWorkflowInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesCreateWithoutWorkflowInput,
    Prisma.WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput
  >;
};

export type WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateWithoutWorkflowInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateWithoutWorkflowInput
  >;
};

export type WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnEventTypesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateManyMutationInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowInput
  >;
};

export type WorkflowsOnEventTypesCreateManyEventTypeInput = {
  id?: number;
  workflowId: number;
};

export type WorkflowsOnEventTypesUpdateWithoutEventTypeInput = {
  workflow?: Prisma.WorkflowUpdateOneRequiredWithoutActiveOnNestedInput;
};

export type WorkflowsOnEventTypesUncheckedUpdateWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnEventTypesCreateManyWorkflowInput = {
  id?: number;
  eventTypeId: number;
};

export type WorkflowsOnEventTypesUpdateWithoutWorkflowInput = {
  eventType?: Prisma.EventTypeUpdateOneRequiredWithoutWorkflowsNestedInput;
};

export type WorkflowsOnEventTypesUncheckedUpdateWithoutWorkflowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnEventTypesSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    eventTypeId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnEventTypes"]
>;

export type WorkflowsOnEventTypesSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    eventTypeId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnEventTypes"]
>;

export type WorkflowsOnEventTypesSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    eventTypeId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnEventTypes"]
>;

export type WorkflowsOnEventTypesSelectScalar = {
  id?: boolean;
  workflowId?: boolean;
  eventTypeId?: boolean;
};

export type WorkflowsOnEventTypesOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "workflowId" | "eventTypeId",
  ExtArgs["result"]["workflowsOnEventTypes"]
>;
export type WorkflowsOnEventTypesInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
};
export type WorkflowsOnEventTypesIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
};
export type WorkflowsOnEventTypesIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  eventType?: boolean | Prisma.EventTypeDefaultArgs<ExtArgs>;
};

export type $WorkflowsOnEventTypesPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "WorkflowsOnEventTypes";
  objects: {
    workflow: Prisma.$WorkflowPayload<ExtArgs>;
    eventType: Prisma.$EventTypePayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      workflowId: number;
      eventTypeId: number;
    },
    ExtArgs["result"]["workflowsOnEventTypes"]
  >;
  composites: {};
};

export type WorkflowsOnEventTypesGetPayload<
  S extends boolean | null | undefined | WorkflowsOnEventTypesDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$WorkflowsOnEventTypesPayload, S>;

export type WorkflowsOnEventTypesCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<WorkflowsOnEventTypesFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: WorkflowsOnEventTypesCountAggregateInputType | true;
};

export interface WorkflowsOnEventTypesDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["WorkflowsOnEventTypes"];
    meta: { name: "WorkflowsOnEventTypes" };
  };
  /**
   * Find zero or one WorkflowsOnEventTypes that matches the filter.
   * @param {WorkflowsOnEventTypesFindUniqueArgs} args - Arguments to find a WorkflowsOnEventTypes
   * @example
   * // Get one WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkflowsOnEventTypesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one WorkflowsOnEventTypes that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkflowsOnEventTypesFindUniqueOrThrowArgs} args - Arguments to find a WorkflowsOnEventTypes
   * @example
   * // Get one WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkflowsOnEventTypesFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkflowsOnEventTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesFindFirstArgs} args - Arguments to find a WorkflowsOnEventTypes
   * @example
   * // Get one WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkflowsOnEventTypesFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnEventTypesFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkflowsOnEventTypes that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesFindFirstOrThrowArgs} args - Arguments to find a WorkflowsOnEventTypes
   * @example
   * // Get one WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkflowsOnEventTypesFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnEventTypesFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more WorkflowsOnEventTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findMany()
   *
   * // Get first 10 WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const workflowsOnEventTypesWithIdOnly = await prisma.workflowsOnEventTypes.findMany({ select: { id: true } })
   *
   */
  findMany<T extends WorkflowsOnEventTypesFindManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnEventTypesFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a WorkflowsOnEventTypes.
   * @param {WorkflowsOnEventTypesCreateArgs} args - Arguments to create a WorkflowsOnEventTypes.
   * @example
   * // Create one WorkflowsOnEventTypes
   * const WorkflowsOnEventTypes = await prisma.workflowsOnEventTypes.create({
   *   data: {
   *     // ... data to create a WorkflowsOnEventTypes
   *   }
   * })
   *
   */
  create<T extends WorkflowsOnEventTypesCreateArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many WorkflowsOnEventTypes.
   * @param {WorkflowsOnEventTypesCreateManyArgs} args - Arguments to create many WorkflowsOnEventTypes.
   * @example
   * // Create many WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WorkflowsOnEventTypesCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnEventTypesCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many WorkflowsOnEventTypes and returns the data saved in the database.
   * @param {WorkflowsOnEventTypesCreateManyAndReturnArgs} args - Arguments to create many WorkflowsOnEventTypes.
   * @example
   * // Create many WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many WorkflowsOnEventTypes and only return the `id`
   * const workflowsOnEventTypesWithIdOnly = await prisma.workflowsOnEventTypes.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WorkflowsOnEventTypesCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnEventTypesCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a WorkflowsOnEventTypes.
   * @param {WorkflowsOnEventTypesDeleteArgs} args - Arguments to delete one WorkflowsOnEventTypes.
   * @example
   * // Delete one WorkflowsOnEventTypes
   * const WorkflowsOnEventTypes = await prisma.workflowsOnEventTypes.delete({
   *   where: {
   *     // ... filter to delete one WorkflowsOnEventTypes
   *   }
   * })
   *
   */
  delete<T extends WorkflowsOnEventTypesDeleteArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one WorkflowsOnEventTypes.
   * @param {WorkflowsOnEventTypesUpdateArgs} args - Arguments to update one WorkflowsOnEventTypes.
   * @example
   * // Update one WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WorkflowsOnEventTypesUpdateArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more WorkflowsOnEventTypes.
   * @param {WorkflowsOnEventTypesDeleteManyArgs} args - Arguments to filter WorkflowsOnEventTypes to delete.
   * @example
   * // Delete a few WorkflowsOnEventTypes
   * const { count } = await prisma.workflowsOnEventTypes.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WorkflowsOnEventTypesDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnEventTypesDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkflowsOnEventTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WorkflowsOnEventTypesUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkflowsOnEventTypes and returns the data updated in the database.
   * @param {WorkflowsOnEventTypesUpdateManyAndReturnArgs} args - Arguments to update many WorkflowsOnEventTypes.
   * @example
   * // Update many WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more WorkflowsOnEventTypes and only return the `id`
   * const workflowsOnEventTypesWithIdOnly = await prisma.workflowsOnEventTypes.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WorkflowsOnEventTypesUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one WorkflowsOnEventTypes.
   * @param {WorkflowsOnEventTypesUpsertArgs} args - Arguments to update or create a WorkflowsOnEventTypes.
   * @example
   * // Update or create a WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.upsert({
   *   create: {
   *     // ... data to create a WorkflowsOnEventTypes
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkflowsOnEventTypes we want to update
   *   }
   * })
   */
  upsert<T extends WorkflowsOnEventTypesUpsertArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnEventTypesUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnEventTypesClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of WorkflowsOnEventTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesCountArgs} args - Arguments to filter WorkflowsOnEventTypes to count.
   * @example
   * // Count the number of WorkflowsOnEventTypes
   * const count = await prisma.workflowsOnEventTypes.count({
   *   where: {
   *     // ... the filter for the WorkflowsOnEventTypes we want to count
   *   }
   * })
   **/
  count<T extends WorkflowsOnEventTypesCountArgs>(
    args?: Prisma.Subset<T, WorkflowsOnEventTypesCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], WorkflowsOnEventTypesCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a WorkflowsOnEventTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WorkflowsOnEventTypesAggregateArgs>(
    args: Prisma.Subset<T, WorkflowsOnEventTypesAggregateArgs>
  ): Prisma.PrismaPromise<GetWorkflowsOnEventTypesAggregateType<T>>;

  /**
   * Group by WorkflowsOnEventTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnEventTypesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WorkflowsOnEventTypesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkflowsOnEventTypesGroupByArgs["orderBy"] }
      : { orderBy?: WorkflowsOnEventTypesGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, WorkflowsOnEventTypesGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetWorkflowsOnEventTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the WorkflowsOnEventTypes model
   */
  readonly fields: WorkflowsOnEventTypesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkflowsOnEventTypes.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkflowsOnEventTypesClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  workflow<T extends Prisma.WorkflowDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WorkflowDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkflowPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  eventType<T extends Prisma.EventTypeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.EventTypeDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__EventTypeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$EventTypePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WorkflowsOnEventTypes model
 */
export interface WorkflowsOnEventTypesFieldRefs {
  readonly id: Prisma.FieldRef<"WorkflowsOnEventTypes", "Int">;
  readonly workflowId: Prisma.FieldRef<"WorkflowsOnEventTypes", "Int">;
  readonly eventTypeId: Prisma.FieldRef<"WorkflowsOnEventTypes", "Int">;
}

// Custom InputTypes
/**
 * WorkflowsOnEventTypes findUnique
 */
export type WorkflowsOnEventTypesFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnEventTypes to fetch.
   */
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
};

/**
 * WorkflowsOnEventTypes findUniqueOrThrow
 */
export type WorkflowsOnEventTypesFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnEventTypes to fetch.
   */
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
};

/**
 * WorkflowsOnEventTypes findFirst
 */
export type WorkflowsOnEventTypesFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnEventTypes to fetch.
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnEventTypes to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkflowsOnEventTypes.
   */
  cursor?: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnEventTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkflowsOnEventTypes.
   */
  distinct?: Prisma.WorkflowsOnEventTypesScalarFieldEnum | Prisma.WorkflowsOnEventTypesScalarFieldEnum[];
};

/**
 * WorkflowsOnEventTypes findFirstOrThrow
 */
export type WorkflowsOnEventTypesFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnEventTypes to fetch.
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnEventTypes to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkflowsOnEventTypes.
   */
  cursor?: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnEventTypes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkflowsOnEventTypes.
   */
  distinct?: Prisma.WorkflowsOnEventTypesScalarFieldEnum | Prisma.WorkflowsOnEventTypesScalarFieldEnum[];
};

/**
 * WorkflowsOnEventTypes findMany
 */
export type WorkflowsOnEventTypesFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnEventTypes to fetch.
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnEventTypes to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput
    | Prisma.WorkflowsOnEventTypesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing WorkflowsOnEventTypes.
   */
  cursor?: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnEventTypes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnEventTypes.
   */
  skip?: number;
  distinct?: Prisma.WorkflowsOnEventTypesScalarFieldEnum | Prisma.WorkflowsOnEventTypesScalarFieldEnum[];
};

/**
 * WorkflowsOnEventTypes create
 */
export type WorkflowsOnEventTypesCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * The data needed to create a WorkflowsOnEventTypes.
   */
  data: Prisma.XOR<Prisma.WorkflowsOnEventTypesCreateInput, Prisma.WorkflowsOnEventTypesUncheckedCreateInput>;
};

/**
 * WorkflowsOnEventTypes createMany
 */
export type WorkflowsOnEventTypesCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many WorkflowsOnEventTypes.
   */
  data: Prisma.WorkflowsOnEventTypesCreateManyInput | Prisma.WorkflowsOnEventTypesCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WorkflowsOnEventTypes createManyAndReturn
 */
export type WorkflowsOnEventTypesCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * The data used to create many WorkflowsOnEventTypes.
   */
  data: Prisma.WorkflowsOnEventTypesCreateManyInput | Prisma.WorkflowsOnEventTypesCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkflowsOnEventTypes update
 */
export type WorkflowsOnEventTypesUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * The data needed to update a WorkflowsOnEventTypes.
   */
  data: Prisma.XOR<Prisma.WorkflowsOnEventTypesUpdateInput, Prisma.WorkflowsOnEventTypesUncheckedUpdateInput>;
  /**
   * Choose, which WorkflowsOnEventTypes to update.
   */
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
};

/**
 * WorkflowsOnEventTypes updateMany
 */
export type WorkflowsOnEventTypesUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update WorkflowsOnEventTypes.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateManyMutationInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkflowsOnEventTypes to update
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * Limit how many WorkflowsOnEventTypes to update.
   */
  limit?: number;
};

/**
 * WorkflowsOnEventTypes updateManyAndReturn
 */
export type WorkflowsOnEventTypesUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * The data used to update WorkflowsOnEventTypes.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateManyMutationInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkflowsOnEventTypes to update
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * Limit how many WorkflowsOnEventTypes to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkflowsOnEventTypes upsert
 */
export type WorkflowsOnEventTypesUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * The filter to search for the WorkflowsOnEventTypes to update in case it exists.
   */
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
  /**
   * In case the WorkflowsOnEventTypes found by the `where` argument doesn't exist, create a new WorkflowsOnEventTypes with this data.
   */
  create: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesCreateInput,
    Prisma.WorkflowsOnEventTypesUncheckedCreateInput
  >;
  /**
   * In case the WorkflowsOnEventTypes was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.WorkflowsOnEventTypesUpdateInput,
    Prisma.WorkflowsOnEventTypesUncheckedUpdateInput
  >;
};

/**
 * WorkflowsOnEventTypes delete
 */
export type WorkflowsOnEventTypesDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
  /**
   * Filter which WorkflowsOnEventTypes to delete.
   */
  where: Prisma.WorkflowsOnEventTypesWhereUniqueInput;
};

/**
 * WorkflowsOnEventTypes deleteMany
 */
export type WorkflowsOnEventTypesDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WorkflowsOnEventTypes to delete
   */
  where?: Prisma.WorkflowsOnEventTypesWhereInput;
  /**
   * Limit how many WorkflowsOnEventTypes to delete.
   */
  limit?: number;
};

/**
 * WorkflowsOnEventTypes without action
 */
export type WorkflowsOnEventTypesDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnEventTypes
   */
  select?: Prisma.WorkflowsOnEventTypesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnEventTypes
   */
  omit?: Prisma.WorkflowsOnEventTypesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnEventTypesInclude<ExtArgs> | null;
};
