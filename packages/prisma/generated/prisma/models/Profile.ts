/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Profile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Profile
 *
 */
export type ProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$ProfilePayload>;

export type AggregateProfile = {
  _count: ProfileCountAggregateOutputType | null;
  _avg: ProfileAvgAggregateOutputType | null;
  _sum: ProfileSumAggregateOutputType | null;
  _min: ProfileMinAggregateOutputType | null;
  _max: ProfileMaxAggregateOutputType | null;
};

export type ProfileAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  organizationId: number | null;
};

export type ProfileSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  organizationId: number | null;
};

export type ProfileMinAggregateOutputType = {
  id: number | null;
  uid: string | null;
  userId: number | null;
  organizationId: number | null;
  username: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ProfileMaxAggregateOutputType = {
  id: number | null;
  uid: string | null;
  userId: number | null;
  organizationId: number | null;
  username: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ProfileCountAggregateOutputType = {
  id: number;
  uid: number;
  userId: number;
  organizationId: number;
  username: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type ProfileAvgAggregateInputType = {
  id?: true;
  userId?: true;
  organizationId?: true;
};

export type ProfileSumAggregateInputType = {
  id?: true;
  userId?: true;
  organizationId?: true;
};

export type ProfileMinAggregateInputType = {
  id?: true;
  uid?: true;
  userId?: true;
  organizationId?: true;
  username?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ProfileMaxAggregateInputType = {
  id?: true;
  uid?: true;
  userId?: true;
  organizationId?: true;
  username?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ProfileCountAggregateInputType = {
  id?: true;
  uid?: true;
  userId?: true;
  organizationId?: true;
  username?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type ProfileAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Profile to aggregate.
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profiles to fetch.
   */
  orderBy?: Prisma.ProfileOrderByWithRelationInput | Prisma.ProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profiles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Profiles
   **/
  _count?: true | ProfileCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ProfileAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ProfileSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ProfileMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ProfileMaxAggregateInputType;
};

export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
  [P in keyof T & keyof AggregateProfile]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateProfile[P]>;
};

export type ProfileGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ProfileWhereInput;
  orderBy?: Prisma.ProfileOrderByWithAggregationInput | Prisma.ProfileOrderByWithAggregationInput[];
  by: Prisma.ProfileScalarFieldEnum[] | Prisma.ProfileScalarFieldEnum;
  having?: Prisma.ProfileScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ProfileCountAggregateInputType | true;
  _avg?: ProfileAvgAggregateInputType;
  _sum?: ProfileSumAggregateInputType;
  _min?: ProfileMinAggregateInputType;
  _max?: ProfileMaxAggregateInputType;
};

export type ProfileGroupByOutputType = {
  id: number;
  uid: string;
  userId: number;
  organizationId: number;
  username: string;
  createdAt: Date;
  updatedAt: Date;
  _count: ProfileCountAggregateOutputType | null;
  _avg: ProfileAvgAggregateOutputType | null;
  _sum: ProfileSumAggregateOutputType | null;
  _min: ProfileMinAggregateOutputType | null;
  _max: ProfileMaxAggregateOutputType | null;
};

type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProfileGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ProfileGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ProfileGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ProfileGroupByOutputType[P]>;
    }
  >
>;

export type ProfileWhereInput = {
  AND?: Prisma.ProfileWhereInput | Prisma.ProfileWhereInput[];
  OR?: Prisma.ProfileWhereInput[];
  NOT?: Prisma.ProfileWhereInput | Prisma.ProfileWhereInput[];
  id?: Prisma.IntFilter<"Profile"> | number;
  uid?: Prisma.StringFilter<"Profile"> | string;
  userId?: Prisma.IntFilter<"Profile"> | number;
  organizationId?: Prisma.IntFilter<"Profile"> | number;
  username?: Prisma.StringFilter<"Profile"> | string;
  createdAt?: Prisma.DateTimeFilter<"Profile"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Profile"> | Date | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  organization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  eventTypes?: Prisma.EventTypeListRelationFilter;
  movedFromUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
};

export type ProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  organization?: Prisma.TeamOrderByWithRelationInput;
  eventTypes?: Prisma.EventTypeOrderByRelationAggregateInput;
  movedFromUser?: Prisma.UserOrderByWithRelationInput;
};

export type ProfileWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    userId_organizationId?: Prisma.ProfileUserIdOrganizationIdCompoundUniqueInput;
    username_organizationId?: Prisma.ProfileUsernameOrganizationIdCompoundUniqueInput;
    AND?: Prisma.ProfileWhereInput | Prisma.ProfileWhereInput[];
    OR?: Prisma.ProfileWhereInput[];
    NOT?: Prisma.ProfileWhereInput | Prisma.ProfileWhereInput[];
    uid?: Prisma.StringFilter<"Profile"> | string;
    userId?: Prisma.IntFilter<"Profile"> | number;
    organizationId?: Prisma.IntFilter<"Profile"> | number;
    username?: Prisma.StringFilter<"Profile"> | string;
    createdAt?: Prisma.DateTimeFilter<"Profile"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Profile"> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    organization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    eventTypes?: Prisma.EventTypeListRelationFilter;
    movedFromUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  },
  "id" | "userId_organizationId" | "username_organizationId"
>;

export type ProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.ProfileCountOrderByAggregateInput;
  _avg?: Prisma.ProfileAvgOrderByAggregateInput;
  _max?: Prisma.ProfileMaxOrderByAggregateInput;
  _min?: Prisma.ProfileMinOrderByAggregateInput;
  _sum?: Prisma.ProfileSumOrderByAggregateInput;
};

export type ProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProfileScalarWhereWithAggregatesInput | Prisma.ProfileScalarWhereWithAggregatesInput[];
  OR?: Prisma.ProfileScalarWhereWithAggregatesInput[];
  NOT?: Prisma.ProfileScalarWhereWithAggregatesInput | Prisma.ProfileScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Profile"> | number;
  uid?: Prisma.StringWithAggregatesFilter<"Profile"> | string;
  userId?: Prisma.IntWithAggregatesFilter<"Profile"> | number;
  organizationId?: Prisma.IntWithAggregatesFilter<"Profile"> | number;
  username?: Prisma.StringWithAggregatesFilter<"Profile"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Profile"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Profile"> | Date | string;
};

export type ProfileCreateInput = {
  uid: string;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutProfilesInput;
  organization: Prisma.TeamCreateNestedOneWithoutOrgProfilesInput;
  eventTypes?: Prisma.EventTypeCreateNestedManyWithoutProfileInput;
  movedFromUser?: Prisma.UserCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileUncheckedCreateInput = {
  id?: number;
  uid: string;
  userId: number;
  organizationId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  eventTypes?: Prisma.EventTypeUncheckedCreateNestedManyWithoutProfileInput;
  movedFromUser?: Prisma.UserUncheckedCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileUpdateInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutProfilesNestedInput;
  organization?: Prisma.TeamUpdateOneRequiredWithoutOrgProfilesNestedInput;
  eventTypes?: Prisma.EventTypeUpdateManyWithoutProfileNestedInput;
  movedFromUser?: Prisma.UserUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  eventTypes?: Prisma.EventTypeUncheckedUpdateManyWithoutProfileNestedInput;
  movedFromUser?: Prisma.UserUncheckedUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileCreateManyInput = {
  id?: number;
  uid: string;
  userId: number;
  organizationId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfileUpdateManyMutationInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileNullableScalarRelationFilter = {
  is?: Prisma.ProfileWhereInput | null;
  isNot?: Prisma.ProfileWhereInput | null;
};

export type ProfileListRelationFilter = {
  every?: Prisma.ProfileWhereInput;
  some?: Prisma.ProfileWhereInput;
  none?: Prisma.ProfileWhereInput;
};

export type ProfileOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ProfileUserIdOrganizationIdCompoundUniqueInput = {
  userId: number;
  organizationId: number;
};

export type ProfileUsernameOrganizationIdCompoundUniqueInput = {
  username: string;
  organizationId: number;
};

export type ProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProfileAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type ProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProfileSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type ProfileCreateNestedOneWithoutEventTypesInput = {
  create?: Prisma.XOR<
    Prisma.ProfileCreateWithoutEventTypesInput,
    Prisma.ProfileUncheckedCreateWithoutEventTypesInput
  >;
  connectOrCreate?: Prisma.ProfileCreateOrConnectWithoutEventTypesInput;
  connect?: Prisma.ProfileWhereUniqueInput;
};

export type ProfileUpdateOneWithoutEventTypesNestedInput = {
  create?: Prisma.XOR<
    Prisma.ProfileCreateWithoutEventTypesInput,
    Prisma.ProfileUncheckedCreateWithoutEventTypesInput
  >;
  connectOrCreate?: Prisma.ProfileCreateOrConnectWithoutEventTypesInput;
  upsert?: Prisma.ProfileUpsertWithoutEventTypesInput;
  disconnect?: Prisma.ProfileWhereInput | boolean;
  delete?: Prisma.ProfileWhereInput | boolean;
  connect?: Prisma.ProfileWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ProfileUpdateToOneWithWhereWithoutEventTypesInput,
      Prisma.ProfileUpdateWithoutEventTypesInput
    >,
    Prisma.ProfileUncheckedUpdateWithoutEventTypesInput
  >;
};

export type ProfileCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.ProfileCreateWithoutUserInput, Prisma.ProfileUncheckedCreateWithoutUserInput>
    | Prisma.ProfileCreateWithoutUserInput[]
    | Prisma.ProfileUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutUserInput
    | Prisma.ProfileCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ProfileCreateManyUserInputEnvelope;
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
};

export type ProfileCreateNestedOneWithoutMovedFromUserInput = {
  create?: Prisma.XOR<
    Prisma.ProfileCreateWithoutMovedFromUserInput,
    Prisma.ProfileUncheckedCreateWithoutMovedFromUserInput
  >;
  connectOrCreate?: Prisma.ProfileCreateOrConnectWithoutMovedFromUserInput;
  connect?: Prisma.ProfileWhereUniqueInput;
};

export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<Prisma.ProfileCreateWithoutUserInput, Prisma.ProfileUncheckedCreateWithoutUserInput>
    | Prisma.ProfileCreateWithoutUserInput[]
    | Prisma.ProfileUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutUserInput
    | Prisma.ProfileCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ProfileCreateManyUserInputEnvelope;
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
};

export type ProfileUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.ProfileCreateWithoutUserInput, Prisma.ProfileUncheckedCreateWithoutUserInput>
    | Prisma.ProfileCreateWithoutUserInput[]
    | Prisma.ProfileUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutUserInput
    | Prisma.ProfileCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ProfileUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ProfileUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ProfileCreateManyUserInputEnvelope;
  set?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  disconnect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  delete?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  update?:
    | Prisma.ProfileUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ProfileUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ProfileUpdateManyWithWhereWithoutUserInput
    | Prisma.ProfileUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.ProfileScalarWhereInput | Prisma.ProfileScalarWhereInput[];
};

export type ProfileUpdateOneWithoutMovedFromUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.ProfileCreateWithoutMovedFromUserInput,
    Prisma.ProfileUncheckedCreateWithoutMovedFromUserInput
  >;
  connectOrCreate?: Prisma.ProfileCreateOrConnectWithoutMovedFromUserInput;
  upsert?: Prisma.ProfileUpsertWithoutMovedFromUserInput;
  disconnect?: Prisma.ProfileWhereInput | boolean;
  delete?: Prisma.ProfileWhereInput | boolean;
  connect?: Prisma.ProfileWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ProfileUpdateToOneWithWhereWithoutMovedFromUserInput,
      Prisma.ProfileUpdateWithoutMovedFromUserInput
    >,
    Prisma.ProfileUncheckedUpdateWithoutMovedFromUserInput
  >;
};

export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<Prisma.ProfileCreateWithoutUserInput, Prisma.ProfileUncheckedCreateWithoutUserInput>
    | Prisma.ProfileCreateWithoutUserInput[]
    | Prisma.ProfileUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutUserInput
    | Prisma.ProfileCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ProfileUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ProfileUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ProfileCreateManyUserInputEnvelope;
  set?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  disconnect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  delete?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  update?:
    | Prisma.ProfileUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ProfileUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ProfileUpdateManyWithWhereWithoutUserInput
    | Prisma.ProfileUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.ProfileScalarWhereInput | Prisma.ProfileScalarWhereInput[];
};

export type ProfileCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfileCreateWithoutOrganizationInput,
        Prisma.ProfileUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ProfileCreateWithoutOrganizationInput[]
    | Prisma.ProfileUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.ProfileCreateManyOrganizationInputEnvelope;
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
};

export type ProfileUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfileCreateWithoutOrganizationInput,
        Prisma.ProfileUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ProfileCreateWithoutOrganizationInput[]
    | Prisma.ProfileUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.ProfileCreateManyOrganizationInputEnvelope;
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
};

export type ProfileUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfileCreateWithoutOrganizationInput,
        Prisma.ProfileUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ProfileCreateWithoutOrganizationInput[]
    | Prisma.ProfileUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.ProfileUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.ProfileUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.ProfileCreateManyOrganizationInputEnvelope;
  set?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  disconnect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  delete?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  update?:
    | Prisma.ProfileUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.ProfileUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.ProfileUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.ProfileUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?: Prisma.ProfileScalarWhereInput | Prisma.ProfileScalarWhereInput[];
};

export type ProfileUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfileCreateWithoutOrganizationInput,
        Prisma.ProfileUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ProfileCreateWithoutOrganizationInput[]
    | Prisma.ProfileUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput
    | Prisma.ProfileCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.ProfileUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.ProfileUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.ProfileCreateManyOrganizationInputEnvelope;
  set?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  disconnect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  delete?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  connect?: Prisma.ProfileWhereUniqueInput | Prisma.ProfileWhereUniqueInput[];
  update?:
    | Prisma.ProfileUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.ProfileUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.ProfileUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.ProfileUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?: Prisma.ProfileScalarWhereInput | Prisma.ProfileScalarWhereInput[];
};

export type ProfileCreateWithoutEventTypesInput = {
  uid: string;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutProfilesInput;
  organization: Prisma.TeamCreateNestedOneWithoutOrgProfilesInput;
  movedFromUser?: Prisma.UserCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileUncheckedCreateWithoutEventTypesInput = {
  id?: number;
  uid: string;
  userId: number;
  organizationId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  movedFromUser?: Prisma.UserUncheckedCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileCreateOrConnectWithoutEventTypesInput = {
  where: Prisma.ProfileWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProfileCreateWithoutEventTypesInput,
    Prisma.ProfileUncheckedCreateWithoutEventTypesInput
  >;
};

export type ProfileUpsertWithoutEventTypesInput = {
  update: Prisma.XOR<
    Prisma.ProfileUpdateWithoutEventTypesInput,
    Prisma.ProfileUncheckedUpdateWithoutEventTypesInput
  >;
  create: Prisma.XOR<
    Prisma.ProfileCreateWithoutEventTypesInput,
    Prisma.ProfileUncheckedCreateWithoutEventTypesInput
  >;
  where?: Prisma.ProfileWhereInput;
};

export type ProfileUpdateToOneWithWhereWithoutEventTypesInput = {
  where?: Prisma.ProfileWhereInput;
  data: Prisma.XOR<
    Prisma.ProfileUpdateWithoutEventTypesInput,
    Prisma.ProfileUncheckedUpdateWithoutEventTypesInput
  >;
};

export type ProfileUpdateWithoutEventTypesInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutProfilesNestedInput;
  organization?: Prisma.TeamUpdateOneRequiredWithoutOrgProfilesNestedInput;
  movedFromUser?: Prisma.UserUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileUncheckedUpdateWithoutEventTypesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  movedFromUser?: Prisma.UserUncheckedUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileCreateWithoutUserInput = {
  uid: string;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.TeamCreateNestedOneWithoutOrgProfilesInput;
  eventTypes?: Prisma.EventTypeCreateNestedManyWithoutProfileInput;
  movedFromUser?: Prisma.UserCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileUncheckedCreateWithoutUserInput = {
  id?: number;
  uid: string;
  organizationId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  eventTypes?: Prisma.EventTypeUncheckedCreateNestedManyWithoutProfileInput;
  movedFromUser?: Prisma.UserUncheckedCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileCreateOrConnectWithoutUserInput = {
  where: Prisma.ProfileWhereUniqueInput;
  create: Prisma.XOR<Prisma.ProfileCreateWithoutUserInput, Prisma.ProfileUncheckedCreateWithoutUserInput>;
};

export type ProfileCreateManyUserInputEnvelope = {
  data: Prisma.ProfileCreateManyUserInput | Prisma.ProfileCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type ProfileCreateWithoutMovedFromUserInput = {
  uid: string;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutProfilesInput;
  organization: Prisma.TeamCreateNestedOneWithoutOrgProfilesInput;
  eventTypes?: Prisma.EventTypeCreateNestedManyWithoutProfileInput;
};

export type ProfileUncheckedCreateWithoutMovedFromUserInput = {
  id?: number;
  uid: string;
  userId: number;
  organizationId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  eventTypes?: Prisma.EventTypeUncheckedCreateNestedManyWithoutProfileInput;
};

export type ProfileCreateOrConnectWithoutMovedFromUserInput = {
  where: Prisma.ProfileWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProfileCreateWithoutMovedFromUserInput,
    Prisma.ProfileUncheckedCreateWithoutMovedFromUserInput
  >;
};

export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProfileWhereUniqueInput;
  update: Prisma.XOR<Prisma.ProfileUpdateWithoutUserInput, Prisma.ProfileUncheckedUpdateWithoutUserInput>;
  create: Prisma.XOR<Prisma.ProfileCreateWithoutUserInput, Prisma.ProfileUncheckedCreateWithoutUserInput>;
};

export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProfileWhereUniqueInput;
  data: Prisma.XOR<Prisma.ProfileUpdateWithoutUserInput, Prisma.ProfileUncheckedUpdateWithoutUserInput>;
};

export type ProfileUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProfileScalarWhereInput;
  data: Prisma.XOR<Prisma.ProfileUpdateManyMutationInput, Prisma.ProfileUncheckedUpdateManyWithoutUserInput>;
};

export type ProfileScalarWhereInput = {
  AND?: Prisma.ProfileScalarWhereInput | Prisma.ProfileScalarWhereInput[];
  OR?: Prisma.ProfileScalarWhereInput[];
  NOT?: Prisma.ProfileScalarWhereInput | Prisma.ProfileScalarWhereInput[];
  id?: Prisma.IntFilter<"Profile"> | number;
  uid?: Prisma.StringFilter<"Profile"> | string;
  userId?: Prisma.IntFilter<"Profile"> | number;
  organizationId?: Prisma.IntFilter<"Profile"> | number;
  username?: Prisma.StringFilter<"Profile"> | string;
  createdAt?: Prisma.DateTimeFilter<"Profile"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Profile"> | Date | string;
};

export type ProfileUpsertWithoutMovedFromUserInput = {
  update: Prisma.XOR<
    Prisma.ProfileUpdateWithoutMovedFromUserInput,
    Prisma.ProfileUncheckedUpdateWithoutMovedFromUserInput
  >;
  create: Prisma.XOR<
    Prisma.ProfileCreateWithoutMovedFromUserInput,
    Prisma.ProfileUncheckedCreateWithoutMovedFromUserInput
  >;
  where?: Prisma.ProfileWhereInput;
};

export type ProfileUpdateToOneWithWhereWithoutMovedFromUserInput = {
  where?: Prisma.ProfileWhereInput;
  data: Prisma.XOR<
    Prisma.ProfileUpdateWithoutMovedFromUserInput,
    Prisma.ProfileUncheckedUpdateWithoutMovedFromUserInput
  >;
};

export type ProfileUpdateWithoutMovedFromUserInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutProfilesNestedInput;
  organization?: Prisma.TeamUpdateOneRequiredWithoutOrgProfilesNestedInput;
  eventTypes?: Prisma.EventTypeUpdateManyWithoutProfileNestedInput;
};

export type ProfileUncheckedUpdateWithoutMovedFromUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  eventTypes?: Prisma.EventTypeUncheckedUpdateManyWithoutProfileNestedInput;
};

export type ProfileCreateWithoutOrganizationInput = {
  uid: string;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutProfilesInput;
  eventTypes?: Prisma.EventTypeCreateNestedManyWithoutProfileInput;
  movedFromUser?: Prisma.UserCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileUncheckedCreateWithoutOrganizationInput = {
  id?: number;
  uid: string;
  userId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  eventTypes?: Prisma.EventTypeUncheckedCreateNestedManyWithoutProfileInput;
  movedFromUser?: Prisma.UserUncheckedCreateNestedOneWithoutMovedToProfileInput;
};

export type ProfileCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ProfileWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProfileCreateWithoutOrganizationInput,
    Prisma.ProfileUncheckedCreateWithoutOrganizationInput
  >;
};

export type ProfileCreateManyOrganizationInputEnvelope = {
  data: Prisma.ProfileCreateManyOrganizationInput | Prisma.ProfileCreateManyOrganizationInput[];
  skipDuplicates?: boolean;
};

export type ProfileUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ProfileWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProfileUpdateWithoutOrganizationInput,
    Prisma.ProfileUncheckedUpdateWithoutOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.ProfileCreateWithoutOrganizationInput,
    Prisma.ProfileUncheckedCreateWithoutOrganizationInput
  >;
};

export type ProfileUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ProfileWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProfileUpdateWithoutOrganizationInput,
    Prisma.ProfileUncheckedUpdateWithoutOrganizationInput
  >;
};

export type ProfileUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ProfileScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProfileUpdateManyMutationInput,
    Prisma.ProfileUncheckedUpdateManyWithoutOrganizationInput
  >;
};

export type ProfileCreateManyUserInput = {
  id?: number;
  uid: string;
  organizationId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfileUpdateWithoutUserInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.TeamUpdateOneRequiredWithoutOrgProfilesNestedInput;
  eventTypes?: Prisma.EventTypeUpdateManyWithoutProfileNestedInput;
  movedFromUser?: Prisma.UserUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  eventTypes?: Prisma.EventTypeUncheckedUpdateManyWithoutProfileNestedInput;
  movedFromUser?: Prisma.UserUncheckedUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileCreateManyOrganizationInput = {
  id?: number;
  uid: string;
  userId: number;
  username: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfileUpdateWithoutOrganizationInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutProfilesNestedInput;
  eventTypes?: Prisma.EventTypeUpdateManyWithoutProfileNestedInput;
  movedFromUser?: Prisma.UserUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  eventTypes?: Prisma.EventTypeUncheckedUpdateManyWithoutProfileNestedInput;
  movedFromUser?: Prisma.UserUncheckedUpdateOneWithoutMovedToProfileNestedInput;
};

export type ProfileUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uid?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type ProfileCountOutputType
 */

export type ProfileCountOutputType = {
  eventTypes: number;
};

export type ProfileCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventTypes?: boolean | ProfileCountOutputTypeCountEventTypesArgs;
};

/**
 * ProfileCountOutputType without action
 */
export type ProfileCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ProfileCountOutputType
   */
  select?: Prisma.ProfileCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ProfileCountOutputType without action
 */
export type ProfileCountOutputTypeCountEventTypesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.EventTypeWhereInput;
};

export type ProfileSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    userId?: boolean;
    organizationId?: boolean;
    username?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    eventTypes?: boolean | Prisma.Profile$eventTypesArgs<ExtArgs>;
    movedFromUser?: boolean | Prisma.Profile$movedFromUserArgs<ExtArgs>;
    _count?: boolean | Prisma.ProfileCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["profile"]
>;

export type ProfileSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    userId?: boolean;
    organizationId?: boolean;
    username?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["profile"]
>;

export type ProfileSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    userId?: boolean;
    organizationId?: boolean;
    username?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["profile"]
>;

export type ProfileSelectScalar = {
  id?: boolean;
  uid?: boolean;
  userId?: boolean;
  organizationId?: boolean;
  username?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type ProfileOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "uid" | "userId" | "organizationId" | "username" | "createdAt" | "updatedAt",
  ExtArgs["result"]["profile"]
>;
export type ProfileInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  eventTypes?: boolean | Prisma.Profile$eventTypesArgs<ExtArgs>;
  movedFromUser?: boolean | Prisma.Profile$movedFromUserArgs<ExtArgs>;
  _count?: boolean | Prisma.ProfileCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ProfileIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type ProfileIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  organization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};

export type $ProfilePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Profile";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    organization: Prisma.$TeamPayload<ExtArgs>;
    eventTypes: Prisma.$EventTypePayload<ExtArgs>[];
    movedFromUser: Prisma.$UserPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      uid: string;
      userId: number;
      organizationId: number;
      username: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["profile"]
  >;
  composites: {};
};

export type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$ProfilePayload, S>;

export type ProfileCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ProfileFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ProfileCountAggregateInputType | true;
};

export interface ProfileDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Profile"]; meta: { name: "Profile" } };
  /**
   * Find zero or one Profile that matches the filter.
   * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProfilePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProfilePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Profile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProfileFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Profile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Profiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Profiles
   * const profiles = await prisma.profile.findMany()
   *
   * // Get first 10 Profiles
   * const profiles = await prisma.profile.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ProfileFindManyArgs>(
    args?: Prisma.SelectSubset<T, ProfileFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Profile.
   * @param {ProfileCreateArgs} args - Arguments to create a Profile.
   * @example
   * // Create one Profile
   * const Profile = await prisma.profile.create({
   *   data: {
   *     // ... data to create a Profile
   *   }
   * })
   *
   */
  create<T extends ProfileCreateArgs>(
    args: Prisma.SelectSubset<T, ProfileCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Profiles.
   * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
   * @example
   * // Create many Profiles
   * const profile = await prisma.profile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ProfileCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Profiles and returns the data saved in the database.
   * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
   * @example
   * // Create many Profiles
   * const profile = await prisma.profile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Profiles and only return the `id`
   * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProfilePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Profile.
   * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
   * @example
   * // Delete one Profile
   * const Profile = await prisma.profile.delete({
   *   where: {
   *     // ... filter to delete one Profile
   *   }
   * })
   *
   */
  delete<T extends ProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, ProfileDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Profile.
   * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
   * @example
   * // Update one Profile
   * const profile = await prisma.profile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, ProfileUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Profiles.
   * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
   * @example
   * // Delete a few Profiles
   * const { count } = await prisma.profile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ProfileDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Profiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Profiles
   * const profile = await prisma.profile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ProfileUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Profiles and returns the data updated in the database.
   * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
   * @example
   * // Update many Profiles
   * const profile = await prisma.profile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Profiles and only return the `id`
   * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProfilePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Profile.
   * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
   * @example
   * // Update or create a Profile
   * const profile = await prisma.profile.upsert({
   *   create: {
   *     // ... data to create a Profile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Profile we want to update
   *   }
   * })
   */
  upsert<T extends ProfileUpsertArgs>(
    args: Prisma.SelectSubset<T, ProfileUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ProfileClient<
    runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Profiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
   * @example
   * // Count the number of Profiles
   * const count = await prisma.profile.count({
   *   where: {
   *     // ... the filter for the Profiles we want to count
   *   }
   * })
   **/
  count<T extends ProfileCountArgs>(
    args?: Prisma.Subset<T, ProfileCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ProfileCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Profile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ProfileAggregateArgs>(
    args: Prisma.Subset<T, ProfileAggregateArgs>
  ): Prisma.PrismaPromise<GetProfileAggregateType<T>>;

  /**
   * Group by Profile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProfileGroupByArgs["orderBy"] }
      : { orderBy?: ProfileGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Profile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProfileClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  organization<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  eventTypes<T extends Prisma.Profile$eventTypesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Profile$eventTypesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$EventTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  movedFromUser<T extends Prisma.Profile$movedFromUserArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Profile$movedFromUserArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Profile model
 */
export interface ProfileFieldRefs {
  readonly id: Prisma.FieldRef<"Profile", "Int">;
  readonly uid: Prisma.FieldRef<"Profile", "String">;
  readonly userId: Prisma.FieldRef<"Profile", "Int">;
  readonly organizationId: Prisma.FieldRef<"Profile", "Int">;
  readonly username: Prisma.FieldRef<"Profile", "String">;
  readonly createdAt: Prisma.FieldRef<"Profile", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Profile", "DateTime">;
}

// Custom InputTypes
/**
 * Profile findUnique
 */
export type ProfileFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * Filter, which Profile to fetch.
   */
  where: Prisma.ProfileWhereUniqueInput;
};

/**
 * Profile findUniqueOrThrow
 */
export type ProfileFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * Filter, which Profile to fetch.
   */
  where: Prisma.ProfileWhereUniqueInput;
};

/**
 * Profile findFirst
 */
export type ProfileFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * Filter, which Profile to fetch.
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profiles to fetch.
   */
  orderBy?: Prisma.ProfileOrderByWithRelationInput | Prisma.ProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Profiles.
   */
  cursor?: Prisma.ProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profiles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Profiles.
   */
  distinct?: Prisma.ProfileScalarFieldEnum | Prisma.ProfileScalarFieldEnum[];
};

/**
 * Profile findFirstOrThrow
 */
export type ProfileFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * Filter, which Profile to fetch.
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profiles to fetch.
   */
  orderBy?: Prisma.ProfileOrderByWithRelationInput | Prisma.ProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Profiles.
   */
  cursor?: Prisma.ProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profiles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Profiles.
   */
  distinct?: Prisma.ProfileScalarFieldEnum | Prisma.ProfileScalarFieldEnum[];
};

/**
 * Profile findMany
 */
export type ProfileFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * Filter, which Profiles to fetch.
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profiles to fetch.
   */
  orderBy?: Prisma.ProfileOrderByWithRelationInput | Prisma.ProfileOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Profiles.
   */
  cursor?: Prisma.ProfileWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profiles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profiles.
   */
  skip?: number;
  distinct?: Prisma.ProfileScalarFieldEnum | Prisma.ProfileScalarFieldEnum[];
};

/**
 * Profile create
 */
export type ProfileCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * The data needed to create a Profile.
   */
  data: Prisma.XOR<Prisma.ProfileCreateInput, Prisma.ProfileUncheckedCreateInput>;
};

/**
 * Profile createMany
 */
export type ProfileCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Profiles.
   */
  data: Prisma.ProfileCreateManyInput | Prisma.ProfileCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Profile createManyAndReturn
 */
export type ProfileCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * The data used to create many Profiles.
   */
  data: Prisma.ProfileCreateManyInput | Prisma.ProfileCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Profile update
 */
export type ProfileUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * The data needed to update a Profile.
   */
  data: Prisma.XOR<Prisma.ProfileUpdateInput, Prisma.ProfileUncheckedUpdateInput>;
  /**
   * Choose, which Profile to update.
   */
  where: Prisma.ProfileWhereUniqueInput;
};

/**
 * Profile updateMany
 */
export type ProfileUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Profiles.
   */
  data: Prisma.XOR<Prisma.ProfileUpdateManyMutationInput, Prisma.ProfileUncheckedUpdateManyInput>;
  /**
   * Filter which Profiles to update
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * Limit how many Profiles to update.
   */
  limit?: number;
};

/**
 * Profile updateManyAndReturn
 */
export type ProfileUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * The data used to update Profiles.
   */
  data: Prisma.XOR<Prisma.ProfileUpdateManyMutationInput, Prisma.ProfileUncheckedUpdateManyInput>;
  /**
   * Filter which Profiles to update
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * Limit how many Profiles to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Profile upsert
 */
export type ProfileUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * The filter to search for the Profile to update in case it exists.
   */
  where: Prisma.ProfileWhereUniqueInput;
  /**
   * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
   */
  create: Prisma.XOR<Prisma.ProfileCreateInput, Prisma.ProfileUncheckedCreateInput>;
  /**
   * In case the Profile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProfileUpdateInput, Prisma.ProfileUncheckedUpdateInput>;
};

/**
 * Profile delete
 */
export type ProfileDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
  /**
   * Filter which Profile to delete.
   */
  where: Prisma.ProfileWhereUniqueInput;
};

/**
 * Profile deleteMany
 */
export type ProfileDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Profiles to delete
   */
  where?: Prisma.ProfileWhereInput;
  /**
   * Limit how many Profiles to delete.
   */
  limit?: number;
};

/**
 * Profile.eventTypes
 */
export type Profile$eventTypesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the EventType
   */
  select?: Prisma.EventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EventType
   */
  omit?: Prisma.EventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventTypeInclude<ExtArgs> | null;
  where?: Prisma.EventTypeWhereInput;
  orderBy?: Prisma.EventTypeOrderByWithRelationInput | Prisma.EventTypeOrderByWithRelationInput[];
  cursor?: Prisma.EventTypeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.EventTypeScalarFieldEnum | Prisma.EventTypeScalarFieldEnum[];
};

/**
 * Profile.movedFromUser
 */
export type Profile$movedFromUserArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Profile without action
 */
export type ProfileDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null;
};
