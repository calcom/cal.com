/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `HostGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model HostGroup
 *
 */
export type HostGroupModel = runtime.Types.Result.DefaultSelection<Prisma.$HostGroupPayload>;

export type AggregateHostGroup = {
  _count: HostGroupCountAggregateOutputType | null;
  _avg: HostGroupAvgAggregateOutputType | null;
  _sum: HostGroupSumAggregateOutputType | null;
  _min: HostGroupMinAggregateOutputType | null;
  _max: HostGroupMaxAggregateOutputType | null;
};

export type HostGroupAvgAggregateOutputType = {
  eventTypeId: number | null;
};

export type HostGroupSumAggregateOutputType = {
  eventTypeId: number | null;
};

export type HostGroupMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  eventTypeId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type HostGroupMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  eventTypeId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type HostGroupCountAggregateOutputType = {
  id: number;
  name: number;
  eventTypeId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type HostGroupAvgAggregateInputType = {
  eventTypeId?: true;
};

export type HostGroupSumAggregateInputType = {
  eventTypeId?: true;
};

export type HostGroupMinAggregateInputType = {
  id?: true;
  name?: true;
  eventTypeId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type HostGroupMaxAggregateInputType = {
  id?: true;
  name?: true;
  eventTypeId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type HostGroupCountAggregateInputType = {
  id?: true;
  name?: true;
  eventTypeId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type HostGroupAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which HostGroup to aggregate.
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HostGroups to fetch.
   */
  orderBy?: Prisma.HostGroupOrderByWithRelationInput | Prisma.HostGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.HostGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HostGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HostGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned HostGroups
   **/
  _count?: true | HostGroupCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: HostGroupAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: HostGroupSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: HostGroupMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: HostGroupMaxAggregateInputType;
};

export type GetHostGroupAggregateType<T extends HostGroupAggregateArgs> = {
  [P in keyof T & keyof AggregateHostGroup]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHostGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateHostGroup[P]>;
};

export type HostGroupGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.HostGroupWhereInput;
  orderBy?: Prisma.HostGroupOrderByWithAggregationInput | Prisma.HostGroupOrderByWithAggregationInput[];
  by: Prisma.HostGroupScalarFieldEnum[] | Prisma.HostGroupScalarFieldEnum;
  having?: Prisma.HostGroupScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: HostGroupCountAggregateInputType | true;
  _avg?: HostGroupAvgAggregateInputType;
  _sum?: HostGroupSumAggregateInputType;
  _min?: HostGroupMinAggregateInputType;
  _max?: HostGroupMaxAggregateInputType;
};

export type HostGroupGroupByOutputType = {
  id: string;
  name: string;
  eventTypeId: number | null;
  createdAt: Date;
  updatedAt: Date;
  _count: HostGroupCountAggregateOutputType | null;
  _avg: HostGroupAvgAggregateOutputType | null;
  _sum: HostGroupSumAggregateOutputType | null;
  _min: HostGroupMinAggregateOutputType | null;
  _max: HostGroupMaxAggregateOutputType | null;
};

type GetHostGroupGroupByPayload<T extends HostGroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HostGroupGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof HostGroupGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], HostGroupGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], HostGroupGroupByOutputType[P]>;
    }
  >
>;

export type HostGroupWhereInput = {
  AND?: Prisma.HostGroupWhereInput | Prisma.HostGroupWhereInput[];
  OR?: Prisma.HostGroupWhereInput[];
  NOT?: Prisma.HostGroupWhereInput | Prisma.HostGroupWhereInput[];
  id?: Prisma.StringFilter<"HostGroup"> | string;
  name?: Prisma.StringFilter<"HostGroup"> | string;
  eventTypeId?: Prisma.IntNullableFilter<"HostGroup"> | number | null;
  createdAt?: Prisma.DateTimeFilter<"HostGroup"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"HostGroup"> | Date | string;
  hosts?: Prisma.HostListRelationFilter;
  eventType?: Prisma.XOR<Prisma.EventTypeNullableScalarRelationFilter, Prisma.EventTypeWhereInput> | null;
};

export type HostGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  hosts?: Prisma.HostOrderByRelationAggregateInput;
  eventType?: Prisma.EventTypeOrderByWithRelationInput;
};

export type HostGroupWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.HostGroupWhereInput | Prisma.HostGroupWhereInput[];
    OR?: Prisma.HostGroupWhereInput[];
    NOT?: Prisma.HostGroupWhereInput | Prisma.HostGroupWhereInput[];
    name?: Prisma.StringFilter<"HostGroup"> | string;
    eventTypeId?: Prisma.IntNullableFilter<"HostGroup"> | number | null;
    createdAt?: Prisma.DateTimeFilter<"HostGroup"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"HostGroup"> | Date | string;
    hosts?: Prisma.HostListRelationFilter;
    eventType?: Prisma.XOR<Prisma.EventTypeNullableScalarRelationFilter, Prisma.EventTypeWhereInput> | null;
  },
  "id"
>;

export type HostGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.HostGroupCountOrderByAggregateInput;
  _avg?: Prisma.HostGroupAvgOrderByAggregateInput;
  _max?: Prisma.HostGroupMaxOrderByAggregateInput;
  _min?: Prisma.HostGroupMinOrderByAggregateInput;
  _sum?: Prisma.HostGroupSumOrderByAggregateInput;
};

export type HostGroupScalarWhereWithAggregatesInput = {
  AND?: Prisma.HostGroupScalarWhereWithAggregatesInput | Prisma.HostGroupScalarWhereWithAggregatesInput[];
  OR?: Prisma.HostGroupScalarWhereWithAggregatesInput[];
  NOT?: Prisma.HostGroupScalarWhereWithAggregatesInput | Prisma.HostGroupScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"HostGroup"> | string;
  name?: Prisma.StringWithAggregatesFilter<"HostGroup"> | string;
  eventTypeId?: Prisma.IntNullableWithAggregatesFilter<"HostGroup"> | number | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"HostGroup"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"HostGroup"> | Date | string;
};

export type HostGroupCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  hosts?: Prisma.HostCreateNestedManyWithoutGroupInput;
  eventType?: Prisma.EventTypeCreateNestedOneWithoutHostGroupsInput;
};

export type HostGroupUncheckedCreateInput = {
  id?: string;
  name: string;
  eventTypeId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  hosts?: Prisma.HostUncheckedCreateNestedManyWithoutGroupInput;
};

export type HostGroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  hosts?: Prisma.HostUpdateManyWithoutGroupNestedInput;
  eventType?: Prisma.EventTypeUpdateOneWithoutHostGroupsNestedInput;
};

export type HostGroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  hosts?: Prisma.HostUncheckedUpdateManyWithoutGroupNestedInput;
};

export type HostGroupCreateManyInput = {
  id?: string;
  name: string;
  eventTypeId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HostGroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HostGroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HostGroupNullableScalarRelationFilter = {
  is?: Prisma.HostGroupWhereInput | null;
  isNot?: Prisma.HostGroupWhereInput | null;
};

export type HostGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HostGroupAvgOrderByAggregateInput = {
  eventTypeId?: Prisma.SortOrder;
};

export type HostGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HostGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type HostGroupSumOrderByAggregateInput = {
  eventTypeId?: Prisma.SortOrder;
};

export type HostGroupListRelationFilter = {
  every?: Prisma.HostGroupWhereInput;
  some?: Prisma.HostGroupWhereInput;
  none?: Prisma.HostGroupWhereInput;
};

export type HostGroupOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type HostGroupCreateNestedOneWithoutHostsInput = {
  create?: Prisma.XOR<
    Prisma.HostGroupCreateWithoutHostsInput,
    Prisma.HostGroupUncheckedCreateWithoutHostsInput
  >;
  connectOrCreate?: Prisma.HostGroupCreateOrConnectWithoutHostsInput;
  connect?: Prisma.HostGroupWhereUniqueInput;
};

export type HostGroupUpdateOneWithoutHostsNestedInput = {
  create?: Prisma.XOR<
    Prisma.HostGroupCreateWithoutHostsInput,
    Prisma.HostGroupUncheckedCreateWithoutHostsInput
  >;
  connectOrCreate?: Prisma.HostGroupCreateOrConnectWithoutHostsInput;
  upsert?: Prisma.HostGroupUpsertWithoutHostsInput;
  disconnect?: Prisma.HostGroupWhereInput | boolean;
  delete?: Prisma.HostGroupWhereInput | boolean;
  connect?: Prisma.HostGroupWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.HostGroupUpdateToOneWithWhereWithoutHostsInput,
      Prisma.HostGroupUpdateWithoutHostsInput
    >,
    Prisma.HostGroupUncheckedUpdateWithoutHostsInput
  >;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type HostGroupCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.HostGroupCreateWithoutEventTypeInput,
        Prisma.HostGroupUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HostGroupCreateWithoutEventTypeInput[]
    | Prisma.HostGroupUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.HostGroupCreateManyEventTypeInputEnvelope;
  connect?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
};

export type HostGroupUncheckedCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.HostGroupCreateWithoutEventTypeInput,
        Prisma.HostGroupUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HostGroupCreateWithoutEventTypeInput[]
    | Prisma.HostGroupUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.HostGroupCreateManyEventTypeInputEnvelope;
  connect?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
};

export type HostGroupUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.HostGroupCreateWithoutEventTypeInput,
        Prisma.HostGroupUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HostGroupCreateWithoutEventTypeInput[]
    | Prisma.HostGroupUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.HostGroupUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.HostGroupUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.HostGroupCreateManyEventTypeInputEnvelope;
  set?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  disconnect?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  delete?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  connect?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  update?:
    | Prisma.HostGroupUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.HostGroupUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.HostGroupUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.HostGroupUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.HostGroupScalarWhereInput | Prisma.HostGroupScalarWhereInput[];
};

export type HostGroupUncheckedUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.HostGroupCreateWithoutEventTypeInput,
        Prisma.HostGroupUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.HostGroupCreateWithoutEventTypeInput[]
    | Prisma.HostGroupUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput
    | Prisma.HostGroupCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.HostGroupUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.HostGroupUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.HostGroupCreateManyEventTypeInputEnvelope;
  set?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  disconnect?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  delete?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  connect?: Prisma.HostGroupWhereUniqueInput | Prisma.HostGroupWhereUniqueInput[];
  update?:
    | Prisma.HostGroupUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.HostGroupUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.HostGroupUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.HostGroupUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.HostGroupScalarWhereInput | Prisma.HostGroupScalarWhereInput[];
};

export type HostGroupCreateWithoutHostsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  eventType?: Prisma.EventTypeCreateNestedOneWithoutHostGroupsInput;
};

export type HostGroupUncheckedCreateWithoutHostsInput = {
  id?: string;
  name: string;
  eventTypeId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HostGroupCreateOrConnectWithoutHostsInput = {
  where: Prisma.HostGroupWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.HostGroupCreateWithoutHostsInput,
    Prisma.HostGroupUncheckedCreateWithoutHostsInput
  >;
};

export type HostGroupUpsertWithoutHostsInput = {
  update: Prisma.XOR<
    Prisma.HostGroupUpdateWithoutHostsInput,
    Prisma.HostGroupUncheckedUpdateWithoutHostsInput
  >;
  create: Prisma.XOR<
    Prisma.HostGroupCreateWithoutHostsInput,
    Prisma.HostGroupUncheckedCreateWithoutHostsInput
  >;
  where?: Prisma.HostGroupWhereInput;
};

export type HostGroupUpdateToOneWithWhereWithoutHostsInput = {
  where?: Prisma.HostGroupWhereInput;
  data: Prisma.XOR<Prisma.HostGroupUpdateWithoutHostsInput, Prisma.HostGroupUncheckedUpdateWithoutHostsInput>;
};

export type HostGroupUpdateWithoutHostsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  eventType?: Prisma.EventTypeUpdateOneWithoutHostGroupsNestedInput;
};

export type HostGroupUncheckedUpdateWithoutHostsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type HostGroupCreateWithoutEventTypeInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  hosts?: Prisma.HostCreateNestedManyWithoutGroupInput;
};

export type HostGroupUncheckedCreateWithoutEventTypeInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  hosts?: Prisma.HostUncheckedCreateNestedManyWithoutGroupInput;
};

export type HostGroupCreateOrConnectWithoutEventTypeInput = {
  where: Prisma.HostGroupWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.HostGroupCreateWithoutEventTypeInput,
    Prisma.HostGroupUncheckedCreateWithoutEventTypeInput
  >;
};

export type HostGroupCreateManyEventTypeInputEnvelope = {
  data: Prisma.HostGroupCreateManyEventTypeInput | Prisma.HostGroupCreateManyEventTypeInput[];
  skipDuplicates?: boolean;
};

export type HostGroupUpsertWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.HostGroupWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.HostGroupUpdateWithoutEventTypeInput,
    Prisma.HostGroupUncheckedUpdateWithoutEventTypeInput
  >;
  create: Prisma.XOR<
    Prisma.HostGroupCreateWithoutEventTypeInput,
    Prisma.HostGroupUncheckedCreateWithoutEventTypeInput
  >;
};

export type HostGroupUpdateWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.HostGroupWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.HostGroupUpdateWithoutEventTypeInput,
    Prisma.HostGroupUncheckedUpdateWithoutEventTypeInput
  >;
};

export type HostGroupUpdateManyWithWhereWithoutEventTypeInput = {
  where: Prisma.HostGroupScalarWhereInput;
  data: Prisma.XOR<
    Prisma.HostGroupUpdateManyMutationInput,
    Prisma.HostGroupUncheckedUpdateManyWithoutEventTypeInput
  >;
};

export type HostGroupScalarWhereInput = {
  AND?: Prisma.HostGroupScalarWhereInput | Prisma.HostGroupScalarWhereInput[];
  OR?: Prisma.HostGroupScalarWhereInput[];
  NOT?: Prisma.HostGroupScalarWhereInput | Prisma.HostGroupScalarWhereInput[];
  id?: Prisma.StringFilter<"HostGroup"> | string;
  name?: Prisma.StringFilter<"HostGroup"> | string;
  eventTypeId?: Prisma.IntNullableFilter<"HostGroup"> | number | null;
  createdAt?: Prisma.DateTimeFilter<"HostGroup"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"HostGroup"> | Date | string;
};

export type HostGroupCreateManyEventTypeInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type HostGroupUpdateWithoutEventTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  hosts?: Prisma.HostUpdateManyWithoutGroupNestedInput;
};

export type HostGroupUncheckedUpdateWithoutEventTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  hosts?: Prisma.HostUncheckedUpdateManyWithoutGroupNestedInput;
};

export type HostGroupUncheckedUpdateManyWithoutEventTypeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type HostGroupCountOutputType
 */

export type HostGroupCountOutputType = {
  hosts: number;
};

export type HostGroupCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  hosts?: boolean | HostGroupCountOutputTypeCountHostsArgs;
};

/**
 * HostGroupCountOutputType without action
 */
export type HostGroupCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroupCountOutputType
   */
  select?: Prisma.HostGroupCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * HostGroupCountOutputType without action
 */
export type HostGroupCountOutputTypeCountHostsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.HostWhereInput;
};

export type HostGroupSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    eventTypeId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    hosts?: boolean | Prisma.HostGroup$hostsArgs<ExtArgs>;
    eventType?: boolean | Prisma.HostGroup$eventTypeArgs<ExtArgs>;
    _count?: boolean | Prisma.HostGroupCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["hostGroup"]
>;

export type HostGroupSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    eventTypeId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    eventType?: boolean | Prisma.HostGroup$eventTypeArgs<ExtArgs>;
  },
  ExtArgs["result"]["hostGroup"]
>;

export type HostGroupSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    eventTypeId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    eventType?: boolean | Prisma.HostGroup$eventTypeArgs<ExtArgs>;
  },
  ExtArgs["result"]["hostGroup"]
>;

export type HostGroupSelectScalar = {
  id?: boolean;
  name?: boolean;
  eventTypeId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type HostGroupOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "eventTypeId" | "createdAt" | "updatedAt",
  ExtArgs["result"]["hostGroup"]
>;
export type HostGroupInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  hosts?: boolean | Prisma.HostGroup$hostsArgs<ExtArgs>;
  eventType?: boolean | Prisma.HostGroup$eventTypeArgs<ExtArgs>;
  _count?: boolean | Prisma.HostGroupCountOutputTypeDefaultArgs<ExtArgs>;
};
export type HostGroupIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventType?: boolean | Prisma.HostGroup$eventTypeArgs<ExtArgs>;
};
export type HostGroupIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  eventType?: boolean | Prisma.HostGroup$eventTypeArgs<ExtArgs>;
};

export type $HostGroupPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "HostGroup";
  objects: {
    hosts: Prisma.$HostPayload<ExtArgs>[];
    eventType: Prisma.$EventTypePayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      eventTypeId: number | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["hostGroup"]
  >;
  composites: {};
};

export type HostGroupGetPayload<S extends boolean | null | undefined | HostGroupDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$HostGroupPayload, S>;

export type HostGroupCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<HostGroupFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: HostGroupCountAggregateInputType | true;
};

export interface HostGroupDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["HostGroup"]; meta: { name: "HostGroup" } };
  /**
   * Find zero or one HostGroup that matches the filter.
   * @param {HostGroupFindUniqueArgs} args - Arguments to find a HostGroup
   * @example
   * // Get one HostGroup
   * const hostGroup = await prisma.hostGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HostGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, HostGroupFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$HostGroupPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one HostGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HostGroupFindUniqueOrThrowArgs} args - Arguments to find a HostGroup
   * @example
   * // Get one HostGroup
   * const hostGroup = await prisma.hostGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HostGroupFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, HostGroupFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$HostGroupPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HostGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupFindFirstArgs} args - Arguments to find a HostGroup
   * @example
   * // Get one HostGroup
   * const hostGroup = await prisma.hostGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HostGroupFindFirstArgs>(
    args?: Prisma.SelectSubset<T, HostGroupFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$HostGroupPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first HostGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupFindFirstOrThrowArgs} args - Arguments to find a HostGroup
   * @example
   * // Get one HostGroup
   * const hostGroup = await prisma.hostGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HostGroupFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, HostGroupFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$HostGroupPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more HostGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HostGroups
   * const hostGroups = await prisma.hostGroup.findMany()
   *
   * // Get first 10 HostGroups
   * const hostGroups = await prisma.hostGroup.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const hostGroupWithIdOnly = await prisma.hostGroup.findMany({ select: { id: true } })
   *
   */
  findMany<T extends HostGroupFindManyArgs>(
    args?: Prisma.SelectSubset<T, HostGroupFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$HostGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a HostGroup.
   * @param {HostGroupCreateArgs} args - Arguments to create a HostGroup.
   * @example
   * // Create one HostGroup
   * const HostGroup = await prisma.hostGroup.create({
   *   data: {
   *     // ... data to create a HostGroup
   *   }
   * })
   *
   */
  create<T extends HostGroupCreateArgs>(
    args: Prisma.SelectSubset<T, HostGroupCreateArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<Prisma.$HostGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many HostGroups.
   * @param {HostGroupCreateManyArgs} args - Arguments to create many HostGroups.
   * @example
   * // Create many HostGroups
   * const hostGroup = await prisma.hostGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends HostGroupCreateManyArgs>(
    args?: Prisma.SelectSubset<T, HostGroupCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many HostGroups and returns the data saved in the database.
   * @param {HostGroupCreateManyAndReturnArgs} args - Arguments to create many HostGroups.
   * @example
   * // Create many HostGroups
   * const hostGroup = await prisma.hostGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many HostGroups and only return the `id`
   * const hostGroupWithIdOnly = await prisma.hostGroup.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends HostGroupCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, HostGroupCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HostGroupPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a HostGroup.
   * @param {HostGroupDeleteArgs} args - Arguments to delete one HostGroup.
   * @example
   * // Delete one HostGroup
   * const HostGroup = await prisma.hostGroup.delete({
   *   where: {
   *     // ... filter to delete one HostGroup
   *   }
   * })
   *
   */
  delete<T extends HostGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, HostGroupDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<Prisma.$HostGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one HostGroup.
   * @param {HostGroupUpdateArgs} args - Arguments to update one HostGroup.
   * @example
   * // Update one HostGroup
   * const hostGroup = await prisma.hostGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends HostGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, HostGroupUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<Prisma.$HostGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more HostGroups.
   * @param {HostGroupDeleteManyArgs} args - Arguments to filter HostGroups to delete.
   * @example
   * // Delete a few HostGroups
   * const { count } = await prisma.hostGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends HostGroupDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, HostGroupDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HostGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HostGroups
   * const hostGroup = await prisma.hostGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends HostGroupUpdateManyArgs>(
    args: Prisma.SelectSubset<T, HostGroupUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more HostGroups and returns the data updated in the database.
   * @param {HostGroupUpdateManyAndReturnArgs} args - Arguments to update many HostGroups.
   * @example
   * // Update many HostGroups
   * const hostGroup = await prisma.hostGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more HostGroups and only return the `id`
   * const hostGroupWithIdOnly = await prisma.hostGroup.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends HostGroupUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, HostGroupUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$HostGroupPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one HostGroup.
   * @param {HostGroupUpsertArgs} args - Arguments to update or create a HostGroup.
   * @example
   * // Update or create a HostGroup
   * const hostGroup = await prisma.hostGroup.upsert({
   *   create: {
   *     // ... data to create a HostGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HostGroup we want to update
   *   }
   * })
   */
  upsert<T extends HostGroupUpsertArgs>(
    args: Prisma.SelectSubset<T, HostGroupUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__HostGroupClient<
    runtime.Types.Result.GetResult<Prisma.$HostGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of HostGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupCountArgs} args - Arguments to filter HostGroups to count.
   * @example
   * // Count the number of HostGroups
   * const count = await prisma.hostGroup.count({
   *   where: {
   *     // ... the filter for the HostGroups we want to count
   *   }
   * })
   **/
  count<T extends HostGroupCountArgs>(
    args?: Prisma.Subset<T, HostGroupCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], HostGroupCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a HostGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends HostGroupAggregateArgs>(
    args: Prisma.Subset<T, HostGroupAggregateArgs>
  ): Prisma.PrismaPromise<GetHostGroupAggregateType<T>>;

  /**
   * Group by HostGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HostGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends HostGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HostGroupGroupByArgs["orderBy"] }
      : { orderBy?: HostGroupGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, HostGroupGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetHostGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the HostGroup model
   */
  readonly fields: HostGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HostGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HostGroupClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  hosts<T extends Prisma.HostGroup$hostsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.HostGroup$hostsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$HostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null
  >;
  eventType<T extends Prisma.HostGroup$eventTypeArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.HostGroup$eventTypeArgs<ExtArgs>>
  ): Prisma.Prisma__EventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventTypePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the HostGroup model
 */
export interface HostGroupFieldRefs {
  readonly id: Prisma.FieldRef<"HostGroup", "String">;
  readonly name: Prisma.FieldRef<"HostGroup", "String">;
  readonly eventTypeId: Prisma.FieldRef<"HostGroup", "Int">;
  readonly createdAt: Prisma.FieldRef<"HostGroup", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"HostGroup", "DateTime">;
}

// Custom InputTypes
/**
 * HostGroup findUnique
 */
export type HostGroupFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * Filter, which HostGroup to fetch.
   */
  where: Prisma.HostGroupWhereUniqueInput;
};

/**
 * HostGroup findUniqueOrThrow
 */
export type HostGroupFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * Filter, which HostGroup to fetch.
   */
  where: Prisma.HostGroupWhereUniqueInput;
};

/**
 * HostGroup findFirst
 */
export type HostGroupFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * Filter, which HostGroup to fetch.
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HostGroups to fetch.
   */
  orderBy?: Prisma.HostGroupOrderByWithRelationInput | Prisma.HostGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HostGroups.
   */
  cursor?: Prisma.HostGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HostGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HostGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HostGroups.
   */
  distinct?: Prisma.HostGroupScalarFieldEnum | Prisma.HostGroupScalarFieldEnum[];
};

/**
 * HostGroup findFirstOrThrow
 */
export type HostGroupFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * Filter, which HostGroup to fetch.
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HostGroups to fetch.
   */
  orderBy?: Prisma.HostGroupOrderByWithRelationInput | Prisma.HostGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for HostGroups.
   */
  cursor?: Prisma.HostGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HostGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HostGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of HostGroups.
   */
  distinct?: Prisma.HostGroupScalarFieldEnum | Prisma.HostGroupScalarFieldEnum[];
};

/**
 * HostGroup findMany
 */
export type HostGroupFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * Filter, which HostGroups to fetch.
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of HostGroups to fetch.
   */
  orderBy?: Prisma.HostGroupOrderByWithRelationInput | Prisma.HostGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing HostGroups.
   */
  cursor?: Prisma.HostGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` HostGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` HostGroups.
   */
  skip?: number;
  distinct?: Prisma.HostGroupScalarFieldEnum | Prisma.HostGroupScalarFieldEnum[];
};

/**
 * HostGroup create
 */
export type HostGroupCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * The data needed to create a HostGroup.
   */
  data: Prisma.XOR<Prisma.HostGroupCreateInput, Prisma.HostGroupUncheckedCreateInput>;
};

/**
 * HostGroup createMany
 */
export type HostGroupCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many HostGroups.
   */
  data: Prisma.HostGroupCreateManyInput | Prisma.HostGroupCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * HostGroup createManyAndReturn
 */
export type HostGroupCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * The data used to create many HostGroups.
   */
  data: Prisma.HostGroupCreateManyInput | Prisma.HostGroupCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * HostGroup update
 */
export type HostGroupUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * The data needed to update a HostGroup.
   */
  data: Prisma.XOR<Prisma.HostGroupUpdateInput, Prisma.HostGroupUncheckedUpdateInput>;
  /**
   * Choose, which HostGroup to update.
   */
  where: Prisma.HostGroupWhereUniqueInput;
};

/**
 * HostGroup updateMany
 */
export type HostGroupUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update HostGroups.
   */
  data: Prisma.XOR<Prisma.HostGroupUpdateManyMutationInput, Prisma.HostGroupUncheckedUpdateManyInput>;
  /**
   * Filter which HostGroups to update
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * Limit how many HostGroups to update.
   */
  limit?: number;
};

/**
 * HostGroup updateManyAndReturn
 */
export type HostGroupUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * The data used to update HostGroups.
   */
  data: Prisma.XOR<Prisma.HostGroupUpdateManyMutationInput, Prisma.HostGroupUncheckedUpdateManyInput>;
  /**
   * Filter which HostGroups to update
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * Limit how many HostGroups to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * HostGroup upsert
 */
export type HostGroupUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * The filter to search for the HostGroup to update in case it exists.
   */
  where: Prisma.HostGroupWhereUniqueInput;
  /**
   * In case the HostGroup found by the `where` argument doesn't exist, create a new HostGroup with this data.
   */
  create: Prisma.XOR<Prisma.HostGroupCreateInput, Prisma.HostGroupUncheckedCreateInput>;
  /**
   * In case the HostGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HostGroupUpdateInput, Prisma.HostGroupUncheckedUpdateInput>;
};

/**
 * HostGroup delete
 */
export type HostGroupDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
  /**
   * Filter which HostGroup to delete.
   */
  where: Prisma.HostGroupWhereUniqueInput;
};

/**
 * HostGroup deleteMany
 */
export type HostGroupDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which HostGroups to delete
   */
  where?: Prisma.HostGroupWhereInput;
  /**
   * Limit how many HostGroups to delete.
   */
  limit?: number;
};

/**
 * HostGroup.hosts
 */
export type HostGroup$hostsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Host
   */
  select?: Prisma.HostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Host
   */
  omit?: Prisma.HostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostInclude<ExtArgs> | null;
  where?: Prisma.HostWhereInput;
  orderBy?: Prisma.HostOrderByWithRelationInput | Prisma.HostOrderByWithRelationInput[];
  cursor?: Prisma.HostWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.HostScalarFieldEnum | Prisma.HostScalarFieldEnum[];
};

/**
 * HostGroup.eventType
 */
export type HostGroup$eventTypeArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the EventType
   */
  select?: Prisma.EventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EventType
   */
  omit?: Prisma.EventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventTypeInclude<ExtArgs> | null;
  where?: Prisma.EventTypeWhereInput;
};

/**
 * HostGroup without action
 */
export type HostGroupDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the HostGroup
   */
  select?: Prisma.HostGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the HostGroup
   */
  omit?: Prisma.HostGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HostGroupInclude<ExtArgs> | null;
};
