/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `ManagedOrganization` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ManagedOrganization
 *
 */
export type ManagedOrganizationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ManagedOrganizationPayload>;

export type AggregateManagedOrganization = {
  _count: ManagedOrganizationCountAggregateOutputType | null;
  _avg: ManagedOrganizationAvgAggregateOutputType | null;
  _sum: ManagedOrganizationSumAggregateOutputType | null;
  _min: ManagedOrganizationMinAggregateOutputType | null;
  _max: ManagedOrganizationMaxAggregateOutputType | null;
};

export type ManagedOrganizationAvgAggregateOutputType = {
  managedOrganizationId: number | null;
  managerOrganizationId: number | null;
};

export type ManagedOrganizationSumAggregateOutputType = {
  managedOrganizationId: number | null;
  managerOrganizationId: number | null;
};

export type ManagedOrganizationMinAggregateOutputType = {
  managedOrganizationId: number | null;
  managerOrganizationId: number | null;
  createdAt: Date | null;
};

export type ManagedOrganizationMaxAggregateOutputType = {
  managedOrganizationId: number | null;
  managerOrganizationId: number | null;
  createdAt: Date | null;
};

export type ManagedOrganizationCountAggregateOutputType = {
  managedOrganizationId: number;
  managerOrganizationId: number;
  createdAt: number;
  _all: number;
};

export type ManagedOrganizationAvgAggregateInputType = {
  managedOrganizationId?: true;
  managerOrganizationId?: true;
};

export type ManagedOrganizationSumAggregateInputType = {
  managedOrganizationId?: true;
  managerOrganizationId?: true;
};

export type ManagedOrganizationMinAggregateInputType = {
  managedOrganizationId?: true;
  managerOrganizationId?: true;
  createdAt?: true;
};

export type ManagedOrganizationMaxAggregateInputType = {
  managedOrganizationId?: true;
  managerOrganizationId?: true;
  createdAt?: true;
};

export type ManagedOrganizationCountAggregateInputType = {
  managedOrganizationId?: true;
  managerOrganizationId?: true;
  createdAt?: true;
  _all?: true;
};

export type ManagedOrganizationAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which ManagedOrganization to aggregate.
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ManagedOrganizations to fetch.
   */
  orderBy?:
    | Prisma.ManagedOrganizationOrderByWithRelationInput
    | Prisma.ManagedOrganizationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ManagedOrganizationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ManagedOrganizations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ManagedOrganizations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ManagedOrganizations
   **/
  _count?: true | ManagedOrganizationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ManagedOrganizationAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ManagedOrganizationSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ManagedOrganizationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ManagedOrganizationMaxAggregateInputType;
};

export type GetManagedOrganizationAggregateType<T extends ManagedOrganizationAggregateArgs> = {
  [P in keyof T & keyof AggregateManagedOrganization]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateManagedOrganization[P]>
    : Prisma.GetScalarType<T[P], AggregateManagedOrganization[P]>;
};

export type ManagedOrganizationGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ManagedOrganizationWhereInput;
  orderBy?:
    | Prisma.ManagedOrganizationOrderByWithAggregationInput
    | Prisma.ManagedOrganizationOrderByWithAggregationInput[];
  by: Prisma.ManagedOrganizationScalarFieldEnum[] | Prisma.ManagedOrganizationScalarFieldEnum;
  having?: Prisma.ManagedOrganizationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ManagedOrganizationCountAggregateInputType | true;
  _avg?: ManagedOrganizationAvgAggregateInputType;
  _sum?: ManagedOrganizationSumAggregateInputType;
  _min?: ManagedOrganizationMinAggregateInputType;
  _max?: ManagedOrganizationMaxAggregateInputType;
};

export type ManagedOrganizationGroupByOutputType = {
  managedOrganizationId: number;
  managerOrganizationId: number;
  createdAt: Date;
  _count: ManagedOrganizationCountAggregateOutputType | null;
  _avg: ManagedOrganizationAvgAggregateOutputType | null;
  _sum: ManagedOrganizationSumAggregateOutputType | null;
  _min: ManagedOrganizationMinAggregateOutputType | null;
  _max: ManagedOrganizationMaxAggregateOutputType | null;
};

type GetManagedOrganizationGroupByPayload<T extends ManagedOrganizationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ManagedOrganizationGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ManagedOrganizationGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ManagedOrganizationGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ManagedOrganizationGroupByOutputType[P]>;
    }
  >
>;

export type ManagedOrganizationWhereInput = {
  AND?: Prisma.ManagedOrganizationWhereInput | Prisma.ManagedOrganizationWhereInput[];
  OR?: Prisma.ManagedOrganizationWhereInput[];
  NOT?: Prisma.ManagedOrganizationWhereInput | Prisma.ManagedOrganizationWhereInput[];
  managedOrganizationId?: Prisma.IntFilter<"ManagedOrganization"> | number;
  managerOrganizationId?: Prisma.IntFilter<"ManagedOrganization"> | number;
  createdAt?: Prisma.DateTimeFilter<"ManagedOrganization"> | Date | string;
  managedOrganization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  managerOrganization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
};

export type ManagedOrganizationOrderByWithRelationInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  managedOrganization?: Prisma.TeamOrderByWithRelationInput;
  managerOrganization?: Prisma.TeamOrderByWithRelationInput;
};

export type ManagedOrganizationWhereUniqueInput = Prisma.AtLeast<
  {
    managedOrganizationId?: number;
    managerOrganizationId_managedOrganizationId?: Prisma.ManagedOrganizationManagerOrganizationIdManagedOrganizationIdCompoundUniqueInput;
    AND?: Prisma.ManagedOrganizationWhereInput | Prisma.ManagedOrganizationWhereInput[];
    OR?: Prisma.ManagedOrganizationWhereInput[];
    NOT?: Prisma.ManagedOrganizationWhereInput | Prisma.ManagedOrganizationWhereInput[];
    managerOrganizationId?: Prisma.IntFilter<"ManagedOrganization"> | number;
    createdAt?: Prisma.DateTimeFilter<"ManagedOrganization"> | Date | string;
    managedOrganization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    managerOrganization?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  },
  "managedOrganizationId" | "managerOrganizationId_managedOrganizationId"
>;

export type ManagedOrganizationOrderByWithAggregationInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.ManagedOrganizationCountOrderByAggregateInput;
  _avg?: Prisma.ManagedOrganizationAvgOrderByAggregateInput;
  _max?: Prisma.ManagedOrganizationMaxOrderByAggregateInput;
  _min?: Prisma.ManagedOrganizationMinOrderByAggregateInput;
  _sum?: Prisma.ManagedOrganizationSumOrderByAggregateInput;
};

export type ManagedOrganizationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ManagedOrganizationScalarWhereWithAggregatesInput
    | Prisma.ManagedOrganizationScalarWhereWithAggregatesInput[];
  OR?: Prisma.ManagedOrganizationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ManagedOrganizationScalarWhereWithAggregatesInput
    | Prisma.ManagedOrganizationScalarWhereWithAggregatesInput[];
  managedOrganizationId?: Prisma.IntWithAggregatesFilter<"ManagedOrganization"> | number;
  managerOrganizationId?: Prisma.IntWithAggregatesFilter<"ManagedOrganization"> | number;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ManagedOrganization"> | Date | string;
};

export type ManagedOrganizationCreateInput = {
  createdAt?: Date | string;
  managedOrganization: Prisma.TeamCreateNestedOneWithoutManagedOrganizationInput;
  managerOrganization: Prisma.TeamCreateNestedOneWithoutManagedOrganizationsInput;
};

export type ManagedOrganizationUncheckedCreateInput = {
  managedOrganizationId: number;
  managerOrganizationId: number;
  createdAt?: Date | string;
};

export type ManagedOrganizationUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  managedOrganization?: Prisma.TeamUpdateOneRequiredWithoutManagedOrganizationNestedInput;
  managerOrganization?: Prisma.TeamUpdateOneRequiredWithoutManagedOrganizationsNestedInput;
};

export type ManagedOrganizationUncheckedUpdateInput = {
  managedOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  managerOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ManagedOrganizationCreateManyInput = {
  managedOrganizationId: number;
  managerOrganizationId: number;
  createdAt?: Date | string;
};

export type ManagedOrganizationUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ManagedOrganizationUncheckedUpdateManyInput = {
  managedOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  managerOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ManagedOrganizationNullableScalarRelationFilter = {
  is?: Prisma.ManagedOrganizationWhereInput | null;
  isNot?: Prisma.ManagedOrganizationWhereInput | null;
};

export type ManagedOrganizationListRelationFilter = {
  every?: Prisma.ManagedOrganizationWhereInput;
  some?: Prisma.ManagedOrganizationWhereInput;
  none?: Prisma.ManagedOrganizationWhereInput;
};

export type ManagedOrganizationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ManagedOrganizationManagerOrganizationIdManagedOrganizationIdCompoundUniqueInput = {
  managerOrganizationId: number;
  managedOrganizationId: number;
};

export type ManagedOrganizationCountOrderByAggregateInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ManagedOrganizationAvgOrderByAggregateInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
};

export type ManagedOrganizationMaxOrderByAggregateInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ManagedOrganizationMinOrderByAggregateInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ManagedOrganizationSumOrderByAggregateInput = {
  managedOrganizationId?: Prisma.SortOrder;
  managerOrganizationId?: Prisma.SortOrder;
};

export type ManagedOrganizationCreateNestedOneWithoutManagedOrganizationInput = {
  create?: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput
  >;
  connectOrCreate?: Prisma.ManagedOrganizationCreateOrConnectWithoutManagedOrganizationInput;
  connect?: Prisma.ManagedOrganizationWhereUniqueInput;
};

export type ManagedOrganizationCreateNestedManyWithoutManagerOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput,
        Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput
      >
    | Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput[]
    | Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput[];
  connectOrCreate?:
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput[];
  createMany?: Prisma.ManagedOrganizationCreateManyManagerOrganizationInputEnvelope;
  connect?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
};

export type ManagedOrganizationUncheckedCreateNestedOneWithoutManagedOrganizationInput = {
  create?: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput
  >;
  connectOrCreate?: Prisma.ManagedOrganizationCreateOrConnectWithoutManagedOrganizationInput;
  connect?: Prisma.ManagedOrganizationWhereUniqueInput;
};

export type ManagedOrganizationUncheckedCreateNestedManyWithoutManagerOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput,
        Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput
      >
    | Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput[]
    | Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput[];
  connectOrCreate?:
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput[];
  createMany?: Prisma.ManagedOrganizationCreateManyManagerOrganizationInputEnvelope;
  connect?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
};

export type ManagedOrganizationUpdateOneWithoutManagedOrganizationNestedInput = {
  create?: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput
  >;
  connectOrCreate?: Prisma.ManagedOrganizationCreateOrConnectWithoutManagedOrganizationInput;
  upsert?: Prisma.ManagedOrganizationUpsertWithoutManagedOrganizationInput;
  disconnect?: Prisma.ManagedOrganizationWhereInput | boolean;
  delete?: Prisma.ManagedOrganizationWhereInput | boolean;
  connect?: Prisma.ManagedOrganizationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ManagedOrganizationUpdateToOneWithWhereWithoutManagedOrganizationInput,
      Prisma.ManagedOrganizationUpdateWithoutManagedOrganizationInput
    >,
    Prisma.ManagedOrganizationUncheckedUpdateWithoutManagedOrganizationInput
  >;
};

export type ManagedOrganizationUpdateManyWithoutManagerOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput,
        Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput
      >
    | Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput[]
    | Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput[];
  connectOrCreate?:
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput[];
  upsert?:
    | Prisma.ManagedOrganizationUpsertWithWhereUniqueWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationUpsertWithWhereUniqueWithoutManagerOrganizationInput[];
  createMany?: Prisma.ManagedOrganizationCreateManyManagerOrganizationInputEnvelope;
  set?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  disconnect?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  delete?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  connect?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  update?:
    | Prisma.ManagedOrganizationUpdateWithWhereUniqueWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationUpdateWithWhereUniqueWithoutManagerOrganizationInput[];
  updateMany?:
    | Prisma.ManagedOrganizationUpdateManyWithWhereWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationUpdateManyWithWhereWithoutManagerOrganizationInput[];
  deleteMany?: Prisma.ManagedOrganizationScalarWhereInput | Prisma.ManagedOrganizationScalarWhereInput[];
};

export type ManagedOrganizationUncheckedUpdateOneWithoutManagedOrganizationNestedInput = {
  create?: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput
  >;
  connectOrCreate?: Prisma.ManagedOrganizationCreateOrConnectWithoutManagedOrganizationInput;
  upsert?: Prisma.ManagedOrganizationUpsertWithoutManagedOrganizationInput;
  disconnect?: Prisma.ManagedOrganizationWhereInput | boolean;
  delete?: Prisma.ManagedOrganizationWhereInput | boolean;
  connect?: Prisma.ManagedOrganizationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ManagedOrganizationUpdateToOneWithWhereWithoutManagedOrganizationInput,
      Prisma.ManagedOrganizationUpdateWithoutManagedOrganizationInput
    >,
    Prisma.ManagedOrganizationUncheckedUpdateWithoutManagedOrganizationInput
  >;
};

export type ManagedOrganizationUncheckedUpdateManyWithoutManagerOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput,
        Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput
      >
    | Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput[]
    | Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput[];
  connectOrCreate?:
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput[];
  upsert?:
    | Prisma.ManagedOrganizationUpsertWithWhereUniqueWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationUpsertWithWhereUniqueWithoutManagerOrganizationInput[];
  createMany?: Prisma.ManagedOrganizationCreateManyManagerOrganizationInputEnvelope;
  set?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  disconnect?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  delete?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  connect?: Prisma.ManagedOrganizationWhereUniqueInput | Prisma.ManagedOrganizationWhereUniqueInput[];
  update?:
    | Prisma.ManagedOrganizationUpdateWithWhereUniqueWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationUpdateWithWhereUniqueWithoutManagerOrganizationInput[];
  updateMany?:
    | Prisma.ManagedOrganizationUpdateManyWithWhereWithoutManagerOrganizationInput
    | Prisma.ManagedOrganizationUpdateManyWithWhereWithoutManagerOrganizationInput[];
  deleteMany?: Prisma.ManagedOrganizationScalarWhereInput | Prisma.ManagedOrganizationScalarWhereInput[];
};

export type ManagedOrganizationCreateWithoutManagedOrganizationInput = {
  createdAt?: Date | string;
  managerOrganization: Prisma.TeamCreateNestedOneWithoutManagedOrganizationsInput;
};

export type ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput = {
  managerOrganizationId: number;
  createdAt?: Date | string;
};

export type ManagedOrganizationCreateOrConnectWithoutManagedOrganizationInput = {
  where: Prisma.ManagedOrganizationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput
  >;
};

export type ManagedOrganizationCreateWithoutManagerOrganizationInput = {
  createdAt?: Date | string;
  managedOrganization: Prisma.TeamCreateNestedOneWithoutManagedOrganizationInput;
};

export type ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput = {
  managedOrganizationId: number;
  createdAt?: Date | string;
};

export type ManagedOrganizationCreateOrConnectWithoutManagerOrganizationInput = {
  where: Prisma.ManagedOrganizationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput
  >;
};

export type ManagedOrganizationCreateManyManagerOrganizationInputEnvelope = {
  data:
    | Prisma.ManagedOrganizationCreateManyManagerOrganizationInput
    | Prisma.ManagedOrganizationCreateManyManagerOrganizationInput[];
  skipDuplicates?: boolean;
};

export type ManagedOrganizationUpsertWithoutManagedOrganizationInput = {
  update: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedUpdateWithoutManagedOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagedOrganizationInput
  >;
  where?: Prisma.ManagedOrganizationWhereInput;
};

export type ManagedOrganizationUpdateToOneWithWhereWithoutManagedOrganizationInput = {
  where?: Prisma.ManagedOrganizationWhereInput;
  data: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateWithoutManagedOrganizationInput,
    Prisma.ManagedOrganizationUncheckedUpdateWithoutManagedOrganizationInput
  >;
};

export type ManagedOrganizationUpdateWithoutManagedOrganizationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  managerOrganization?: Prisma.TeamUpdateOneRequiredWithoutManagedOrganizationsNestedInput;
};

export type ManagedOrganizationUncheckedUpdateWithoutManagedOrganizationInput = {
  managerOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ManagedOrganizationUpsertWithWhereUniqueWithoutManagerOrganizationInput = {
  where: Prisma.ManagedOrganizationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateWithoutManagerOrganizationInput,
    Prisma.ManagedOrganizationUncheckedUpdateWithoutManagerOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.ManagedOrganizationCreateWithoutManagerOrganizationInput,
    Prisma.ManagedOrganizationUncheckedCreateWithoutManagerOrganizationInput
  >;
};

export type ManagedOrganizationUpdateWithWhereUniqueWithoutManagerOrganizationInput = {
  where: Prisma.ManagedOrganizationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateWithoutManagerOrganizationInput,
    Prisma.ManagedOrganizationUncheckedUpdateWithoutManagerOrganizationInput
  >;
};

export type ManagedOrganizationUpdateManyWithWhereWithoutManagerOrganizationInput = {
  where: Prisma.ManagedOrganizationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateManyMutationInput,
    Prisma.ManagedOrganizationUncheckedUpdateManyWithoutManagerOrganizationInput
  >;
};

export type ManagedOrganizationScalarWhereInput = {
  AND?: Prisma.ManagedOrganizationScalarWhereInput | Prisma.ManagedOrganizationScalarWhereInput[];
  OR?: Prisma.ManagedOrganizationScalarWhereInput[];
  NOT?: Prisma.ManagedOrganizationScalarWhereInput | Prisma.ManagedOrganizationScalarWhereInput[];
  managedOrganizationId?: Prisma.IntFilter<"ManagedOrganization"> | number;
  managerOrganizationId?: Prisma.IntFilter<"ManagedOrganization"> | number;
  createdAt?: Prisma.DateTimeFilter<"ManagedOrganization"> | Date | string;
};

export type ManagedOrganizationCreateManyManagerOrganizationInput = {
  managedOrganizationId: number;
  createdAt?: Date | string;
};

export type ManagedOrganizationUpdateWithoutManagerOrganizationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  managedOrganization?: Prisma.TeamUpdateOneRequiredWithoutManagedOrganizationNestedInput;
};

export type ManagedOrganizationUncheckedUpdateWithoutManagerOrganizationInput = {
  managedOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ManagedOrganizationUncheckedUpdateManyWithoutManagerOrganizationInput = {
  managedOrganizationId?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ManagedOrganizationSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    managedOrganizationId?: boolean;
    managerOrganizationId?: boolean;
    createdAt?: boolean;
    managedOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    managerOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["managedOrganization"]
>;

export type ManagedOrganizationSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    managedOrganizationId?: boolean;
    managerOrganizationId?: boolean;
    createdAt?: boolean;
    managedOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    managerOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["managedOrganization"]
>;

export type ManagedOrganizationSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    managedOrganizationId?: boolean;
    managerOrganizationId?: boolean;
    createdAt?: boolean;
    managedOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    managerOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["managedOrganization"]
>;

export type ManagedOrganizationSelectScalar = {
  managedOrganizationId?: boolean;
  managerOrganizationId?: boolean;
  createdAt?: boolean;
};

export type ManagedOrganizationOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "managedOrganizationId" | "managerOrganizationId" | "createdAt",
  ExtArgs["result"]["managedOrganization"]
>;
export type ManagedOrganizationInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  managedOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  managerOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type ManagedOrganizationIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  managedOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  managerOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type ManagedOrganizationIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  managedOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  managerOrganization?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};

export type $ManagedOrganizationPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "ManagedOrganization";
  objects: {
    managedOrganization: Prisma.$TeamPayload<ExtArgs>;
    managerOrganization: Prisma.$TeamPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      managedOrganizationId: number;
      managerOrganizationId: number;
      createdAt: Date;
    },
    ExtArgs["result"]["managedOrganization"]
  >;
  composites: {};
};

export type ManagedOrganizationGetPayload<
  S extends boolean | null | undefined | ManagedOrganizationDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$ManagedOrganizationPayload, S>;

export type ManagedOrganizationCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ManagedOrganizationFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ManagedOrganizationCountAggregateInputType | true;
};

export interface ManagedOrganizationDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ManagedOrganization"];
    meta: { name: "ManagedOrganization" };
  };
  /**
   * Find zero or one ManagedOrganization that matches the filter.
   * @param {ManagedOrganizationFindUniqueArgs} args - Arguments to find a ManagedOrganization
   * @example
   * // Get one ManagedOrganization
   * const managedOrganization = await prisma.managedOrganization.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ManagedOrganizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ManagedOrganization that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ManagedOrganizationFindUniqueOrThrowArgs} args - Arguments to find a ManagedOrganization
   * @example
   * // Get one ManagedOrganization
   * const managedOrganization = await prisma.managedOrganization.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ManagedOrganizationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ManagedOrganization that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationFindFirstArgs} args - Arguments to find a ManagedOrganization
   * @example
   * // Get one ManagedOrganization
   * const managedOrganization = await prisma.managedOrganization.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ManagedOrganizationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ManagedOrganizationFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ManagedOrganization that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationFindFirstOrThrowArgs} args - Arguments to find a ManagedOrganization
   * @example
   * // Get one ManagedOrganization
   * const managedOrganization = await prisma.managedOrganization.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ManagedOrganizationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ManagedOrganizationFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ManagedOrganizations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ManagedOrganizations
   * const managedOrganizations = await prisma.managedOrganization.findMany()
   *
   * // Get first 10 ManagedOrganizations
   * const managedOrganizations = await prisma.managedOrganization.findMany({ take: 10 })
   *
   * // Only select the `managedOrganizationId`
   * const managedOrganizationWithManagedOrganizationIdOnly = await prisma.managedOrganization.findMany({ select: { managedOrganizationId: true } })
   *
   */
  findMany<T extends ManagedOrganizationFindManyArgs>(
    args?: Prisma.SelectSubset<T, ManagedOrganizationFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ManagedOrganization.
   * @param {ManagedOrganizationCreateArgs} args - Arguments to create a ManagedOrganization.
   * @example
   * // Create one ManagedOrganization
   * const ManagedOrganization = await prisma.managedOrganization.create({
   *   data: {
   *     // ... data to create a ManagedOrganization
   *   }
   * })
   *
   */
  create<T extends ManagedOrganizationCreateArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ManagedOrganizations.
   * @param {ManagedOrganizationCreateManyArgs} args - Arguments to create many ManagedOrganizations.
   * @example
   * // Create many ManagedOrganizations
   * const managedOrganization = await prisma.managedOrganization.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ManagedOrganizationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ManagedOrganizationCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ManagedOrganizations and returns the data saved in the database.
   * @param {ManagedOrganizationCreateManyAndReturnArgs} args - Arguments to create many ManagedOrganizations.
   * @example
   * // Create many ManagedOrganizations
   * const managedOrganization = await prisma.managedOrganization.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ManagedOrganizations and only return the `managedOrganizationId`
   * const managedOrganizationWithManagedOrganizationIdOnly = await prisma.managedOrganization.createManyAndReturn({
   *   select: { managedOrganizationId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ManagedOrganizationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ManagedOrganizationCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ManagedOrganization.
   * @param {ManagedOrganizationDeleteArgs} args - Arguments to delete one ManagedOrganization.
   * @example
   * // Delete one ManagedOrganization
   * const ManagedOrganization = await prisma.managedOrganization.delete({
   *   where: {
   *     // ... filter to delete one ManagedOrganization
   *   }
   * })
   *
   */
  delete<T extends ManagedOrganizationDeleteArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ManagedOrganization.
   * @param {ManagedOrganizationUpdateArgs} args - Arguments to update one ManagedOrganization.
   * @example
   * // Update one ManagedOrganization
   * const managedOrganization = await prisma.managedOrganization.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ManagedOrganizationUpdateArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ManagedOrganizations.
   * @param {ManagedOrganizationDeleteManyArgs} args - Arguments to filter ManagedOrganizations to delete.
   * @example
   * // Delete a few ManagedOrganizations
   * const { count } = await prisma.managedOrganization.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ManagedOrganizationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ManagedOrganizationDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ManagedOrganizations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ManagedOrganizations
   * const managedOrganization = await prisma.managedOrganization.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ManagedOrganizationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ManagedOrganizations and returns the data updated in the database.
   * @param {ManagedOrganizationUpdateManyAndReturnArgs} args - Arguments to update many ManagedOrganizations.
   * @example
   * // Update many ManagedOrganizations
   * const managedOrganization = await prisma.managedOrganization.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ManagedOrganizations and only return the `managedOrganizationId`
   * const managedOrganizationWithManagedOrganizationIdOnly = await prisma.managedOrganization.updateManyAndReturn({
   *   select: { managedOrganizationId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ManagedOrganizationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ManagedOrganization.
   * @param {ManagedOrganizationUpsertArgs} args - Arguments to update or create a ManagedOrganization.
   * @example
   * // Update or create a ManagedOrganization
   * const managedOrganization = await prisma.managedOrganization.upsert({
   *   create: {
   *     // ... data to create a ManagedOrganization
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ManagedOrganization we want to update
   *   }
   * })
   */
  upsert<T extends ManagedOrganizationUpsertArgs>(
    args: Prisma.SelectSubset<T, ManagedOrganizationUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ManagedOrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$ManagedOrganizationPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ManagedOrganizations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationCountArgs} args - Arguments to filter ManagedOrganizations to count.
   * @example
   * // Count the number of ManagedOrganizations
   * const count = await prisma.managedOrganization.count({
   *   where: {
   *     // ... the filter for the ManagedOrganizations we want to count
   *   }
   * })
   **/
  count<T extends ManagedOrganizationCountArgs>(
    args?: Prisma.Subset<T, ManagedOrganizationCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ManagedOrganizationCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ManagedOrganization.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ManagedOrganizationAggregateArgs>(
    args: Prisma.Subset<T, ManagedOrganizationAggregateArgs>
  ): Prisma.PrismaPromise<GetManagedOrganizationAggregateType<T>>;

  /**
   * Group by ManagedOrganization.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ManagedOrganizationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ManagedOrganizationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ManagedOrganizationGroupByArgs["orderBy"] }
      : { orderBy?: ManagedOrganizationGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ManagedOrganizationGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetManagedOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ManagedOrganization model
   */
  readonly fields: ManagedOrganizationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ManagedOrganization.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ManagedOrganizationClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  managedOrganization<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  managerOrganization<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ManagedOrganization model
 */
export interface ManagedOrganizationFieldRefs {
  readonly managedOrganizationId: Prisma.FieldRef<"ManagedOrganization", "Int">;
  readonly managerOrganizationId: Prisma.FieldRef<"ManagedOrganization", "Int">;
  readonly createdAt: Prisma.FieldRef<"ManagedOrganization", "DateTime">;
}

// Custom InputTypes
/**
 * ManagedOrganization findUnique
 */
export type ManagedOrganizationFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * Filter, which ManagedOrganization to fetch.
   */
  where: Prisma.ManagedOrganizationWhereUniqueInput;
};

/**
 * ManagedOrganization findUniqueOrThrow
 */
export type ManagedOrganizationFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * Filter, which ManagedOrganization to fetch.
   */
  where: Prisma.ManagedOrganizationWhereUniqueInput;
};

/**
 * ManagedOrganization findFirst
 */
export type ManagedOrganizationFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * Filter, which ManagedOrganization to fetch.
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ManagedOrganizations to fetch.
   */
  orderBy?:
    | Prisma.ManagedOrganizationOrderByWithRelationInput
    | Prisma.ManagedOrganizationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ManagedOrganizations.
   */
  cursor?: Prisma.ManagedOrganizationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ManagedOrganizations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ManagedOrganizations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ManagedOrganizations.
   */
  distinct?: Prisma.ManagedOrganizationScalarFieldEnum | Prisma.ManagedOrganizationScalarFieldEnum[];
};

/**
 * ManagedOrganization findFirstOrThrow
 */
export type ManagedOrganizationFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * Filter, which ManagedOrganization to fetch.
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ManagedOrganizations to fetch.
   */
  orderBy?:
    | Prisma.ManagedOrganizationOrderByWithRelationInput
    | Prisma.ManagedOrganizationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ManagedOrganizations.
   */
  cursor?: Prisma.ManagedOrganizationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ManagedOrganizations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ManagedOrganizations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ManagedOrganizations.
   */
  distinct?: Prisma.ManagedOrganizationScalarFieldEnum | Prisma.ManagedOrganizationScalarFieldEnum[];
};

/**
 * ManagedOrganization findMany
 */
export type ManagedOrganizationFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * Filter, which ManagedOrganizations to fetch.
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ManagedOrganizations to fetch.
   */
  orderBy?:
    | Prisma.ManagedOrganizationOrderByWithRelationInput
    | Prisma.ManagedOrganizationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ManagedOrganizations.
   */
  cursor?: Prisma.ManagedOrganizationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ManagedOrganizations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ManagedOrganizations.
   */
  skip?: number;
  distinct?: Prisma.ManagedOrganizationScalarFieldEnum | Prisma.ManagedOrganizationScalarFieldEnum[];
};

/**
 * ManagedOrganization create
 */
export type ManagedOrganizationCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * The data needed to create a ManagedOrganization.
   */
  data: Prisma.XOR<Prisma.ManagedOrganizationCreateInput, Prisma.ManagedOrganizationUncheckedCreateInput>;
};

/**
 * ManagedOrganization createMany
 */
export type ManagedOrganizationCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many ManagedOrganizations.
   */
  data: Prisma.ManagedOrganizationCreateManyInput | Prisma.ManagedOrganizationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ManagedOrganization createManyAndReturn
 */
export type ManagedOrganizationCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * The data used to create many ManagedOrganizations.
   */
  data: Prisma.ManagedOrganizationCreateManyInput | Prisma.ManagedOrganizationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ManagedOrganization update
 */
export type ManagedOrganizationUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * The data needed to update a ManagedOrganization.
   */
  data: Prisma.XOR<Prisma.ManagedOrganizationUpdateInput, Prisma.ManagedOrganizationUncheckedUpdateInput>;
  /**
   * Choose, which ManagedOrganization to update.
   */
  where: Prisma.ManagedOrganizationWhereUniqueInput;
};

/**
 * ManagedOrganization updateMany
 */
export type ManagedOrganizationUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update ManagedOrganizations.
   */
  data: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateManyMutationInput,
    Prisma.ManagedOrganizationUncheckedUpdateManyInput
  >;
  /**
   * Filter which ManagedOrganizations to update
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * Limit how many ManagedOrganizations to update.
   */
  limit?: number;
};

/**
 * ManagedOrganization updateManyAndReturn
 */
export type ManagedOrganizationUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * The data used to update ManagedOrganizations.
   */
  data: Prisma.XOR<
    Prisma.ManagedOrganizationUpdateManyMutationInput,
    Prisma.ManagedOrganizationUncheckedUpdateManyInput
  >;
  /**
   * Filter which ManagedOrganizations to update
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * Limit how many ManagedOrganizations to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ManagedOrganization upsert
 */
export type ManagedOrganizationUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * The filter to search for the ManagedOrganization to update in case it exists.
   */
  where: Prisma.ManagedOrganizationWhereUniqueInput;
  /**
   * In case the ManagedOrganization found by the `where` argument doesn't exist, create a new ManagedOrganization with this data.
   */
  create: Prisma.XOR<Prisma.ManagedOrganizationCreateInput, Prisma.ManagedOrganizationUncheckedCreateInput>;
  /**
   * In case the ManagedOrganization was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ManagedOrganizationUpdateInput, Prisma.ManagedOrganizationUncheckedUpdateInput>;
};

/**
 * ManagedOrganization delete
 */
export type ManagedOrganizationDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
  /**
   * Filter which ManagedOrganization to delete.
   */
  where: Prisma.ManagedOrganizationWhereUniqueInput;
};

/**
 * ManagedOrganization deleteMany
 */
export type ManagedOrganizationDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which ManagedOrganizations to delete
   */
  where?: Prisma.ManagedOrganizationWhereInput;
  /**
   * Limit how many ManagedOrganizations to delete.
   */
  limit?: number;
};

/**
 * ManagedOrganization without action
 */
export type ManagedOrganizationDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ManagedOrganization
   */
  select?: Prisma.ManagedOrganizationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ManagedOrganization
   */
  omit?: Prisma.ManagedOrganizationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ManagedOrganizationInclude<ExtArgs> | null;
};
