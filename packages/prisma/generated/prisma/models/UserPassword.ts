/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `UserPassword` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model UserPassword
 *
 */
export type UserPasswordModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPasswordPayload>;

export type AggregateUserPassword = {
  _count: UserPasswordCountAggregateOutputType | null;
  _avg: UserPasswordAvgAggregateOutputType | null;
  _sum: UserPasswordSumAggregateOutputType | null;
  _min: UserPasswordMinAggregateOutputType | null;
  _max: UserPasswordMaxAggregateOutputType | null;
};

export type UserPasswordAvgAggregateOutputType = {
  userId: number | null;
};

export type UserPasswordSumAggregateOutputType = {
  userId: number | null;
};

export type UserPasswordMinAggregateOutputType = {
  hash: string | null;
  userId: number | null;
};

export type UserPasswordMaxAggregateOutputType = {
  hash: string | null;
  userId: number | null;
};

export type UserPasswordCountAggregateOutputType = {
  hash: number;
  userId: number;
  _all: number;
};

export type UserPasswordAvgAggregateInputType = {
  userId?: true;
};

export type UserPasswordSumAggregateInputType = {
  userId?: true;
};

export type UserPasswordMinAggregateInputType = {
  hash?: true;
  userId?: true;
};

export type UserPasswordMaxAggregateInputType = {
  hash?: true;
  userId?: true;
};

export type UserPasswordCountAggregateInputType = {
  hash?: true;
  userId?: true;
  _all?: true;
};

export type UserPasswordAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which UserPassword to aggregate.
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPasswords to fetch.
   */
  orderBy?: Prisma.UserPasswordOrderByWithRelationInput | Prisma.UserPasswordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserPasswordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPasswords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPasswords.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserPasswords
   **/
  _count?: true | UserPasswordCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: UserPasswordAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: UserPasswordSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserPasswordMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserPasswordMaxAggregateInputType;
};

export type GetUserPasswordAggregateType<T extends UserPasswordAggregateArgs> = {
  [P in keyof T & keyof AggregateUserPassword]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserPassword[P]>
    : Prisma.GetScalarType<T[P], AggregateUserPassword[P]>;
};

export type UserPasswordGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.UserPasswordWhereInput;
  orderBy?: Prisma.UserPasswordOrderByWithAggregationInput | Prisma.UserPasswordOrderByWithAggregationInput[];
  by: Prisma.UserPasswordScalarFieldEnum[] | Prisma.UserPasswordScalarFieldEnum;
  having?: Prisma.UserPasswordScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: UserPasswordCountAggregateInputType | true;
  _avg?: UserPasswordAvgAggregateInputType;
  _sum?: UserPasswordSumAggregateInputType;
  _min?: UserPasswordMinAggregateInputType;
  _max?: UserPasswordMaxAggregateInputType;
};

export type UserPasswordGroupByOutputType = {
  hash: string;
  userId: number;
  _count: UserPasswordCountAggregateOutputType | null;
  _avg: UserPasswordAvgAggregateOutputType | null;
  _sum: UserPasswordSumAggregateOutputType | null;
  _min: UserPasswordMinAggregateOutputType | null;
  _max: UserPasswordMaxAggregateOutputType | null;
};

type GetUserPasswordGroupByPayload<T extends UserPasswordGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserPasswordGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof UserPasswordGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], UserPasswordGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], UserPasswordGroupByOutputType[P]>;
    }
  >
>;

export type UserPasswordWhereInput = {
  AND?: Prisma.UserPasswordWhereInput | Prisma.UserPasswordWhereInput[];
  OR?: Prisma.UserPasswordWhereInput[];
  NOT?: Prisma.UserPasswordWhereInput | Prisma.UserPasswordWhereInput[];
  hash?: Prisma.StringFilter<"UserPassword"> | string;
  userId?: Prisma.IntFilter<"UserPassword"> | number;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type UserPasswordOrderByWithRelationInput = {
  hash?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type UserPasswordWhereUniqueInput = Prisma.AtLeast<
  {
    userId?: number;
    AND?: Prisma.UserPasswordWhereInput | Prisma.UserPasswordWhereInput[];
    OR?: Prisma.UserPasswordWhereInput[];
    NOT?: Prisma.UserPasswordWhereInput | Prisma.UserPasswordWhereInput[];
    hash?: Prisma.StringFilter<"UserPassword"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "userId"
>;

export type UserPasswordOrderByWithAggregationInput = {
  hash?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.UserPasswordCountOrderByAggregateInput;
  _avg?: Prisma.UserPasswordAvgOrderByAggregateInput;
  _max?: Prisma.UserPasswordMaxOrderByAggregateInput;
  _min?: Prisma.UserPasswordMinOrderByAggregateInput;
  _sum?: Prisma.UserPasswordSumOrderByAggregateInput;
};

export type UserPasswordScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserPasswordScalarWhereWithAggregatesInput
    | Prisma.UserPasswordScalarWhereWithAggregatesInput[];
  OR?: Prisma.UserPasswordScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.UserPasswordScalarWhereWithAggregatesInput
    | Prisma.UserPasswordScalarWhereWithAggregatesInput[];
  hash?: Prisma.StringWithAggregatesFilter<"UserPassword"> | string;
  userId?: Prisma.IntWithAggregatesFilter<"UserPassword"> | number;
};

export type UserPasswordCreateInput = {
  hash: string;
  user: Prisma.UserCreateNestedOneWithoutPasswordInput;
};

export type UserPasswordUncheckedCreateInput = {
  hash: string;
  userId: number;
};

export type UserPasswordUpdateInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutPasswordNestedInput;
};

export type UserPasswordUncheckedUpdateInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type UserPasswordCreateManyInput = {
  hash: string;
  userId: number;
};

export type UserPasswordUpdateManyMutationInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserPasswordUncheckedUpdateManyInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type UserPasswordCountOrderByAggregateInput = {
  hash?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type UserPasswordAvgOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
};

export type UserPasswordMaxOrderByAggregateInput = {
  hash?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type UserPasswordMinOrderByAggregateInput = {
  hash?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type UserPasswordSumOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
};

export type UserPasswordNullableScalarRelationFilter = {
  is?: Prisma.UserPasswordWhereInput | null;
  isNot?: Prisma.UserPasswordWhereInput | null;
};

export type UserPasswordCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.UserPasswordCreateWithoutUserInput,
    Prisma.UserPasswordUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.UserPasswordCreateOrConnectWithoutUserInput;
  connect?: Prisma.UserPasswordWhereUniqueInput;
};

export type UserPasswordUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.UserPasswordCreateWithoutUserInput,
    Prisma.UserPasswordUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.UserPasswordCreateOrConnectWithoutUserInput;
  connect?: Prisma.UserPasswordWhereUniqueInput;
};

export type UserPasswordUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.UserPasswordCreateWithoutUserInput,
    Prisma.UserPasswordUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.UserPasswordCreateOrConnectWithoutUserInput;
  upsert?: Prisma.UserPasswordUpsertWithoutUserInput;
  disconnect?: Prisma.UserPasswordWhereInput | boolean;
  delete?: Prisma.UserPasswordWhereInput | boolean;
  connect?: Prisma.UserPasswordWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.UserPasswordUpdateToOneWithWhereWithoutUserInput,
      Prisma.UserPasswordUpdateWithoutUserInput
    >,
    Prisma.UserPasswordUncheckedUpdateWithoutUserInput
  >;
};

export type UserPasswordUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.UserPasswordCreateWithoutUserInput,
    Prisma.UserPasswordUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.UserPasswordCreateOrConnectWithoutUserInput;
  upsert?: Prisma.UserPasswordUpsertWithoutUserInput;
  disconnect?: Prisma.UserPasswordWhereInput | boolean;
  delete?: Prisma.UserPasswordWhereInput | boolean;
  connect?: Prisma.UserPasswordWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.UserPasswordUpdateToOneWithWhereWithoutUserInput,
      Prisma.UserPasswordUpdateWithoutUserInput
    >,
    Prisma.UserPasswordUncheckedUpdateWithoutUserInput
  >;
};

export type UserPasswordCreateWithoutUserInput = {
  hash: string;
};

export type UserPasswordUncheckedCreateWithoutUserInput = {
  hash: string;
};

export type UserPasswordCreateOrConnectWithoutUserInput = {
  where: Prisma.UserPasswordWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.UserPasswordCreateWithoutUserInput,
    Prisma.UserPasswordUncheckedCreateWithoutUserInput
  >;
};

export type UserPasswordUpsertWithoutUserInput = {
  update: Prisma.XOR<
    Prisma.UserPasswordUpdateWithoutUserInput,
    Prisma.UserPasswordUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.UserPasswordCreateWithoutUserInput,
    Prisma.UserPasswordUncheckedCreateWithoutUserInput
  >;
  where?: Prisma.UserPasswordWhereInput;
};

export type UserPasswordUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserPasswordWhereInput;
  data: Prisma.XOR<
    Prisma.UserPasswordUpdateWithoutUserInput,
    Prisma.UserPasswordUncheckedUpdateWithoutUserInput
  >;
};

export type UserPasswordUpdateWithoutUserInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserPasswordUncheckedUpdateWithoutUserInput = {
  hash?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type UserPasswordSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    hash?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userPassword"]
>;

export type UserPasswordSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    hash?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userPassword"]
>;

export type UserPasswordSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    hash?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["userPassword"]
>;

export type UserPasswordSelectScalar = {
  hash?: boolean;
  userId?: boolean;
};

export type UserPasswordOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<"hash" | "userId", ExtArgs["result"]["userPassword"]>;
export type UserPasswordInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type UserPasswordIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type UserPasswordIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $UserPasswordPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "UserPassword";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      hash: string;
      userId: number;
    },
    ExtArgs["result"]["userPassword"]
  >;
  composites: {};
};

export type UserPasswordGetPayload<S extends boolean | null | undefined | UserPasswordDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$UserPasswordPayload, S>;

export type UserPasswordCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<UserPasswordFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: UserPasswordCountAggregateInputType | true;
};

export interface UserPasswordDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["UserPassword"]; meta: { name: "UserPassword" } };
  /**
   * Find zero or one UserPassword that matches the filter.
   * @param {UserPasswordFindUniqueArgs} args - Arguments to find a UserPassword
   * @example
   * // Get one UserPassword
   * const userPassword = await prisma.userPassword.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserPasswordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserPasswordFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPasswordPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one UserPassword that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserPasswordFindUniqueOrThrowArgs} args - Arguments to find a UserPassword
   * @example
   * // Get one UserPassword
   * const userPassword = await prisma.userPassword.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserPasswordFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, UserPasswordFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPasswordPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserPassword that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordFindFirstArgs} args - Arguments to find a UserPassword
   * @example
   * // Get one UserPassword
   * const userPassword = await prisma.userPassword.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserPasswordFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserPasswordFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPasswordPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first UserPassword that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordFindFirstOrThrowArgs} args - Arguments to find a UserPassword
   * @example
   * // Get one UserPassword
   * const userPassword = await prisma.userPassword.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserPasswordFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, UserPasswordFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPasswordPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more UserPasswords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserPasswords
   * const userPasswords = await prisma.userPassword.findMany()
   *
   * // Get first 10 UserPasswords
   * const userPasswords = await prisma.userPassword.findMany({ take: 10 })
   *
   * // Only select the `hash`
   * const userPasswordWithHashOnly = await prisma.userPassword.findMany({ select: { hash: true } })
   *
   */
  findMany<T extends UserPasswordFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserPasswordFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$UserPasswordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a UserPassword.
   * @param {UserPasswordCreateArgs} args - Arguments to create a UserPassword.
   * @example
   * // Create one UserPassword
   * const UserPassword = await prisma.userPassword.create({
   *   data: {
   *     // ... data to create a UserPassword
   *   }
   * })
   *
   */
  create<T extends UserPasswordCreateArgs>(
    args: Prisma.SelectSubset<T, UserPasswordCreateArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<Prisma.$UserPasswordPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many UserPasswords.
   * @param {UserPasswordCreateManyArgs} args - Arguments to create many UserPasswords.
   * @example
   * // Create many UserPasswords
   * const userPassword = await prisma.userPassword.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserPasswordCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserPasswordCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many UserPasswords and returns the data saved in the database.
   * @param {UserPasswordCreateManyAndReturnArgs} args - Arguments to create many UserPasswords.
   * @example
   * // Create many UserPasswords
   * const userPassword = await prisma.userPassword.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserPasswords and only return the `hash`
   * const userPasswordWithHashOnly = await prisma.userPassword.createManyAndReturn({
   *   select: { hash: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserPasswordCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, UserPasswordCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserPasswordPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a UserPassword.
   * @param {UserPasswordDeleteArgs} args - Arguments to delete one UserPassword.
   * @example
   * // Delete one UserPassword
   * const UserPassword = await prisma.userPassword.delete({
   *   where: {
   *     // ... filter to delete one UserPassword
   *   }
   * })
   *
   */
  delete<T extends UserPasswordDeleteArgs>(
    args: Prisma.SelectSubset<T, UserPasswordDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<Prisma.$UserPasswordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one UserPassword.
   * @param {UserPasswordUpdateArgs} args - Arguments to update one UserPassword.
   * @example
   * // Update one UserPassword
   * const userPassword = await prisma.userPassword.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserPasswordUpdateArgs>(
    args: Prisma.SelectSubset<T, UserPasswordUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<Prisma.$UserPasswordPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more UserPasswords.
   * @param {UserPasswordDeleteManyArgs} args - Arguments to filter UserPasswords to delete.
   * @example
   * // Delete a few UserPasswords
   * const { count } = await prisma.userPassword.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserPasswordDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserPasswordDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserPasswords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserPasswords
   * const userPassword = await prisma.userPassword.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserPasswordUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserPasswordUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more UserPasswords and returns the data updated in the database.
   * @param {UserPasswordUpdateManyAndReturnArgs} args - Arguments to update many UserPasswords.
   * @example
   * // Update many UserPasswords
   * const userPassword = await prisma.userPassword.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserPasswords and only return the `hash`
   * const userPasswordWithHashOnly = await prisma.userPassword.updateManyAndReturn({
   *   select: { hash: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserPasswordUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, UserPasswordUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserPasswordPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one UserPassword.
   * @param {UserPasswordUpsertArgs} args - Arguments to update or create a UserPassword.
   * @example
   * // Update or create a UserPassword
   * const userPassword = await prisma.userPassword.upsert({
   *   create: {
   *     // ... data to create a UserPassword
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserPassword we want to update
   *   }
   * })
   */
  upsert<T extends UserPasswordUpsertArgs>(
    args: Prisma.SelectSubset<T, UserPasswordUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__UserPasswordClient<
    runtime.Types.Result.GetResult<Prisma.$UserPasswordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of UserPasswords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordCountArgs} args - Arguments to filter UserPasswords to count.
   * @example
   * // Count the number of UserPasswords
   * const count = await prisma.userPassword.count({
   *   where: {
   *     // ... the filter for the UserPasswords we want to count
   *   }
   * })
   **/
  count<T extends UserPasswordCountArgs>(
    args?: Prisma.Subset<T, UserPasswordCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], UserPasswordCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a UserPassword.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserPasswordAggregateArgs>(
    args: Prisma.Subset<T, UserPasswordAggregateArgs>
  ): Prisma.PrismaPromise<GetUserPasswordAggregateType<T>>;

  /**
   * Group by UserPassword.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPasswordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserPasswordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserPasswordGroupByArgs["orderBy"] }
      : { orderBy?: UserPasswordGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, UserPasswordGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetUserPasswordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the UserPassword model
   */
  readonly fields: UserPasswordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserPassword.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserPasswordClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the UserPassword model
 */
export interface UserPasswordFieldRefs {
  readonly hash: Prisma.FieldRef<"UserPassword", "String">;
  readonly userId: Prisma.FieldRef<"UserPassword", "Int">;
}

// Custom InputTypes
/**
 * UserPassword findUnique
 */
export type UserPasswordFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * Filter, which UserPassword to fetch.
   */
  where: Prisma.UserPasswordWhereUniqueInput;
};

/**
 * UserPassword findUniqueOrThrow
 */
export type UserPasswordFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * Filter, which UserPassword to fetch.
   */
  where: Prisma.UserPasswordWhereUniqueInput;
};

/**
 * UserPassword findFirst
 */
export type UserPasswordFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * Filter, which UserPassword to fetch.
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPasswords to fetch.
   */
  orderBy?: Prisma.UserPasswordOrderByWithRelationInput | Prisma.UserPasswordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserPasswords.
   */
  cursor?: Prisma.UserPasswordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPasswords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPasswords.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserPasswords.
   */
  distinct?: Prisma.UserPasswordScalarFieldEnum | Prisma.UserPasswordScalarFieldEnum[];
};

/**
 * UserPassword findFirstOrThrow
 */
export type UserPasswordFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * Filter, which UserPassword to fetch.
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPasswords to fetch.
   */
  orderBy?: Prisma.UserPasswordOrderByWithRelationInput | Prisma.UserPasswordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserPasswords.
   */
  cursor?: Prisma.UserPasswordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPasswords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPasswords.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserPasswords.
   */
  distinct?: Prisma.UserPasswordScalarFieldEnum | Prisma.UserPasswordScalarFieldEnum[];
};

/**
 * UserPassword findMany
 */
export type UserPasswordFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * Filter, which UserPasswords to fetch.
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserPasswords to fetch.
   */
  orderBy?: Prisma.UserPasswordOrderByWithRelationInput | Prisma.UserPasswordOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserPasswords.
   */
  cursor?: Prisma.UserPasswordWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserPasswords from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserPasswords.
   */
  skip?: number;
  distinct?: Prisma.UserPasswordScalarFieldEnum | Prisma.UserPasswordScalarFieldEnum[];
};

/**
 * UserPassword create
 */
export type UserPasswordCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * The data needed to create a UserPassword.
   */
  data: Prisma.XOR<Prisma.UserPasswordCreateInput, Prisma.UserPasswordUncheckedCreateInput>;
};

/**
 * UserPassword createMany
 */
export type UserPasswordCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many UserPasswords.
   */
  data: Prisma.UserPasswordCreateManyInput | Prisma.UserPasswordCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * UserPassword createManyAndReturn
 */
export type UserPasswordCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * The data used to create many UserPasswords.
   */
  data: Prisma.UserPasswordCreateManyInput | Prisma.UserPasswordCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * UserPassword update
 */
export type UserPasswordUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * The data needed to update a UserPassword.
   */
  data: Prisma.XOR<Prisma.UserPasswordUpdateInput, Prisma.UserPasswordUncheckedUpdateInput>;
  /**
   * Choose, which UserPassword to update.
   */
  where: Prisma.UserPasswordWhereUniqueInput;
};

/**
 * UserPassword updateMany
 */
export type UserPasswordUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update UserPasswords.
   */
  data: Prisma.XOR<Prisma.UserPasswordUpdateManyMutationInput, Prisma.UserPasswordUncheckedUpdateManyInput>;
  /**
   * Filter which UserPasswords to update
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * Limit how many UserPasswords to update.
   */
  limit?: number;
};

/**
 * UserPassword updateManyAndReturn
 */
export type UserPasswordUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * The data used to update UserPasswords.
   */
  data: Prisma.XOR<Prisma.UserPasswordUpdateManyMutationInput, Prisma.UserPasswordUncheckedUpdateManyInput>;
  /**
   * Filter which UserPasswords to update
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * Limit how many UserPasswords to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * UserPassword upsert
 */
export type UserPasswordUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * The filter to search for the UserPassword to update in case it exists.
   */
  where: Prisma.UserPasswordWhereUniqueInput;
  /**
   * In case the UserPassword found by the `where` argument doesn't exist, create a new UserPassword with this data.
   */
  create: Prisma.XOR<Prisma.UserPasswordCreateInput, Prisma.UserPasswordUncheckedCreateInput>;
  /**
   * In case the UserPassword was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserPasswordUpdateInput, Prisma.UserPasswordUncheckedUpdateInput>;
};

/**
 * UserPassword delete
 */
export type UserPasswordDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
  /**
   * Filter which UserPassword to delete.
   */
  where: Prisma.UserPasswordWhereUniqueInput;
};

/**
 * UserPassword deleteMany
 */
export type UserPasswordDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which UserPasswords to delete
   */
  where?: Prisma.UserPasswordWhereInput;
  /**
   * Limit how many UserPasswords to delete.
   */
  limit?: number;
};

/**
 * UserPassword without action
 */
export type UserPasswordDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the UserPassword
   */
  select?: Prisma.UserPasswordSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the UserPassword
   */
  omit?: Prisma.UserPasswordOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserPasswordInclude<ExtArgs> | null;
};
