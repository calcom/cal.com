/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `CreditBalance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CreditBalance
 *
 */
export type CreditBalanceModel = runtime.Types.Result.DefaultSelection<Prisma.$CreditBalancePayload>;

export type AggregateCreditBalance = {
  _count: CreditBalanceCountAggregateOutputType | null;
  _avg: CreditBalanceAvgAggregateOutputType | null;
  _sum: CreditBalanceSumAggregateOutputType | null;
  _min: CreditBalanceMinAggregateOutputType | null;
  _max: CreditBalanceMaxAggregateOutputType | null;
};

export type CreditBalanceAvgAggregateOutputType = {
  teamId: number | null;
  userId: number | null;
  additionalCredits: number | null;
};

export type CreditBalanceSumAggregateOutputType = {
  teamId: number | null;
  userId: number | null;
  additionalCredits: number | null;
};

export type CreditBalanceMinAggregateOutputType = {
  id: string | null;
  teamId: number | null;
  userId: number | null;
  additionalCredits: number | null;
  limitReachedAt: Date | null;
  warningSentAt: Date | null;
};

export type CreditBalanceMaxAggregateOutputType = {
  id: string | null;
  teamId: number | null;
  userId: number | null;
  additionalCredits: number | null;
  limitReachedAt: Date | null;
  warningSentAt: Date | null;
};

export type CreditBalanceCountAggregateOutputType = {
  id: number;
  teamId: number;
  userId: number;
  additionalCredits: number;
  limitReachedAt: number;
  warningSentAt: number;
  _all: number;
};

export type CreditBalanceAvgAggregateInputType = {
  teamId?: true;
  userId?: true;
  additionalCredits?: true;
};

export type CreditBalanceSumAggregateInputType = {
  teamId?: true;
  userId?: true;
  additionalCredits?: true;
};

export type CreditBalanceMinAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  additionalCredits?: true;
  limitReachedAt?: true;
  warningSentAt?: true;
};

export type CreditBalanceMaxAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  additionalCredits?: true;
  limitReachedAt?: true;
  warningSentAt?: true;
};

export type CreditBalanceCountAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  additionalCredits?: true;
  limitReachedAt?: true;
  warningSentAt?: true;
  _all?: true;
};

export type CreditBalanceAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CreditBalance to aggregate.
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditBalances to fetch.
   */
  orderBy?: Prisma.CreditBalanceOrderByWithRelationInput | Prisma.CreditBalanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CreditBalanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditBalances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditBalances.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CreditBalances
   **/
  _count?: true | CreditBalanceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CreditBalanceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CreditBalanceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CreditBalanceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CreditBalanceMaxAggregateInputType;
};

export type GetCreditBalanceAggregateType<T extends CreditBalanceAggregateArgs> = {
  [P in keyof T & keyof AggregateCreditBalance]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCreditBalance[P]>
    : Prisma.GetScalarType<T[P], AggregateCreditBalance[P]>;
};

export type CreditBalanceGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CreditBalanceWhereInput;
  orderBy?:
    | Prisma.CreditBalanceOrderByWithAggregationInput
    | Prisma.CreditBalanceOrderByWithAggregationInput[];
  by: Prisma.CreditBalanceScalarFieldEnum[] | Prisma.CreditBalanceScalarFieldEnum;
  having?: Prisma.CreditBalanceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CreditBalanceCountAggregateInputType | true;
  _avg?: CreditBalanceAvgAggregateInputType;
  _sum?: CreditBalanceSumAggregateInputType;
  _min?: CreditBalanceMinAggregateInputType;
  _max?: CreditBalanceMaxAggregateInputType;
};

export type CreditBalanceGroupByOutputType = {
  id: string;
  teamId: number | null;
  userId: number | null;
  additionalCredits: number;
  limitReachedAt: Date | null;
  warningSentAt: Date | null;
  _count: CreditBalanceCountAggregateOutputType | null;
  _avg: CreditBalanceAvgAggregateOutputType | null;
  _sum: CreditBalanceSumAggregateOutputType | null;
  _min: CreditBalanceMinAggregateOutputType | null;
  _max: CreditBalanceMaxAggregateOutputType | null;
};

type GetCreditBalanceGroupByPayload<T extends CreditBalanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CreditBalanceGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof CreditBalanceGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], CreditBalanceGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], CreditBalanceGroupByOutputType[P]>;
    }
  >
>;

export type CreditBalanceWhereInput = {
  AND?: Prisma.CreditBalanceWhereInput | Prisma.CreditBalanceWhereInput[];
  OR?: Prisma.CreditBalanceWhereInput[];
  NOT?: Prisma.CreditBalanceWhereInput | Prisma.CreditBalanceWhereInput[];
  id?: Prisma.StringFilter<"CreditBalance"> | string;
  teamId?: Prisma.IntNullableFilter<"CreditBalance"> | number | null;
  userId?: Prisma.IntNullableFilter<"CreditBalance"> | number | null;
  additionalCredits?: Prisma.IntFilter<"CreditBalance"> | number;
  limitReachedAt?: Prisma.DateTimeNullableFilter<"CreditBalance"> | Date | string | null;
  warningSentAt?: Prisma.DateTimeNullableFilter<"CreditBalance"> | Date | string | null;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  expenseLogs?: Prisma.CreditExpenseLogListRelationFilter;
  purchaseLogs?: Prisma.CreditPurchaseLogListRelationFilter;
};

export type CreditBalanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
  limitReachedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  warningSentAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  team?: Prisma.TeamOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
  expenseLogs?: Prisma.CreditExpenseLogOrderByRelationAggregateInput;
  purchaseLogs?: Prisma.CreditPurchaseLogOrderByRelationAggregateInput;
};

export type CreditBalanceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    teamId?: number;
    userId?: number;
    AND?: Prisma.CreditBalanceWhereInput | Prisma.CreditBalanceWhereInput[];
    OR?: Prisma.CreditBalanceWhereInput[];
    NOT?: Prisma.CreditBalanceWhereInput | Prisma.CreditBalanceWhereInput[];
    additionalCredits?: Prisma.IntFilter<"CreditBalance"> | number;
    limitReachedAt?: Prisma.DateTimeNullableFilter<"CreditBalance"> | Date | string | null;
    warningSentAt?: Prisma.DateTimeNullableFilter<"CreditBalance"> | Date | string | null;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    expenseLogs?: Prisma.CreditExpenseLogListRelationFilter;
    purchaseLogs?: Prisma.CreditPurchaseLogListRelationFilter;
  },
  "id" | "teamId" | "userId"
>;

export type CreditBalanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
  limitReachedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  warningSentAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CreditBalanceCountOrderByAggregateInput;
  _avg?: Prisma.CreditBalanceAvgOrderByAggregateInput;
  _max?: Prisma.CreditBalanceMaxOrderByAggregateInput;
  _min?: Prisma.CreditBalanceMinOrderByAggregateInput;
  _sum?: Prisma.CreditBalanceSumOrderByAggregateInput;
};

export type CreditBalanceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CreditBalanceScalarWhereWithAggregatesInput
    | Prisma.CreditBalanceScalarWhereWithAggregatesInput[];
  OR?: Prisma.CreditBalanceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CreditBalanceScalarWhereWithAggregatesInput
    | Prisma.CreditBalanceScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"CreditBalance"> | string;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"CreditBalance"> | number | null;
  userId?: Prisma.IntNullableWithAggregatesFilter<"CreditBalance"> | number | null;
  additionalCredits?: Prisma.IntWithAggregatesFilter<"CreditBalance"> | number;
  limitReachedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"CreditBalance"> | Date | string | null;
  warningSentAt?: Prisma.DateTimeNullableWithAggregatesFilter<"CreditBalance"> | Date | string | null;
};

export type CreditBalanceCreateInput = {
  id?: string;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  team?: Prisma.TeamCreateNestedOneWithoutCreditBalanceInput;
  user?: Prisma.UserCreateNestedOneWithoutCreditBalanceInput;
  expenseLogs?: Prisma.CreditExpenseLogCreateNestedManyWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceUncheckedCreateInput = {
  id?: string;
  teamId?: number | null;
  userId?: number | null;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  team?: Prisma.TeamUpdateOneWithoutCreditBalanceNestedInput;
  user?: Prisma.UserUpdateOneWithoutCreditBalanceNestedInput;
  expenseLogs?: Prisma.CreditExpenseLogUpdateManyWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceCreateManyInput = {
  id?: string;
  teamId?: number | null;
  userId?: number | null;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
};

export type CreditBalanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CreditBalanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type CreditBalanceNullableScalarRelationFilter = {
  is?: Prisma.CreditBalanceWhereInput | null;
  isNot?: Prisma.CreditBalanceWhereInput | null;
};

export type CreditBalanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
  limitReachedAt?: Prisma.SortOrder;
  warningSentAt?: Prisma.SortOrder;
};

export type CreditBalanceAvgOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
};

export type CreditBalanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
  limitReachedAt?: Prisma.SortOrder;
  warningSentAt?: Prisma.SortOrder;
};

export type CreditBalanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
  limitReachedAt?: Prisma.SortOrder;
  warningSentAt?: Prisma.SortOrder;
};

export type CreditBalanceSumOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  additionalCredits?: Prisma.SortOrder;
};

export type CreditBalanceScalarRelationFilter = {
  is?: Prisma.CreditBalanceWhereInput;
  isNot?: Prisma.CreditBalanceWhereInput;
};

export type CreditBalanceCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutUserInput,
    Prisma.CreditBalanceUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutUserInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
};

export type CreditBalanceUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutUserInput,
    Prisma.CreditBalanceUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutUserInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
};

export type CreditBalanceUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutUserInput,
    Prisma.CreditBalanceUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutUserInput;
  upsert?: Prisma.CreditBalanceUpsertWithoutUserInput;
  disconnect?: Prisma.CreditBalanceWhereInput | boolean;
  delete?: Prisma.CreditBalanceWhereInput | boolean;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CreditBalanceUpdateToOneWithWhereWithoutUserInput,
      Prisma.CreditBalanceUpdateWithoutUserInput
    >,
    Prisma.CreditBalanceUncheckedUpdateWithoutUserInput
  >;
};

export type CreditBalanceUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutUserInput,
    Prisma.CreditBalanceUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutUserInput;
  upsert?: Prisma.CreditBalanceUpsertWithoutUserInput;
  disconnect?: Prisma.CreditBalanceWhereInput | boolean;
  delete?: Prisma.CreditBalanceWhereInput | boolean;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CreditBalanceUpdateToOneWithWhereWithoutUserInput,
      Prisma.CreditBalanceUpdateWithoutUserInput
    >,
    Prisma.CreditBalanceUncheckedUpdateWithoutUserInput
  >;
};

export type CreditBalanceCreateNestedOneWithoutTeamInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutTeamInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
};

export type CreditBalanceUncheckedCreateNestedOneWithoutTeamInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutTeamInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
};

export type CreditBalanceUpdateOneWithoutTeamNestedInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutTeamInput;
  upsert?: Prisma.CreditBalanceUpsertWithoutTeamInput;
  disconnect?: Prisma.CreditBalanceWhereInput | boolean;
  delete?: Prisma.CreditBalanceWhereInput | boolean;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CreditBalanceUpdateToOneWithWhereWithoutTeamInput,
      Prisma.CreditBalanceUpdateWithoutTeamInput
    >,
    Prisma.CreditBalanceUncheckedUpdateWithoutTeamInput
  >;
};

export type CreditBalanceUncheckedUpdateOneWithoutTeamNestedInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutTeamInput;
  upsert?: Prisma.CreditBalanceUpsertWithoutTeamInput;
  disconnect?: Prisma.CreditBalanceWhereInput | boolean;
  delete?: Prisma.CreditBalanceWhereInput | boolean;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CreditBalanceUpdateToOneWithWhereWithoutTeamInput,
      Prisma.CreditBalanceUpdateWithoutTeamInput
    >,
    Prisma.CreditBalanceUncheckedUpdateWithoutTeamInput
  >;
};

export type CreditBalanceCreateNestedOneWithoutPurchaseLogsInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutPurchaseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutPurchaseLogsInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutPurchaseLogsInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
};

export type CreditBalanceUpdateOneRequiredWithoutPurchaseLogsNestedInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutPurchaseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutPurchaseLogsInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutPurchaseLogsInput;
  upsert?: Prisma.CreditBalanceUpsertWithoutPurchaseLogsInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CreditBalanceUpdateToOneWithWhereWithoutPurchaseLogsInput,
      Prisma.CreditBalanceUpdateWithoutPurchaseLogsInput
    >,
    Prisma.CreditBalanceUncheckedUpdateWithoutPurchaseLogsInput
  >;
};

export type CreditBalanceCreateNestedOneWithoutExpenseLogsInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutExpenseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutExpenseLogsInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutExpenseLogsInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
};

export type CreditBalanceUpdateOneRequiredWithoutExpenseLogsNestedInput = {
  create?: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutExpenseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutExpenseLogsInput
  >;
  connectOrCreate?: Prisma.CreditBalanceCreateOrConnectWithoutExpenseLogsInput;
  upsert?: Prisma.CreditBalanceUpsertWithoutExpenseLogsInput;
  connect?: Prisma.CreditBalanceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CreditBalanceUpdateToOneWithWhereWithoutExpenseLogsInput,
      Prisma.CreditBalanceUpdateWithoutExpenseLogsInput
    >,
    Prisma.CreditBalanceUncheckedUpdateWithoutExpenseLogsInput
  >;
};

export type CreditBalanceCreateWithoutUserInput = {
  id?: string;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  team?: Prisma.TeamCreateNestedOneWithoutCreditBalanceInput;
  expenseLogs?: Prisma.CreditExpenseLogCreateNestedManyWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceUncheckedCreateWithoutUserInput = {
  id?: string;
  teamId?: number | null;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceCreateOrConnectWithoutUserInput = {
  where: Prisma.CreditBalanceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutUserInput,
    Prisma.CreditBalanceUncheckedCreateWithoutUserInput
  >;
};

export type CreditBalanceUpsertWithoutUserInput = {
  update: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutUserInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutUserInput,
    Prisma.CreditBalanceUncheckedCreateWithoutUserInput
  >;
  where?: Prisma.CreditBalanceWhereInput;
};

export type CreditBalanceUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.CreditBalanceWhereInput;
  data: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutUserInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutUserInput
  >;
};

export type CreditBalanceUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  team?: Prisma.TeamUpdateOneWithoutCreditBalanceNestedInput;
  expenseLogs?: Prisma.CreditExpenseLogUpdateManyWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceCreateWithoutTeamInput = {
  id?: string;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  user?: Prisma.UserCreateNestedOneWithoutCreditBalanceInput;
  expenseLogs?: Prisma.CreditExpenseLogCreateNestedManyWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceUncheckedCreateWithoutTeamInput = {
  id?: string;
  userId?: number | null;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceCreateOrConnectWithoutTeamInput = {
  where: Prisma.CreditBalanceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedCreateWithoutTeamInput
  >;
};

export type CreditBalanceUpsertWithoutTeamInput = {
  update: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedCreateWithoutTeamInput
  >;
  where?: Prisma.CreditBalanceWhereInput;
};

export type CreditBalanceUpdateToOneWithWhereWithoutTeamInput = {
  where?: Prisma.CreditBalanceWhereInput;
  data: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutTeamInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutTeamInput
  >;
};

export type CreditBalanceUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  user?: Prisma.UserUpdateOneWithoutCreditBalanceNestedInput;
  expenseLogs?: Prisma.CreditExpenseLogUpdateManyWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceCreateWithoutPurchaseLogsInput = {
  id?: string;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  team?: Prisma.TeamCreateNestedOneWithoutCreditBalanceInput;
  user?: Prisma.UserCreateNestedOneWithoutCreditBalanceInput;
  expenseLogs?: Prisma.CreditExpenseLogCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceUncheckedCreateWithoutPurchaseLogsInput = {
  id?: string;
  teamId?: number | null;
  userId?: number | null;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceCreateOrConnectWithoutPurchaseLogsInput = {
  where: Prisma.CreditBalanceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutPurchaseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutPurchaseLogsInput
  >;
};

export type CreditBalanceUpsertWithoutPurchaseLogsInput = {
  update: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutPurchaseLogsInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutPurchaseLogsInput
  >;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutPurchaseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutPurchaseLogsInput
  >;
  where?: Prisma.CreditBalanceWhereInput;
};

export type CreditBalanceUpdateToOneWithWhereWithoutPurchaseLogsInput = {
  where?: Prisma.CreditBalanceWhereInput;
  data: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutPurchaseLogsInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutPurchaseLogsInput
  >;
};

export type CreditBalanceUpdateWithoutPurchaseLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  team?: Prisma.TeamUpdateOneWithoutCreditBalanceNestedInput;
  user?: Prisma.UserUpdateOneWithoutCreditBalanceNestedInput;
  expenseLogs?: Prisma.CreditExpenseLogUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceUncheckedUpdateWithoutPurchaseLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  expenseLogs?: Prisma.CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceCreateWithoutExpenseLogsInput = {
  id?: string;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  team?: Prisma.TeamCreateNestedOneWithoutCreditBalanceInput;
  user?: Prisma.UserCreateNestedOneWithoutCreditBalanceInput;
  purchaseLogs?: Prisma.CreditPurchaseLogCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceUncheckedCreateWithoutExpenseLogsInput = {
  id?: string;
  teamId?: number | null;
  userId?: number | null;
  additionalCredits?: number;
  limitReachedAt?: Date | string | null;
  warningSentAt?: Date | string | null;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedCreateNestedManyWithoutCreditBalanceInput;
};

export type CreditBalanceCreateOrConnectWithoutExpenseLogsInput = {
  where: Prisma.CreditBalanceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutExpenseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutExpenseLogsInput
  >;
};

export type CreditBalanceUpsertWithoutExpenseLogsInput = {
  update: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutExpenseLogsInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutExpenseLogsInput
  >;
  create: Prisma.XOR<
    Prisma.CreditBalanceCreateWithoutExpenseLogsInput,
    Prisma.CreditBalanceUncheckedCreateWithoutExpenseLogsInput
  >;
  where?: Prisma.CreditBalanceWhereInput;
};

export type CreditBalanceUpdateToOneWithWhereWithoutExpenseLogsInput = {
  where?: Prisma.CreditBalanceWhereInput;
  data: Prisma.XOR<
    Prisma.CreditBalanceUpdateWithoutExpenseLogsInput,
    Prisma.CreditBalanceUncheckedUpdateWithoutExpenseLogsInput
  >;
};

export type CreditBalanceUpdateWithoutExpenseLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  team?: Prisma.TeamUpdateOneWithoutCreditBalanceNestedInput;
  user?: Prisma.UserUpdateOneWithoutCreditBalanceNestedInput;
  purchaseLogs?: Prisma.CreditPurchaseLogUpdateManyWithoutCreditBalanceNestedInput;
};

export type CreditBalanceUncheckedUpdateWithoutExpenseLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  additionalCredits?: Prisma.IntFieldUpdateOperationsInput | number;
  limitReachedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  warningSentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  purchaseLogs?: Prisma.CreditPurchaseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput;
};

/**
 * Count Type CreditBalanceCountOutputType
 */

export type CreditBalanceCountOutputType = {
  expenseLogs: number;
  purchaseLogs: number;
};

export type CreditBalanceCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  expenseLogs?: boolean | CreditBalanceCountOutputTypeCountExpenseLogsArgs;
  purchaseLogs?: boolean | CreditBalanceCountOutputTypeCountPurchaseLogsArgs;
};

/**
 * CreditBalanceCountOutputType without action
 */
export type CreditBalanceCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalanceCountOutputType
   */
  select?: Prisma.CreditBalanceCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * CreditBalanceCountOutputType without action
 */
export type CreditBalanceCountOutputTypeCountExpenseLogsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CreditExpenseLogWhereInput;
};

/**
 * CreditBalanceCountOutputType without action
 */
export type CreditBalanceCountOutputTypeCountPurchaseLogsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CreditPurchaseLogWhereInput;
};

export type CreditBalanceSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    additionalCredits?: boolean;
    limitReachedAt?: boolean;
    warningSentAt?: boolean;
    team?: boolean | Prisma.CreditBalance$teamArgs<ExtArgs>;
    user?: boolean | Prisma.CreditBalance$userArgs<ExtArgs>;
    expenseLogs?: boolean | Prisma.CreditBalance$expenseLogsArgs<ExtArgs>;
    purchaseLogs?: boolean | Prisma.CreditBalance$purchaseLogsArgs<ExtArgs>;
    _count?: boolean | Prisma.CreditBalanceCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["creditBalance"]
>;

export type CreditBalanceSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    additionalCredits?: boolean;
    limitReachedAt?: boolean;
    warningSentAt?: boolean;
    team?: boolean | Prisma.CreditBalance$teamArgs<ExtArgs>;
    user?: boolean | Prisma.CreditBalance$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["creditBalance"]
>;

export type CreditBalanceSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    additionalCredits?: boolean;
    limitReachedAt?: boolean;
    warningSentAt?: boolean;
    team?: boolean | Prisma.CreditBalance$teamArgs<ExtArgs>;
    user?: boolean | Prisma.CreditBalance$userArgs<ExtArgs>;
  },
  ExtArgs["result"]["creditBalance"]
>;

export type CreditBalanceSelectScalar = {
  id?: boolean;
  teamId?: boolean;
  userId?: boolean;
  additionalCredits?: boolean;
  limitReachedAt?: boolean;
  warningSentAt?: boolean;
};

export type CreditBalanceOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "teamId" | "userId" | "additionalCredits" | "limitReachedAt" | "warningSentAt",
  ExtArgs["result"]["creditBalance"]
>;
export type CreditBalanceInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.CreditBalance$teamArgs<ExtArgs>;
  user?: boolean | Prisma.CreditBalance$userArgs<ExtArgs>;
  expenseLogs?: boolean | Prisma.CreditBalance$expenseLogsArgs<ExtArgs>;
  purchaseLogs?: boolean | Prisma.CreditBalance$purchaseLogsArgs<ExtArgs>;
  _count?: boolean | Prisma.CreditBalanceCountOutputTypeDefaultArgs<ExtArgs>;
};
export type CreditBalanceIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.CreditBalance$teamArgs<ExtArgs>;
  user?: boolean | Prisma.CreditBalance$userArgs<ExtArgs>;
};
export type CreditBalanceIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.CreditBalance$teamArgs<ExtArgs>;
  user?: boolean | Prisma.CreditBalance$userArgs<ExtArgs>;
};

export type $CreditBalancePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "CreditBalance";
  objects: {
    team: Prisma.$TeamPayload<ExtArgs> | null;
    user: Prisma.$UserPayload<ExtArgs> | null;
    expenseLogs: Prisma.$CreditExpenseLogPayload<ExtArgs>[];
    purchaseLogs: Prisma.$CreditPurchaseLogPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      teamId: number | null;
      userId: number | null;
      additionalCredits: number;
      limitReachedAt: Date | null;
      warningSentAt: Date | null;
    },
    ExtArgs["result"]["creditBalance"]
  >;
  composites: {};
};

export type CreditBalanceGetPayload<S extends boolean | null | undefined | CreditBalanceDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$CreditBalancePayload, S>;

export type CreditBalanceCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<CreditBalanceFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: CreditBalanceCountAggregateInputType | true;
};

export interface CreditBalanceDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["CreditBalance"]; meta: { name: "CreditBalance" } };
  /**
   * Find zero or one CreditBalance that matches the filter.
   * @param {CreditBalanceFindUniqueArgs} args - Arguments to find a CreditBalance
   * @example
   * // Get one CreditBalance
   * const creditBalance = await prisma.creditBalance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CreditBalanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditBalancePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CreditBalance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CreditBalanceFindUniqueOrThrowArgs} args - Arguments to find a CreditBalance
   * @example
   * // Get one CreditBalance
   * const creditBalance = await prisma.creditBalance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CreditBalanceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditBalancePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CreditBalance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceFindFirstArgs} args - Arguments to find a CreditBalance
   * @example
   * // Get one CreditBalance
   * const creditBalance = await prisma.creditBalance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CreditBalanceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CreditBalanceFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditBalancePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CreditBalance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceFindFirstOrThrowArgs} args - Arguments to find a CreditBalance
   * @example
   * // Get one CreditBalance
   * const creditBalance = await prisma.creditBalance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CreditBalanceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CreditBalanceFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditBalancePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CreditBalances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CreditBalances
   * const creditBalances = await prisma.creditBalance.findMany()
   *
   * // Get first 10 CreditBalances
   * const creditBalances = await prisma.creditBalance.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const creditBalanceWithIdOnly = await prisma.creditBalance.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CreditBalanceFindManyArgs>(
    args?: Prisma.SelectSubset<T, CreditBalanceFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$CreditBalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a CreditBalance.
   * @param {CreditBalanceCreateArgs} args - Arguments to create a CreditBalance.
   * @example
   * // Create one CreditBalance
   * const CreditBalance = await prisma.creditBalance.create({
   *   data: {
   *     // ... data to create a CreditBalance
   *   }
   * })
   *
   */
  create<T extends CreditBalanceCreateArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceCreateArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<Prisma.$CreditBalancePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CreditBalances.
   * @param {CreditBalanceCreateManyArgs} args - Arguments to create many CreditBalances.
   * @example
   * // Create many CreditBalances
   * const creditBalance = await prisma.creditBalance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CreditBalanceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CreditBalanceCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CreditBalances and returns the data saved in the database.
   * @param {CreditBalanceCreateManyAndReturnArgs} args - Arguments to create many CreditBalances.
   * @example
   * // Create many CreditBalances
   * const creditBalance = await prisma.creditBalance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CreditBalances and only return the `id`
   * const creditBalanceWithIdOnly = await prisma.creditBalance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CreditBalanceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CreditBalanceCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CreditBalancePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CreditBalance.
   * @param {CreditBalanceDeleteArgs} args - Arguments to delete one CreditBalance.
   * @example
   * // Delete one CreditBalance
   * const CreditBalance = await prisma.creditBalance.delete({
   *   where: {
   *     // ... filter to delete one CreditBalance
   *   }
   * })
   *
   */
  delete<T extends CreditBalanceDeleteArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<Prisma.$CreditBalancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CreditBalance.
   * @param {CreditBalanceUpdateArgs} args - Arguments to update one CreditBalance.
   * @example
   * // Update one CreditBalance
   * const creditBalance = await prisma.creditBalance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CreditBalanceUpdateArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<Prisma.$CreditBalancePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CreditBalances.
   * @param {CreditBalanceDeleteManyArgs} args - Arguments to filter CreditBalances to delete.
   * @example
   * // Delete a few CreditBalances
   * const { count } = await prisma.creditBalance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CreditBalanceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CreditBalanceDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CreditBalances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CreditBalances
   * const creditBalance = await prisma.creditBalance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CreditBalanceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CreditBalances and returns the data updated in the database.
   * @param {CreditBalanceUpdateManyAndReturnArgs} args - Arguments to update many CreditBalances.
   * @example
   * // Update many CreditBalances
   * const creditBalance = await prisma.creditBalance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CreditBalances and only return the `id`
   * const creditBalanceWithIdOnly = await prisma.creditBalance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CreditBalanceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CreditBalancePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CreditBalance.
   * @param {CreditBalanceUpsertArgs} args - Arguments to update or create a CreditBalance.
   * @example
   * // Update or create a CreditBalance
   * const creditBalance = await prisma.creditBalance.upsert({
   *   create: {
   *     // ... data to create a CreditBalance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CreditBalance we want to update
   *   }
   * })
   */
  upsert<T extends CreditBalanceUpsertArgs>(
    args: Prisma.SelectSubset<T, CreditBalanceUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    runtime.Types.Result.GetResult<Prisma.$CreditBalancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CreditBalances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceCountArgs} args - Arguments to filter CreditBalances to count.
   * @example
   * // Count the number of CreditBalances
   * const count = await prisma.creditBalance.count({
   *   where: {
   *     // ... the filter for the CreditBalances we want to count
   *   }
   * })
   **/
  count<T extends CreditBalanceCountArgs>(
    args?: Prisma.Subset<T, CreditBalanceCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], CreditBalanceCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CreditBalance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CreditBalanceAggregateArgs>(
    args: Prisma.Subset<T, CreditBalanceAggregateArgs>
  ): Prisma.PrismaPromise<GetCreditBalanceAggregateType<T>>;

  /**
   * Group by CreditBalance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditBalanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CreditBalanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CreditBalanceGroupByArgs["orderBy"] }
      : { orderBy?: CreditBalanceGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, CreditBalanceGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetCreditBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CreditBalance model
   */
  readonly fields: CreditBalanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CreditBalance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CreditBalanceClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  team<T extends Prisma.CreditBalance$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CreditBalance$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.CreditBalance$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CreditBalance$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  expenseLogs<T extends Prisma.CreditBalance$expenseLogsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CreditBalance$expenseLogsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CreditExpenseLogPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  purchaseLogs<T extends Prisma.CreditBalance$purchaseLogsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CreditBalance$purchaseLogsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CreditPurchaseLogPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CreditBalance model
 */
export interface CreditBalanceFieldRefs {
  readonly id: Prisma.FieldRef<"CreditBalance", "String">;
  readonly teamId: Prisma.FieldRef<"CreditBalance", "Int">;
  readonly userId: Prisma.FieldRef<"CreditBalance", "Int">;
  readonly additionalCredits: Prisma.FieldRef<"CreditBalance", "Int">;
  readonly limitReachedAt: Prisma.FieldRef<"CreditBalance", "DateTime">;
  readonly warningSentAt: Prisma.FieldRef<"CreditBalance", "DateTime">;
}

// Custom InputTypes
/**
 * CreditBalance findUnique
 */
export type CreditBalanceFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * Filter, which CreditBalance to fetch.
   */
  where: Prisma.CreditBalanceWhereUniqueInput;
};

/**
 * CreditBalance findUniqueOrThrow
 */
export type CreditBalanceFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * Filter, which CreditBalance to fetch.
   */
  where: Prisma.CreditBalanceWhereUniqueInput;
};

/**
 * CreditBalance findFirst
 */
export type CreditBalanceFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * Filter, which CreditBalance to fetch.
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditBalances to fetch.
   */
  orderBy?: Prisma.CreditBalanceOrderByWithRelationInput | Prisma.CreditBalanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CreditBalances.
   */
  cursor?: Prisma.CreditBalanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditBalances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditBalances.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CreditBalances.
   */
  distinct?: Prisma.CreditBalanceScalarFieldEnum | Prisma.CreditBalanceScalarFieldEnum[];
};

/**
 * CreditBalance findFirstOrThrow
 */
export type CreditBalanceFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * Filter, which CreditBalance to fetch.
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditBalances to fetch.
   */
  orderBy?: Prisma.CreditBalanceOrderByWithRelationInput | Prisma.CreditBalanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CreditBalances.
   */
  cursor?: Prisma.CreditBalanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditBalances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditBalances.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CreditBalances.
   */
  distinct?: Prisma.CreditBalanceScalarFieldEnum | Prisma.CreditBalanceScalarFieldEnum[];
};

/**
 * CreditBalance findMany
 */
export type CreditBalanceFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * Filter, which CreditBalances to fetch.
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditBalances to fetch.
   */
  orderBy?: Prisma.CreditBalanceOrderByWithRelationInput | Prisma.CreditBalanceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CreditBalances.
   */
  cursor?: Prisma.CreditBalanceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditBalances from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditBalances.
   */
  skip?: number;
  distinct?: Prisma.CreditBalanceScalarFieldEnum | Prisma.CreditBalanceScalarFieldEnum[];
};

/**
 * CreditBalance create
 */
export type CreditBalanceCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * The data needed to create a CreditBalance.
   */
  data?: Prisma.XOR<Prisma.CreditBalanceCreateInput, Prisma.CreditBalanceUncheckedCreateInput>;
};

/**
 * CreditBalance createMany
 */
export type CreditBalanceCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many CreditBalances.
   */
  data: Prisma.CreditBalanceCreateManyInput | Prisma.CreditBalanceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CreditBalance createManyAndReturn
 */
export type CreditBalanceCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * The data used to create many CreditBalances.
   */
  data: Prisma.CreditBalanceCreateManyInput | Prisma.CreditBalanceCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CreditBalance update
 */
export type CreditBalanceUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * The data needed to update a CreditBalance.
   */
  data: Prisma.XOR<Prisma.CreditBalanceUpdateInput, Prisma.CreditBalanceUncheckedUpdateInput>;
  /**
   * Choose, which CreditBalance to update.
   */
  where: Prisma.CreditBalanceWhereUniqueInput;
};

/**
 * CreditBalance updateMany
 */
export type CreditBalanceUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update CreditBalances.
   */
  data: Prisma.XOR<Prisma.CreditBalanceUpdateManyMutationInput, Prisma.CreditBalanceUncheckedUpdateManyInput>;
  /**
   * Filter which CreditBalances to update
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * Limit how many CreditBalances to update.
   */
  limit?: number;
};

/**
 * CreditBalance updateManyAndReturn
 */
export type CreditBalanceUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * The data used to update CreditBalances.
   */
  data: Prisma.XOR<Prisma.CreditBalanceUpdateManyMutationInput, Prisma.CreditBalanceUncheckedUpdateManyInput>;
  /**
   * Filter which CreditBalances to update
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * Limit how many CreditBalances to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CreditBalance upsert
 */
export type CreditBalanceUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * The filter to search for the CreditBalance to update in case it exists.
   */
  where: Prisma.CreditBalanceWhereUniqueInput;
  /**
   * In case the CreditBalance found by the `where` argument doesn't exist, create a new CreditBalance with this data.
   */
  create: Prisma.XOR<Prisma.CreditBalanceCreateInput, Prisma.CreditBalanceUncheckedCreateInput>;
  /**
   * In case the CreditBalance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CreditBalanceUpdateInput, Prisma.CreditBalanceUncheckedUpdateInput>;
};

/**
 * CreditBalance delete
 */
export type CreditBalanceDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
  /**
   * Filter which CreditBalance to delete.
   */
  where: Prisma.CreditBalanceWhereUniqueInput;
};

/**
 * CreditBalance deleteMany
 */
export type CreditBalanceDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CreditBalances to delete
   */
  where?: Prisma.CreditBalanceWhereInput;
  /**
   * Limit how many CreditBalances to delete.
   */
  limit?: number;
};

/**
 * CreditBalance.team
 */
export type CreditBalance$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * CreditBalance.user
 */
export type CreditBalance$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * CreditBalance.expenseLogs
 */
export type CreditBalance$expenseLogsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  where?: Prisma.CreditExpenseLogWhereInput;
  orderBy?:
    | Prisma.CreditExpenseLogOrderByWithRelationInput
    | Prisma.CreditExpenseLogOrderByWithRelationInput[];
  cursor?: Prisma.CreditExpenseLogWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.CreditExpenseLogScalarFieldEnum | Prisma.CreditExpenseLogScalarFieldEnum[];
};

/**
 * CreditBalance.purchaseLogs
 */
export type CreditBalance$purchaseLogsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditPurchaseLog
   */
  select?: Prisma.CreditPurchaseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditPurchaseLog
   */
  omit?: Prisma.CreditPurchaseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditPurchaseLogInclude<ExtArgs> | null;
  where?: Prisma.CreditPurchaseLogWhereInput;
  orderBy?:
    | Prisma.CreditPurchaseLogOrderByWithRelationInput
    | Prisma.CreditPurchaseLogOrderByWithRelationInput[];
  cursor?: Prisma.CreditPurchaseLogWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.CreditPurchaseLogScalarFieldEnum | Prisma.CreditPurchaseLogScalarFieldEnum[];
};

/**
 * CreditBalance without action
 */
export type CreditBalanceDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditBalance
   */
  select?: Prisma.CreditBalanceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditBalance
   */
  omit?: Prisma.CreditBalanceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditBalanceInclude<ExtArgs> | null;
};
