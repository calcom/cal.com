/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `TravelSchedule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TravelSchedule
 *
 */
export type TravelScheduleModel = runtime.Types.Result.DefaultSelection<Prisma.$TravelSchedulePayload>;

export type AggregateTravelSchedule = {
  _count: TravelScheduleCountAggregateOutputType | null;
  _avg: TravelScheduleAvgAggregateOutputType | null;
  _sum: TravelScheduleSumAggregateOutputType | null;
  _min: TravelScheduleMinAggregateOutputType | null;
  _max: TravelScheduleMaxAggregateOutputType | null;
};

export type TravelScheduleAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type TravelScheduleSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type TravelScheduleMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  timeZone: string | null;
  startDate: Date | null;
  endDate: Date | null;
  prevTimeZone: string | null;
};

export type TravelScheduleMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  timeZone: string | null;
  startDate: Date | null;
  endDate: Date | null;
  prevTimeZone: string | null;
};

export type TravelScheduleCountAggregateOutputType = {
  id: number;
  userId: number;
  timeZone: number;
  startDate: number;
  endDate: number;
  prevTimeZone: number;
  _all: number;
};

export type TravelScheduleAvgAggregateInputType = {
  id?: true;
  userId?: true;
};

export type TravelScheduleSumAggregateInputType = {
  id?: true;
  userId?: true;
};

export type TravelScheduleMinAggregateInputType = {
  id?: true;
  userId?: true;
  timeZone?: true;
  startDate?: true;
  endDate?: true;
  prevTimeZone?: true;
};

export type TravelScheduleMaxAggregateInputType = {
  id?: true;
  userId?: true;
  timeZone?: true;
  startDate?: true;
  endDate?: true;
  prevTimeZone?: true;
};

export type TravelScheduleCountAggregateInputType = {
  id?: true;
  userId?: true;
  timeZone?: true;
  startDate?: true;
  endDate?: true;
  prevTimeZone?: true;
  _all?: true;
};

export type TravelScheduleAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TravelSchedule to aggregate.
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TravelSchedules to fetch.
   */
  orderBy?: Prisma.TravelScheduleOrderByWithRelationInput | Prisma.TravelScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TravelScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TravelSchedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TravelSchedules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TravelSchedules
   **/
  _count?: true | TravelScheduleCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TravelScheduleAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TravelScheduleSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TravelScheduleMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TravelScheduleMaxAggregateInputType;
};

export type GetTravelScheduleAggregateType<T extends TravelScheduleAggregateArgs> = {
  [P in keyof T & keyof AggregateTravelSchedule]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTravelSchedule[P]>
    : Prisma.GetScalarType<T[P], AggregateTravelSchedule[P]>;
};

export type TravelScheduleGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.TravelScheduleWhereInput;
  orderBy?:
    | Prisma.TravelScheduleOrderByWithAggregationInput
    | Prisma.TravelScheduleOrderByWithAggregationInput[];
  by: Prisma.TravelScheduleScalarFieldEnum[] | Prisma.TravelScheduleScalarFieldEnum;
  having?: Prisma.TravelScheduleScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TravelScheduleCountAggregateInputType | true;
  _avg?: TravelScheduleAvgAggregateInputType;
  _sum?: TravelScheduleSumAggregateInputType;
  _min?: TravelScheduleMinAggregateInputType;
  _max?: TravelScheduleMaxAggregateInputType;
};

export type TravelScheduleGroupByOutputType = {
  id: number;
  userId: number;
  timeZone: string;
  startDate: Date;
  endDate: Date | null;
  prevTimeZone: string | null;
  _count: TravelScheduleCountAggregateOutputType | null;
  _avg: TravelScheduleAvgAggregateOutputType | null;
  _sum: TravelScheduleSumAggregateOutputType | null;
  _min: TravelScheduleMinAggregateOutputType | null;
  _max: TravelScheduleMaxAggregateOutputType | null;
};

type GetTravelScheduleGroupByPayload<T extends TravelScheduleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TravelScheduleGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof TravelScheduleGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TravelScheduleGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TravelScheduleGroupByOutputType[P]>;
    }
  >
>;

export type TravelScheduleWhereInput = {
  AND?: Prisma.TravelScheduleWhereInput | Prisma.TravelScheduleWhereInput[];
  OR?: Prisma.TravelScheduleWhereInput[];
  NOT?: Prisma.TravelScheduleWhereInput | Prisma.TravelScheduleWhereInput[];
  id?: Prisma.IntFilter<"TravelSchedule"> | number;
  userId?: Prisma.IntFilter<"TravelSchedule"> | number;
  timeZone?: Prisma.StringFilter<"TravelSchedule"> | string;
  startDate?: Prisma.DateTimeFilter<"TravelSchedule"> | Date | string;
  endDate?: Prisma.DateTimeNullableFilter<"TravelSchedule"> | Date | string | null;
  prevTimeZone?: Prisma.StringNullableFilter<"TravelSchedule"> | string | null;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type TravelScheduleOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder;
  prevTimeZone?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type TravelScheduleWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.TravelScheduleWhereInput | Prisma.TravelScheduleWhereInput[];
    OR?: Prisma.TravelScheduleWhereInput[];
    NOT?: Prisma.TravelScheduleWhereInput | Prisma.TravelScheduleWhereInput[];
    userId?: Prisma.IntFilter<"TravelSchedule"> | number;
    timeZone?: Prisma.StringFilter<"TravelSchedule"> | string;
    startDate?: Prisma.DateTimeFilter<"TravelSchedule"> | Date | string;
    endDate?: Prisma.DateTimeNullableFilter<"TravelSchedule"> | Date | string | null;
    prevTimeZone?: Prisma.StringNullableFilter<"TravelSchedule"> | string | null;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type TravelScheduleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder;
  prevTimeZone?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.TravelScheduleCountOrderByAggregateInput;
  _avg?: Prisma.TravelScheduleAvgOrderByAggregateInput;
  _max?: Prisma.TravelScheduleMaxOrderByAggregateInput;
  _min?: Prisma.TravelScheduleMinOrderByAggregateInput;
  _sum?: Prisma.TravelScheduleSumOrderByAggregateInput;
};

export type TravelScheduleScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TravelScheduleScalarWhereWithAggregatesInput
    | Prisma.TravelScheduleScalarWhereWithAggregatesInput[];
  OR?: Prisma.TravelScheduleScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TravelScheduleScalarWhereWithAggregatesInput
    | Prisma.TravelScheduleScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"TravelSchedule"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"TravelSchedule"> | number;
  timeZone?: Prisma.StringWithAggregatesFilter<"TravelSchedule"> | string;
  startDate?: Prisma.DateTimeWithAggregatesFilter<"TravelSchedule"> | Date | string;
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"TravelSchedule"> | Date | string | null;
  prevTimeZone?: Prisma.StringNullableWithAggregatesFilter<"TravelSchedule"> | string | null;
};

export type TravelScheduleCreateInput = {
  timeZone: string;
  startDate: Date | string;
  endDate?: Date | string | null;
  prevTimeZone?: string | null;
  user: Prisma.UserCreateNestedOneWithoutTravelSchedulesInput;
};

export type TravelScheduleUncheckedCreateInput = {
  id?: number;
  userId: number;
  timeZone: string;
  startDate: Date | string;
  endDate?: Date | string | null;
  prevTimeZone?: string | null;
};

export type TravelScheduleUpdateInput = {
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  user?: Prisma.UserUpdateOneRequiredWithoutTravelSchedulesNestedInput;
};

export type TravelScheduleUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TravelScheduleCreateManyInput = {
  id?: number;
  userId: number;
  timeZone: string;
  startDate: Date | string;
  endDate?: Date | string | null;
  prevTimeZone?: string | null;
};

export type TravelScheduleUpdateManyMutationInput = {
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TravelScheduleUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TravelScheduleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  prevTimeZone?: Prisma.SortOrder;
};

export type TravelScheduleAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type TravelScheduleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  prevTimeZone?: Prisma.SortOrder;
};

export type TravelScheduleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  startDate?: Prisma.SortOrder;
  endDate?: Prisma.SortOrder;
  prevTimeZone?: Prisma.SortOrder;
};

export type TravelScheduleSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type TravelScheduleListRelationFilter = {
  every?: Prisma.TravelScheduleWhereInput;
  some?: Prisma.TravelScheduleWhereInput;
  none?: Prisma.TravelScheduleWhereInput;
};

export type TravelScheduleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TravelScheduleCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.TravelScheduleCreateWithoutUserInput,
        Prisma.TravelScheduleUncheckedCreateWithoutUserInput
      >
    | Prisma.TravelScheduleCreateWithoutUserInput[]
    | Prisma.TravelScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.TravelScheduleCreateManyUserInputEnvelope;
  connect?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
};

export type TravelScheduleUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.TravelScheduleCreateWithoutUserInput,
        Prisma.TravelScheduleUncheckedCreateWithoutUserInput
      >
    | Prisma.TravelScheduleCreateWithoutUserInput[]
    | Prisma.TravelScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.TravelScheduleCreateManyUserInputEnvelope;
  connect?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
};

export type TravelScheduleUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TravelScheduleCreateWithoutUserInput,
        Prisma.TravelScheduleUncheckedCreateWithoutUserInput
      >
    | Prisma.TravelScheduleCreateWithoutUserInput[]
    | Prisma.TravelScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.TravelScheduleUpsertWithWhereUniqueWithoutUserInput
    | Prisma.TravelScheduleUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.TravelScheduleCreateManyUserInputEnvelope;
  set?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  disconnect?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  delete?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  connect?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  update?:
    | Prisma.TravelScheduleUpdateWithWhereUniqueWithoutUserInput
    | Prisma.TravelScheduleUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.TravelScheduleUpdateManyWithWhereWithoutUserInput
    | Prisma.TravelScheduleUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.TravelScheduleScalarWhereInput | Prisma.TravelScheduleScalarWhereInput[];
};

export type TravelScheduleUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TravelScheduleCreateWithoutUserInput,
        Prisma.TravelScheduleUncheckedCreateWithoutUserInput
      >
    | Prisma.TravelScheduleCreateWithoutUserInput[]
    | Prisma.TravelScheduleUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput
    | Prisma.TravelScheduleCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.TravelScheduleUpsertWithWhereUniqueWithoutUserInput
    | Prisma.TravelScheduleUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.TravelScheduleCreateManyUserInputEnvelope;
  set?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  disconnect?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  delete?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  connect?: Prisma.TravelScheduleWhereUniqueInput | Prisma.TravelScheduleWhereUniqueInput[];
  update?:
    | Prisma.TravelScheduleUpdateWithWhereUniqueWithoutUserInput
    | Prisma.TravelScheduleUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.TravelScheduleUpdateManyWithWhereWithoutUserInput
    | Prisma.TravelScheduleUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.TravelScheduleScalarWhereInput | Prisma.TravelScheduleScalarWhereInput[];
};

export type TravelScheduleCreateWithoutUserInput = {
  timeZone: string;
  startDate: Date | string;
  endDate?: Date | string | null;
  prevTimeZone?: string | null;
};

export type TravelScheduleUncheckedCreateWithoutUserInput = {
  id?: number;
  timeZone: string;
  startDate: Date | string;
  endDate?: Date | string | null;
  prevTimeZone?: string | null;
};

export type TravelScheduleCreateOrConnectWithoutUserInput = {
  where: Prisma.TravelScheduleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TravelScheduleCreateWithoutUserInput,
    Prisma.TravelScheduleUncheckedCreateWithoutUserInput
  >;
};

export type TravelScheduleCreateManyUserInputEnvelope = {
  data: Prisma.TravelScheduleCreateManyUserInput | Prisma.TravelScheduleCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type TravelScheduleUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TravelScheduleWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TravelScheduleUpdateWithoutUserInput,
    Prisma.TravelScheduleUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.TravelScheduleCreateWithoutUserInput,
    Prisma.TravelScheduleUncheckedCreateWithoutUserInput
  >;
};

export type TravelScheduleUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TravelScheduleWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TravelScheduleUpdateWithoutUserInput,
    Prisma.TravelScheduleUncheckedUpdateWithoutUserInput
  >;
};

export type TravelScheduleUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TravelScheduleScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TravelScheduleUpdateManyMutationInput,
    Prisma.TravelScheduleUncheckedUpdateManyWithoutUserInput
  >;
};

export type TravelScheduleScalarWhereInput = {
  AND?: Prisma.TravelScheduleScalarWhereInput | Prisma.TravelScheduleScalarWhereInput[];
  OR?: Prisma.TravelScheduleScalarWhereInput[];
  NOT?: Prisma.TravelScheduleScalarWhereInput | Prisma.TravelScheduleScalarWhereInput[];
  id?: Prisma.IntFilter<"TravelSchedule"> | number;
  userId?: Prisma.IntFilter<"TravelSchedule"> | number;
  timeZone?: Prisma.StringFilter<"TravelSchedule"> | string;
  startDate?: Prisma.DateTimeFilter<"TravelSchedule"> | Date | string;
  endDate?: Prisma.DateTimeNullableFilter<"TravelSchedule"> | Date | string | null;
  prevTimeZone?: Prisma.StringNullableFilter<"TravelSchedule"> | string | null;
};

export type TravelScheduleCreateManyUserInput = {
  id?: number;
  timeZone: string;
  startDate: Date | string;
  endDate?: Date | string | null;
  prevTimeZone?: string | null;
};

export type TravelScheduleUpdateWithoutUserInput = {
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TravelScheduleUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TravelScheduleUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  prevTimeZone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TravelScheduleSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    timeZone?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    prevTimeZone?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["travelSchedule"]
>;

export type TravelScheduleSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    timeZone?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    prevTimeZone?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["travelSchedule"]
>;

export type TravelScheduleSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    timeZone?: boolean;
    startDate?: boolean;
    endDate?: boolean;
    prevTimeZone?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["travelSchedule"]
>;

export type TravelScheduleSelectScalar = {
  id?: boolean;
  userId?: boolean;
  timeZone?: boolean;
  startDate?: boolean;
  endDate?: boolean;
  prevTimeZone?: boolean;
};

export type TravelScheduleOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "timeZone" | "startDate" | "endDate" | "prevTimeZone",
  ExtArgs["result"]["travelSchedule"]
>;
export type TravelScheduleInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type TravelScheduleIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type TravelScheduleIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $TravelSchedulePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "TravelSchedule";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number;
      timeZone: string;
      startDate: Date;
      endDate: Date | null;
      prevTimeZone: string | null;
    },
    ExtArgs["result"]["travelSchedule"]
  >;
  composites: {};
};

export type TravelScheduleGetPayload<S extends boolean | null | undefined | TravelScheduleDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$TravelSchedulePayload, S>;

export type TravelScheduleCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<TravelScheduleFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: TravelScheduleCountAggregateInputType | true;
};

export interface TravelScheduleDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["TravelSchedule"];
    meta: { name: "TravelSchedule" };
  };
  /**
   * Find zero or one TravelSchedule that matches the filter.
   * @param {TravelScheduleFindUniqueArgs} args - Arguments to find a TravelSchedule
   * @example
   * // Get one TravelSchedule
   * const travelSchedule = await prisma.travelSchedule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TravelScheduleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$TravelSchedulePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TravelSchedule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TravelScheduleFindUniqueOrThrowArgs} args - Arguments to find a TravelSchedule
   * @example
   * // Get one TravelSchedule
   * const travelSchedule = await prisma.travelSchedule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TravelScheduleFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$TravelSchedulePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TravelSchedule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleFindFirstArgs} args - Arguments to find a TravelSchedule
   * @example
   * // Get one TravelSchedule
   * const travelSchedule = await prisma.travelSchedule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TravelScheduleFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TravelScheduleFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$TravelSchedulePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TravelSchedule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleFindFirstOrThrowArgs} args - Arguments to find a TravelSchedule
   * @example
   * // Get one TravelSchedule
   * const travelSchedule = await prisma.travelSchedule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TravelScheduleFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TravelScheduleFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$TravelSchedulePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TravelSchedules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TravelSchedules
   * const travelSchedules = await prisma.travelSchedule.findMany()
   *
   * // Get first 10 TravelSchedules
   * const travelSchedules = await prisma.travelSchedule.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const travelScheduleWithIdOnly = await prisma.travelSchedule.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TravelScheduleFindManyArgs>(
    args?: Prisma.SelectSubset<T, TravelScheduleFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$TravelSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a TravelSchedule.
   * @param {TravelScheduleCreateArgs} args - Arguments to create a TravelSchedule.
   * @example
   * // Create one TravelSchedule
   * const TravelSchedule = await prisma.travelSchedule.create({
   *   data: {
   *     // ... data to create a TravelSchedule
   *   }
   * })
   *
   */
  create<T extends TravelScheduleCreateArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$TravelSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TravelSchedules.
   * @param {TravelScheduleCreateManyArgs} args - Arguments to create many TravelSchedules.
   * @example
   * // Create many TravelSchedules
   * const travelSchedule = await prisma.travelSchedule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TravelScheduleCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TravelScheduleCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TravelSchedules and returns the data saved in the database.
   * @param {TravelScheduleCreateManyAndReturnArgs} args - Arguments to create many TravelSchedules.
   * @example
   * // Create many TravelSchedules
   * const travelSchedule = await prisma.travelSchedule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TravelSchedules and only return the `id`
   * const travelScheduleWithIdOnly = await prisma.travelSchedule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TravelScheduleCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TravelScheduleCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TravelSchedulePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TravelSchedule.
   * @param {TravelScheduleDeleteArgs} args - Arguments to delete one TravelSchedule.
   * @example
   * // Delete one TravelSchedule
   * const TravelSchedule = await prisma.travelSchedule.delete({
   *   where: {
   *     // ... filter to delete one TravelSchedule
   *   }
   * })
   *
   */
  delete<T extends TravelScheduleDeleteArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$TravelSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TravelSchedule.
   * @param {TravelScheduleUpdateArgs} args - Arguments to update one TravelSchedule.
   * @example
   * // Update one TravelSchedule
   * const travelSchedule = await prisma.travelSchedule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TravelScheduleUpdateArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$TravelSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TravelSchedules.
   * @param {TravelScheduleDeleteManyArgs} args - Arguments to filter TravelSchedules to delete.
   * @example
   * // Delete a few TravelSchedules
   * const { count } = await prisma.travelSchedule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TravelScheduleDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TravelScheduleDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TravelSchedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TravelSchedules
   * const travelSchedule = await prisma.travelSchedule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TravelScheduleUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TravelSchedules and returns the data updated in the database.
   * @param {TravelScheduleUpdateManyAndReturnArgs} args - Arguments to update many TravelSchedules.
   * @example
   * // Update many TravelSchedules
   * const travelSchedule = await prisma.travelSchedule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TravelSchedules and only return the `id`
   * const travelScheduleWithIdOnly = await prisma.travelSchedule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TravelScheduleUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TravelSchedulePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TravelSchedule.
   * @param {TravelScheduleUpsertArgs} args - Arguments to update or create a TravelSchedule.
   * @example
   * // Update or create a TravelSchedule
   * const travelSchedule = await prisma.travelSchedule.upsert({
   *   create: {
   *     // ... data to create a TravelSchedule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TravelSchedule we want to update
   *   }
   * })
   */
  upsert<T extends TravelScheduleUpsertArgs>(
    args: Prisma.SelectSubset<T, TravelScheduleUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TravelScheduleClient<
    runtime.Types.Result.GetResult<Prisma.$TravelSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TravelSchedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleCountArgs} args - Arguments to filter TravelSchedules to count.
   * @example
   * // Count the number of TravelSchedules
   * const count = await prisma.travelSchedule.count({
   *   where: {
   *     // ... the filter for the TravelSchedules we want to count
   *   }
   * })
   **/
  count<T extends TravelScheduleCountArgs>(
    args?: Prisma.Subset<T, TravelScheduleCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TravelScheduleCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TravelSchedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TravelScheduleAggregateArgs>(
    args: Prisma.Subset<T, TravelScheduleAggregateArgs>
  ): Prisma.PrismaPromise<GetTravelScheduleAggregateType<T>>;

  /**
   * Group by TravelSchedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TravelScheduleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TravelScheduleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TravelScheduleGroupByArgs["orderBy"] }
      : { orderBy?: TravelScheduleGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, TravelScheduleGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetTravelScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TravelSchedule model
   */
  readonly fields: TravelScheduleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TravelSchedule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TravelScheduleClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TravelSchedule model
 */
export interface TravelScheduleFieldRefs {
  readonly id: Prisma.FieldRef<"TravelSchedule", "Int">;
  readonly userId: Prisma.FieldRef<"TravelSchedule", "Int">;
  readonly timeZone: Prisma.FieldRef<"TravelSchedule", "String">;
  readonly startDate: Prisma.FieldRef<"TravelSchedule", "DateTime">;
  readonly endDate: Prisma.FieldRef<"TravelSchedule", "DateTime">;
  readonly prevTimeZone: Prisma.FieldRef<"TravelSchedule", "String">;
}

// Custom InputTypes
/**
 * TravelSchedule findUnique
 */
export type TravelScheduleFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which TravelSchedule to fetch.
   */
  where: Prisma.TravelScheduleWhereUniqueInput;
};

/**
 * TravelSchedule findUniqueOrThrow
 */
export type TravelScheduleFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which TravelSchedule to fetch.
   */
  where: Prisma.TravelScheduleWhereUniqueInput;
};

/**
 * TravelSchedule findFirst
 */
export type TravelScheduleFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which TravelSchedule to fetch.
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TravelSchedules to fetch.
   */
  orderBy?: Prisma.TravelScheduleOrderByWithRelationInput | Prisma.TravelScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TravelSchedules.
   */
  cursor?: Prisma.TravelScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TravelSchedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TravelSchedules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TravelSchedules.
   */
  distinct?: Prisma.TravelScheduleScalarFieldEnum | Prisma.TravelScheduleScalarFieldEnum[];
};

/**
 * TravelSchedule findFirstOrThrow
 */
export type TravelScheduleFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which TravelSchedule to fetch.
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TravelSchedules to fetch.
   */
  orderBy?: Prisma.TravelScheduleOrderByWithRelationInput | Prisma.TravelScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TravelSchedules.
   */
  cursor?: Prisma.TravelScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TravelSchedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TravelSchedules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TravelSchedules.
   */
  distinct?: Prisma.TravelScheduleScalarFieldEnum | Prisma.TravelScheduleScalarFieldEnum[];
};

/**
 * TravelSchedule findMany
 */
export type TravelScheduleFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * Filter, which TravelSchedules to fetch.
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TravelSchedules to fetch.
   */
  orderBy?: Prisma.TravelScheduleOrderByWithRelationInput | Prisma.TravelScheduleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TravelSchedules.
   */
  cursor?: Prisma.TravelScheduleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TravelSchedules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TravelSchedules.
   */
  skip?: number;
  distinct?: Prisma.TravelScheduleScalarFieldEnum | Prisma.TravelScheduleScalarFieldEnum[];
};

/**
 * TravelSchedule create
 */
export type TravelScheduleCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * The data needed to create a TravelSchedule.
   */
  data: Prisma.XOR<Prisma.TravelScheduleCreateInput, Prisma.TravelScheduleUncheckedCreateInput>;
};

/**
 * TravelSchedule createMany
 */
export type TravelScheduleCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many TravelSchedules.
   */
  data: Prisma.TravelScheduleCreateManyInput | Prisma.TravelScheduleCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TravelSchedule createManyAndReturn
 */
export type TravelScheduleCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * The data used to create many TravelSchedules.
   */
  data: Prisma.TravelScheduleCreateManyInput | Prisma.TravelScheduleCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TravelSchedule update
 */
export type TravelScheduleUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * The data needed to update a TravelSchedule.
   */
  data: Prisma.XOR<Prisma.TravelScheduleUpdateInput, Prisma.TravelScheduleUncheckedUpdateInput>;
  /**
   * Choose, which TravelSchedule to update.
   */
  where: Prisma.TravelScheduleWhereUniqueInput;
};

/**
 * TravelSchedule updateMany
 */
export type TravelScheduleUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update TravelSchedules.
   */
  data: Prisma.XOR<
    Prisma.TravelScheduleUpdateManyMutationInput,
    Prisma.TravelScheduleUncheckedUpdateManyInput
  >;
  /**
   * Filter which TravelSchedules to update
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * Limit how many TravelSchedules to update.
   */
  limit?: number;
};

/**
 * TravelSchedule updateManyAndReturn
 */
export type TravelScheduleUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * The data used to update TravelSchedules.
   */
  data: Prisma.XOR<
    Prisma.TravelScheduleUpdateManyMutationInput,
    Prisma.TravelScheduleUncheckedUpdateManyInput
  >;
  /**
   * Filter which TravelSchedules to update
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * Limit how many TravelSchedules to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TravelSchedule upsert
 */
export type TravelScheduleUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * The filter to search for the TravelSchedule to update in case it exists.
   */
  where: Prisma.TravelScheduleWhereUniqueInput;
  /**
   * In case the TravelSchedule found by the `where` argument doesn't exist, create a new TravelSchedule with this data.
   */
  create: Prisma.XOR<Prisma.TravelScheduleCreateInput, Prisma.TravelScheduleUncheckedCreateInput>;
  /**
   * In case the TravelSchedule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TravelScheduleUpdateInput, Prisma.TravelScheduleUncheckedUpdateInput>;
};

/**
 * TravelSchedule delete
 */
export type TravelScheduleDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
  /**
   * Filter which TravelSchedule to delete.
   */
  where: Prisma.TravelScheduleWhereUniqueInput;
};

/**
 * TravelSchedule deleteMany
 */
export type TravelScheduleDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TravelSchedules to delete
   */
  where?: Prisma.TravelScheduleWhereInput;
  /**
   * Limit how many TravelSchedules to delete.
   */
  limit?: number;
};

/**
 * TravelSchedule without action
 */
export type TravelScheduleDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TravelSchedule
   */
  select?: Prisma.TravelScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TravelSchedule
   */
  omit?: Prisma.TravelScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TravelScheduleInclude<ExtArgs> | null;
};
