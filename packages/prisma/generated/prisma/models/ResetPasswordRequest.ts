/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `ResetPasswordRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ResetPasswordRequest
 *
 */
export type ResetPasswordRequestModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ResetPasswordRequestPayload>;

export type AggregateResetPasswordRequest = {
  _count: ResetPasswordRequestCountAggregateOutputType | null;
  _min: ResetPasswordRequestMinAggregateOutputType | null;
  _max: ResetPasswordRequestMaxAggregateOutputType | null;
};

export type ResetPasswordRequestMinAggregateOutputType = {
  id: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  email: string | null;
  expires: Date | null;
};

export type ResetPasswordRequestMaxAggregateOutputType = {
  id: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  email: string | null;
  expires: Date | null;
};

export type ResetPasswordRequestCountAggregateOutputType = {
  id: number;
  createdAt: number;
  updatedAt: number;
  email: number;
  expires: number;
  _all: number;
};

export type ResetPasswordRequestMinAggregateInputType = {
  id?: true;
  createdAt?: true;
  updatedAt?: true;
  email?: true;
  expires?: true;
};

export type ResetPasswordRequestMaxAggregateInputType = {
  id?: true;
  createdAt?: true;
  updatedAt?: true;
  email?: true;
  expires?: true;
};

export type ResetPasswordRequestCountAggregateInputType = {
  id?: true;
  createdAt?: true;
  updatedAt?: true;
  email?: true;
  expires?: true;
  _all?: true;
};

export type ResetPasswordRequestAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which ResetPasswordRequest to aggregate.
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResetPasswordRequests to fetch.
   */
  orderBy?:
    | Prisma.ResetPasswordRequestOrderByWithRelationInput
    | Prisma.ResetPasswordRequestOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ResetPasswordRequestWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResetPasswordRequests from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResetPasswordRequests.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ResetPasswordRequests
   **/
  _count?: true | ResetPasswordRequestCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ResetPasswordRequestMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ResetPasswordRequestMaxAggregateInputType;
};

export type GetResetPasswordRequestAggregateType<T extends ResetPasswordRequestAggregateArgs> = {
  [P in keyof T & keyof AggregateResetPasswordRequest]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResetPasswordRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateResetPasswordRequest[P]>;
};

export type ResetPasswordRequestGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ResetPasswordRequestWhereInput;
  orderBy?:
    | Prisma.ResetPasswordRequestOrderByWithAggregationInput
    | Prisma.ResetPasswordRequestOrderByWithAggregationInput[];
  by: Prisma.ResetPasswordRequestScalarFieldEnum[] | Prisma.ResetPasswordRequestScalarFieldEnum;
  having?: Prisma.ResetPasswordRequestScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ResetPasswordRequestCountAggregateInputType | true;
  _min?: ResetPasswordRequestMinAggregateInputType;
  _max?: ResetPasswordRequestMaxAggregateInputType;
};

export type ResetPasswordRequestGroupByOutputType = {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  email: string;
  expires: Date;
  _count: ResetPasswordRequestCountAggregateOutputType | null;
  _min: ResetPasswordRequestMinAggregateOutputType | null;
  _max: ResetPasswordRequestMaxAggregateOutputType | null;
};

type GetResetPasswordRequestGroupByPayload<T extends ResetPasswordRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ResetPasswordRequestGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ResetPasswordRequestGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ResetPasswordRequestGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ResetPasswordRequestGroupByOutputType[P]>;
    }
  >
>;

export type ResetPasswordRequestWhereInput = {
  AND?: Prisma.ResetPasswordRequestWhereInput | Prisma.ResetPasswordRequestWhereInput[];
  OR?: Prisma.ResetPasswordRequestWhereInput[];
  NOT?: Prisma.ResetPasswordRequestWhereInput | Prisma.ResetPasswordRequestWhereInput[];
  id?: Prisma.StringFilter<"ResetPasswordRequest"> | string;
  createdAt?: Prisma.DateTimeFilter<"ResetPasswordRequest"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"ResetPasswordRequest"> | Date | string;
  email?: Prisma.StringFilter<"ResetPasswordRequest"> | string;
  expires?: Prisma.DateTimeFilter<"ResetPasswordRequest"> | Date | string;
};

export type ResetPasswordRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type ResetPasswordRequestWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ResetPasswordRequestWhereInput | Prisma.ResetPasswordRequestWhereInput[];
    OR?: Prisma.ResetPasswordRequestWhereInput[];
    NOT?: Prisma.ResetPasswordRequestWhereInput | Prisma.ResetPasswordRequestWhereInput[];
    createdAt?: Prisma.DateTimeFilter<"ResetPasswordRequest"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"ResetPasswordRequest"> | Date | string;
    email?: Prisma.StringFilter<"ResetPasswordRequest"> | string;
    expires?: Prisma.DateTimeFilter<"ResetPasswordRequest"> | Date | string;
  },
  "id"
>;

export type ResetPasswordRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
  _count?: Prisma.ResetPasswordRequestCountOrderByAggregateInput;
  _max?: Prisma.ResetPasswordRequestMaxOrderByAggregateInput;
  _min?: Prisma.ResetPasswordRequestMinOrderByAggregateInput;
};

export type ResetPasswordRequestScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ResetPasswordRequestScalarWhereWithAggregatesInput
    | Prisma.ResetPasswordRequestScalarWhereWithAggregatesInput[];
  OR?: Prisma.ResetPasswordRequestScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ResetPasswordRequestScalarWhereWithAggregatesInput
    | Prisma.ResetPasswordRequestScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"ResetPasswordRequest"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ResetPasswordRequest"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ResetPasswordRequest"> | Date | string;
  email?: Prisma.StringWithAggregatesFilter<"ResetPasswordRequest"> | string;
  expires?: Prisma.DateTimeWithAggregatesFilter<"ResetPasswordRequest"> | Date | string;
};

export type ResetPasswordRequestCreateInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  email: string;
  expires: Date | string;
};

export type ResetPasswordRequestUncheckedCreateInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  email: string;
  expires: Date | string;
};

export type ResetPasswordRequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ResetPasswordRequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ResetPasswordRequestCreateManyInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  email: string;
  expires: Date | string;
};

export type ResetPasswordRequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ResetPasswordRequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  expires?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ResetPasswordRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type ResetPasswordRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type ResetPasswordRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  expires?: Prisma.SortOrder;
};

export type ResetPasswordRequestSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    email?: boolean;
    expires?: boolean;
  },
  ExtArgs["result"]["resetPasswordRequest"]
>;

export type ResetPasswordRequestSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    email?: boolean;
    expires?: boolean;
  },
  ExtArgs["result"]["resetPasswordRequest"]
>;

export type ResetPasswordRequestSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    email?: boolean;
    expires?: boolean;
  },
  ExtArgs["result"]["resetPasswordRequest"]
>;

export type ResetPasswordRequestSelectScalar = {
  id?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  email?: boolean;
  expires?: boolean;
};

export type ResetPasswordRequestOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "createdAt" | "updatedAt" | "email" | "expires",
  ExtArgs["result"]["resetPasswordRequest"]
>;

export type $ResetPasswordRequestPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "ResetPasswordRequest";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      createdAt: Date;
      updatedAt: Date;
      email: string;
      expires: Date;
    },
    ExtArgs["result"]["resetPasswordRequest"]
  >;
  composites: {};
};

export type ResetPasswordRequestGetPayload<
  S extends boolean | null | undefined | ResetPasswordRequestDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$ResetPasswordRequestPayload, S>;

export type ResetPasswordRequestCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ResetPasswordRequestFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ResetPasswordRequestCountAggregateInputType | true;
};

export interface ResetPasswordRequestDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["ResetPasswordRequest"];
    meta: { name: "ResetPasswordRequest" };
  };
  /**
   * Find zero or one ResetPasswordRequest that matches the filter.
   * @param {ResetPasswordRequestFindUniqueArgs} args - Arguments to find a ResetPasswordRequest
   * @example
   * // Get one ResetPasswordRequest
   * const resetPasswordRequest = await prisma.resetPasswordRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResetPasswordRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ResetPasswordRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResetPasswordRequestFindUniqueOrThrowArgs} args - Arguments to find a ResetPasswordRequest
   * @example
   * // Get one ResetPasswordRequest
   * const resetPasswordRequest = await prisma.resetPasswordRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResetPasswordRequestFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ResetPasswordRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestFindFirstArgs} args - Arguments to find a ResetPasswordRequest
   * @example
   * // Get one ResetPasswordRequest
   * const resetPasswordRequest = await prisma.resetPasswordRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResetPasswordRequestFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ResetPasswordRequestFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ResetPasswordRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestFindFirstOrThrowArgs} args - Arguments to find a ResetPasswordRequest
   * @example
   * // Get one ResetPasswordRequest
   * const resetPasswordRequest = await prisma.resetPasswordRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResetPasswordRequestFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ResetPasswordRequestFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ResetPasswordRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ResetPasswordRequests
   * const resetPasswordRequests = await prisma.resetPasswordRequest.findMany()
   *
   * // Get first 10 ResetPasswordRequests
   * const resetPasswordRequests = await prisma.resetPasswordRequest.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const resetPasswordRequestWithIdOnly = await prisma.resetPasswordRequest.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ResetPasswordRequestFindManyArgs>(
    args?: Prisma.SelectSubset<T, ResetPasswordRequestFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ResetPasswordRequest.
   * @param {ResetPasswordRequestCreateArgs} args - Arguments to create a ResetPasswordRequest.
   * @example
   * // Create one ResetPasswordRequest
   * const ResetPasswordRequest = await prisma.resetPasswordRequest.create({
   *   data: {
   *     // ... data to create a ResetPasswordRequest
   *   }
   * })
   *
   */
  create<T extends ResetPasswordRequestCreateArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ResetPasswordRequests.
   * @param {ResetPasswordRequestCreateManyArgs} args - Arguments to create many ResetPasswordRequests.
   * @example
   * // Create many ResetPasswordRequests
   * const resetPasswordRequest = await prisma.resetPasswordRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ResetPasswordRequestCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ResetPasswordRequestCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ResetPasswordRequests and returns the data saved in the database.
   * @param {ResetPasswordRequestCreateManyAndReturnArgs} args - Arguments to create many ResetPasswordRequests.
   * @example
   * // Create many ResetPasswordRequests
   * const resetPasswordRequest = await prisma.resetPasswordRequest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ResetPasswordRequests and only return the `id`
   * const resetPasswordRequestWithIdOnly = await prisma.resetPasswordRequest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ResetPasswordRequestCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ResetPasswordRequestCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ResetPasswordRequest.
   * @param {ResetPasswordRequestDeleteArgs} args - Arguments to delete one ResetPasswordRequest.
   * @example
   * // Delete one ResetPasswordRequest
   * const ResetPasswordRequest = await prisma.resetPasswordRequest.delete({
   *   where: {
   *     // ... filter to delete one ResetPasswordRequest
   *   }
   * })
   *
   */
  delete<T extends ResetPasswordRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ResetPasswordRequest.
   * @param {ResetPasswordRequestUpdateArgs} args - Arguments to update one ResetPasswordRequest.
   * @example
   * // Update one ResetPasswordRequest
   * const resetPasswordRequest = await prisma.resetPasswordRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ResetPasswordRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ResetPasswordRequests.
   * @param {ResetPasswordRequestDeleteManyArgs} args - Arguments to filter ResetPasswordRequests to delete.
   * @example
   * // Delete a few ResetPasswordRequests
   * const { count } = await prisma.resetPasswordRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ResetPasswordRequestDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ResetPasswordRequestDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ResetPasswordRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ResetPasswordRequests
   * const resetPasswordRequest = await prisma.resetPasswordRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ResetPasswordRequestUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ResetPasswordRequests and returns the data updated in the database.
   * @param {ResetPasswordRequestUpdateManyAndReturnArgs} args - Arguments to update many ResetPasswordRequests.
   * @example
   * // Update many ResetPasswordRequests
   * const resetPasswordRequest = await prisma.resetPasswordRequest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ResetPasswordRequests and only return the `id`
   * const resetPasswordRequestWithIdOnly = await prisma.resetPasswordRequest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ResetPasswordRequestUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ResetPasswordRequest.
   * @param {ResetPasswordRequestUpsertArgs} args - Arguments to update or create a ResetPasswordRequest.
   * @example
   * // Update or create a ResetPasswordRequest
   * const resetPasswordRequest = await prisma.resetPasswordRequest.upsert({
   *   create: {
   *     // ... data to create a ResetPasswordRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ResetPasswordRequest we want to update
   *   }
   * })
   */
  upsert<T extends ResetPasswordRequestUpsertArgs>(
    args: Prisma.SelectSubset<T, ResetPasswordRequestUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ResetPasswordRequestClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResetPasswordRequestPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ResetPasswordRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestCountArgs} args - Arguments to filter ResetPasswordRequests to count.
   * @example
   * // Count the number of ResetPasswordRequests
   * const count = await prisma.resetPasswordRequest.count({
   *   where: {
   *     // ... the filter for the ResetPasswordRequests we want to count
   *   }
   * })
   **/
  count<T extends ResetPasswordRequestCountArgs>(
    args?: Prisma.Subset<T, ResetPasswordRequestCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ResetPasswordRequestCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ResetPasswordRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ResetPasswordRequestAggregateArgs>(
    args: Prisma.Subset<T, ResetPasswordRequestAggregateArgs>
  ): Prisma.PrismaPromise<GetResetPasswordRequestAggregateType<T>>;

  /**
   * Group by ResetPasswordRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ResetPasswordRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResetPasswordRequestGroupByArgs["orderBy"] }
      : { orderBy?: ResetPasswordRequestGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ResetPasswordRequestGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetResetPasswordRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ResetPasswordRequest model
   */
  readonly fields: ResetPasswordRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ResetPasswordRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResetPasswordRequestClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ResetPasswordRequest model
 */
export interface ResetPasswordRequestFieldRefs {
  readonly id: Prisma.FieldRef<"ResetPasswordRequest", "String">;
  readonly createdAt: Prisma.FieldRef<"ResetPasswordRequest", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"ResetPasswordRequest", "DateTime">;
  readonly email: Prisma.FieldRef<"ResetPasswordRequest", "String">;
  readonly expires: Prisma.FieldRef<"ResetPasswordRequest", "DateTime">;
}

// Custom InputTypes
/**
 * ResetPasswordRequest findUnique
 */
export type ResetPasswordRequestFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * Filter, which ResetPasswordRequest to fetch.
   */
  where: Prisma.ResetPasswordRequestWhereUniqueInput;
};

/**
 * ResetPasswordRequest findUniqueOrThrow
 */
export type ResetPasswordRequestFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * Filter, which ResetPasswordRequest to fetch.
   */
  where: Prisma.ResetPasswordRequestWhereUniqueInput;
};

/**
 * ResetPasswordRequest findFirst
 */
export type ResetPasswordRequestFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * Filter, which ResetPasswordRequest to fetch.
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResetPasswordRequests to fetch.
   */
  orderBy?:
    | Prisma.ResetPasswordRequestOrderByWithRelationInput
    | Prisma.ResetPasswordRequestOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ResetPasswordRequests.
   */
  cursor?: Prisma.ResetPasswordRequestWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResetPasswordRequests from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResetPasswordRequests.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ResetPasswordRequests.
   */
  distinct?: Prisma.ResetPasswordRequestScalarFieldEnum | Prisma.ResetPasswordRequestScalarFieldEnum[];
};

/**
 * ResetPasswordRequest findFirstOrThrow
 */
export type ResetPasswordRequestFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * Filter, which ResetPasswordRequest to fetch.
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResetPasswordRequests to fetch.
   */
  orderBy?:
    | Prisma.ResetPasswordRequestOrderByWithRelationInput
    | Prisma.ResetPasswordRequestOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ResetPasswordRequests.
   */
  cursor?: Prisma.ResetPasswordRequestWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResetPasswordRequests from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResetPasswordRequests.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ResetPasswordRequests.
   */
  distinct?: Prisma.ResetPasswordRequestScalarFieldEnum | Prisma.ResetPasswordRequestScalarFieldEnum[];
};

/**
 * ResetPasswordRequest findMany
 */
export type ResetPasswordRequestFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * Filter, which ResetPasswordRequests to fetch.
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResetPasswordRequests to fetch.
   */
  orderBy?:
    | Prisma.ResetPasswordRequestOrderByWithRelationInput
    | Prisma.ResetPasswordRequestOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ResetPasswordRequests.
   */
  cursor?: Prisma.ResetPasswordRequestWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResetPasswordRequests from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResetPasswordRequests.
   */
  skip?: number;
  distinct?: Prisma.ResetPasswordRequestScalarFieldEnum | Prisma.ResetPasswordRequestScalarFieldEnum[];
};

/**
 * ResetPasswordRequest create
 */
export type ResetPasswordRequestCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * The data needed to create a ResetPasswordRequest.
   */
  data: Prisma.XOR<Prisma.ResetPasswordRequestCreateInput, Prisma.ResetPasswordRequestUncheckedCreateInput>;
};

/**
 * ResetPasswordRequest createMany
 */
export type ResetPasswordRequestCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many ResetPasswordRequests.
   */
  data: Prisma.ResetPasswordRequestCreateManyInput | Prisma.ResetPasswordRequestCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ResetPasswordRequest createManyAndReturn
 */
export type ResetPasswordRequestCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * The data used to create many ResetPasswordRequests.
   */
  data: Prisma.ResetPasswordRequestCreateManyInput | Prisma.ResetPasswordRequestCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ResetPasswordRequest update
 */
export type ResetPasswordRequestUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * The data needed to update a ResetPasswordRequest.
   */
  data: Prisma.XOR<Prisma.ResetPasswordRequestUpdateInput, Prisma.ResetPasswordRequestUncheckedUpdateInput>;
  /**
   * Choose, which ResetPasswordRequest to update.
   */
  where: Prisma.ResetPasswordRequestWhereUniqueInput;
};

/**
 * ResetPasswordRequest updateMany
 */
export type ResetPasswordRequestUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update ResetPasswordRequests.
   */
  data: Prisma.XOR<
    Prisma.ResetPasswordRequestUpdateManyMutationInput,
    Prisma.ResetPasswordRequestUncheckedUpdateManyInput
  >;
  /**
   * Filter which ResetPasswordRequests to update
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * Limit how many ResetPasswordRequests to update.
   */
  limit?: number;
};

/**
 * ResetPasswordRequest updateManyAndReturn
 */
export type ResetPasswordRequestUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * The data used to update ResetPasswordRequests.
   */
  data: Prisma.XOR<
    Prisma.ResetPasswordRequestUpdateManyMutationInput,
    Prisma.ResetPasswordRequestUncheckedUpdateManyInput
  >;
  /**
   * Filter which ResetPasswordRequests to update
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * Limit how many ResetPasswordRequests to update.
   */
  limit?: number;
};

/**
 * ResetPasswordRequest upsert
 */
export type ResetPasswordRequestUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * The filter to search for the ResetPasswordRequest to update in case it exists.
   */
  where: Prisma.ResetPasswordRequestWhereUniqueInput;
  /**
   * In case the ResetPasswordRequest found by the `where` argument doesn't exist, create a new ResetPasswordRequest with this data.
   */
  create: Prisma.XOR<Prisma.ResetPasswordRequestCreateInput, Prisma.ResetPasswordRequestUncheckedCreateInput>;
  /**
   * In case the ResetPasswordRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ResetPasswordRequestUpdateInput, Prisma.ResetPasswordRequestUncheckedUpdateInput>;
};

/**
 * ResetPasswordRequest delete
 */
export type ResetPasswordRequestDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
  /**
   * Filter which ResetPasswordRequest to delete.
   */
  where: Prisma.ResetPasswordRequestWhereUniqueInput;
};

/**
 * ResetPasswordRequest deleteMany
 */
export type ResetPasswordRequestDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which ResetPasswordRequests to delete
   */
  where?: Prisma.ResetPasswordRequestWhereInput;
  /**
   * Limit how many ResetPasswordRequests to delete.
   */
  limit?: number;
};

/**
 * ResetPasswordRequest without action
 */
export type ResetPasswordRequestDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ResetPasswordRequest
   */
  select?: Prisma.ResetPasswordRequestSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResetPasswordRequest
   */
  omit?: Prisma.ResetPasswordRequestOmit<ExtArgs> | null;
};
