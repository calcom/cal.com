/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `NotificationsSubscriptions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model NotificationsSubscriptions
 *
 */
export type NotificationsSubscriptionsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$NotificationsSubscriptionsPayload>;

export type AggregateNotificationsSubscriptions = {
  _count: NotificationsSubscriptionsCountAggregateOutputType | null;
  _avg: NotificationsSubscriptionsAvgAggregateOutputType | null;
  _sum: NotificationsSubscriptionsSumAggregateOutputType | null;
  _min: NotificationsSubscriptionsMinAggregateOutputType | null;
  _max: NotificationsSubscriptionsMaxAggregateOutputType | null;
};

export type NotificationsSubscriptionsAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type NotificationsSubscriptionsSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
};

export type NotificationsSubscriptionsMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  subscription: string | null;
};

export type NotificationsSubscriptionsMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  subscription: string | null;
};

export type NotificationsSubscriptionsCountAggregateOutputType = {
  id: number;
  userId: number;
  subscription: number;
  _all: number;
};

export type NotificationsSubscriptionsAvgAggregateInputType = {
  id?: true;
  userId?: true;
};

export type NotificationsSubscriptionsSumAggregateInputType = {
  id?: true;
  userId?: true;
};

export type NotificationsSubscriptionsMinAggregateInputType = {
  id?: true;
  userId?: true;
  subscription?: true;
};

export type NotificationsSubscriptionsMaxAggregateInputType = {
  id?: true;
  userId?: true;
  subscription?: true;
};

export type NotificationsSubscriptionsCountAggregateInputType = {
  id?: true;
  userId?: true;
  subscription?: true;
  _all?: true;
};

export type NotificationsSubscriptionsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which NotificationsSubscriptions to aggregate.
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationsSubscriptions to fetch.
   */
  orderBy?:
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationsSubscriptions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationsSubscriptions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned NotificationsSubscriptions
   **/
  _count?: true | NotificationsSubscriptionsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: NotificationsSubscriptionsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: NotificationsSubscriptionsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NotificationsSubscriptionsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NotificationsSubscriptionsMaxAggregateInputType;
};

export type GetNotificationsSubscriptionsAggregateType<T extends NotificationsSubscriptionsAggregateArgs> = {
  [P in keyof T & keyof AggregateNotificationsSubscriptions]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationsSubscriptions[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationsSubscriptions[P]>;
};

export type NotificationsSubscriptionsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  orderBy?:
    | Prisma.NotificationsSubscriptionsOrderByWithAggregationInput
    | Prisma.NotificationsSubscriptionsOrderByWithAggregationInput[];
  by: Prisma.NotificationsSubscriptionsScalarFieldEnum[] | Prisma.NotificationsSubscriptionsScalarFieldEnum;
  having?: Prisma.NotificationsSubscriptionsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: NotificationsSubscriptionsCountAggregateInputType | true;
  _avg?: NotificationsSubscriptionsAvgAggregateInputType;
  _sum?: NotificationsSubscriptionsSumAggregateInputType;
  _min?: NotificationsSubscriptionsMinAggregateInputType;
  _max?: NotificationsSubscriptionsMaxAggregateInputType;
};

export type NotificationsSubscriptionsGroupByOutputType = {
  id: number;
  userId: number;
  subscription: string;
  _count: NotificationsSubscriptionsCountAggregateOutputType | null;
  _avg: NotificationsSubscriptionsAvgAggregateOutputType | null;
  _sum: NotificationsSubscriptionsSumAggregateOutputType | null;
  _min: NotificationsSubscriptionsMinAggregateOutputType | null;
  _max: NotificationsSubscriptionsMaxAggregateOutputType | null;
};

type GetNotificationsSubscriptionsGroupByPayload<T extends NotificationsSubscriptionsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<NotificationsSubscriptionsGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof NotificationsSubscriptionsGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationsSubscriptionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationsSubscriptionsGroupByOutputType[P]>;
      }
    >
  >;

export type NotificationsSubscriptionsWhereInput = {
  AND?: Prisma.NotificationsSubscriptionsWhereInput | Prisma.NotificationsSubscriptionsWhereInput[];
  OR?: Prisma.NotificationsSubscriptionsWhereInput[];
  NOT?: Prisma.NotificationsSubscriptionsWhereInput | Prisma.NotificationsSubscriptionsWhereInput[];
  id?: Prisma.IntFilter<"NotificationsSubscriptions"> | number;
  userId?: Prisma.IntFilter<"NotificationsSubscriptions"> | number;
  subscription?: Prisma.StringFilter<"NotificationsSubscriptions"> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type NotificationsSubscriptionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  subscription?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type NotificationsSubscriptionsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.NotificationsSubscriptionsWhereInput | Prisma.NotificationsSubscriptionsWhereInput[];
    OR?: Prisma.NotificationsSubscriptionsWhereInput[];
    NOT?: Prisma.NotificationsSubscriptionsWhereInput | Prisma.NotificationsSubscriptionsWhereInput[];
    userId?: Prisma.IntFilter<"NotificationsSubscriptions"> | number;
    subscription?: Prisma.StringFilter<"NotificationsSubscriptions"> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type NotificationsSubscriptionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  subscription?: Prisma.SortOrder;
  _count?: Prisma.NotificationsSubscriptionsCountOrderByAggregateInput;
  _avg?: Prisma.NotificationsSubscriptionsAvgOrderByAggregateInput;
  _max?: Prisma.NotificationsSubscriptionsMaxOrderByAggregateInput;
  _min?: Prisma.NotificationsSubscriptionsMinOrderByAggregateInput;
  _sum?: Prisma.NotificationsSubscriptionsSumOrderByAggregateInput;
};

export type NotificationsSubscriptionsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NotificationsSubscriptionsScalarWhereWithAggregatesInput
    | Prisma.NotificationsSubscriptionsScalarWhereWithAggregatesInput[];
  OR?: Prisma.NotificationsSubscriptionsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.NotificationsSubscriptionsScalarWhereWithAggregatesInput
    | Prisma.NotificationsSubscriptionsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"NotificationsSubscriptions"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"NotificationsSubscriptions"> | number;
  subscription?: Prisma.StringWithAggregatesFilter<"NotificationsSubscriptions"> | string;
};

export type NotificationsSubscriptionsCreateInput = {
  subscription: string;
  user: Prisma.UserCreateNestedOneWithoutNotificationsSubscriptionsInput;
};

export type NotificationsSubscriptionsUncheckedCreateInput = {
  id?: number;
  userId: number;
  subscription: string;
};

export type NotificationsSubscriptionsUpdateInput = {
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutNotificationsSubscriptionsNestedInput;
};

export type NotificationsSubscriptionsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type NotificationsSubscriptionsCreateManyInput = {
  id?: number;
  userId: number;
  subscription: string;
};

export type NotificationsSubscriptionsUpdateManyMutationInput = {
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type NotificationsSubscriptionsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type NotificationsSubscriptionsListRelationFilter = {
  every?: Prisma.NotificationsSubscriptionsWhereInput;
  some?: Prisma.NotificationsSubscriptionsWhereInput;
  none?: Prisma.NotificationsSubscriptionsWhereInput;
};

export type NotificationsSubscriptionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type NotificationsSubscriptionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  subscription?: Prisma.SortOrder;
};

export type NotificationsSubscriptionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type NotificationsSubscriptionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  subscription?: Prisma.SortOrder;
};

export type NotificationsSubscriptionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  subscription?: Prisma.SortOrder;
};

export type NotificationsSubscriptionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type NotificationsSubscriptionsCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationsSubscriptionsCreateWithoutUserInput,
        Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationsSubscriptionsCreateWithoutUserInput[]
    | Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.NotificationsSubscriptionsCreateManyUserInputEnvelope;
  connect?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
};

export type NotificationsSubscriptionsUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationsSubscriptionsCreateWithoutUserInput,
        Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationsSubscriptionsCreateWithoutUserInput[]
    | Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.NotificationsSubscriptionsCreateManyUserInputEnvelope;
  connect?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
};

export type NotificationsSubscriptionsUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationsSubscriptionsCreateWithoutUserInput,
        Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationsSubscriptionsCreateWithoutUserInput[]
    | Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.NotificationsSubscriptionsUpsertWithWhereUniqueWithoutUserInput
    | Prisma.NotificationsSubscriptionsUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.NotificationsSubscriptionsCreateManyUserInputEnvelope;
  set?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  delete?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  connect?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  update?:
    | Prisma.NotificationsSubscriptionsUpdateWithWhereUniqueWithoutUserInput
    | Prisma.NotificationsSubscriptionsUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.NotificationsSubscriptionsUpdateManyWithWhereWithoutUserInput
    | Prisma.NotificationsSubscriptionsUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.NotificationsSubscriptionsScalarWhereInput
    | Prisma.NotificationsSubscriptionsScalarWhereInput[];
};

export type NotificationsSubscriptionsUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationsSubscriptionsCreateWithoutUserInput,
        Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationsSubscriptionsCreateWithoutUserInput[]
    | Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput
    | Prisma.NotificationsSubscriptionsCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.NotificationsSubscriptionsUpsertWithWhereUniqueWithoutUserInput
    | Prisma.NotificationsSubscriptionsUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.NotificationsSubscriptionsCreateManyUserInputEnvelope;
  set?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  delete?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  connect?:
    | Prisma.NotificationsSubscriptionsWhereUniqueInput
    | Prisma.NotificationsSubscriptionsWhereUniqueInput[];
  update?:
    | Prisma.NotificationsSubscriptionsUpdateWithWhereUniqueWithoutUserInput
    | Prisma.NotificationsSubscriptionsUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.NotificationsSubscriptionsUpdateManyWithWhereWithoutUserInput
    | Prisma.NotificationsSubscriptionsUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.NotificationsSubscriptionsScalarWhereInput
    | Prisma.NotificationsSubscriptionsScalarWhereInput[];
};

export type NotificationsSubscriptionsCreateWithoutUserInput = {
  subscription: string;
};

export type NotificationsSubscriptionsUncheckedCreateWithoutUserInput = {
  id?: number;
  subscription: string;
};

export type NotificationsSubscriptionsCreateOrConnectWithoutUserInput = {
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationsSubscriptionsCreateWithoutUserInput,
    Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput
  >;
};

export type NotificationsSubscriptionsCreateManyUserInputEnvelope = {
  data:
    | Prisma.NotificationsSubscriptionsCreateManyUserInput
    | Prisma.NotificationsSubscriptionsCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type NotificationsSubscriptionsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateWithoutUserInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationsSubscriptionsCreateWithoutUserInput,
    Prisma.NotificationsSubscriptionsUncheckedCreateWithoutUserInput
  >;
};

export type NotificationsSubscriptionsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateWithoutUserInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateWithoutUserInput
  >;
};

export type NotificationsSubscriptionsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.NotificationsSubscriptionsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateManyMutationInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateManyWithoutUserInput
  >;
};

export type NotificationsSubscriptionsScalarWhereInput = {
  AND?:
    | Prisma.NotificationsSubscriptionsScalarWhereInput
    | Prisma.NotificationsSubscriptionsScalarWhereInput[];
  OR?: Prisma.NotificationsSubscriptionsScalarWhereInput[];
  NOT?:
    | Prisma.NotificationsSubscriptionsScalarWhereInput
    | Prisma.NotificationsSubscriptionsScalarWhereInput[];
  id?: Prisma.IntFilter<"NotificationsSubscriptions"> | number;
  userId?: Prisma.IntFilter<"NotificationsSubscriptions"> | number;
  subscription?: Prisma.StringFilter<"NotificationsSubscriptions"> | string;
};

export type NotificationsSubscriptionsCreateManyUserInput = {
  id?: number;
  subscription: string;
};

export type NotificationsSubscriptionsUpdateWithoutUserInput = {
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type NotificationsSubscriptionsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type NotificationsSubscriptionsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  subscription?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type NotificationsSubscriptionsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    subscription?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["notificationsSubscriptions"]
>;

export type NotificationsSubscriptionsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    subscription?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["notificationsSubscriptions"]
>;

export type NotificationsSubscriptionsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    subscription?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["notificationsSubscriptions"]
>;

export type NotificationsSubscriptionsSelectScalar = {
  id?: boolean;
  userId?: boolean;
  subscription?: boolean;
};

export type NotificationsSubscriptionsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "subscription",
  ExtArgs["result"]["notificationsSubscriptions"]
>;
export type NotificationsSubscriptionsInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type NotificationsSubscriptionsIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type NotificationsSubscriptionsIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $NotificationsSubscriptionsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "NotificationsSubscriptions";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number;
      subscription: string;
    },
    ExtArgs["result"]["notificationsSubscriptions"]
  >;
  composites: {};
};

export type NotificationsSubscriptionsGetPayload<
  S extends boolean | null | undefined | NotificationsSubscriptionsDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$NotificationsSubscriptionsPayload, S>;

export type NotificationsSubscriptionsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<NotificationsSubscriptionsFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: NotificationsSubscriptionsCountAggregateInputType | true;
};

export interface NotificationsSubscriptionsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["NotificationsSubscriptions"];
    meta: { name: "NotificationsSubscriptions" };
  };
  /**
   * Find zero or one NotificationsSubscriptions that matches the filter.
   * @param {NotificationsSubscriptionsFindUniqueArgs} args - Arguments to find a NotificationsSubscriptions
   * @example
   * // Get one NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationsSubscriptionsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one NotificationsSubscriptions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationsSubscriptionsFindUniqueOrThrowArgs} args - Arguments to find a NotificationsSubscriptions
   * @example
   * // Get one NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationsSubscriptionsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first NotificationsSubscriptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsFindFirstArgs} args - Arguments to find a NotificationsSubscriptions
   * @example
   * // Get one NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationsSubscriptionsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NotificationsSubscriptionsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first NotificationsSubscriptions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsFindFirstOrThrowArgs} args - Arguments to find a NotificationsSubscriptions
   * @example
   * // Get one NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationsSubscriptionsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, NotificationsSubscriptionsFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more NotificationsSubscriptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findMany()
   *
   * // Get first 10 NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const notificationsSubscriptionsWithIdOnly = await prisma.notificationsSubscriptions.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NotificationsSubscriptionsFindManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationsSubscriptionsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a NotificationsSubscriptions.
   * @param {NotificationsSubscriptionsCreateArgs} args - Arguments to create a NotificationsSubscriptions.
   * @example
   * // Create one NotificationsSubscriptions
   * const NotificationsSubscriptions = await prisma.notificationsSubscriptions.create({
   *   data: {
   *     // ... data to create a NotificationsSubscriptions
   *   }
   * })
   *
   */
  create<T extends NotificationsSubscriptionsCreateArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many NotificationsSubscriptions.
   * @param {NotificationsSubscriptionsCreateManyArgs} args - Arguments to create many NotificationsSubscriptions.
   * @example
   * // Create many NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NotificationsSubscriptionsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationsSubscriptionsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many NotificationsSubscriptions and returns the data saved in the database.
   * @param {NotificationsSubscriptionsCreateManyAndReturnArgs} args - Arguments to create many NotificationsSubscriptions.
   * @example
   * // Create many NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many NotificationsSubscriptions and only return the `id`
   * const notificationsSubscriptionsWithIdOnly = await prisma.notificationsSubscriptions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NotificationsSubscriptionsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, NotificationsSubscriptionsCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a NotificationsSubscriptions.
   * @param {NotificationsSubscriptionsDeleteArgs} args - Arguments to delete one NotificationsSubscriptions.
   * @example
   * // Delete one NotificationsSubscriptions
   * const NotificationsSubscriptions = await prisma.notificationsSubscriptions.delete({
   *   where: {
   *     // ... filter to delete one NotificationsSubscriptions
   *   }
   * })
   *
   */
  delete<T extends NotificationsSubscriptionsDeleteArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one NotificationsSubscriptions.
   * @param {NotificationsSubscriptionsUpdateArgs} args - Arguments to update one NotificationsSubscriptions.
   * @example
   * // Update one NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NotificationsSubscriptionsUpdateArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more NotificationsSubscriptions.
   * @param {NotificationsSubscriptionsDeleteManyArgs} args - Arguments to filter NotificationsSubscriptions to delete.
   * @example
   * // Delete a few NotificationsSubscriptions
   * const { count } = await prisma.notificationsSubscriptions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NotificationsSubscriptionsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationsSubscriptionsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more NotificationsSubscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NotificationsSubscriptionsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more NotificationsSubscriptions and returns the data updated in the database.
   * @param {NotificationsSubscriptionsUpdateManyAndReturnArgs} args - Arguments to update many NotificationsSubscriptions.
   * @example
   * // Update many NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more NotificationsSubscriptions and only return the `id`
   * const notificationsSubscriptionsWithIdOnly = await prisma.notificationsSubscriptions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NotificationsSubscriptionsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one NotificationsSubscriptions.
   * @param {NotificationsSubscriptionsUpsertArgs} args - Arguments to update or create a NotificationsSubscriptions.
   * @example
   * // Update or create a NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.upsert({
   *   create: {
   *     // ... data to create a NotificationsSubscriptions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationsSubscriptions we want to update
   *   }
   * })
   */
  upsert<T extends NotificationsSubscriptionsUpsertArgs>(
    args: Prisma.SelectSubset<T, NotificationsSubscriptionsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationsSubscriptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationsSubscriptionsPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of NotificationsSubscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsCountArgs} args - Arguments to filter NotificationsSubscriptions to count.
   * @example
   * // Count the number of NotificationsSubscriptions
   * const count = await prisma.notificationsSubscriptions.count({
   *   where: {
   *     // ... the filter for the NotificationsSubscriptions we want to count
   *   }
   * })
   **/
  count<T extends NotificationsSubscriptionsCountArgs>(
    args?: Prisma.Subset<T, NotificationsSubscriptionsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], NotificationsSubscriptionsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a NotificationsSubscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NotificationsSubscriptionsAggregateArgs>(
    args: Prisma.Subset<T, NotificationsSubscriptionsAggregateArgs>
  ): Prisma.PrismaPromise<GetNotificationsSubscriptionsAggregateType<T>>;

  /**
   * Group by NotificationsSubscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationsSubscriptionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NotificationsSubscriptionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationsSubscriptionsGroupByArgs["orderBy"] }
      : { orderBy?: NotificationsSubscriptionsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, NotificationsSubscriptionsGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors
    ? GetNotificationsSubscriptionsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the NotificationsSubscriptions model
   */
  readonly fields: NotificationsSubscriptionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationsSubscriptions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationsSubscriptionsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the NotificationsSubscriptions model
 */
export interface NotificationsSubscriptionsFieldRefs {
  readonly id: Prisma.FieldRef<"NotificationsSubscriptions", "Int">;
  readonly userId: Prisma.FieldRef<"NotificationsSubscriptions", "Int">;
  readonly subscription: Prisma.FieldRef<"NotificationsSubscriptions", "String">;
}

// Custom InputTypes
/**
 * NotificationsSubscriptions findUnique
 */
export type NotificationsSubscriptionsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationsSubscriptions to fetch.
   */
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
};

/**
 * NotificationsSubscriptions findUniqueOrThrow
 */
export type NotificationsSubscriptionsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationsSubscriptions to fetch.
   */
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
};

/**
 * NotificationsSubscriptions findFirst
 */
export type NotificationsSubscriptionsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationsSubscriptions to fetch.
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationsSubscriptions to fetch.
   */
  orderBy?:
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationsSubscriptions.
   */
  cursor?: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationsSubscriptions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationsSubscriptions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationsSubscriptions.
   */
  distinct?:
    | Prisma.NotificationsSubscriptionsScalarFieldEnum
    | Prisma.NotificationsSubscriptionsScalarFieldEnum[];
};

/**
 * NotificationsSubscriptions findFirstOrThrow
 */
export type NotificationsSubscriptionsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationsSubscriptions to fetch.
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationsSubscriptions to fetch.
   */
  orderBy?:
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationsSubscriptions.
   */
  cursor?: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationsSubscriptions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationsSubscriptions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationsSubscriptions.
   */
  distinct?:
    | Prisma.NotificationsSubscriptionsScalarFieldEnum
    | Prisma.NotificationsSubscriptionsScalarFieldEnum[];
};

/**
 * NotificationsSubscriptions findMany
 */
export type NotificationsSubscriptionsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationsSubscriptions to fetch.
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationsSubscriptions to fetch.
   */
  orderBy?:
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput
    | Prisma.NotificationsSubscriptionsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing NotificationsSubscriptions.
   */
  cursor?: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationsSubscriptions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationsSubscriptions.
   */
  skip?: number;
  distinct?:
    | Prisma.NotificationsSubscriptionsScalarFieldEnum
    | Prisma.NotificationsSubscriptionsScalarFieldEnum[];
};

/**
 * NotificationsSubscriptions create
 */
export type NotificationsSubscriptionsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * The data needed to create a NotificationsSubscriptions.
   */
  data: Prisma.XOR<
    Prisma.NotificationsSubscriptionsCreateInput,
    Prisma.NotificationsSubscriptionsUncheckedCreateInput
  >;
};

/**
 * NotificationsSubscriptions createMany
 */
export type NotificationsSubscriptionsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many NotificationsSubscriptions.
   */
  data: Prisma.NotificationsSubscriptionsCreateManyInput | Prisma.NotificationsSubscriptionsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * NotificationsSubscriptions createManyAndReturn
 */
export type NotificationsSubscriptionsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * The data used to create many NotificationsSubscriptions.
   */
  data: Prisma.NotificationsSubscriptionsCreateManyInput | Prisma.NotificationsSubscriptionsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * NotificationsSubscriptions update
 */
export type NotificationsSubscriptionsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * The data needed to update a NotificationsSubscriptions.
   */
  data: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateInput
  >;
  /**
   * Choose, which NotificationsSubscriptions to update.
   */
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
};

/**
 * NotificationsSubscriptions updateMany
 */
export type NotificationsSubscriptionsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update NotificationsSubscriptions.
   */
  data: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateManyMutationInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateManyInput
  >;
  /**
   * Filter which NotificationsSubscriptions to update
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * Limit how many NotificationsSubscriptions to update.
   */
  limit?: number;
};

/**
 * NotificationsSubscriptions updateManyAndReturn
 */
export type NotificationsSubscriptionsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * The data used to update NotificationsSubscriptions.
   */
  data: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateManyMutationInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateManyInput
  >;
  /**
   * Filter which NotificationsSubscriptions to update
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * Limit how many NotificationsSubscriptions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * NotificationsSubscriptions upsert
 */
export type NotificationsSubscriptionsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * The filter to search for the NotificationsSubscriptions to update in case it exists.
   */
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
  /**
   * In case the NotificationsSubscriptions found by the `where` argument doesn't exist, create a new NotificationsSubscriptions with this data.
   */
  create: Prisma.XOR<
    Prisma.NotificationsSubscriptionsCreateInput,
    Prisma.NotificationsSubscriptionsUncheckedCreateInput
  >;
  /**
   * In case the NotificationsSubscriptions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.NotificationsSubscriptionsUpdateInput,
    Prisma.NotificationsSubscriptionsUncheckedUpdateInput
  >;
};

/**
 * NotificationsSubscriptions delete
 */
export type NotificationsSubscriptionsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
  /**
   * Filter which NotificationsSubscriptions to delete.
   */
  where: Prisma.NotificationsSubscriptionsWhereUniqueInput;
};

/**
 * NotificationsSubscriptions deleteMany
 */
export type NotificationsSubscriptionsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which NotificationsSubscriptions to delete
   */
  where?: Prisma.NotificationsSubscriptionsWhereInput;
  /**
   * Limit how many NotificationsSubscriptions to delete.
   */
  limit?: number;
};

/**
 * NotificationsSubscriptions without action
 */
export type NotificationsSubscriptionsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the NotificationsSubscriptions
   */
  select?: Prisma.NotificationsSubscriptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationsSubscriptions
   */
  omit?: Prisma.NotificationsSubscriptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationsSubscriptionsInclude<ExtArgs> | null;
};
