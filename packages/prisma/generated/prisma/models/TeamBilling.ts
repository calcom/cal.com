/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `TeamBilling` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model TeamBilling
 *
 */
export type TeamBillingModel = runtime.Types.Result.DefaultSelection<Prisma.$TeamBillingPayload>;

export type AggregateTeamBilling = {
  _count: TeamBillingCountAggregateOutputType | null;
  _avg: TeamBillingAvgAggregateOutputType | null;
  _sum: TeamBillingSumAggregateOutputType | null;
  _min: TeamBillingMinAggregateOutputType | null;
  _max: TeamBillingMaxAggregateOutputType | null;
};

export type TeamBillingAvgAggregateOutputType = {
  teamId: number | null;
};

export type TeamBillingSumAggregateOutputType = {
  teamId: number | null;
};

export type TeamBillingMinAggregateOutputType = {
  id: string | null;
  teamId: number | null;
  subscriptionId: string | null;
  subscriptionItemId: string | null;
  customerId: string | null;
  status: string | null;
  planName: string | null;
  subscriptionStart: Date | null;
  subscriptionTrialEnd: Date | null;
  subscriptionEnd: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TeamBillingMaxAggregateOutputType = {
  id: string | null;
  teamId: number | null;
  subscriptionId: string | null;
  subscriptionItemId: string | null;
  customerId: string | null;
  status: string | null;
  planName: string | null;
  subscriptionStart: Date | null;
  subscriptionTrialEnd: Date | null;
  subscriptionEnd: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TeamBillingCountAggregateOutputType = {
  id: number;
  teamId: number;
  subscriptionId: number;
  subscriptionItemId: number;
  customerId: number;
  status: number;
  planName: number;
  subscriptionStart: number;
  subscriptionTrialEnd: number;
  subscriptionEnd: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type TeamBillingAvgAggregateInputType = {
  teamId?: true;
};

export type TeamBillingSumAggregateInputType = {
  teamId?: true;
};

export type TeamBillingMinAggregateInputType = {
  id?: true;
  teamId?: true;
  subscriptionId?: true;
  subscriptionItemId?: true;
  customerId?: true;
  status?: true;
  planName?: true;
  subscriptionStart?: true;
  subscriptionTrialEnd?: true;
  subscriptionEnd?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TeamBillingMaxAggregateInputType = {
  id?: true;
  teamId?: true;
  subscriptionId?: true;
  subscriptionItemId?: true;
  customerId?: true;
  status?: true;
  planName?: true;
  subscriptionStart?: true;
  subscriptionTrialEnd?: true;
  subscriptionEnd?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TeamBillingCountAggregateInputType = {
  id?: true;
  teamId?: true;
  subscriptionId?: true;
  subscriptionItemId?: true;
  customerId?: true;
  status?: true;
  planName?: true;
  subscriptionStart?: true;
  subscriptionTrialEnd?: true;
  subscriptionEnd?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type TeamBillingAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TeamBilling to aggregate.
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamBillings to fetch.
   */
  orderBy?: Prisma.TeamBillingOrderByWithRelationInput | Prisma.TeamBillingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TeamBillingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamBillings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamBillings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TeamBillings
   **/
  _count?: true | TeamBillingCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TeamBillingAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TeamBillingSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TeamBillingMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TeamBillingMaxAggregateInputType;
};

export type GetTeamBillingAggregateType<T extends TeamBillingAggregateArgs> = {
  [P in keyof T & keyof AggregateTeamBilling]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeamBilling[P]>
    : Prisma.GetScalarType<T[P], AggregateTeamBilling[P]>;
};

export type TeamBillingGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.TeamBillingWhereInput;
  orderBy?: Prisma.TeamBillingOrderByWithAggregationInput | Prisma.TeamBillingOrderByWithAggregationInput[];
  by: Prisma.TeamBillingScalarFieldEnum[] | Prisma.TeamBillingScalarFieldEnum;
  having?: Prisma.TeamBillingScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TeamBillingCountAggregateInputType | true;
  _avg?: TeamBillingAvgAggregateInputType;
  _sum?: TeamBillingSumAggregateInputType;
  _min?: TeamBillingMinAggregateInputType;
  _max?: TeamBillingMaxAggregateInputType;
};

export type TeamBillingGroupByOutputType = {
  id: string;
  teamId: number;
  subscriptionId: string;
  subscriptionItemId: string;
  customerId: string;
  status: string;
  planName: string;
  subscriptionStart: Date | null;
  subscriptionTrialEnd: Date | null;
  subscriptionEnd: Date | null;
  createdAt: Date;
  updatedAt: Date;
  _count: TeamBillingCountAggregateOutputType | null;
  _avg: TeamBillingAvgAggregateOutputType | null;
  _sum: TeamBillingSumAggregateOutputType | null;
  _min: TeamBillingMinAggregateOutputType | null;
  _max: TeamBillingMaxAggregateOutputType | null;
};

type GetTeamBillingGroupByPayload<T extends TeamBillingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeamBillingGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof TeamBillingGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TeamBillingGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TeamBillingGroupByOutputType[P]>;
    }
  >
>;

export type TeamBillingWhereInput = {
  AND?: Prisma.TeamBillingWhereInput | Prisma.TeamBillingWhereInput[];
  OR?: Prisma.TeamBillingWhereInput[];
  NOT?: Prisma.TeamBillingWhereInput | Prisma.TeamBillingWhereInput[];
  id?: Prisma.StringFilter<"TeamBilling"> | string;
  teamId?: Prisma.IntFilter<"TeamBilling"> | number;
  subscriptionId?: Prisma.StringFilter<"TeamBilling"> | string;
  subscriptionItemId?: Prisma.StringFilter<"TeamBilling"> | string;
  customerId?: Prisma.StringFilter<"TeamBilling"> | string;
  status?: Prisma.StringFilter<"TeamBilling"> | string;
  planName?: Prisma.StringFilter<"TeamBilling"> | string;
  subscriptionStart?: Prisma.DateTimeNullableFilter<"TeamBilling"> | Date | string | null;
  subscriptionTrialEnd?: Prisma.DateTimeNullableFilter<"TeamBilling"> | Date | string | null;
  subscriptionEnd?: Prisma.DateTimeNullableFilter<"TeamBilling"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"TeamBilling"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"TeamBilling"> | Date | string;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
};

export type TeamBillingOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  subscriptionId?: Prisma.SortOrder;
  subscriptionItemId?: Prisma.SortOrder;
  customerId?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  planName?: Prisma.SortOrder;
  subscriptionStart?: Prisma.SortOrderInput | Prisma.SortOrder;
  subscriptionTrialEnd?: Prisma.SortOrderInput | Prisma.SortOrder;
  subscriptionEnd?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  team?: Prisma.TeamOrderByWithRelationInput;
};

export type TeamBillingWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    teamId?: number;
    subscriptionId?: string;
    AND?: Prisma.TeamBillingWhereInput | Prisma.TeamBillingWhereInput[];
    OR?: Prisma.TeamBillingWhereInput[];
    NOT?: Prisma.TeamBillingWhereInput | Prisma.TeamBillingWhereInput[];
    subscriptionItemId?: Prisma.StringFilter<"TeamBilling"> | string;
    customerId?: Prisma.StringFilter<"TeamBilling"> | string;
    status?: Prisma.StringFilter<"TeamBilling"> | string;
    planName?: Prisma.StringFilter<"TeamBilling"> | string;
    subscriptionStart?: Prisma.DateTimeNullableFilter<"TeamBilling"> | Date | string | null;
    subscriptionTrialEnd?: Prisma.DateTimeNullableFilter<"TeamBilling"> | Date | string | null;
    subscriptionEnd?: Prisma.DateTimeNullableFilter<"TeamBilling"> | Date | string | null;
    createdAt?: Prisma.DateTimeFilter<"TeamBilling"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"TeamBilling"> | Date | string;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  },
  "id" | "teamId" | "subscriptionId"
>;

export type TeamBillingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  subscriptionId?: Prisma.SortOrder;
  subscriptionItemId?: Prisma.SortOrder;
  customerId?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  planName?: Prisma.SortOrder;
  subscriptionStart?: Prisma.SortOrderInput | Prisma.SortOrder;
  subscriptionTrialEnd?: Prisma.SortOrderInput | Prisma.SortOrder;
  subscriptionEnd?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.TeamBillingCountOrderByAggregateInput;
  _avg?: Prisma.TeamBillingAvgOrderByAggregateInput;
  _max?: Prisma.TeamBillingMaxOrderByAggregateInput;
  _min?: Prisma.TeamBillingMinOrderByAggregateInput;
  _sum?: Prisma.TeamBillingSumOrderByAggregateInput;
};

export type TeamBillingScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeamBillingScalarWhereWithAggregatesInput | Prisma.TeamBillingScalarWhereWithAggregatesInput[];
  OR?: Prisma.TeamBillingScalarWhereWithAggregatesInput[];
  NOT?: Prisma.TeamBillingScalarWhereWithAggregatesInput | Prisma.TeamBillingScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"TeamBilling"> | string;
  teamId?: Prisma.IntWithAggregatesFilter<"TeamBilling"> | number;
  subscriptionId?: Prisma.StringWithAggregatesFilter<"TeamBilling"> | string;
  subscriptionItemId?: Prisma.StringWithAggregatesFilter<"TeamBilling"> | string;
  customerId?: Prisma.StringWithAggregatesFilter<"TeamBilling"> | string;
  status?: Prisma.StringWithAggregatesFilter<"TeamBilling"> | string;
  planName?: Prisma.StringWithAggregatesFilter<"TeamBilling"> | string;
  subscriptionStart?: Prisma.DateTimeNullableWithAggregatesFilter<"TeamBilling"> | Date | string | null;
  subscriptionTrialEnd?: Prisma.DateTimeNullableWithAggregatesFilter<"TeamBilling"> | Date | string | null;
  subscriptionEnd?: Prisma.DateTimeNullableWithAggregatesFilter<"TeamBilling"> | Date | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TeamBilling"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TeamBilling"> | Date | string;
};

export type TeamBillingCreateInput = {
  id?: string;
  subscriptionId: string;
  subscriptionItemId: string;
  customerId: string;
  status: string;
  planName: string;
  subscriptionStart?: Date | string | null;
  subscriptionTrialEnd?: Date | string | null;
  subscriptionEnd?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  team?: Prisma.TeamCreateNestedOneWithoutTeamBillingInput;
};

export type TeamBillingUncheckedCreateInput = {
  id?: string;
  teamId: number;
  subscriptionId: string;
  subscriptionItemId: string;
  customerId: string;
  status: string;
  planName: string;
  subscriptionStart?: Date | string | null;
  subscriptionTrialEnd?: Date | string | null;
  subscriptionEnd?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TeamBillingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionId?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionItemId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerId?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  planName?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionTrialEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  team?: Prisma.TeamUpdateOneWithoutTeamBillingNestedInput;
};

export type TeamBillingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  subscriptionId?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionItemId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerId?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  planName?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionTrialEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamBillingCreateManyInput = {
  id?: string;
  teamId: number;
  subscriptionId: string;
  subscriptionItemId: string;
  customerId: string;
  status: string;
  planName: string;
  subscriptionStart?: Date | string | null;
  subscriptionTrialEnd?: Date | string | null;
  subscriptionEnd?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TeamBillingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionId?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionItemId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerId?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  planName?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionTrialEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamBillingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  subscriptionId?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionItemId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerId?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  planName?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionTrialEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamBillingNullableScalarRelationFilter = {
  is?: Prisma.TeamBillingWhereInput | null;
  isNot?: Prisma.TeamBillingWhereInput | null;
};

export type TeamBillingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  subscriptionId?: Prisma.SortOrder;
  subscriptionItemId?: Prisma.SortOrder;
  customerId?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  planName?: Prisma.SortOrder;
  subscriptionStart?: Prisma.SortOrder;
  subscriptionTrialEnd?: Prisma.SortOrder;
  subscriptionEnd?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TeamBillingAvgOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
};

export type TeamBillingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  subscriptionId?: Prisma.SortOrder;
  subscriptionItemId?: Prisma.SortOrder;
  customerId?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  planName?: Prisma.SortOrder;
  subscriptionStart?: Prisma.SortOrder;
  subscriptionTrialEnd?: Prisma.SortOrder;
  subscriptionEnd?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TeamBillingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  subscriptionId?: Prisma.SortOrder;
  subscriptionItemId?: Prisma.SortOrder;
  customerId?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  planName?: Prisma.SortOrder;
  subscriptionStart?: Prisma.SortOrder;
  subscriptionTrialEnd?: Prisma.SortOrder;
  subscriptionEnd?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TeamBillingSumOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
};

export type TeamBillingCreateNestedOneWithoutTeamInput = {
  create?: Prisma.XOR<
    Prisma.TeamBillingCreateWithoutTeamInput,
    Prisma.TeamBillingUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.TeamBillingCreateOrConnectWithoutTeamInput;
  connect?: Prisma.TeamBillingWhereUniqueInput;
};

export type TeamBillingUncheckedCreateNestedOneWithoutTeamInput = {
  create?: Prisma.XOR<
    Prisma.TeamBillingCreateWithoutTeamInput,
    Prisma.TeamBillingUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.TeamBillingCreateOrConnectWithoutTeamInput;
  connect?: Prisma.TeamBillingWhereUniqueInput;
};

export type TeamBillingUpdateOneWithoutTeamNestedInput = {
  create?: Prisma.XOR<
    Prisma.TeamBillingCreateWithoutTeamInput,
    Prisma.TeamBillingUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.TeamBillingCreateOrConnectWithoutTeamInput;
  upsert?: Prisma.TeamBillingUpsertWithoutTeamInput;
  disconnect?: Prisma.TeamBillingWhereInput | boolean;
  delete?: Prisma.TeamBillingWhereInput | boolean;
  connect?: Prisma.TeamBillingWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TeamBillingUpdateToOneWithWhereWithoutTeamInput,
      Prisma.TeamBillingUpdateWithoutTeamInput
    >,
    Prisma.TeamBillingUncheckedUpdateWithoutTeamInput
  >;
};

export type TeamBillingUncheckedUpdateOneWithoutTeamNestedInput = {
  create?: Prisma.XOR<
    Prisma.TeamBillingCreateWithoutTeamInput,
    Prisma.TeamBillingUncheckedCreateWithoutTeamInput
  >;
  connectOrCreate?: Prisma.TeamBillingCreateOrConnectWithoutTeamInput;
  upsert?: Prisma.TeamBillingUpsertWithoutTeamInput;
  disconnect?: Prisma.TeamBillingWhereInput | boolean;
  delete?: Prisma.TeamBillingWhereInput | boolean;
  connect?: Prisma.TeamBillingWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TeamBillingUpdateToOneWithWhereWithoutTeamInput,
      Prisma.TeamBillingUpdateWithoutTeamInput
    >,
    Prisma.TeamBillingUncheckedUpdateWithoutTeamInput
  >;
};

export type TeamBillingCreateWithoutTeamInput = {
  id?: string;
  subscriptionId: string;
  subscriptionItemId: string;
  customerId: string;
  status: string;
  planName: string;
  subscriptionStart?: Date | string | null;
  subscriptionTrialEnd?: Date | string | null;
  subscriptionEnd?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TeamBillingUncheckedCreateWithoutTeamInput = {
  id?: string;
  subscriptionId: string;
  subscriptionItemId: string;
  customerId: string;
  status: string;
  planName: string;
  subscriptionStart?: Date | string | null;
  subscriptionTrialEnd?: Date | string | null;
  subscriptionEnd?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TeamBillingCreateOrConnectWithoutTeamInput = {
  where: Prisma.TeamBillingWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TeamBillingCreateWithoutTeamInput,
    Prisma.TeamBillingUncheckedCreateWithoutTeamInput
  >;
};

export type TeamBillingUpsertWithoutTeamInput = {
  update: Prisma.XOR<
    Prisma.TeamBillingUpdateWithoutTeamInput,
    Prisma.TeamBillingUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.TeamBillingCreateWithoutTeamInput,
    Prisma.TeamBillingUncheckedCreateWithoutTeamInput
  >;
  where?: Prisma.TeamBillingWhereInput;
};

export type TeamBillingUpdateToOneWithWhereWithoutTeamInput = {
  where?: Prisma.TeamBillingWhereInput;
  data: Prisma.XOR<
    Prisma.TeamBillingUpdateWithoutTeamInput,
    Prisma.TeamBillingUncheckedUpdateWithoutTeamInput
  >;
};

export type TeamBillingUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionId?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionItemId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerId?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  planName?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionTrialEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamBillingUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionId?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionItemId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerId?: Prisma.StringFieldUpdateOperationsInput | string;
  status?: Prisma.StringFieldUpdateOperationsInput | string;
  planName?: Prisma.StringFieldUpdateOperationsInput | string;
  subscriptionStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionTrialEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  subscriptionEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TeamBillingSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    subscriptionId?: boolean;
    subscriptionItemId?: boolean;
    customerId?: boolean;
    status?: boolean;
    planName?: boolean;
    subscriptionStart?: boolean;
    subscriptionTrialEnd?: boolean;
    subscriptionEnd?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    team?: boolean | Prisma.TeamBilling$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["teamBilling"]
>;

export type TeamBillingSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    subscriptionId?: boolean;
    subscriptionItemId?: boolean;
    customerId?: boolean;
    status?: boolean;
    planName?: boolean;
    subscriptionStart?: boolean;
    subscriptionTrialEnd?: boolean;
    subscriptionEnd?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    team?: boolean | Prisma.TeamBilling$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["teamBilling"]
>;

export type TeamBillingSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    subscriptionId?: boolean;
    subscriptionItemId?: boolean;
    customerId?: boolean;
    status?: boolean;
    planName?: boolean;
    subscriptionStart?: boolean;
    subscriptionTrialEnd?: boolean;
    subscriptionEnd?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    team?: boolean | Prisma.TeamBilling$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["teamBilling"]
>;

export type TeamBillingSelectScalar = {
  id?: boolean;
  teamId?: boolean;
  subscriptionId?: boolean;
  subscriptionItemId?: boolean;
  customerId?: boolean;
  status?: boolean;
  planName?: boolean;
  subscriptionStart?: boolean;
  subscriptionTrialEnd?: boolean;
  subscriptionEnd?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type TeamBillingOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "teamId"
  | "subscriptionId"
  | "subscriptionItemId"
  | "customerId"
  | "status"
  | "planName"
  | "subscriptionStart"
  | "subscriptionTrialEnd"
  | "subscriptionEnd"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["teamBilling"]
>;
export type TeamBillingInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamBilling$teamArgs<ExtArgs>;
};
export type TeamBillingIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamBilling$teamArgs<ExtArgs>;
};
export type TeamBillingIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamBilling$teamArgs<ExtArgs>;
};

export type $TeamBillingPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "TeamBilling";
  objects: {
    team: Prisma.$TeamPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      teamId: number;
      subscriptionId: string;
      subscriptionItemId: string;
      customerId: string;
      status: string;
      planName: string;
      subscriptionStart: Date | null;
      subscriptionTrialEnd: Date | null;
      subscriptionEnd: Date | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["teamBilling"]
  >;
  composites: {};
};

export type TeamBillingGetPayload<S extends boolean | null | undefined | TeamBillingDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$TeamBillingPayload, S>;

export type TeamBillingCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<TeamBillingFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: TeamBillingCountAggregateInputType | true;
};

export interface TeamBillingDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["TeamBilling"]; meta: { name: "TeamBilling" } };
  /**
   * Find zero or one TeamBilling that matches the filter.
   * @param {TeamBillingFindUniqueArgs} args - Arguments to find a TeamBilling
   * @example
   * // Get one TeamBilling
   * const teamBilling = await prisma.teamBilling.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeamBillingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TeamBillingFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamBillingPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TeamBilling that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeamBillingFindUniqueOrThrowArgs} args - Arguments to find a TeamBilling
   * @example
   * // Get one TeamBilling
   * const teamBilling = await prisma.teamBilling.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeamBillingFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TeamBillingFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamBillingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeamBilling that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingFindFirstArgs} args - Arguments to find a TeamBilling
   * @example
   * // Get one TeamBilling
   * const teamBilling = await prisma.teamBilling.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeamBillingFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TeamBillingFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamBillingPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TeamBilling that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingFindFirstOrThrowArgs} args - Arguments to find a TeamBilling
   * @example
   * // Get one TeamBilling
   * const teamBilling = await prisma.teamBilling.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeamBillingFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TeamBillingFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamBillingPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TeamBillings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeamBillings
   * const teamBillings = await prisma.teamBilling.findMany()
   *
   * // Get first 10 TeamBillings
   * const teamBillings = await prisma.teamBilling.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const teamBillingWithIdOnly = await prisma.teamBilling.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TeamBillingFindManyArgs>(
    args?: Prisma.SelectSubset<T, TeamBillingFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$TeamBillingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a TeamBilling.
   * @param {TeamBillingCreateArgs} args - Arguments to create a TeamBilling.
   * @example
   * // Create one TeamBilling
   * const TeamBilling = await prisma.teamBilling.create({
   *   data: {
   *     // ... data to create a TeamBilling
   *   }
   * })
   *
   */
  create<T extends TeamBillingCreateArgs>(
    args: Prisma.SelectSubset<T, TeamBillingCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<Prisma.$TeamBillingPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TeamBillings.
   * @param {TeamBillingCreateManyArgs} args - Arguments to create many TeamBillings.
   * @example
   * // Create many TeamBillings
   * const teamBilling = await prisma.teamBilling.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TeamBillingCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TeamBillingCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TeamBillings and returns the data saved in the database.
   * @param {TeamBillingCreateManyAndReturnArgs} args - Arguments to create many TeamBillings.
   * @example
   * // Create many TeamBillings
   * const teamBilling = await prisma.teamBilling.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TeamBillings and only return the `id`
   * const teamBillingWithIdOnly = await prisma.teamBilling.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TeamBillingCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TeamBillingCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamBillingPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TeamBilling.
   * @param {TeamBillingDeleteArgs} args - Arguments to delete one TeamBilling.
   * @example
   * // Delete one TeamBilling
   * const TeamBilling = await prisma.teamBilling.delete({
   *   where: {
   *     // ... filter to delete one TeamBilling
   *   }
   * })
   *
   */
  delete<T extends TeamBillingDeleteArgs>(
    args: Prisma.SelectSubset<T, TeamBillingDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<Prisma.$TeamBillingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TeamBilling.
   * @param {TeamBillingUpdateArgs} args - Arguments to update one TeamBilling.
   * @example
   * // Update one TeamBilling
   * const teamBilling = await prisma.teamBilling.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TeamBillingUpdateArgs>(
    args: Prisma.SelectSubset<T, TeamBillingUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<Prisma.$TeamBillingPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TeamBillings.
   * @param {TeamBillingDeleteManyArgs} args - Arguments to filter TeamBillings to delete.
   * @example
   * // Delete a few TeamBillings
   * const { count } = await prisma.teamBilling.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TeamBillingDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TeamBillingDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeamBillings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeamBillings
   * const teamBilling = await prisma.teamBilling.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TeamBillingUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TeamBillingUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TeamBillings and returns the data updated in the database.
   * @param {TeamBillingUpdateManyAndReturnArgs} args - Arguments to update many TeamBillings.
   * @example
   * // Update many TeamBillings
   * const teamBilling = await prisma.teamBilling.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TeamBillings and only return the `id`
   * const teamBillingWithIdOnly = await prisma.teamBilling.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TeamBillingUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TeamBillingUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamBillingPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TeamBilling.
   * @param {TeamBillingUpsertArgs} args - Arguments to update or create a TeamBilling.
   * @example
   * // Update or create a TeamBilling
   * const teamBilling = await prisma.teamBilling.upsert({
   *   create: {
   *     // ... data to create a TeamBilling
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeamBilling we want to update
   *   }
   * })
   */
  upsert<T extends TeamBillingUpsertArgs>(
    args: Prisma.SelectSubset<T, TeamBillingUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TeamBillingClient<
    runtime.Types.Result.GetResult<Prisma.$TeamBillingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TeamBillings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingCountArgs} args - Arguments to filter TeamBillings to count.
   * @example
   * // Count the number of TeamBillings
   * const count = await prisma.teamBilling.count({
   *   where: {
   *     // ... the filter for the TeamBillings we want to count
   *   }
   * })
   **/
  count<T extends TeamBillingCountArgs>(
    args?: Prisma.Subset<T, TeamBillingCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TeamBillingCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TeamBilling.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TeamBillingAggregateArgs>(
    args: Prisma.Subset<T, TeamBillingAggregateArgs>
  ): Prisma.PrismaPromise<GetTeamBillingAggregateType<T>>;

  /**
   * Group by TeamBilling.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamBillingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TeamBillingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeamBillingGroupByArgs["orderBy"] }
      : { orderBy?: TeamBillingGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, TeamBillingGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetTeamBillingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TeamBilling model
   */
  readonly fields: TeamBillingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeamBilling.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeamBillingClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  team<T extends Prisma.TeamBilling$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamBilling$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TeamBilling model
 */
export interface TeamBillingFieldRefs {
  readonly id: Prisma.FieldRef<"TeamBilling", "String">;
  readonly teamId: Prisma.FieldRef<"TeamBilling", "Int">;
  readonly subscriptionId: Prisma.FieldRef<"TeamBilling", "String">;
  readonly subscriptionItemId: Prisma.FieldRef<"TeamBilling", "String">;
  readonly customerId: Prisma.FieldRef<"TeamBilling", "String">;
  readonly status: Prisma.FieldRef<"TeamBilling", "String">;
  readonly planName: Prisma.FieldRef<"TeamBilling", "String">;
  readonly subscriptionStart: Prisma.FieldRef<"TeamBilling", "DateTime">;
  readonly subscriptionTrialEnd: Prisma.FieldRef<"TeamBilling", "DateTime">;
  readonly subscriptionEnd: Prisma.FieldRef<"TeamBilling", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"TeamBilling", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"TeamBilling", "DateTime">;
}

// Custom InputTypes
/**
 * TeamBilling findUnique
 */
export type TeamBillingFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * Filter, which TeamBilling to fetch.
   */
  where: Prisma.TeamBillingWhereUniqueInput;
};

/**
 * TeamBilling findUniqueOrThrow
 */
export type TeamBillingFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * Filter, which TeamBilling to fetch.
   */
  where: Prisma.TeamBillingWhereUniqueInput;
};

/**
 * TeamBilling findFirst
 */
export type TeamBillingFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * Filter, which TeamBilling to fetch.
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamBillings to fetch.
   */
  orderBy?: Prisma.TeamBillingOrderByWithRelationInput | Prisma.TeamBillingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeamBillings.
   */
  cursor?: Prisma.TeamBillingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamBillings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamBillings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeamBillings.
   */
  distinct?: Prisma.TeamBillingScalarFieldEnum | Prisma.TeamBillingScalarFieldEnum[];
};

/**
 * TeamBilling findFirstOrThrow
 */
export type TeamBillingFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * Filter, which TeamBilling to fetch.
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamBillings to fetch.
   */
  orderBy?: Prisma.TeamBillingOrderByWithRelationInput | Prisma.TeamBillingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TeamBillings.
   */
  cursor?: Prisma.TeamBillingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamBillings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamBillings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TeamBillings.
   */
  distinct?: Prisma.TeamBillingScalarFieldEnum | Prisma.TeamBillingScalarFieldEnum[];
};

/**
 * TeamBilling findMany
 */
export type TeamBillingFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * Filter, which TeamBillings to fetch.
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TeamBillings to fetch.
   */
  orderBy?: Prisma.TeamBillingOrderByWithRelationInput | Prisma.TeamBillingOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TeamBillings.
   */
  cursor?: Prisma.TeamBillingWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TeamBillings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TeamBillings.
   */
  skip?: number;
  distinct?: Prisma.TeamBillingScalarFieldEnum | Prisma.TeamBillingScalarFieldEnum[];
};

/**
 * TeamBilling create
 */
export type TeamBillingCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * The data needed to create a TeamBilling.
   */
  data: Prisma.XOR<Prisma.TeamBillingCreateInput, Prisma.TeamBillingUncheckedCreateInput>;
};

/**
 * TeamBilling createMany
 */
export type TeamBillingCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many TeamBillings.
   */
  data: Prisma.TeamBillingCreateManyInput | Prisma.TeamBillingCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TeamBilling createManyAndReturn
 */
export type TeamBillingCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * The data used to create many TeamBillings.
   */
  data: Prisma.TeamBillingCreateManyInput | Prisma.TeamBillingCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TeamBilling update
 */
export type TeamBillingUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * The data needed to update a TeamBilling.
   */
  data: Prisma.XOR<Prisma.TeamBillingUpdateInput, Prisma.TeamBillingUncheckedUpdateInput>;
  /**
   * Choose, which TeamBilling to update.
   */
  where: Prisma.TeamBillingWhereUniqueInput;
};

/**
 * TeamBilling updateMany
 */
export type TeamBillingUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update TeamBillings.
   */
  data: Prisma.XOR<Prisma.TeamBillingUpdateManyMutationInput, Prisma.TeamBillingUncheckedUpdateManyInput>;
  /**
   * Filter which TeamBillings to update
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * Limit how many TeamBillings to update.
   */
  limit?: number;
};

/**
 * TeamBilling updateManyAndReturn
 */
export type TeamBillingUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * The data used to update TeamBillings.
   */
  data: Prisma.XOR<Prisma.TeamBillingUpdateManyMutationInput, Prisma.TeamBillingUncheckedUpdateManyInput>;
  /**
   * Filter which TeamBillings to update
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * Limit how many TeamBillings to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TeamBilling upsert
 */
export type TeamBillingUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * The filter to search for the TeamBilling to update in case it exists.
   */
  where: Prisma.TeamBillingWhereUniqueInput;
  /**
   * In case the TeamBilling found by the `where` argument doesn't exist, create a new TeamBilling with this data.
   */
  create: Prisma.XOR<Prisma.TeamBillingCreateInput, Prisma.TeamBillingUncheckedCreateInput>;
  /**
   * In case the TeamBilling was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeamBillingUpdateInput, Prisma.TeamBillingUncheckedUpdateInput>;
};

/**
 * TeamBilling delete
 */
export type TeamBillingDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
  /**
   * Filter which TeamBilling to delete.
   */
  where: Prisma.TeamBillingWhereUniqueInput;
};

/**
 * TeamBilling deleteMany
 */
export type TeamBillingDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which TeamBillings to delete
   */
  where?: Prisma.TeamBillingWhereInput;
  /**
   * Limit how many TeamBillings to delete.
   */
  limit?: number;
};

/**
 * TeamBilling.team
 */
export type TeamBilling$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * TeamBilling without action
 */
export type TeamBillingDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the TeamBilling
   */
  select?: Prisma.TeamBillingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TeamBilling
   */
  omit?: Prisma.TeamBillingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamBillingInclude<ExtArgs> | null;
};
