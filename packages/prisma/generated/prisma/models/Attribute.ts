/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Attribute` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Attribute
 *
 */
export type AttributeModel = runtime.Types.Result.DefaultSelection<Prisma.$AttributePayload>;

export type AggregateAttribute = {
  _count: AttributeCountAggregateOutputType | null;
  _avg: AttributeAvgAggregateOutputType | null;
  _sum: AttributeSumAggregateOutputType | null;
  _min: AttributeMinAggregateOutputType | null;
  _max: AttributeMaxAggregateOutputType | null;
};

export type AttributeAvgAggregateOutputType = {
  teamId: number | null;
};

export type AttributeSumAggregateOutputType = {
  teamId: number | null;
};

export type AttributeMinAggregateOutputType = {
  id: string | null;
  teamId: number | null;
  type: $Enums.AttributeType | null;
  name: string | null;
  slug: string | null;
  enabled: boolean | null;
  usersCanEditRelation: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  isWeightsEnabled: boolean | null;
  isLocked: boolean | null;
};

export type AttributeMaxAggregateOutputType = {
  id: string | null;
  teamId: number | null;
  type: $Enums.AttributeType | null;
  name: string | null;
  slug: string | null;
  enabled: boolean | null;
  usersCanEditRelation: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  isWeightsEnabled: boolean | null;
  isLocked: boolean | null;
};

export type AttributeCountAggregateOutputType = {
  id: number;
  teamId: number;
  type: number;
  name: number;
  slug: number;
  enabled: number;
  usersCanEditRelation: number;
  createdAt: number;
  updatedAt: number;
  isWeightsEnabled: number;
  isLocked: number;
  _all: number;
};

export type AttributeAvgAggregateInputType = {
  teamId?: true;
};

export type AttributeSumAggregateInputType = {
  teamId?: true;
};

export type AttributeMinAggregateInputType = {
  id?: true;
  teamId?: true;
  type?: true;
  name?: true;
  slug?: true;
  enabled?: true;
  usersCanEditRelation?: true;
  createdAt?: true;
  updatedAt?: true;
  isWeightsEnabled?: true;
  isLocked?: true;
};

export type AttributeMaxAggregateInputType = {
  id?: true;
  teamId?: true;
  type?: true;
  name?: true;
  slug?: true;
  enabled?: true;
  usersCanEditRelation?: true;
  createdAt?: true;
  updatedAt?: true;
  isWeightsEnabled?: true;
  isLocked?: true;
};

export type AttributeCountAggregateInputType = {
  id?: true;
  teamId?: true;
  type?: true;
  name?: true;
  slug?: true;
  enabled?: true;
  usersCanEditRelation?: true;
  createdAt?: true;
  updatedAt?: true;
  isWeightsEnabled?: true;
  isLocked?: true;
  _all?: true;
};

export type AttributeAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Attribute to aggregate.
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attributes to fetch.
   */
  orderBy?: Prisma.AttributeOrderByWithRelationInput | Prisma.AttributeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AttributeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attributes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attributes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Attributes
   **/
  _count?: true | AttributeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AttributeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AttributeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AttributeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AttributeMaxAggregateInputType;
};

export type GetAttributeAggregateType<T extends AttributeAggregateArgs> = {
  [P in keyof T & keyof AggregateAttribute]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAttribute[P]>
    : Prisma.GetScalarType<T[P], AggregateAttribute[P]>;
};

export type AttributeGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AttributeWhereInput;
  orderBy?: Prisma.AttributeOrderByWithAggregationInput | Prisma.AttributeOrderByWithAggregationInput[];
  by: Prisma.AttributeScalarFieldEnum[] | Prisma.AttributeScalarFieldEnum;
  having?: Prisma.AttributeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AttributeCountAggregateInputType | true;
  _avg?: AttributeAvgAggregateInputType;
  _sum?: AttributeSumAggregateInputType;
  _min?: AttributeMinAggregateInputType;
  _max?: AttributeMaxAggregateInputType;
};

export type AttributeGroupByOutputType = {
  id: string;
  teamId: number;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled: boolean;
  usersCanEditRelation: boolean;
  createdAt: Date;
  updatedAt: Date;
  isWeightsEnabled: boolean;
  isLocked: boolean;
  _count: AttributeCountAggregateOutputType | null;
  _avg: AttributeAvgAggregateOutputType | null;
  _sum: AttributeSumAggregateOutputType | null;
  _min: AttributeMinAggregateOutputType | null;
  _max: AttributeMaxAggregateOutputType | null;
};

type GetAttributeGroupByPayload<T extends AttributeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AttributeGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AttributeGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AttributeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AttributeGroupByOutputType[P]>;
    }
  >
>;

export type AttributeWhereInput = {
  AND?: Prisma.AttributeWhereInput | Prisma.AttributeWhereInput[];
  OR?: Prisma.AttributeWhereInput[];
  NOT?: Prisma.AttributeWhereInput | Prisma.AttributeWhereInput[];
  id?: Prisma.StringFilter<"Attribute"> | string;
  teamId?: Prisma.IntFilter<"Attribute"> | number;
  type?: Prisma.EnumAttributeTypeFilter<"Attribute"> | $Enums.AttributeType;
  name?: Prisma.StringFilter<"Attribute"> | string;
  slug?: Prisma.StringFilter<"Attribute"> | string;
  enabled?: Prisma.BoolFilter<"Attribute"> | boolean;
  usersCanEditRelation?: Prisma.BoolFilter<"Attribute"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"Attribute"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Attribute"> | Date | string;
  isWeightsEnabled?: Prisma.BoolFilter<"Attribute"> | boolean;
  isLocked?: Prisma.BoolFilter<"Attribute"> | boolean;
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  options?: Prisma.AttributeOptionListRelationFilter;
};

export type AttributeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  usersCanEditRelation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  isWeightsEnabled?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  team?: Prisma.TeamOrderByWithRelationInput;
  options?: Prisma.AttributeOptionOrderByRelationAggregateInput;
};

export type AttributeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    teamId_slug?: Prisma.AttributeTeamIdSlugCompoundUniqueInput;
    AND?: Prisma.AttributeWhereInput | Prisma.AttributeWhereInput[];
    OR?: Prisma.AttributeWhereInput[];
    NOT?: Prisma.AttributeWhereInput | Prisma.AttributeWhereInput[];
    teamId?: Prisma.IntFilter<"Attribute"> | number;
    type?: Prisma.EnumAttributeTypeFilter<"Attribute"> | $Enums.AttributeType;
    name?: Prisma.StringFilter<"Attribute"> | string;
    slug?: Prisma.StringFilter<"Attribute"> | string;
    enabled?: Prisma.BoolFilter<"Attribute"> | boolean;
    usersCanEditRelation?: Prisma.BoolFilter<"Attribute"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"Attribute"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Attribute"> | Date | string;
    isWeightsEnabled?: Prisma.BoolFilter<"Attribute"> | boolean;
    isLocked?: Prisma.BoolFilter<"Attribute"> | boolean;
    team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
    options?: Prisma.AttributeOptionListRelationFilter;
  },
  "id" | "teamId_slug"
>;

export type AttributeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  usersCanEditRelation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  isWeightsEnabled?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  _count?: Prisma.AttributeCountOrderByAggregateInput;
  _avg?: Prisma.AttributeAvgOrderByAggregateInput;
  _max?: Prisma.AttributeMaxOrderByAggregateInput;
  _min?: Prisma.AttributeMinOrderByAggregateInput;
  _sum?: Prisma.AttributeSumOrderByAggregateInput;
};

export type AttributeScalarWhereWithAggregatesInput = {
  AND?: Prisma.AttributeScalarWhereWithAggregatesInput | Prisma.AttributeScalarWhereWithAggregatesInput[];
  OR?: Prisma.AttributeScalarWhereWithAggregatesInput[];
  NOT?: Prisma.AttributeScalarWhereWithAggregatesInput | Prisma.AttributeScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Attribute"> | string;
  teamId?: Prisma.IntWithAggregatesFilter<"Attribute"> | number;
  type?: Prisma.EnumAttributeTypeWithAggregatesFilter<"Attribute"> | $Enums.AttributeType;
  name?: Prisma.StringWithAggregatesFilter<"Attribute"> | string;
  slug?: Prisma.StringWithAggregatesFilter<"Attribute"> | string;
  enabled?: Prisma.BoolWithAggregatesFilter<"Attribute"> | boolean;
  usersCanEditRelation?: Prisma.BoolWithAggregatesFilter<"Attribute"> | boolean;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Attribute"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Attribute"> | Date | string;
  isWeightsEnabled?: Prisma.BoolWithAggregatesFilter<"Attribute"> | boolean;
  isLocked?: Prisma.BoolWithAggregatesFilter<"Attribute"> | boolean;
};

export type AttributeCreateInput = {
  id?: string;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
  team: Prisma.TeamCreateNestedOneWithoutAttributesInput;
  options?: Prisma.AttributeOptionCreateNestedManyWithoutAttributeInput;
};

export type AttributeUncheckedCreateInput = {
  id?: string;
  teamId: number;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
  options?: Prisma.AttributeOptionUncheckedCreateNestedManyWithoutAttributeInput;
};

export type AttributeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  team?: Prisma.TeamUpdateOneRequiredWithoutAttributesNestedInput;
  options?: Prisma.AttributeOptionUpdateManyWithoutAttributeNestedInput;
};

export type AttributeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  options?: Prisma.AttributeOptionUncheckedUpdateManyWithoutAttributeNestedInput;
};

export type AttributeCreateManyInput = {
  id?: string;
  teamId: number;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
};

export type AttributeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AttributeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AttributeListRelationFilter = {
  every?: Prisma.AttributeWhereInput;
  some?: Prisma.AttributeWhereInput;
  none?: Prisma.AttributeWhereInput;
};

export type AttributeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AttributeScalarRelationFilter = {
  is?: Prisma.AttributeWhereInput;
  isNot?: Prisma.AttributeWhereInput;
};

export type AttributeTeamIdSlugCompoundUniqueInput = {
  teamId: number;
  slug: string;
};

export type AttributeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  usersCanEditRelation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  isWeightsEnabled?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
};

export type AttributeAvgOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
};

export type AttributeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  usersCanEditRelation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  isWeightsEnabled?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
};

export type AttributeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  usersCanEditRelation?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  isWeightsEnabled?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
};

export type AttributeSumOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
};

export type AttributeCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.AttributeCreateWithoutTeamInput, Prisma.AttributeUncheckedCreateWithoutTeamInput>
    | Prisma.AttributeCreateWithoutTeamInput[]
    | Prisma.AttributeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AttributeCreateOrConnectWithoutTeamInput
    | Prisma.AttributeCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.AttributeCreateManyTeamInputEnvelope;
  connect?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
};

export type AttributeUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<Prisma.AttributeCreateWithoutTeamInput, Prisma.AttributeUncheckedCreateWithoutTeamInput>
    | Prisma.AttributeCreateWithoutTeamInput[]
    | Prisma.AttributeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AttributeCreateOrConnectWithoutTeamInput
    | Prisma.AttributeCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.AttributeCreateManyTeamInputEnvelope;
  connect?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
};

export type AttributeUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AttributeCreateWithoutTeamInput, Prisma.AttributeUncheckedCreateWithoutTeamInput>
    | Prisma.AttributeCreateWithoutTeamInput[]
    | Prisma.AttributeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AttributeCreateOrConnectWithoutTeamInput
    | Prisma.AttributeCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.AttributeUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.AttributeUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.AttributeCreateManyTeamInputEnvelope;
  set?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  disconnect?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  delete?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  connect?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  update?:
    | Prisma.AttributeUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.AttributeUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.AttributeUpdateManyWithWhereWithoutTeamInput
    | Prisma.AttributeUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.AttributeScalarWhereInput | Prisma.AttributeScalarWhereInput[];
};

export type AttributeUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AttributeCreateWithoutTeamInput, Prisma.AttributeUncheckedCreateWithoutTeamInput>
    | Prisma.AttributeCreateWithoutTeamInput[]
    | Prisma.AttributeUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.AttributeCreateOrConnectWithoutTeamInput
    | Prisma.AttributeCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.AttributeUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.AttributeUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.AttributeCreateManyTeamInputEnvelope;
  set?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  disconnect?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  delete?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  connect?: Prisma.AttributeWhereUniqueInput | Prisma.AttributeWhereUniqueInput[];
  update?:
    | Prisma.AttributeUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.AttributeUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.AttributeUpdateManyWithWhereWithoutTeamInput
    | Prisma.AttributeUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.AttributeScalarWhereInput | Prisma.AttributeScalarWhereInput[];
};

export type AttributeCreateNestedOneWithoutOptionsInput = {
  create?: Prisma.XOR<
    Prisma.AttributeCreateWithoutOptionsInput,
    Prisma.AttributeUncheckedCreateWithoutOptionsInput
  >;
  connectOrCreate?: Prisma.AttributeCreateOrConnectWithoutOptionsInput;
  connect?: Prisma.AttributeWhereUniqueInput;
};

export type AttributeUpdateOneRequiredWithoutOptionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.AttributeCreateWithoutOptionsInput,
    Prisma.AttributeUncheckedCreateWithoutOptionsInput
  >;
  connectOrCreate?: Prisma.AttributeCreateOrConnectWithoutOptionsInput;
  upsert?: Prisma.AttributeUpsertWithoutOptionsInput;
  connect?: Prisma.AttributeWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AttributeUpdateToOneWithWhereWithoutOptionsInput,
      Prisma.AttributeUpdateWithoutOptionsInput
    >,
    Prisma.AttributeUncheckedUpdateWithoutOptionsInput
  >;
};

export type EnumAttributeTypeFieldUpdateOperationsInput = {
  set?: $Enums.AttributeType;
};

export type AttributeCreateWithoutTeamInput = {
  id?: string;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
  options?: Prisma.AttributeOptionCreateNestedManyWithoutAttributeInput;
};

export type AttributeUncheckedCreateWithoutTeamInput = {
  id?: string;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
  options?: Prisma.AttributeOptionUncheckedCreateNestedManyWithoutAttributeInput;
};

export type AttributeCreateOrConnectWithoutTeamInput = {
  where: Prisma.AttributeWhereUniqueInput;
  create: Prisma.XOR<Prisma.AttributeCreateWithoutTeamInput, Prisma.AttributeUncheckedCreateWithoutTeamInput>;
};

export type AttributeCreateManyTeamInputEnvelope = {
  data: Prisma.AttributeCreateManyTeamInput | Prisma.AttributeCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type AttributeUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.AttributeWhereUniqueInput;
  update: Prisma.XOR<Prisma.AttributeUpdateWithoutTeamInput, Prisma.AttributeUncheckedUpdateWithoutTeamInput>;
  create: Prisma.XOR<Prisma.AttributeCreateWithoutTeamInput, Prisma.AttributeUncheckedCreateWithoutTeamInput>;
};

export type AttributeUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.AttributeWhereUniqueInput;
  data: Prisma.XOR<Prisma.AttributeUpdateWithoutTeamInput, Prisma.AttributeUncheckedUpdateWithoutTeamInput>;
};

export type AttributeUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.AttributeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AttributeUpdateManyMutationInput,
    Prisma.AttributeUncheckedUpdateManyWithoutTeamInput
  >;
};

export type AttributeScalarWhereInput = {
  AND?: Prisma.AttributeScalarWhereInput | Prisma.AttributeScalarWhereInput[];
  OR?: Prisma.AttributeScalarWhereInput[];
  NOT?: Prisma.AttributeScalarWhereInput | Prisma.AttributeScalarWhereInput[];
  id?: Prisma.StringFilter<"Attribute"> | string;
  teamId?: Prisma.IntFilter<"Attribute"> | number;
  type?: Prisma.EnumAttributeTypeFilter<"Attribute"> | $Enums.AttributeType;
  name?: Prisma.StringFilter<"Attribute"> | string;
  slug?: Prisma.StringFilter<"Attribute"> | string;
  enabled?: Prisma.BoolFilter<"Attribute"> | boolean;
  usersCanEditRelation?: Prisma.BoolFilter<"Attribute"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"Attribute"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Attribute"> | Date | string;
  isWeightsEnabled?: Prisma.BoolFilter<"Attribute"> | boolean;
  isLocked?: Prisma.BoolFilter<"Attribute"> | boolean;
};

export type AttributeCreateWithoutOptionsInput = {
  id?: string;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
  team: Prisma.TeamCreateNestedOneWithoutAttributesInput;
};

export type AttributeUncheckedCreateWithoutOptionsInput = {
  id?: string;
  teamId: number;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
};

export type AttributeCreateOrConnectWithoutOptionsInput = {
  where: Prisma.AttributeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AttributeCreateWithoutOptionsInput,
    Prisma.AttributeUncheckedCreateWithoutOptionsInput
  >;
};

export type AttributeUpsertWithoutOptionsInput = {
  update: Prisma.XOR<
    Prisma.AttributeUpdateWithoutOptionsInput,
    Prisma.AttributeUncheckedUpdateWithoutOptionsInput
  >;
  create: Prisma.XOR<
    Prisma.AttributeCreateWithoutOptionsInput,
    Prisma.AttributeUncheckedCreateWithoutOptionsInput
  >;
  where?: Prisma.AttributeWhereInput;
};

export type AttributeUpdateToOneWithWhereWithoutOptionsInput = {
  where?: Prisma.AttributeWhereInput;
  data: Prisma.XOR<
    Prisma.AttributeUpdateWithoutOptionsInput,
    Prisma.AttributeUncheckedUpdateWithoutOptionsInput
  >;
};

export type AttributeUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  team?: Prisma.TeamUpdateOneRequiredWithoutAttributesNestedInput;
};

export type AttributeUncheckedUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AttributeCreateManyTeamInput = {
  id?: string;
  type: $Enums.AttributeType;
  name: string;
  slug: string;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
};

export type AttributeUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  options?: Prisma.AttributeOptionUpdateManyWithoutAttributeNestedInput;
};

export type AttributeUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  options?: Prisma.AttributeOptionUncheckedUpdateManyWithoutAttributeNestedInput;
};

export type AttributeUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?: Prisma.EnumAttributeTypeFieldUpdateOperationsInput | $Enums.AttributeType;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  usersCanEditRelation?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  isWeightsEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

/**
 * Count Type AttributeCountOutputType
 */

export type AttributeCountOutputType = {
  options: number;
};

export type AttributeCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  options?: boolean | AttributeCountOutputTypeCountOptionsArgs;
};

/**
 * AttributeCountOutputType without action
 */
export type AttributeCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AttributeCountOutputType
   */
  select?: Prisma.AttributeCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AttributeCountOutputType without action
 */
export type AttributeCountOutputTypeCountOptionsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AttributeOptionWhereInput;
};

export type AttributeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    type?: boolean;
    name?: boolean;
    slug?: boolean;
    enabled?: boolean;
    usersCanEditRelation?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    isWeightsEnabled?: boolean;
    isLocked?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
    options?: boolean | Prisma.Attribute$optionsArgs<ExtArgs>;
    _count?: boolean | Prisma.AttributeCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["attribute"]
>;

export type AttributeSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    type?: boolean;
    name?: boolean;
    slug?: boolean;
    enabled?: boolean;
    usersCanEditRelation?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    isWeightsEnabled?: boolean;
    isLocked?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["attribute"]
>;

export type AttributeSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    type?: boolean;
    name?: boolean;
    slug?: boolean;
    enabled?: boolean;
    usersCanEditRelation?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    isWeightsEnabled?: boolean;
    isLocked?: boolean;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["attribute"]
>;

export type AttributeSelectScalar = {
  id?: boolean;
  teamId?: boolean;
  type?: boolean;
  name?: boolean;
  slug?: boolean;
  enabled?: boolean;
  usersCanEditRelation?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  isWeightsEnabled?: boolean;
  isLocked?: boolean;
};

export type AttributeOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "teamId"
  | "type"
  | "name"
  | "slug"
  | "enabled"
  | "usersCanEditRelation"
  | "createdAt"
  | "updatedAt"
  | "isWeightsEnabled"
  | "isLocked",
  ExtArgs["result"]["attribute"]
>;
export type AttributeInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  options?: boolean | Prisma.Attribute$optionsArgs<ExtArgs>;
  _count?: boolean | Prisma.AttributeCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AttributeIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type AttributeIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};

export type $AttributePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Attribute";
  objects: {
    team: Prisma.$TeamPayload<ExtArgs>;
    options: Prisma.$AttributeOptionPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      teamId: number;
      type: $Enums.AttributeType;
      name: string;
      slug: string;
      enabled: boolean;
      usersCanEditRelation: boolean;
      createdAt: Date;
      updatedAt: Date;
      isWeightsEnabled: boolean;
      isLocked: boolean;
    },
    ExtArgs["result"]["attribute"]
  >;
  composites: {};
};

export type AttributeGetPayload<S extends boolean | null | undefined | AttributeDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AttributePayload, S>;

export type AttributeCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AttributeFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AttributeCountAggregateInputType | true;
};

export interface AttributeDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Attribute"]; meta: { name: "Attribute" } };
  /**
   * Find zero or one Attribute that matches the filter.
   * @param {AttributeFindUniqueArgs} args - Arguments to find a Attribute
   * @example
   * // Get one Attribute
   * const attribute = await prisma.attribute.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AttributeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AttributeFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttributePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Attribute that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AttributeFindUniqueOrThrowArgs} args - Arguments to find a Attribute
   * @example
   * // Get one Attribute
   * const attribute = await prisma.attribute.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AttributeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AttributeFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttributePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Attribute that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeFindFirstArgs} args - Arguments to find a Attribute
   * @example
   * // Get one Attribute
   * const attribute = await prisma.attribute.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AttributeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AttributeFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttributePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Attribute that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeFindFirstOrThrowArgs} args - Arguments to find a Attribute
   * @example
   * // Get one Attribute
   * const attribute = await prisma.attribute.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AttributeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AttributeFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttributePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Attributes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Attributes
   * const attributes = await prisma.attribute.findMany()
   *
   * // Get first 10 Attributes
   * const attributes = await prisma.attribute.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const attributeWithIdOnly = await prisma.attribute.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AttributeFindManyArgs>(
    args?: Prisma.SelectSubset<T, AttributeFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Attribute.
   * @param {AttributeCreateArgs} args - Arguments to create a Attribute.
   * @example
   * // Create one Attribute
   * const Attribute = await prisma.attribute.create({
   *   data: {
   *     // ... data to create a Attribute
   *   }
   * })
   *
   */
  create<T extends AttributeCreateArgs>(
    args: Prisma.SelectSubset<T, AttributeCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Attributes.
   * @param {AttributeCreateManyArgs} args - Arguments to create many Attributes.
   * @example
   * // Create many Attributes
   * const attribute = await prisma.attribute.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AttributeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AttributeCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Attributes and returns the data saved in the database.
   * @param {AttributeCreateManyAndReturnArgs} args - Arguments to create many Attributes.
   * @example
   * // Create many Attributes
   * const attribute = await prisma.attribute.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Attributes and only return the `id`
   * const attributeWithIdOnly = await prisma.attribute.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AttributeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AttributeCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AttributePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Attribute.
   * @param {AttributeDeleteArgs} args - Arguments to delete one Attribute.
   * @example
   * // Delete one Attribute
   * const Attribute = await prisma.attribute.delete({
   *   where: {
   *     // ... filter to delete one Attribute
   *   }
   * })
   *
   */
  delete<T extends AttributeDeleteArgs>(
    args: Prisma.SelectSubset<T, AttributeDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Attribute.
   * @param {AttributeUpdateArgs} args - Arguments to update one Attribute.
   * @example
   * // Update one Attribute
   * const attribute = await prisma.attribute.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AttributeUpdateArgs>(
    args: Prisma.SelectSubset<T, AttributeUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Attributes.
   * @param {AttributeDeleteManyArgs} args - Arguments to filter Attributes to delete.
   * @example
   * // Delete a few Attributes
   * const { count } = await prisma.attribute.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AttributeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AttributeDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Attributes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Attributes
   * const attribute = await prisma.attribute.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AttributeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AttributeUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Attributes and returns the data updated in the database.
   * @param {AttributeUpdateManyAndReturnArgs} args - Arguments to update many Attributes.
   * @example
   * // Update many Attributes
   * const attribute = await prisma.attribute.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Attributes and only return the `id`
   * const attributeWithIdOnly = await prisma.attribute.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AttributeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AttributeUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AttributePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Attribute.
   * @param {AttributeUpsertArgs} args - Arguments to update or create a Attribute.
   * @example
   * // Update or create a Attribute
   * const attribute = await prisma.attribute.upsert({
   *   create: {
   *     // ... data to create a Attribute
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Attribute we want to update
   *   }
   * })
   */
  upsert<T extends AttributeUpsertArgs>(
    args: Prisma.SelectSubset<T, AttributeUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AttributeClient<
    runtime.Types.Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Attributes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeCountArgs} args - Arguments to filter Attributes to count.
   * @example
   * // Count the number of Attributes
   * const count = await prisma.attribute.count({
   *   where: {
   *     // ... the filter for the Attributes we want to count
   *   }
   * })
   **/
  count<T extends AttributeCountArgs>(
    args?: Prisma.Subset<T, AttributeCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AttributeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Attribute.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AttributeAggregateArgs>(
    args: Prisma.Subset<T, AttributeAggregateArgs>
  ): Prisma.PrismaPromise<GetAttributeAggregateType<T>>;

  /**
   * Group by Attribute.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttributeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AttributeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AttributeGroupByArgs["orderBy"] }
      : { orderBy?: AttributeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AttributeGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Attribute model
   */
  readonly fields: AttributeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Attribute.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AttributeClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  options<T extends Prisma.Attribute$optionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Attribute$optionsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AttributeOptionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Attribute model
 */
export interface AttributeFieldRefs {
  readonly id: Prisma.FieldRef<"Attribute", "String">;
  readonly teamId: Prisma.FieldRef<"Attribute", "Int">;
  readonly type: Prisma.FieldRef<"Attribute", "AttributeType">;
  readonly name: Prisma.FieldRef<"Attribute", "String">;
  readonly slug: Prisma.FieldRef<"Attribute", "String">;
  readonly enabled: Prisma.FieldRef<"Attribute", "Boolean">;
  readonly usersCanEditRelation: Prisma.FieldRef<"Attribute", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"Attribute", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Attribute", "DateTime">;
  readonly isWeightsEnabled: Prisma.FieldRef<"Attribute", "Boolean">;
  readonly isLocked: Prisma.FieldRef<"Attribute", "Boolean">;
}

// Custom InputTypes
/**
 * Attribute findUnique
 */
export type AttributeFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * Filter, which Attribute to fetch.
   */
  where: Prisma.AttributeWhereUniqueInput;
};

/**
 * Attribute findUniqueOrThrow
 */
export type AttributeFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * Filter, which Attribute to fetch.
   */
  where: Prisma.AttributeWhereUniqueInput;
};

/**
 * Attribute findFirst
 */
export type AttributeFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * Filter, which Attribute to fetch.
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attributes to fetch.
   */
  orderBy?: Prisma.AttributeOrderByWithRelationInput | Prisma.AttributeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Attributes.
   */
  cursor?: Prisma.AttributeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attributes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attributes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Attributes.
   */
  distinct?: Prisma.AttributeScalarFieldEnum | Prisma.AttributeScalarFieldEnum[];
};

/**
 * Attribute findFirstOrThrow
 */
export type AttributeFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * Filter, which Attribute to fetch.
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attributes to fetch.
   */
  orderBy?: Prisma.AttributeOrderByWithRelationInput | Prisma.AttributeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Attributes.
   */
  cursor?: Prisma.AttributeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attributes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attributes.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Attributes.
   */
  distinct?: Prisma.AttributeScalarFieldEnum | Prisma.AttributeScalarFieldEnum[];
};

/**
 * Attribute findMany
 */
export type AttributeFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * Filter, which Attributes to fetch.
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attributes to fetch.
   */
  orderBy?: Prisma.AttributeOrderByWithRelationInput | Prisma.AttributeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Attributes.
   */
  cursor?: Prisma.AttributeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attributes from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attributes.
   */
  skip?: number;
  distinct?: Prisma.AttributeScalarFieldEnum | Prisma.AttributeScalarFieldEnum[];
};

/**
 * Attribute create
 */
export type AttributeCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * The data needed to create a Attribute.
   */
  data: Prisma.XOR<Prisma.AttributeCreateInput, Prisma.AttributeUncheckedCreateInput>;
};

/**
 * Attribute createMany
 */
export type AttributeCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Attributes.
   */
  data: Prisma.AttributeCreateManyInput | Prisma.AttributeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Attribute createManyAndReturn
 */
export type AttributeCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * The data used to create many Attributes.
   */
  data: Prisma.AttributeCreateManyInput | Prisma.AttributeCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Attribute update
 */
export type AttributeUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * The data needed to update a Attribute.
   */
  data: Prisma.XOR<Prisma.AttributeUpdateInput, Prisma.AttributeUncheckedUpdateInput>;
  /**
   * Choose, which Attribute to update.
   */
  where: Prisma.AttributeWhereUniqueInput;
};

/**
 * Attribute updateMany
 */
export type AttributeUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Attributes.
   */
  data: Prisma.XOR<Prisma.AttributeUpdateManyMutationInput, Prisma.AttributeUncheckedUpdateManyInput>;
  /**
   * Filter which Attributes to update
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * Limit how many Attributes to update.
   */
  limit?: number;
};

/**
 * Attribute updateManyAndReturn
 */
export type AttributeUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * The data used to update Attributes.
   */
  data: Prisma.XOR<Prisma.AttributeUpdateManyMutationInput, Prisma.AttributeUncheckedUpdateManyInput>;
  /**
   * Filter which Attributes to update
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * Limit how many Attributes to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Attribute upsert
 */
export type AttributeUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * The filter to search for the Attribute to update in case it exists.
   */
  where: Prisma.AttributeWhereUniqueInput;
  /**
   * In case the Attribute found by the `where` argument doesn't exist, create a new Attribute with this data.
   */
  create: Prisma.XOR<Prisma.AttributeCreateInput, Prisma.AttributeUncheckedCreateInput>;
  /**
   * In case the Attribute was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AttributeUpdateInput, Prisma.AttributeUncheckedUpdateInput>;
};

/**
 * Attribute delete
 */
export type AttributeDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
  /**
   * Filter which Attribute to delete.
   */
  where: Prisma.AttributeWhereUniqueInput;
};

/**
 * Attribute deleteMany
 */
export type AttributeDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Attributes to delete
   */
  where?: Prisma.AttributeWhereInput;
  /**
   * Limit how many Attributes to delete.
   */
  limit?: number;
};

/**
 * Attribute.options
 */
export type Attribute$optionsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AttributeOption
   */
  select?: Prisma.AttributeOptionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AttributeOption
   */
  omit?: Prisma.AttributeOptionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeOptionInclude<ExtArgs> | null;
  where?: Prisma.AttributeOptionWhereInput;
  orderBy?: Prisma.AttributeOptionOrderByWithRelationInput | Prisma.AttributeOptionOrderByWithRelationInput[];
  cursor?: Prisma.AttributeOptionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.AttributeOptionScalarFieldEnum | Prisma.AttributeOptionScalarFieldEnum[];
};

/**
 * Attribute without action
 */
export type AttributeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attribute
   */
  select?: Prisma.AttributeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attribute
   */
  omit?: Prisma.AttributeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeInclude<ExtArgs> | null;
};
