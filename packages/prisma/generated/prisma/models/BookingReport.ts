/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `BookingReport` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BookingReport
 *
 */
export type BookingReportModel = runtime.Types.Result.DefaultSelection<Prisma.$BookingReportPayload>;

export type AggregateBookingReport = {
  _count: BookingReportCountAggregateOutputType | null;
  _avg: BookingReportAvgAggregateOutputType | null;
  _sum: BookingReportSumAggregateOutputType | null;
  _min: BookingReportMinAggregateOutputType | null;
  _max: BookingReportMaxAggregateOutputType | null;
};

export type BookingReportAvgAggregateOutputType = {
  reportedById: number | null;
  organizationId: number | null;
};

export type BookingReportSumAggregateOutputType = {
  reportedById: number | null;
  organizationId: number | null;
};

export type BookingReportMinAggregateOutputType = {
  id: string | null;
  bookingUid: string | null;
  bookerEmail: string | null;
  reportedById: number | null;
  organizationId: number | null;
  reason: $Enums.BookingReportReason | null;
  description: string | null;
  cancelled: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  watchlistId: string | null;
};

export type BookingReportMaxAggregateOutputType = {
  id: string | null;
  bookingUid: string | null;
  bookerEmail: string | null;
  reportedById: number | null;
  organizationId: number | null;
  reason: $Enums.BookingReportReason | null;
  description: string | null;
  cancelled: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  watchlistId: string | null;
};

export type BookingReportCountAggregateOutputType = {
  id: number;
  bookingUid: number;
  bookerEmail: number;
  reportedById: number;
  organizationId: number;
  reason: number;
  description: number;
  cancelled: number;
  createdAt: number;
  updatedAt: number;
  watchlistId: number;
  _all: number;
};

export type BookingReportAvgAggregateInputType = {
  reportedById?: true;
  organizationId?: true;
};

export type BookingReportSumAggregateInputType = {
  reportedById?: true;
  organizationId?: true;
};

export type BookingReportMinAggregateInputType = {
  id?: true;
  bookingUid?: true;
  bookerEmail?: true;
  reportedById?: true;
  organizationId?: true;
  reason?: true;
  description?: true;
  cancelled?: true;
  createdAt?: true;
  updatedAt?: true;
  watchlistId?: true;
};

export type BookingReportMaxAggregateInputType = {
  id?: true;
  bookingUid?: true;
  bookerEmail?: true;
  reportedById?: true;
  organizationId?: true;
  reason?: true;
  description?: true;
  cancelled?: true;
  createdAt?: true;
  updatedAt?: true;
  watchlistId?: true;
};

export type BookingReportCountAggregateInputType = {
  id?: true;
  bookingUid?: true;
  bookerEmail?: true;
  reportedById?: true;
  organizationId?: true;
  reason?: true;
  description?: true;
  cancelled?: true;
  createdAt?: true;
  updatedAt?: true;
  watchlistId?: true;
  _all?: true;
};

export type BookingReportAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingReport to aggregate.
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingReports to fetch.
   */
  orderBy?: Prisma.BookingReportOrderByWithRelationInput | Prisma.BookingReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookingReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingReports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingReports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BookingReports
   **/
  _count?: true | BookingReportCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BookingReportAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BookingReportSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookingReportMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookingReportMaxAggregateInputType;
};

export type GetBookingReportAggregateType<T extends BookingReportAggregateArgs> = {
  [P in keyof T & keyof AggregateBookingReport]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookingReport[P]>
    : Prisma.GetScalarType<T[P], AggregateBookingReport[P]>;
};

export type BookingReportGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.BookingReportWhereInput;
  orderBy?:
    | Prisma.BookingReportOrderByWithAggregationInput
    | Prisma.BookingReportOrderByWithAggregationInput[];
  by: Prisma.BookingReportScalarFieldEnum[] | Prisma.BookingReportScalarFieldEnum;
  having?: Prisma.BookingReportScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookingReportCountAggregateInputType | true;
  _avg?: BookingReportAvgAggregateInputType;
  _sum?: BookingReportSumAggregateInputType;
  _min?: BookingReportMinAggregateInputType;
  _max?: BookingReportMaxAggregateInputType;
};

export type BookingReportGroupByOutputType = {
  id: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById: number | null;
  organizationId: number | null;
  reason: $Enums.BookingReportReason;
  description: string | null;
  cancelled: boolean;
  createdAt: Date;
  updatedAt: Date;
  watchlistId: string | null;
  _count: BookingReportCountAggregateOutputType | null;
  _avg: BookingReportAvgAggregateOutputType | null;
  _sum: BookingReportSumAggregateOutputType | null;
  _min: BookingReportMinAggregateOutputType | null;
  _max: BookingReportMaxAggregateOutputType | null;
};

type GetBookingReportGroupByPayload<T extends BookingReportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BookingReportGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof BookingReportGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BookingReportGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BookingReportGroupByOutputType[P]>;
    }
  >
>;

export type BookingReportWhereInput = {
  AND?: Prisma.BookingReportWhereInput | Prisma.BookingReportWhereInput[];
  OR?: Prisma.BookingReportWhereInput[];
  NOT?: Prisma.BookingReportWhereInput | Prisma.BookingReportWhereInput[];
  id?: Prisma.UuidFilter<"BookingReport"> | string;
  bookingUid?: Prisma.StringFilter<"BookingReport"> | string;
  bookerEmail?: Prisma.StringFilter<"BookingReport"> | string;
  reportedById?: Prisma.IntNullableFilter<"BookingReport"> | number | null;
  organizationId?: Prisma.IntNullableFilter<"BookingReport"> | number | null;
  reason?: Prisma.EnumBookingReportReasonFilter<"BookingReport"> | $Enums.BookingReportReason;
  description?: Prisma.StringNullableFilter<"BookingReport"> | string | null;
  cancelled?: Prisma.BoolFilter<"BookingReport"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"BookingReport"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"BookingReport"> | Date | string;
  watchlistId?: Prisma.UuidNullableFilter<"BookingReport"> | string | null;
  booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
  reportedBy?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  organization?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  watchlist?: Prisma.XOR<Prisma.WatchlistNullableScalarRelationFilter, Prisma.WatchlistWhereInput> | null;
};

export type BookingReportOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  bookerEmail?: Prisma.SortOrder;
  reportedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  organizationId?: Prisma.SortOrderInput | Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  cancelled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrderInput | Prisma.SortOrder;
  booking?: Prisma.BookingOrderByWithRelationInput;
  reportedBy?: Prisma.UserOrderByWithRelationInput;
  organization?: Prisma.TeamOrderByWithRelationInput;
  watchlist?: Prisma.WatchlistOrderByWithRelationInput;
};

export type BookingReportWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    bookingUid?: string;
    AND?: Prisma.BookingReportWhereInput | Prisma.BookingReportWhereInput[];
    OR?: Prisma.BookingReportWhereInput[];
    NOT?: Prisma.BookingReportWhereInput | Prisma.BookingReportWhereInput[];
    bookerEmail?: Prisma.StringFilter<"BookingReport"> | string;
    reportedById?: Prisma.IntNullableFilter<"BookingReport"> | number | null;
    organizationId?: Prisma.IntNullableFilter<"BookingReport"> | number | null;
    reason?: Prisma.EnumBookingReportReasonFilter<"BookingReport"> | $Enums.BookingReportReason;
    description?: Prisma.StringNullableFilter<"BookingReport"> | string | null;
    cancelled?: Prisma.BoolFilter<"BookingReport"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"BookingReport"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"BookingReport"> | Date | string;
    watchlistId?: Prisma.UuidNullableFilter<"BookingReport"> | string | null;
    booking?: Prisma.XOR<Prisma.BookingScalarRelationFilter, Prisma.BookingWhereInput>;
    reportedBy?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    organization?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
    watchlist?: Prisma.XOR<Prisma.WatchlistNullableScalarRelationFilter, Prisma.WatchlistWhereInput> | null;
  },
  "id" | "bookingUid"
>;

export type BookingReportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  bookerEmail?: Prisma.SortOrder;
  reportedById?: Prisma.SortOrderInput | Prisma.SortOrder;
  organizationId?: Prisma.SortOrderInput | Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  cancelled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.BookingReportCountOrderByAggregateInput;
  _avg?: Prisma.BookingReportAvgOrderByAggregateInput;
  _max?: Prisma.BookingReportMaxOrderByAggregateInput;
  _min?: Prisma.BookingReportMinOrderByAggregateInput;
  _sum?: Prisma.BookingReportSumOrderByAggregateInput;
};

export type BookingReportScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BookingReportScalarWhereWithAggregatesInput
    | Prisma.BookingReportScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookingReportScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BookingReportScalarWhereWithAggregatesInput
    | Prisma.BookingReportScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<"BookingReport"> | string;
  bookingUid?: Prisma.StringWithAggregatesFilter<"BookingReport"> | string;
  bookerEmail?: Prisma.StringWithAggregatesFilter<"BookingReport"> | string;
  reportedById?: Prisma.IntNullableWithAggregatesFilter<"BookingReport"> | number | null;
  organizationId?: Prisma.IntNullableWithAggregatesFilter<"BookingReport"> | number | null;
  reason?: Prisma.EnumBookingReportReasonWithAggregatesFilter<"BookingReport"> | $Enums.BookingReportReason;
  description?: Prisma.StringNullableWithAggregatesFilter<"BookingReport"> | string | null;
  cancelled?: Prisma.BoolWithAggregatesFilter<"BookingReport"> | boolean;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BookingReport"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"BookingReport"> | Date | string;
  watchlistId?: Prisma.UuidNullableWithAggregatesFilter<"BookingReport"> | string | null;
};

export type BookingReportCreateInput = {
  id?: string;
  bookerEmail: string;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  booking: Prisma.BookingCreateNestedOneWithoutReportInput;
  reportedBy?: Prisma.UserCreateNestedOneWithoutReportedBookingsInput;
  organization?: Prisma.TeamCreateNestedOneWithoutBookingReportsInput;
  watchlist?: Prisma.WatchlistCreateNestedOneWithoutBookingReportsInput;
};

export type BookingReportUncheckedCreateInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById?: number | null;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  booking?: Prisma.BookingUpdateOneRequiredWithoutReportNestedInput;
  reportedBy?: Prisma.UserUpdateOneWithoutReportedBookingsNestedInput;
  organization?: Prisma.TeamUpdateOneWithoutBookingReportsNestedInput;
  watchlist?: Prisma.WatchlistUpdateOneWithoutBookingReportsNestedInput;
};

export type BookingReportUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportCreateManyInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById?: number | null;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookingReportUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportListRelationFilter = {
  every?: Prisma.BookingReportWhereInput;
  some?: Prisma.BookingReportWhereInput;
  none?: Prisma.BookingReportWhereInput;
};

export type BookingReportOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type BookingReportNullableScalarRelationFilter = {
  is?: Prisma.BookingReportWhereInput | null;
  isNot?: Prisma.BookingReportWhereInput | null;
};

export type BookingReportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  bookerEmail?: Prisma.SortOrder;
  reportedById?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  cancelled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
};

export type BookingReportAvgOrderByAggregateInput = {
  reportedById?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type BookingReportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  bookerEmail?: Prisma.SortOrder;
  reportedById?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  cancelled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
};

export type BookingReportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  bookerEmail?: Prisma.SortOrder;
  reportedById?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  cancelled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
};

export type BookingReportSumOrderByAggregateInput = {
  reportedById?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type BookingReportCreateNestedManyWithoutReportedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutReportedByInput,
        Prisma.BookingReportUncheckedCreateWithoutReportedByInput
      >
    | Prisma.BookingReportCreateWithoutReportedByInput[]
    | Prisma.BookingReportUncheckedCreateWithoutReportedByInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput[];
  createMany?: Prisma.BookingReportCreateManyReportedByInputEnvelope;
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
};

export type BookingReportUncheckedCreateNestedManyWithoutReportedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutReportedByInput,
        Prisma.BookingReportUncheckedCreateWithoutReportedByInput
      >
    | Prisma.BookingReportCreateWithoutReportedByInput[]
    | Prisma.BookingReportUncheckedCreateWithoutReportedByInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput[];
  createMany?: Prisma.BookingReportCreateManyReportedByInputEnvelope;
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
};

export type BookingReportUpdateManyWithoutReportedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutReportedByInput,
        Prisma.BookingReportUncheckedCreateWithoutReportedByInput
      >
    | Prisma.BookingReportCreateWithoutReportedByInput[]
    | Prisma.BookingReportUncheckedCreateWithoutReportedByInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput[];
  upsert?:
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutReportedByInput
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutReportedByInput[];
  createMany?: Prisma.BookingReportCreateManyReportedByInputEnvelope;
  set?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  disconnect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  delete?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  update?:
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutReportedByInput
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutReportedByInput[];
  updateMany?:
    | Prisma.BookingReportUpdateManyWithWhereWithoutReportedByInput
    | Prisma.BookingReportUpdateManyWithWhereWithoutReportedByInput[];
  deleteMany?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
};

export type BookingReportUncheckedUpdateManyWithoutReportedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutReportedByInput,
        Prisma.BookingReportUncheckedCreateWithoutReportedByInput
      >
    | Prisma.BookingReportCreateWithoutReportedByInput[]
    | Prisma.BookingReportUncheckedCreateWithoutReportedByInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput
    | Prisma.BookingReportCreateOrConnectWithoutReportedByInput[];
  upsert?:
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutReportedByInput
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutReportedByInput[];
  createMany?: Prisma.BookingReportCreateManyReportedByInputEnvelope;
  set?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  disconnect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  delete?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  update?:
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutReportedByInput
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutReportedByInput[];
  updateMany?:
    | Prisma.BookingReportUpdateManyWithWhereWithoutReportedByInput
    | Prisma.BookingReportUpdateManyWithWhereWithoutReportedByInput[];
  deleteMany?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
};

export type BookingReportCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutOrganizationInput,
        Prisma.BookingReportUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.BookingReportCreateWithoutOrganizationInput[]
    | Prisma.BookingReportUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.BookingReportCreateManyOrganizationInputEnvelope;
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
};

export type BookingReportUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutOrganizationInput,
        Prisma.BookingReportUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.BookingReportCreateWithoutOrganizationInput[]
    | Prisma.BookingReportUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.BookingReportCreateManyOrganizationInputEnvelope;
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
};

export type BookingReportUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutOrganizationInput,
        Prisma.BookingReportUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.BookingReportCreateWithoutOrganizationInput[]
    | Prisma.BookingReportUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.BookingReportCreateManyOrganizationInputEnvelope;
  set?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  disconnect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  delete?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  update?:
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.BookingReportUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.BookingReportUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
};

export type BookingReportUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutOrganizationInput,
        Prisma.BookingReportUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.BookingReportCreateWithoutOrganizationInput[]
    | Prisma.BookingReportUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput
    | Prisma.BookingReportCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.BookingReportCreateManyOrganizationInputEnvelope;
  set?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  disconnect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  delete?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  update?:
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.BookingReportUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.BookingReportUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
};

export type BookingReportCreateNestedOneWithoutBookingInput = {
  create?: Prisma.XOR<
    Prisma.BookingReportCreateWithoutBookingInput,
    Prisma.BookingReportUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.BookingReportCreateOrConnectWithoutBookingInput;
  connect?: Prisma.BookingReportWhereUniqueInput;
};

export type BookingReportUncheckedCreateNestedOneWithoutBookingInput = {
  create?: Prisma.XOR<
    Prisma.BookingReportCreateWithoutBookingInput,
    Prisma.BookingReportUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.BookingReportCreateOrConnectWithoutBookingInput;
  connect?: Prisma.BookingReportWhereUniqueInput;
};

export type BookingReportUpdateOneWithoutBookingNestedInput = {
  create?: Prisma.XOR<
    Prisma.BookingReportCreateWithoutBookingInput,
    Prisma.BookingReportUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.BookingReportCreateOrConnectWithoutBookingInput;
  upsert?: Prisma.BookingReportUpsertWithoutBookingInput;
  disconnect?: Prisma.BookingReportWhereInput | boolean;
  delete?: Prisma.BookingReportWhereInput | boolean;
  connect?: Prisma.BookingReportWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BookingReportUpdateToOneWithWhereWithoutBookingInput,
      Prisma.BookingReportUpdateWithoutBookingInput
    >,
    Prisma.BookingReportUncheckedUpdateWithoutBookingInput
  >;
};

export type BookingReportUncheckedUpdateOneWithoutBookingNestedInput = {
  create?: Prisma.XOR<
    Prisma.BookingReportCreateWithoutBookingInput,
    Prisma.BookingReportUncheckedCreateWithoutBookingInput
  >;
  connectOrCreate?: Prisma.BookingReportCreateOrConnectWithoutBookingInput;
  upsert?: Prisma.BookingReportUpsertWithoutBookingInput;
  disconnect?: Prisma.BookingReportWhereInput | boolean;
  delete?: Prisma.BookingReportWhereInput | boolean;
  connect?: Prisma.BookingReportWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.BookingReportUpdateToOneWithWhereWithoutBookingInput,
      Prisma.BookingReportUpdateWithoutBookingInput
    >,
    Prisma.BookingReportUncheckedUpdateWithoutBookingInput
  >;
};

export type BookingReportCreateNestedManyWithoutWatchlistInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutWatchlistInput,
        Prisma.BookingReportUncheckedCreateWithoutWatchlistInput
      >
    | Prisma.BookingReportCreateWithoutWatchlistInput[]
    | Prisma.BookingReportUncheckedCreateWithoutWatchlistInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput[];
  createMany?: Prisma.BookingReportCreateManyWatchlistInputEnvelope;
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
};

export type BookingReportUncheckedCreateNestedManyWithoutWatchlistInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutWatchlistInput,
        Prisma.BookingReportUncheckedCreateWithoutWatchlistInput
      >
    | Prisma.BookingReportCreateWithoutWatchlistInput[]
    | Prisma.BookingReportUncheckedCreateWithoutWatchlistInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput[];
  createMany?: Prisma.BookingReportCreateManyWatchlistInputEnvelope;
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
};

export type BookingReportUpdateManyWithoutWatchlistNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutWatchlistInput,
        Prisma.BookingReportUncheckedCreateWithoutWatchlistInput
      >
    | Prisma.BookingReportCreateWithoutWatchlistInput[]
    | Prisma.BookingReportUncheckedCreateWithoutWatchlistInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput[];
  upsert?:
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutWatchlistInput
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutWatchlistInput[];
  createMany?: Prisma.BookingReportCreateManyWatchlistInputEnvelope;
  set?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  disconnect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  delete?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  update?:
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutWatchlistInput
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutWatchlistInput[];
  updateMany?:
    | Prisma.BookingReportUpdateManyWithWhereWithoutWatchlistInput
    | Prisma.BookingReportUpdateManyWithWhereWithoutWatchlistInput[];
  deleteMany?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
};

export type BookingReportUncheckedUpdateManyWithoutWatchlistNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BookingReportCreateWithoutWatchlistInput,
        Prisma.BookingReportUncheckedCreateWithoutWatchlistInput
      >
    | Prisma.BookingReportCreateWithoutWatchlistInput[]
    | Prisma.BookingReportUncheckedCreateWithoutWatchlistInput[];
  connectOrCreate?:
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput
    | Prisma.BookingReportCreateOrConnectWithoutWatchlistInput[];
  upsert?:
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutWatchlistInput
    | Prisma.BookingReportUpsertWithWhereUniqueWithoutWatchlistInput[];
  createMany?: Prisma.BookingReportCreateManyWatchlistInputEnvelope;
  set?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  disconnect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  delete?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  connect?: Prisma.BookingReportWhereUniqueInput | Prisma.BookingReportWhereUniqueInput[];
  update?:
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutWatchlistInput
    | Prisma.BookingReportUpdateWithWhereUniqueWithoutWatchlistInput[];
  updateMany?:
    | Prisma.BookingReportUpdateManyWithWhereWithoutWatchlistInput
    | Prisma.BookingReportUpdateManyWithWhereWithoutWatchlistInput[];
  deleteMany?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
};

export type EnumBookingReportReasonFieldUpdateOperationsInput = {
  set?: $Enums.BookingReportReason;
};

export type BookingReportCreateWithoutReportedByInput = {
  id?: string;
  bookerEmail: string;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  booking: Prisma.BookingCreateNestedOneWithoutReportInput;
  organization?: Prisma.TeamCreateNestedOneWithoutBookingReportsInput;
  watchlist?: Prisma.WatchlistCreateNestedOneWithoutBookingReportsInput;
};

export type BookingReportUncheckedCreateWithoutReportedByInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportCreateOrConnectWithoutReportedByInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutReportedByInput,
    Prisma.BookingReportUncheckedCreateWithoutReportedByInput
  >;
};

export type BookingReportCreateManyReportedByInputEnvelope = {
  data: Prisma.BookingReportCreateManyReportedByInput | Prisma.BookingReportCreateManyReportedByInput[];
  skipDuplicates?: boolean;
};

export type BookingReportUpsertWithWhereUniqueWithoutReportedByInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutReportedByInput,
    Prisma.BookingReportUncheckedUpdateWithoutReportedByInput
  >;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutReportedByInput,
    Prisma.BookingReportUncheckedCreateWithoutReportedByInput
  >;
};

export type BookingReportUpdateWithWhereUniqueWithoutReportedByInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutReportedByInput,
    Prisma.BookingReportUncheckedUpdateWithoutReportedByInput
  >;
};

export type BookingReportUpdateManyWithWhereWithoutReportedByInput = {
  where: Prisma.BookingReportScalarWhereInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateManyMutationInput,
    Prisma.BookingReportUncheckedUpdateManyWithoutReportedByInput
  >;
};

export type BookingReportScalarWhereInput = {
  AND?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
  OR?: Prisma.BookingReportScalarWhereInput[];
  NOT?: Prisma.BookingReportScalarWhereInput | Prisma.BookingReportScalarWhereInput[];
  id?: Prisma.UuidFilter<"BookingReport"> | string;
  bookingUid?: Prisma.StringFilter<"BookingReport"> | string;
  bookerEmail?: Prisma.StringFilter<"BookingReport"> | string;
  reportedById?: Prisma.IntNullableFilter<"BookingReport"> | number | null;
  organizationId?: Prisma.IntNullableFilter<"BookingReport"> | number | null;
  reason?: Prisma.EnumBookingReportReasonFilter<"BookingReport"> | $Enums.BookingReportReason;
  description?: Prisma.StringNullableFilter<"BookingReport"> | string | null;
  cancelled?: Prisma.BoolFilter<"BookingReport"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"BookingReport"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"BookingReport"> | Date | string;
  watchlistId?: Prisma.UuidNullableFilter<"BookingReport"> | string | null;
};

export type BookingReportCreateWithoutOrganizationInput = {
  id?: string;
  bookerEmail: string;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  booking: Prisma.BookingCreateNestedOneWithoutReportInput;
  reportedBy?: Prisma.UserCreateNestedOneWithoutReportedBookingsInput;
  watchlist?: Prisma.WatchlistCreateNestedOneWithoutBookingReportsInput;
};

export type BookingReportUncheckedCreateWithoutOrganizationInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutOrganizationInput,
    Prisma.BookingReportUncheckedCreateWithoutOrganizationInput
  >;
};

export type BookingReportCreateManyOrganizationInputEnvelope = {
  data: Prisma.BookingReportCreateManyOrganizationInput | Prisma.BookingReportCreateManyOrganizationInput[];
  skipDuplicates?: boolean;
};

export type BookingReportUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutOrganizationInput,
    Prisma.BookingReportUncheckedUpdateWithoutOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutOrganizationInput,
    Prisma.BookingReportUncheckedCreateWithoutOrganizationInput
  >;
};

export type BookingReportUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutOrganizationInput,
    Prisma.BookingReportUncheckedUpdateWithoutOrganizationInput
  >;
};

export type BookingReportUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.BookingReportScalarWhereInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateManyMutationInput,
    Prisma.BookingReportUncheckedUpdateManyWithoutOrganizationInput
  >;
};

export type BookingReportCreateWithoutBookingInput = {
  id?: string;
  bookerEmail: string;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  reportedBy?: Prisma.UserCreateNestedOneWithoutReportedBookingsInput;
  organization?: Prisma.TeamCreateNestedOneWithoutBookingReportsInput;
  watchlist?: Prisma.WatchlistCreateNestedOneWithoutBookingReportsInput;
};

export type BookingReportUncheckedCreateWithoutBookingInput = {
  id?: string;
  bookerEmail: string;
  reportedById?: number | null;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportCreateOrConnectWithoutBookingInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutBookingInput,
    Prisma.BookingReportUncheckedCreateWithoutBookingInput
  >;
};

export type BookingReportUpsertWithoutBookingInput = {
  update: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutBookingInput,
    Prisma.BookingReportUncheckedUpdateWithoutBookingInput
  >;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutBookingInput,
    Prisma.BookingReportUncheckedCreateWithoutBookingInput
  >;
  where?: Prisma.BookingReportWhereInput;
};

export type BookingReportUpdateToOneWithWhereWithoutBookingInput = {
  where?: Prisma.BookingReportWhereInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutBookingInput,
    Prisma.BookingReportUncheckedUpdateWithoutBookingInput
  >;
};

export type BookingReportUpdateWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reportedBy?: Prisma.UserUpdateOneWithoutReportedBookingsNestedInput;
  organization?: Prisma.TeamUpdateOneWithoutBookingReportsNestedInput;
  watchlist?: Prisma.WatchlistUpdateOneWithoutBookingReportsNestedInput;
};

export type BookingReportUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportCreateWithoutWatchlistInput = {
  id?: string;
  bookerEmail: string;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  booking: Prisma.BookingCreateNestedOneWithoutReportInput;
  reportedBy?: Prisma.UserCreateNestedOneWithoutReportedBookingsInput;
  organization?: Prisma.TeamCreateNestedOneWithoutBookingReportsInput;
};

export type BookingReportUncheckedCreateWithoutWatchlistInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById?: number | null;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type BookingReportCreateOrConnectWithoutWatchlistInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutWatchlistInput,
    Prisma.BookingReportUncheckedCreateWithoutWatchlistInput
  >;
};

export type BookingReportCreateManyWatchlistInputEnvelope = {
  data: Prisma.BookingReportCreateManyWatchlistInput | Prisma.BookingReportCreateManyWatchlistInput[];
  skipDuplicates?: boolean;
};

export type BookingReportUpsertWithWhereUniqueWithoutWatchlistInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutWatchlistInput,
    Prisma.BookingReportUncheckedUpdateWithoutWatchlistInput
  >;
  create: Prisma.XOR<
    Prisma.BookingReportCreateWithoutWatchlistInput,
    Prisma.BookingReportUncheckedCreateWithoutWatchlistInput
  >;
};

export type BookingReportUpdateWithWhereUniqueWithoutWatchlistInput = {
  where: Prisma.BookingReportWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateWithoutWatchlistInput,
    Prisma.BookingReportUncheckedUpdateWithoutWatchlistInput
  >;
};

export type BookingReportUpdateManyWithWhereWithoutWatchlistInput = {
  where: Prisma.BookingReportScalarWhereInput;
  data: Prisma.XOR<
    Prisma.BookingReportUpdateManyMutationInput,
    Prisma.BookingReportUncheckedUpdateManyWithoutWatchlistInput
  >;
};

export type BookingReportCreateManyReportedByInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportUpdateWithoutReportedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  booking?: Prisma.BookingUpdateOneRequiredWithoutReportNestedInput;
  organization?: Prisma.TeamUpdateOneWithoutBookingReportsNestedInput;
  watchlist?: Prisma.WatchlistUpdateOneWithoutBookingReportsNestedInput;
};

export type BookingReportUncheckedUpdateWithoutReportedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportUncheckedUpdateManyWithoutReportedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportCreateManyOrganizationInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  watchlistId?: string | null;
};

export type BookingReportUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  booking?: Prisma.BookingUpdateOneRequiredWithoutReportNestedInput;
  reportedBy?: Prisma.UserUpdateOneWithoutReportedBookingsNestedInput;
  watchlist?: Prisma.WatchlistUpdateOneWithoutBookingReportsNestedInput;
};

export type BookingReportUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  watchlistId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type BookingReportCreateManyWatchlistInput = {
  id?: string;
  bookingUid: string;
  bookerEmail: string;
  reportedById?: number | null;
  organizationId?: number | null;
  reason: $Enums.BookingReportReason;
  description?: string | null;
  cancelled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type BookingReportUpdateWithoutWatchlistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  booking?: Prisma.BookingUpdateOneRequiredWithoutReportNestedInput;
  reportedBy?: Prisma.UserUpdateOneWithoutReportedBookingsNestedInput;
  organization?: Prisma.TeamUpdateOneWithoutBookingReportsNestedInput;
};

export type BookingReportUncheckedUpdateWithoutWatchlistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookingReportUncheckedUpdateManyWithoutWatchlistInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.StringFieldUpdateOperationsInput | string;
  bookerEmail?: Prisma.StringFieldUpdateOperationsInput | string;
  reportedById?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reason?: Prisma.EnumBookingReportReasonFieldUpdateOperationsInput | $Enums.BookingReportReason;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  cancelled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookingReportSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    bookingUid?: boolean;
    bookerEmail?: boolean;
    reportedById?: boolean;
    organizationId?: boolean;
    reason?: boolean;
    description?: boolean;
    cancelled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    watchlistId?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
    reportedBy?: boolean | Prisma.BookingReport$reportedByArgs<ExtArgs>;
    organization?: boolean | Prisma.BookingReport$organizationArgs<ExtArgs>;
    watchlist?: boolean | Prisma.BookingReport$watchlistArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookingReport"]
>;

export type BookingReportSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    bookingUid?: boolean;
    bookerEmail?: boolean;
    reportedById?: boolean;
    organizationId?: boolean;
    reason?: boolean;
    description?: boolean;
    cancelled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    watchlistId?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
    reportedBy?: boolean | Prisma.BookingReport$reportedByArgs<ExtArgs>;
    organization?: boolean | Prisma.BookingReport$organizationArgs<ExtArgs>;
    watchlist?: boolean | Prisma.BookingReport$watchlistArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookingReport"]
>;

export type BookingReportSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    bookingUid?: boolean;
    bookerEmail?: boolean;
    reportedById?: boolean;
    organizationId?: boolean;
    reason?: boolean;
    description?: boolean;
    cancelled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    watchlistId?: boolean;
    booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
    reportedBy?: boolean | Prisma.BookingReport$reportedByArgs<ExtArgs>;
    organization?: boolean | Prisma.BookingReport$organizationArgs<ExtArgs>;
    watchlist?: boolean | Prisma.BookingReport$watchlistArgs<ExtArgs>;
  },
  ExtArgs["result"]["bookingReport"]
>;

export type BookingReportSelectScalar = {
  id?: boolean;
  bookingUid?: boolean;
  bookerEmail?: boolean;
  reportedById?: boolean;
  organizationId?: boolean;
  reason?: boolean;
  description?: boolean;
  cancelled?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  watchlistId?: boolean;
};

export type BookingReportOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "bookingUid"
  | "bookerEmail"
  | "reportedById"
  | "organizationId"
  | "reason"
  | "description"
  | "cancelled"
  | "createdAt"
  | "updatedAt"
  | "watchlistId",
  ExtArgs["result"]["bookingReport"]
>;
export type BookingReportInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  reportedBy?: boolean | Prisma.BookingReport$reportedByArgs<ExtArgs>;
  organization?: boolean | Prisma.BookingReport$organizationArgs<ExtArgs>;
  watchlist?: boolean | Prisma.BookingReport$watchlistArgs<ExtArgs>;
};
export type BookingReportIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  reportedBy?: boolean | Prisma.BookingReport$reportedByArgs<ExtArgs>;
  organization?: boolean | Prisma.BookingReport$organizationArgs<ExtArgs>;
  watchlist?: boolean | Prisma.BookingReport$watchlistArgs<ExtArgs>;
};
export type BookingReportIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.BookingDefaultArgs<ExtArgs>;
  reportedBy?: boolean | Prisma.BookingReport$reportedByArgs<ExtArgs>;
  organization?: boolean | Prisma.BookingReport$organizationArgs<ExtArgs>;
  watchlist?: boolean | Prisma.BookingReport$watchlistArgs<ExtArgs>;
};

export type $BookingReportPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "BookingReport";
  objects: {
    booking: Prisma.$BookingPayload<ExtArgs>;
    reportedBy: Prisma.$UserPayload<ExtArgs> | null;
    organization: Prisma.$TeamPayload<ExtArgs> | null;
    watchlist: Prisma.$WatchlistPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      bookingUid: string;
      bookerEmail: string;
      reportedById: number | null;
      organizationId: number | null;
      reason: $Enums.BookingReportReason;
      description: string | null;
      cancelled: boolean;
      createdAt: Date;
      updatedAt: Date;
      watchlistId: string | null;
    },
    ExtArgs["result"]["bookingReport"]
  >;
  composites: {};
};

export type BookingReportGetPayload<S extends boolean | null | undefined | BookingReportDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$BookingReportPayload, S>;

export type BookingReportCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<BookingReportFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BookingReportCountAggregateInputType | true;
};

export interface BookingReportDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["BookingReport"]; meta: { name: "BookingReport" } };
  /**
   * Find zero or one BookingReport that matches the filter.
   * @param {BookingReportFindUniqueArgs} args - Arguments to find a BookingReport
   * @example
   * // Get one BookingReport
   * const bookingReport = await prisma.bookingReport.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookingReportFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingReportPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BookingReport that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingReportFindUniqueOrThrowArgs} args - Arguments to find a BookingReport
   * @example
   * // Get one BookingReport
   * const bookingReport = await prisma.bookingReport.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingReportFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookingReportFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingReportPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingReport that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportFindFirstArgs} args - Arguments to find a BookingReport
   * @example
   * // Get one BookingReport
   * const bookingReport = await prisma.bookingReport.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingReportFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookingReportFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingReportPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingReport that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportFindFirstOrThrowArgs} args - Arguments to find a BookingReport
   * @example
   * // Get one BookingReport
   * const bookingReport = await prisma.bookingReport.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingReportFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookingReportFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingReportPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BookingReports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookingReports
   * const bookingReports = await prisma.bookingReport.findMany()
   *
   * // Get first 10 BookingReports
   * const bookingReports = await prisma.bookingReport.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookingReportWithIdOnly = await prisma.bookingReport.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookingReportFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookingReportFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$BookingReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a BookingReport.
   * @param {BookingReportCreateArgs} args - Arguments to create a BookingReport.
   * @example
   * // Create one BookingReport
   * const BookingReport = await prisma.bookingReport.create({
   *   data: {
   *     // ... data to create a BookingReport
   *   }
   * })
   *
   */
  create<T extends BookingReportCreateArgs>(
    args: Prisma.SelectSubset<T, BookingReportCreateArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<Prisma.$BookingReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BookingReports.
   * @param {BookingReportCreateManyArgs} args - Arguments to create many BookingReports.
   * @example
   * // Create many BookingReports
   * const bookingReport = await prisma.bookingReport.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BookingReportCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BookingReportCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BookingReports and returns the data saved in the database.
   * @param {BookingReportCreateManyAndReturnArgs} args - Arguments to create many BookingReports.
   * @example
   * // Create many BookingReports
   * const bookingReport = await prisma.bookingReport.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BookingReports and only return the `id`
   * const bookingReportWithIdOnly = await prisma.bookingReport.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BookingReportCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BookingReportCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingReportPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BookingReport.
   * @param {BookingReportDeleteArgs} args - Arguments to delete one BookingReport.
   * @example
   * // Delete one BookingReport
   * const BookingReport = await prisma.bookingReport.delete({
   *   where: {
   *     // ... filter to delete one BookingReport
   *   }
   * })
   *
   */
  delete<T extends BookingReportDeleteArgs>(
    args: Prisma.SelectSubset<T, BookingReportDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<Prisma.$BookingReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BookingReport.
   * @param {BookingReportUpdateArgs} args - Arguments to update one BookingReport.
   * @example
   * // Update one BookingReport
   * const bookingReport = await prisma.bookingReport.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BookingReportUpdateArgs>(
    args: Prisma.SelectSubset<T, BookingReportUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<Prisma.$BookingReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BookingReports.
   * @param {BookingReportDeleteManyArgs} args - Arguments to filter BookingReports to delete.
   * @example
   * // Delete a few BookingReports
   * const { count } = await prisma.bookingReport.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BookingReportDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BookingReportDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookingReports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BookingReports
   * const bookingReport = await prisma.bookingReport.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BookingReportUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BookingReportUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BookingReports and returns the data updated in the database.
   * @param {BookingReportUpdateManyAndReturnArgs} args - Arguments to update many BookingReports.
   * @example
   * // Update many BookingReports
   * const bookingReport = await prisma.bookingReport.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BookingReports and only return the `id`
   * const bookingReportWithIdOnly = await prisma.bookingReport.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BookingReportUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BookingReportUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingReportPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BookingReport.
   * @param {BookingReportUpsertArgs} args - Arguments to update or create a BookingReport.
   * @example
   * // Update or create a BookingReport
   * const bookingReport = await prisma.bookingReport.upsert({
   *   create: {
   *     // ... data to create a BookingReport
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BookingReport we want to update
   *   }
   * })
   */
  upsert<T extends BookingReportUpsertArgs>(
    args: Prisma.SelectSubset<T, BookingReportUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__BookingReportClient<
    runtime.Types.Result.GetResult<Prisma.$BookingReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BookingReports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportCountArgs} args - Arguments to filter BookingReports to count.
   * @example
   * // Count the number of BookingReports
   * const count = await prisma.bookingReport.count({
   *   where: {
   *     // ... the filter for the BookingReports we want to count
   *   }
   * })
   **/
  count<T extends BookingReportCountArgs>(
    args?: Prisma.Subset<T, BookingReportCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BookingReportCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BookingReport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookingReportAggregateArgs>(
    args: Prisma.Subset<T, BookingReportAggregateArgs>
  ): Prisma.PrismaPromise<GetBookingReportAggregateType<T>>;

  /**
   * Group by BookingReport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingReportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookingReportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingReportGroupByArgs["orderBy"] }
      : { orderBy?: BookingReportGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, BookingReportGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetBookingReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BookingReport model
   */
  readonly fields: BookingReportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookingReport.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingReportClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  booking<T extends Prisma.BookingDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__BookingClient<
    | runtime.Types.Result.GetResult<
        Prisma.$BookingPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  reportedBy<T extends Prisma.BookingReport$reportedByArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingReport$reportedByArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  organization<T extends Prisma.BookingReport$organizationArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingReport$organizationArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  watchlist<T extends Prisma.BookingReport$watchlistArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.BookingReport$watchlistArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BookingReport model
 */
export interface BookingReportFieldRefs {
  readonly id: Prisma.FieldRef<"BookingReport", "String">;
  readonly bookingUid: Prisma.FieldRef<"BookingReport", "String">;
  readonly bookerEmail: Prisma.FieldRef<"BookingReport", "String">;
  readonly reportedById: Prisma.FieldRef<"BookingReport", "Int">;
  readonly organizationId: Prisma.FieldRef<"BookingReport", "Int">;
  readonly reason: Prisma.FieldRef<"BookingReport", "BookingReportReason">;
  readonly description: Prisma.FieldRef<"BookingReport", "String">;
  readonly cancelled: Prisma.FieldRef<"BookingReport", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"BookingReport", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"BookingReport", "DateTime">;
  readonly watchlistId: Prisma.FieldRef<"BookingReport", "String">;
}

// Custom InputTypes
/**
 * BookingReport findUnique
 */
export type BookingReportFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * Filter, which BookingReport to fetch.
   */
  where: Prisma.BookingReportWhereUniqueInput;
};

/**
 * BookingReport findUniqueOrThrow
 */
export type BookingReportFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * Filter, which BookingReport to fetch.
   */
  where: Prisma.BookingReportWhereUniqueInput;
};

/**
 * BookingReport findFirst
 */
export type BookingReportFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * Filter, which BookingReport to fetch.
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingReports to fetch.
   */
  orderBy?: Prisma.BookingReportOrderByWithRelationInput | Prisma.BookingReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingReports.
   */
  cursor?: Prisma.BookingReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingReports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingReports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingReports.
   */
  distinct?: Prisma.BookingReportScalarFieldEnum | Prisma.BookingReportScalarFieldEnum[];
};

/**
 * BookingReport findFirstOrThrow
 */
export type BookingReportFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * Filter, which BookingReport to fetch.
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingReports to fetch.
   */
  orderBy?: Prisma.BookingReportOrderByWithRelationInput | Prisma.BookingReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingReports.
   */
  cursor?: Prisma.BookingReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingReports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingReports.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingReports.
   */
  distinct?: Prisma.BookingReportScalarFieldEnum | Prisma.BookingReportScalarFieldEnum[];
};

/**
 * BookingReport findMany
 */
export type BookingReportFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * Filter, which BookingReports to fetch.
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingReports to fetch.
   */
  orderBy?: Prisma.BookingReportOrderByWithRelationInput | Prisma.BookingReportOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BookingReports.
   */
  cursor?: Prisma.BookingReportWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingReports from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingReports.
   */
  skip?: number;
  distinct?: Prisma.BookingReportScalarFieldEnum | Prisma.BookingReportScalarFieldEnum[];
};

/**
 * BookingReport create
 */
export type BookingReportCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * The data needed to create a BookingReport.
   */
  data: Prisma.XOR<Prisma.BookingReportCreateInput, Prisma.BookingReportUncheckedCreateInput>;
};

/**
 * BookingReport createMany
 */
export type BookingReportCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many BookingReports.
   */
  data: Prisma.BookingReportCreateManyInput | Prisma.BookingReportCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BookingReport createManyAndReturn
 */
export type BookingReportCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * The data used to create many BookingReports.
   */
  data: Prisma.BookingReportCreateManyInput | Prisma.BookingReportCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * BookingReport update
 */
export type BookingReportUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * The data needed to update a BookingReport.
   */
  data: Prisma.XOR<Prisma.BookingReportUpdateInput, Prisma.BookingReportUncheckedUpdateInput>;
  /**
   * Choose, which BookingReport to update.
   */
  where: Prisma.BookingReportWhereUniqueInput;
};

/**
 * BookingReport updateMany
 */
export type BookingReportUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update BookingReports.
   */
  data: Prisma.XOR<Prisma.BookingReportUpdateManyMutationInput, Prisma.BookingReportUncheckedUpdateManyInput>;
  /**
   * Filter which BookingReports to update
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * Limit how many BookingReports to update.
   */
  limit?: number;
};

/**
 * BookingReport updateManyAndReturn
 */
export type BookingReportUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * The data used to update BookingReports.
   */
  data: Prisma.XOR<Prisma.BookingReportUpdateManyMutationInput, Prisma.BookingReportUncheckedUpdateManyInput>;
  /**
   * Filter which BookingReports to update
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * Limit how many BookingReports to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * BookingReport upsert
 */
export type BookingReportUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * The filter to search for the BookingReport to update in case it exists.
   */
  where: Prisma.BookingReportWhereUniqueInput;
  /**
   * In case the BookingReport found by the `where` argument doesn't exist, create a new BookingReport with this data.
   */
  create: Prisma.XOR<Prisma.BookingReportCreateInput, Prisma.BookingReportUncheckedCreateInput>;
  /**
   * In case the BookingReport was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BookingReportUpdateInput, Prisma.BookingReportUncheckedUpdateInput>;
};

/**
 * BookingReport delete
 */
export type BookingReportDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
  /**
   * Filter which BookingReport to delete.
   */
  where: Prisma.BookingReportWhereUniqueInput;
};

/**
 * BookingReport deleteMany
 */
export type BookingReportDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingReports to delete
   */
  where?: Prisma.BookingReportWhereInput;
  /**
   * Limit how many BookingReports to delete.
   */
  limit?: number;
};

/**
 * BookingReport.reportedBy
 */
export type BookingReport$reportedByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * BookingReport.organization
 */
export type BookingReport$organizationArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * BookingReport.watchlist
 */
export type BookingReport$watchlistArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Watchlist
   */
  select?: Prisma.WatchlistSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Watchlist
   */
  omit?: Prisma.WatchlistOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WatchlistInclude<ExtArgs> | null;
  where?: Prisma.WatchlistWhereInput;
};

/**
 * BookingReport without action
 */
export type BookingReportDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingReport
   */
  select?: Prisma.BookingReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingReport
   */
  omit?: Prisma.BookingReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingReportInclude<ExtArgs> | null;
};
