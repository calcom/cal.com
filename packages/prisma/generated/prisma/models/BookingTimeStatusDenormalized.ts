/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `BookingTimeStatusDenormalized` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model BookingTimeStatusDenormalized
 *
 */
export type BookingTimeStatusDenormalizedModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BookingTimeStatusDenormalizedPayload>;

export type AggregateBookingTimeStatusDenormalized = {
  _count: BookingTimeStatusDenormalizedCountAggregateOutputType | null;
  _avg: BookingTimeStatusDenormalizedAvgAggregateOutputType | null;
  _sum: BookingTimeStatusDenormalizedSumAggregateOutputType | null;
  _min: BookingTimeStatusDenormalizedMinAggregateOutputType | null;
  _max: BookingTimeStatusDenormalizedMaxAggregateOutputType | null;
};

export type BookingTimeStatusDenormalizedAvgAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  rating: number | null;
};

export type BookingTimeStatusDenormalizedSumAggregateOutputType = {
  id: number | null;
  eventTypeId: number | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  rating: number | null;
};

export type BookingTimeStatusDenormalizedMinAggregateOutputType = {
  id: number | null;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  userEmail: string | null;
  userName: string | null;
  userUsername: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean | null;
  timeStatus: string | null;
};

export type BookingTimeStatusDenormalizedMaxAggregateOutputType = {
  id: number | null;
  uid: string | null;
  eventTypeId: number | null;
  title: string | null;
  description: string | null;
  startTime: Date | null;
  endTime: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  location: string | null;
  paid: boolean | null;
  status: $Enums.BookingStatus | null;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  userEmail: string | null;
  userName: string | null;
  userUsername: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean | null;
  timeStatus: string | null;
};

export type BookingTimeStatusDenormalizedCountAggregateOutputType = {
  id: number;
  uid: number;
  eventTypeId: number;
  title: number;
  description: number;
  startTime: number;
  endTime: number;
  createdAt: number;
  updatedAt: number;
  location: number;
  paid: number;
  status: number;
  rescheduled: number;
  userId: number;
  teamId: number;
  eventLength: number;
  eventParentId: number;
  userEmail: number;
  userName: number;
  userUsername: number;
  ratingFeedback: number;
  rating: number;
  noShowHost: number;
  isTeamBooking: number;
  timeStatus: number;
  _all: number;
};

export type BookingTimeStatusDenormalizedAvgAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  rating?: true;
};

export type BookingTimeStatusDenormalizedSumAggregateInputType = {
  id?: true;
  eventTypeId?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  rating?: true;
};

export type BookingTimeStatusDenormalizedMinAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  updatedAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  userEmail?: true;
  userName?: true;
  userUsername?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
  timeStatus?: true;
};

export type BookingTimeStatusDenormalizedMaxAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  updatedAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  userEmail?: true;
  userName?: true;
  userUsername?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
  timeStatus?: true;
};

export type BookingTimeStatusDenormalizedCountAggregateInputType = {
  id?: true;
  uid?: true;
  eventTypeId?: true;
  title?: true;
  description?: true;
  startTime?: true;
  endTime?: true;
  createdAt?: true;
  updatedAt?: true;
  location?: true;
  paid?: true;
  status?: true;
  rescheduled?: true;
  userId?: true;
  teamId?: true;
  eventLength?: true;
  eventParentId?: true;
  userEmail?: true;
  userName?: true;
  userUsername?: true;
  ratingFeedback?: true;
  rating?: true;
  noShowHost?: true;
  isTeamBooking?: true;
  timeStatus?: true;
  _all?: true;
};

export type BookingTimeStatusDenormalizedAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which BookingTimeStatusDenormalized to aggregate.
   */
  where?: Prisma.BookingTimeStatusDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatusDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BookingTimeStatusDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatusDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatusDenormalizeds.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BookingTimeStatusDenormalizeds
   **/
  _count?: true | BookingTimeStatusDenormalizedCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BookingTimeStatusDenormalizedAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BookingTimeStatusDenormalizedSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BookingTimeStatusDenormalizedMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BookingTimeStatusDenormalizedMaxAggregateInputType;
};

export type GetBookingTimeStatusDenormalizedAggregateType<
  T extends BookingTimeStatusDenormalizedAggregateArgs
> = {
  [P in keyof T & keyof AggregateBookingTimeStatusDenormalized]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBookingTimeStatusDenormalized[P]>
    : Prisma.GetScalarType<T[P], AggregateBookingTimeStatusDenormalized[P]>;
};

export type BookingTimeStatusDenormalizedGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.BookingTimeStatusDenormalizedWhereInput;
  orderBy?:
    | Prisma.BookingTimeStatusDenormalizedOrderByWithAggregationInput
    | Prisma.BookingTimeStatusDenormalizedOrderByWithAggregationInput[];
  by:
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum[]
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum;
  having?: Prisma.BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BookingTimeStatusDenormalizedCountAggregateInputType | true;
  _avg?: BookingTimeStatusDenormalizedAvgAggregateInputType;
  _sum?: BookingTimeStatusDenormalizedSumAggregateInputType;
  _min?: BookingTimeStatusDenormalizedMinAggregateInputType;
  _max?: BookingTimeStatusDenormalizedMaxAggregateInputType;
};

export type BookingTimeStatusDenormalizedGroupByOutputType = {
  id: number;
  uid: string;
  eventTypeId: number | null;
  title: string;
  description: string | null;
  startTime: Date;
  endTime: Date;
  createdAt: Date;
  updatedAt: Date | null;
  location: string | null;
  paid: boolean;
  status: $Enums.BookingStatus;
  rescheduled: boolean | null;
  userId: number | null;
  teamId: number | null;
  eventLength: number | null;
  eventParentId: number | null;
  userEmail: string | null;
  userName: string | null;
  userUsername: string | null;
  ratingFeedback: string | null;
  rating: number | null;
  noShowHost: boolean | null;
  isTeamBooking: boolean;
  timeStatus: string | null;
  _count: BookingTimeStatusDenormalizedCountAggregateOutputType | null;
  _avg: BookingTimeStatusDenormalizedAvgAggregateOutputType | null;
  _sum: BookingTimeStatusDenormalizedSumAggregateOutputType | null;
  _min: BookingTimeStatusDenormalizedMinAggregateOutputType | null;
  _max: BookingTimeStatusDenormalizedMaxAggregateOutputType | null;
};

type GetBookingTimeStatusDenormalizedGroupByPayload<T extends BookingTimeStatusDenormalizedGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<BookingTimeStatusDenormalizedGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof BookingTimeStatusDenormalizedGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BookingTimeStatusDenormalizedGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BookingTimeStatusDenormalizedGroupByOutputType[P]>;
      }
    >
  >;

export type BookingTimeStatusDenormalizedWhereInput = {
  AND?: Prisma.BookingTimeStatusDenormalizedWhereInput | Prisma.BookingTimeStatusDenormalizedWhereInput[];
  OR?: Prisma.BookingTimeStatusDenormalizedWhereInput[];
  NOT?: Prisma.BookingTimeStatusDenormalizedWhereInput | Prisma.BookingTimeStatusDenormalizedWhereInput[];
  id?: Prisma.IntFilter<"BookingTimeStatusDenormalized"> | number;
  uid?: Prisma.StringFilter<"BookingTimeStatusDenormalized"> | string;
  eventTypeId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
  title?: Prisma.StringFilter<"BookingTimeStatusDenormalized"> | string;
  description?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  startTime?: Prisma.DateTimeFilter<"BookingTimeStatusDenormalized"> | Date | string;
  endTime?: Prisma.DateTimeFilter<"BookingTimeStatusDenormalized"> | Date | string;
  createdAt?: Prisma.DateTimeFilter<"BookingTimeStatusDenormalized"> | Date | string;
  updatedAt?: Prisma.DateTimeNullableFilter<"BookingTimeStatusDenormalized"> | Date | string | null;
  location?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  paid?: Prisma.BoolFilter<"BookingTimeStatusDenormalized"> | boolean;
  status?: Prisma.EnumBookingStatusFilter<"BookingTimeStatusDenormalized"> | $Enums.BookingStatus;
  rescheduled?: Prisma.BoolNullableFilter<"BookingTimeStatusDenormalized"> | boolean | null;
  userId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
  teamId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
  eventLength?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
  eventParentId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
  userEmail?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  userName?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  userUsername?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  ratingFeedback?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  rating?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
  noShowHost?: Prisma.BoolNullableFilter<"BookingTimeStatusDenormalized"> | boolean | null;
  isTeamBooking?: Prisma.BoolFilter<"BookingTimeStatusDenormalized"> | boolean;
  timeStatus?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
};

export type BookingTimeStatusDenormalizedOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventLength?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventParentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  userName?: Prisma.SortOrderInput | Prisma.SortOrder;
  userUsername?: Prisma.SortOrderInput | Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrderInput | Prisma.SortOrder;
  rating?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShowHost?: Prisma.SortOrderInput | Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type BookingTimeStatusDenormalizedWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.BookingTimeStatusDenormalizedWhereInput | Prisma.BookingTimeStatusDenormalizedWhereInput[];
    OR?: Prisma.BookingTimeStatusDenormalizedWhereInput[];
    NOT?: Prisma.BookingTimeStatusDenormalizedWhereInput | Prisma.BookingTimeStatusDenormalizedWhereInput[];
    uid?: Prisma.StringFilter<"BookingTimeStatusDenormalized"> | string;
    eventTypeId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
    title?: Prisma.StringFilter<"BookingTimeStatusDenormalized"> | string;
    description?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
    startTime?: Prisma.DateTimeFilter<"BookingTimeStatusDenormalized"> | Date | string;
    endTime?: Prisma.DateTimeFilter<"BookingTimeStatusDenormalized"> | Date | string;
    createdAt?: Prisma.DateTimeFilter<"BookingTimeStatusDenormalized"> | Date | string;
    updatedAt?: Prisma.DateTimeNullableFilter<"BookingTimeStatusDenormalized"> | Date | string | null;
    location?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
    paid?: Prisma.BoolFilter<"BookingTimeStatusDenormalized"> | boolean;
    status?: Prisma.EnumBookingStatusFilter<"BookingTimeStatusDenormalized"> | $Enums.BookingStatus;
    rescheduled?: Prisma.BoolNullableFilter<"BookingTimeStatusDenormalized"> | boolean | null;
    userId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
    teamId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
    eventLength?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
    eventParentId?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
    userEmail?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
    userName?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
    userUsername?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
    ratingFeedback?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
    rating?: Prisma.IntNullableFilter<"BookingTimeStatusDenormalized"> | number | null;
    noShowHost?: Prisma.BoolNullableFilter<"BookingTimeStatusDenormalized"> | boolean | null;
    isTeamBooking?: Prisma.BoolFilter<"BookingTimeStatusDenormalized"> | boolean;
    timeStatus?: Prisma.StringNullableFilter<"BookingTimeStatusDenormalized"> | string | null;
  },
  "id"
>;

export type BookingTimeStatusDenormalizedOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  location?: Prisma.SortOrderInput | Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventLength?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventParentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userEmail?: Prisma.SortOrderInput | Prisma.SortOrder;
  userName?: Prisma.SortOrderInput | Prisma.SortOrder;
  userUsername?: Prisma.SortOrderInput | Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrderInput | Prisma.SortOrder;
  rating?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShowHost?: Prisma.SortOrderInput | Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.BookingTimeStatusDenormalizedCountOrderByAggregateInput;
  _avg?: Prisma.BookingTimeStatusDenormalizedAvgOrderByAggregateInput;
  _max?: Prisma.BookingTimeStatusDenormalizedMaxOrderByAggregateInput;
  _min?: Prisma.BookingTimeStatusDenormalizedMinOrderByAggregateInput;
  _sum?: Prisma.BookingTimeStatusDenormalizedSumOrderByAggregateInput;
};

export type BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput
    | Prisma.BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput[];
  OR?: Prisma.BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput
    | Prisma.BookingTimeStatusDenormalizedScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number;
  uid?: Prisma.StringWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string;
  eventTypeId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number | null;
  title?: Prisma.StringWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string;
  description?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
  startTime?: Prisma.DateTimeWithAggregatesFilter<"BookingTimeStatusDenormalized"> | Date | string;
  endTime?: Prisma.DateTimeWithAggregatesFilter<"BookingTimeStatusDenormalized"> | Date | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BookingTimeStatusDenormalized"> | Date | string;
  updatedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"BookingTimeStatusDenormalized">
    | Date
    | string
    | null;
  location?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
  paid?: Prisma.BoolWithAggregatesFilter<"BookingTimeStatusDenormalized"> | boolean;
  status?:
    | Prisma.EnumBookingStatusWithAggregatesFilter<"BookingTimeStatusDenormalized">
    | $Enums.BookingStatus;
  rescheduled?: Prisma.BoolNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | boolean | null;
  userId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number | null;
  eventLength?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number | null;
  eventParentId?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number | null;
  userEmail?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
  userName?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
  userUsername?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
  ratingFeedback?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
  rating?: Prisma.IntNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | number | null;
  noShowHost?: Prisma.BoolNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | boolean | null;
  isTeamBooking?: Prisma.BoolWithAggregatesFilter<"BookingTimeStatusDenormalized"> | boolean;
  timeStatus?: Prisma.StringNullableWithAggregatesFilter<"BookingTimeStatusDenormalized"> | string | null;
};

export type BookingTimeStatusDenormalizedCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  userName?: Prisma.SortOrder;
  userUsername?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrder;
};

export type BookingTimeStatusDenormalizedAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
};

export type BookingTimeStatusDenormalizedMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  userName?: Prisma.SortOrder;
  userUsername?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrder;
};

export type BookingTimeStatusDenormalizedMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uid?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  location?: Prisma.SortOrder;
  paid?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  rescheduled?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  userEmail?: Prisma.SortOrder;
  userName?: Prisma.SortOrder;
  userUsername?: Prisma.SortOrder;
  ratingFeedback?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
  noShowHost?: Prisma.SortOrder;
  isTeamBooking?: Prisma.SortOrder;
  timeStatus?: Prisma.SortOrder;
};

export type BookingTimeStatusDenormalizedSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  eventLength?: Prisma.SortOrder;
  eventParentId?: Prisma.SortOrder;
  rating?: Prisma.SortOrder;
};

export type BookingTimeStatusDenormalizedSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uid?: boolean;
    eventTypeId?: boolean;
    title?: boolean;
    description?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    location?: boolean;
    paid?: boolean;
    status?: boolean;
    rescheduled?: boolean;
    userId?: boolean;
    teamId?: boolean;
    eventLength?: boolean;
    eventParentId?: boolean;
    userEmail?: boolean;
    userName?: boolean;
    userUsername?: boolean;
    ratingFeedback?: boolean;
    rating?: boolean;
    noShowHost?: boolean;
    isTeamBooking?: boolean;
    timeStatus?: boolean;
  },
  ExtArgs["result"]["bookingTimeStatusDenormalized"]
>;

export type BookingTimeStatusDenormalizedSelectScalar = {
  id?: boolean;
  uid?: boolean;
  eventTypeId?: boolean;
  title?: boolean;
  description?: boolean;
  startTime?: boolean;
  endTime?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  location?: boolean;
  paid?: boolean;
  status?: boolean;
  rescheduled?: boolean;
  userId?: boolean;
  teamId?: boolean;
  eventLength?: boolean;
  eventParentId?: boolean;
  userEmail?: boolean;
  userName?: boolean;
  userUsername?: boolean;
  ratingFeedback?: boolean;
  rating?: boolean;
  noShowHost?: boolean;
  isTeamBooking?: boolean;
  timeStatus?: boolean;
};

export type BookingTimeStatusDenormalizedOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "uid"
  | "eventTypeId"
  | "title"
  | "description"
  | "startTime"
  | "endTime"
  | "createdAt"
  | "updatedAt"
  | "location"
  | "paid"
  | "status"
  | "rescheduled"
  | "userId"
  | "teamId"
  | "eventLength"
  | "eventParentId"
  | "userEmail"
  | "userName"
  | "userUsername"
  | "ratingFeedback"
  | "rating"
  | "noShowHost"
  | "isTeamBooking"
  | "timeStatus",
  ExtArgs["result"]["bookingTimeStatusDenormalized"]
>;

export type $BookingTimeStatusDenormalizedPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "BookingTimeStatusDenormalized";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      uid: string;
      eventTypeId: number | null;
      title: string;
      description: string | null;
      startTime: Date;
      endTime: Date;
      createdAt: Date;
      updatedAt: Date | null;
      location: string | null;
      paid: boolean;
      status: $Enums.BookingStatus;
      rescheduled: boolean | null;
      userId: number | null;
      teamId: number | null;
      eventLength: number | null;
      eventParentId: number | null;
      userEmail: string | null;
      userName: string | null;
      userUsername: string | null;
      ratingFeedback: string | null;
      rating: number | null;
      noShowHost: boolean | null;
      isTeamBooking: boolean;
      timeStatus: string | null;
    },
    ExtArgs["result"]["bookingTimeStatusDenormalized"]
  >;
  composites: {};
};

export type BookingTimeStatusDenormalizedGetPayload<
  S extends boolean | null | undefined | BookingTimeStatusDenormalizedDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$BookingTimeStatusDenormalizedPayload, S>;

export type BookingTimeStatusDenormalizedCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<BookingTimeStatusDenormalizedFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BookingTimeStatusDenormalizedCountAggregateInputType | true;
};

export interface BookingTimeStatusDenormalizedDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["BookingTimeStatusDenormalized"];
    meta: { name: "BookingTimeStatusDenormalized" };
  };
  /**
   * Find zero or one BookingTimeStatusDenormalized that matches the filter.
   * @param {BookingTimeStatusDenormalizedFindUniqueArgs} args - Arguments to find a BookingTimeStatusDenormalized
   * @example
   * // Get one BookingTimeStatusDenormalized
   * const bookingTimeStatusDenormalized = await prisma.bookingTimeStatusDenormalized.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BookingTimeStatusDenormalizedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BookingTimeStatusDenormalizedFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusDenormalizedPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BookingTimeStatusDenormalized that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BookingTimeStatusDenormalizedFindUniqueOrThrowArgs} args - Arguments to find a BookingTimeStatusDenormalized
   * @example
   * // Get one BookingTimeStatusDenormalized
   * const bookingTimeStatusDenormalized = await prisma.bookingTimeStatusDenormalized.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BookingTimeStatusDenormalizedFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BookingTimeStatusDenormalizedFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusDenormalizedPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingTimeStatusDenormalized that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusDenormalizedFindFirstArgs} args - Arguments to find a BookingTimeStatusDenormalized
   * @example
   * // Get one BookingTimeStatusDenormalized
   * const bookingTimeStatusDenormalized = await prisma.bookingTimeStatusDenormalized.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BookingTimeStatusDenormalizedFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BookingTimeStatusDenormalizedFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusDenormalizedPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BookingTimeStatusDenormalized that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusDenormalizedFindFirstOrThrowArgs} args - Arguments to find a BookingTimeStatusDenormalized
   * @example
   * // Get one BookingTimeStatusDenormalized
   * const bookingTimeStatusDenormalized = await prisma.bookingTimeStatusDenormalized.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BookingTimeStatusDenormalizedFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BookingTimeStatusDenormalizedFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BookingTimeStatusDenormalizedClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusDenormalizedPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BookingTimeStatusDenormalizeds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusDenormalizedFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BookingTimeStatusDenormalizeds
   * const bookingTimeStatusDenormalizeds = await prisma.bookingTimeStatusDenormalized.findMany()
   *
   * // Get first 10 BookingTimeStatusDenormalizeds
   * const bookingTimeStatusDenormalizeds = await prisma.bookingTimeStatusDenormalized.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const bookingTimeStatusDenormalizedWithIdOnly = await prisma.bookingTimeStatusDenormalized.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BookingTimeStatusDenormalizedFindManyArgs>(
    args?: Prisma.SelectSubset<T, BookingTimeStatusDenormalizedFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BookingTimeStatusDenormalizedPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Count the number of BookingTimeStatusDenormalizeds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusDenormalizedCountArgs} args - Arguments to filter BookingTimeStatusDenormalizeds to count.
   * @example
   * // Count the number of BookingTimeStatusDenormalizeds
   * const count = await prisma.bookingTimeStatusDenormalized.count({
   *   where: {
   *     // ... the filter for the BookingTimeStatusDenormalizeds we want to count
   *   }
   * })
   **/
  count<T extends BookingTimeStatusDenormalizedCountArgs>(
    args?: Prisma.Subset<T, BookingTimeStatusDenormalizedCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BookingTimeStatusDenormalizedCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BookingTimeStatusDenormalized.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusDenormalizedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BookingTimeStatusDenormalizedAggregateArgs>(
    args: Prisma.Subset<T, BookingTimeStatusDenormalizedAggregateArgs>
  ): Prisma.PrismaPromise<GetBookingTimeStatusDenormalizedAggregateType<T>>;

  /**
   * Group by BookingTimeStatusDenormalized.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BookingTimeStatusDenormalizedGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BookingTimeStatusDenormalizedGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BookingTimeStatusDenormalizedGroupByArgs["orderBy"] }
      : { orderBy?: BookingTimeStatusDenormalizedGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, BookingTimeStatusDenormalizedGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors
    ? GetBookingTimeStatusDenormalizedGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BookingTimeStatusDenormalized model
   */
  readonly fields: BookingTimeStatusDenormalizedFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BookingTimeStatusDenormalized.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookingTimeStatusDenormalizedClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BookingTimeStatusDenormalized model
 */
export interface BookingTimeStatusDenormalizedFieldRefs {
  readonly id: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly uid: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly eventTypeId: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly title: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly description: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly startTime: Prisma.FieldRef<"BookingTimeStatusDenormalized", "DateTime">;
  readonly endTime: Prisma.FieldRef<"BookingTimeStatusDenormalized", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"BookingTimeStatusDenormalized", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"BookingTimeStatusDenormalized", "DateTime">;
  readonly location: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly paid: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Boolean">;
  readonly status: Prisma.FieldRef<"BookingTimeStatusDenormalized", "BookingStatus">;
  readonly rescheduled: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Boolean">;
  readonly userId: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly teamId: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly eventLength: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly eventParentId: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly userEmail: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly userName: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly userUsername: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly ratingFeedback: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
  readonly rating: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Int">;
  readonly noShowHost: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Boolean">;
  readonly isTeamBooking: Prisma.FieldRef<"BookingTimeStatusDenormalized", "Boolean">;
  readonly timeStatus: Prisma.FieldRef<"BookingTimeStatusDenormalized", "String">;
}

// Custom InputTypes
/**
 * BookingTimeStatusDenormalized findUnique
 */
export type BookingTimeStatusDenormalizedFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatusDenormalized
   */
  select?: Prisma.BookingTimeStatusDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatusDenormalized
   */
  omit?: Prisma.BookingTimeStatusDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatusDenormalized to fetch.
   */
  where: Prisma.BookingTimeStatusDenormalizedWhereUniqueInput;
};

/**
 * BookingTimeStatusDenormalized findUniqueOrThrow
 */
export type BookingTimeStatusDenormalizedFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatusDenormalized
   */
  select?: Prisma.BookingTimeStatusDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatusDenormalized
   */
  omit?: Prisma.BookingTimeStatusDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatusDenormalized to fetch.
   */
  where: Prisma.BookingTimeStatusDenormalizedWhereUniqueInput;
};

/**
 * BookingTimeStatusDenormalized findFirst
 */
export type BookingTimeStatusDenormalizedFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatusDenormalized
   */
  select?: Prisma.BookingTimeStatusDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatusDenormalized
   */
  omit?: Prisma.BookingTimeStatusDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatusDenormalized to fetch.
   */
  where?: Prisma.BookingTimeStatusDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatusDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingTimeStatusDenormalizeds.
   */
  cursor?: Prisma.BookingTimeStatusDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatusDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatusDenormalizeds.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingTimeStatusDenormalizeds.
   */
  distinct?:
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum[];
};

/**
 * BookingTimeStatusDenormalized findFirstOrThrow
 */
export type BookingTimeStatusDenormalizedFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatusDenormalized
   */
  select?: Prisma.BookingTimeStatusDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatusDenormalized
   */
  omit?: Prisma.BookingTimeStatusDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatusDenormalized to fetch.
   */
  where?: Prisma.BookingTimeStatusDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatusDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BookingTimeStatusDenormalizeds.
   */
  cursor?: Prisma.BookingTimeStatusDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatusDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatusDenormalizeds.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BookingTimeStatusDenormalizeds.
   */
  distinct?:
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum[];
};

/**
 * BookingTimeStatusDenormalized findMany
 */
export type BookingTimeStatusDenormalizedFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatusDenormalized
   */
  select?: Prisma.BookingTimeStatusDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatusDenormalized
   */
  omit?: Prisma.BookingTimeStatusDenormalizedOmit<ExtArgs> | null;
  /**
   * Filter, which BookingTimeStatusDenormalizeds to fetch.
   */
  where?: Prisma.BookingTimeStatusDenormalizedWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BookingTimeStatusDenormalizeds to fetch.
   */
  orderBy?:
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput
    | Prisma.BookingTimeStatusDenormalizedOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BookingTimeStatusDenormalizeds.
   */
  cursor?: Prisma.BookingTimeStatusDenormalizedWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BookingTimeStatusDenormalizeds from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BookingTimeStatusDenormalizeds.
   */
  skip?: number;
  distinct?:
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum
    | Prisma.BookingTimeStatusDenormalizedScalarFieldEnum[];
};

/**
 * BookingTimeStatusDenormalized without action
 */
export type BookingTimeStatusDenormalizedDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingTimeStatusDenormalized
   */
  select?: Prisma.BookingTimeStatusDenormalizedSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingTimeStatusDenormalized
   */
  omit?: Prisma.BookingTimeStatusDenormalizedOmit<ExtArgs> | null;
};
