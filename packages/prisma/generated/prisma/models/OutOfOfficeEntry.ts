/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `OutOfOfficeEntry` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model OutOfOfficeEntry
 *
 */
export type OutOfOfficeEntryModel = runtime.Types.Result.DefaultSelection<Prisma.$OutOfOfficeEntryPayload>;

export type AggregateOutOfOfficeEntry = {
  _count: OutOfOfficeEntryCountAggregateOutputType | null;
  _avg: OutOfOfficeEntryAvgAggregateOutputType | null;
  _sum: OutOfOfficeEntrySumAggregateOutputType | null;
  _min: OutOfOfficeEntryMinAggregateOutputType | null;
  _max: OutOfOfficeEntryMaxAggregateOutputType | null;
};

export type OutOfOfficeEntryAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  toUserId: number | null;
  reasonId: number | null;
};

export type OutOfOfficeEntrySumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  toUserId: number | null;
  reasonId: number | null;
};

export type OutOfOfficeEntryMinAggregateOutputType = {
  id: number | null;
  uuid: string | null;
  start: Date | null;
  end: Date | null;
  notes: string | null;
  userId: number | null;
  toUserId: number | null;
  reasonId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type OutOfOfficeEntryMaxAggregateOutputType = {
  id: number | null;
  uuid: string | null;
  start: Date | null;
  end: Date | null;
  notes: string | null;
  userId: number | null;
  toUserId: number | null;
  reasonId: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type OutOfOfficeEntryCountAggregateOutputType = {
  id: number;
  uuid: number;
  start: number;
  end: number;
  notes: number;
  userId: number;
  toUserId: number;
  reasonId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type OutOfOfficeEntryAvgAggregateInputType = {
  id?: true;
  userId?: true;
  toUserId?: true;
  reasonId?: true;
};

export type OutOfOfficeEntrySumAggregateInputType = {
  id?: true;
  userId?: true;
  toUserId?: true;
  reasonId?: true;
};

export type OutOfOfficeEntryMinAggregateInputType = {
  id?: true;
  uuid?: true;
  start?: true;
  end?: true;
  notes?: true;
  userId?: true;
  toUserId?: true;
  reasonId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type OutOfOfficeEntryMaxAggregateInputType = {
  id?: true;
  uuid?: true;
  start?: true;
  end?: true;
  notes?: true;
  userId?: true;
  toUserId?: true;
  reasonId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type OutOfOfficeEntryCountAggregateInputType = {
  id?: true;
  uuid?: true;
  start?: true;
  end?: true;
  notes?: true;
  userId?: true;
  toUserId?: true;
  reasonId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type OutOfOfficeEntryAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which OutOfOfficeEntry to aggregate.
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeEntries to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.OutOfOfficeEntryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeEntries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeEntries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned OutOfOfficeEntries
   **/
  _count?: true | OutOfOfficeEntryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: OutOfOfficeEntryAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: OutOfOfficeEntrySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: OutOfOfficeEntryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: OutOfOfficeEntryMaxAggregateInputType;
};

export type GetOutOfOfficeEntryAggregateType<T extends OutOfOfficeEntryAggregateArgs> = {
  [P in keyof T & keyof AggregateOutOfOfficeEntry]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOutOfOfficeEntry[P]>
    : Prisma.GetScalarType<T[P], AggregateOutOfOfficeEntry[P]>;
};

export type OutOfOfficeEntryGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.OutOfOfficeEntryWhereInput;
  orderBy?:
    | Prisma.OutOfOfficeEntryOrderByWithAggregationInput
    | Prisma.OutOfOfficeEntryOrderByWithAggregationInput[];
  by: Prisma.OutOfOfficeEntryScalarFieldEnum[] | Prisma.OutOfOfficeEntryScalarFieldEnum;
  having?: Prisma.OutOfOfficeEntryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: OutOfOfficeEntryCountAggregateInputType | true;
  _avg?: OutOfOfficeEntryAvgAggregateInputType;
  _sum?: OutOfOfficeEntrySumAggregateInputType;
  _min?: OutOfOfficeEntryMinAggregateInputType;
  _max?: OutOfOfficeEntryMaxAggregateInputType;
};

export type OutOfOfficeEntryGroupByOutputType = {
  id: number;
  uuid: string;
  start: Date;
  end: Date;
  notes: string | null;
  userId: number;
  toUserId: number | null;
  reasonId: number | null;
  createdAt: Date;
  updatedAt: Date;
  _count: OutOfOfficeEntryCountAggregateOutputType | null;
  _avg: OutOfOfficeEntryAvgAggregateOutputType | null;
  _sum: OutOfOfficeEntrySumAggregateOutputType | null;
  _min: OutOfOfficeEntryMinAggregateOutputType | null;
  _max: OutOfOfficeEntryMaxAggregateOutputType | null;
};

type GetOutOfOfficeEntryGroupByPayload<T extends OutOfOfficeEntryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OutOfOfficeEntryGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof OutOfOfficeEntryGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], OutOfOfficeEntryGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], OutOfOfficeEntryGroupByOutputType[P]>;
    }
  >
>;

export type OutOfOfficeEntryWhereInput = {
  AND?: Prisma.OutOfOfficeEntryWhereInput | Prisma.OutOfOfficeEntryWhereInput[];
  OR?: Prisma.OutOfOfficeEntryWhereInput[];
  NOT?: Prisma.OutOfOfficeEntryWhereInput | Prisma.OutOfOfficeEntryWhereInput[];
  id?: Prisma.IntFilter<"OutOfOfficeEntry"> | number;
  uuid?: Prisma.StringFilter<"OutOfOfficeEntry"> | string;
  start?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  end?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  notes?: Prisma.StringNullableFilter<"OutOfOfficeEntry"> | string | null;
  userId?: Prisma.IntFilter<"OutOfOfficeEntry"> | number;
  toUserId?: Prisma.IntNullableFilter<"OutOfOfficeEntry"> | number | null;
  reasonId?: Prisma.IntNullableFilter<"OutOfOfficeEntry"> | number | null;
  createdAt?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  toUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  reason?: Prisma.XOR<
    Prisma.OutOfOfficeReasonNullableScalarRelationFilter,
    Prisma.OutOfOfficeReasonWhereInput
  > | null;
};

export type OutOfOfficeEntryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  uuid?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  notes?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrderInput | Prisma.SortOrder;
  reasonId?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  toUser?: Prisma.UserOrderByWithRelationInput;
  reason?: Prisma.OutOfOfficeReasonOrderByWithRelationInput;
};

export type OutOfOfficeEntryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    uuid?: string;
    AND?: Prisma.OutOfOfficeEntryWhereInput | Prisma.OutOfOfficeEntryWhereInput[];
    OR?: Prisma.OutOfOfficeEntryWhereInput[];
    NOT?: Prisma.OutOfOfficeEntryWhereInput | Prisma.OutOfOfficeEntryWhereInput[];
    start?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
    end?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
    notes?: Prisma.StringNullableFilter<"OutOfOfficeEntry"> | string | null;
    userId?: Prisma.IntFilter<"OutOfOfficeEntry"> | number;
    toUserId?: Prisma.IntNullableFilter<"OutOfOfficeEntry"> | number | null;
    reasonId?: Prisma.IntNullableFilter<"OutOfOfficeEntry"> | number | null;
    createdAt?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    toUser?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    reason?: Prisma.XOR<
      Prisma.OutOfOfficeReasonNullableScalarRelationFilter,
      Prisma.OutOfOfficeReasonWhereInput
    > | null;
  },
  "id" | "uuid"
>;

export type OutOfOfficeEntryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  uuid?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  notes?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrderInput | Prisma.SortOrder;
  reasonId?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.OutOfOfficeEntryCountOrderByAggregateInput;
  _avg?: Prisma.OutOfOfficeEntryAvgOrderByAggregateInput;
  _max?: Prisma.OutOfOfficeEntryMaxOrderByAggregateInput;
  _min?: Prisma.OutOfOfficeEntryMinOrderByAggregateInput;
  _sum?: Prisma.OutOfOfficeEntrySumOrderByAggregateInput;
};

export type OutOfOfficeEntryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.OutOfOfficeEntryScalarWhereWithAggregatesInput
    | Prisma.OutOfOfficeEntryScalarWhereWithAggregatesInput[];
  OR?: Prisma.OutOfOfficeEntryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.OutOfOfficeEntryScalarWhereWithAggregatesInput
    | Prisma.OutOfOfficeEntryScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"OutOfOfficeEntry"> | number;
  uuid?: Prisma.StringWithAggregatesFilter<"OutOfOfficeEntry"> | string;
  start?: Prisma.DateTimeWithAggregatesFilter<"OutOfOfficeEntry"> | Date | string;
  end?: Prisma.DateTimeWithAggregatesFilter<"OutOfOfficeEntry"> | Date | string;
  notes?: Prisma.StringNullableWithAggregatesFilter<"OutOfOfficeEntry"> | string | null;
  userId?: Prisma.IntWithAggregatesFilter<"OutOfOfficeEntry"> | number;
  toUserId?: Prisma.IntNullableWithAggregatesFilter<"OutOfOfficeEntry"> | number | null;
  reasonId?: Prisma.IntNullableWithAggregatesFilter<"OutOfOfficeEntry"> | number | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"OutOfOfficeEntry"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"OutOfOfficeEntry"> | Date | string;
};

export type OutOfOfficeEntryCreateInput = {
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutBookingRedirectsInput;
  toUser?: Prisma.UserCreateNestedOneWithoutBookingRedirectsToInput;
  reason?: Prisma.OutOfOfficeReasonCreateNestedOneWithoutEntriesInput;
};

export type OutOfOfficeEntryUncheckedCreateInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  userId: number;
  toUserId?: number | null;
  reasonId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryUpdateInput = {
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutBookingRedirectsNestedInput;
  toUser?: Prisma.UserUpdateOneWithoutBookingRedirectsToNestedInput;
  reason?: Prisma.OutOfOfficeReasonUpdateOneWithoutEntriesNestedInput;
};

export type OutOfOfficeEntryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  toUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reasonId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryCreateManyInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  userId: number;
  toUserId?: number | null;
  reasonId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryUpdateManyMutationInput = {
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  toUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reasonId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryListRelationFilter = {
  every?: Prisma.OutOfOfficeEntryWhereInput;
  some?: Prisma.OutOfOfficeEntryWhereInput;
  none?: Prisma.OutOfOfficeEntryWhereInput;
};

export type OutOfOfficeEntryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type OutOfOfficeEntryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uuid?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  notes?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrder;
  reasonId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type OutOfOfficeEntryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrder;
  reasonId?: Prisma.SortOrder;
};

export type OutOfOfficeEntryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uuid?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  notes?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrder;
  reasonId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type OutOfOfficeEntryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  uuid?: Prisma.SortOrder;
  start?: Prisma.SortOrder;
  end?: Prisma.SortOrder;
  notes?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrder;
  reasonId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type OutOfOfficeEntrySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  toUserId?: Prisma.SortOrder;
  reasonId?: Prisma.SortOrder;
};

export type OutOfOfficeEntryCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyUserInputEnvelope;
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
};

export type OutOfOfficeEntryCreateNestedManyWithoutToUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutToUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutToUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyToUserInputEnvelope;
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
};

export type OutOfOfficeEntryUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyUserInputEnvelope;
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
};

export type OutOfOfficeEntryUncheckedCreateNestedManyWithoutToUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutToUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutToUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyToUserInputEnvelope;
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
};

export type OutOfOfficeEntryUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyUserInputEnvelope;
  set?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutUserInput
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
};

export type OutOfOfficeEntryUpdateManyWithoutToUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutToUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutToUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput[];
  upsert?:
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutToUserInput
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutToUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyToUserInputEnvelope;
  set?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutToUserInput
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutToUserInput[];
  updateMany?:
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutToUserInput
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutToUserInput[];
  deleteMany?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
};

export type OutOfOfficeEntryUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyUserInputEnvelope;
  set?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutUserInput
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutUserInput
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
};

export type OutOfOfficeEntryUncheckedUpdateManyWithoutToUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutToUserInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutToUserInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutToUserInput[];
  upsert?:
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutToUserInput
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutToUserInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyToUserInputEnvelope;
  set?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutToUserInput
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutToUserInput[];
  updateMany?:
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutToUserInput
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutToUserInput[];
  deleteMany?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
};

export type OutOfOfficeEntryCreateNestedManyWithoutReasonInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutReasonInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutReasonInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyReasonInputEnvelope;
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
};

export type OutOfOfficeEntryUncheckedCreateNestedManyWithoutReasonInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutReasonInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutReasonInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyReasonInputEnvelope;
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
};

export type OutOfOfficeEntryUpdateManyWithoutReasonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutReasonInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutReasonInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput[];
  upsert?:
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutReasonInput
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutReasonInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyReasonInputEnvelope;
  set?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutReasonInput
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutReasonInput[];
  updateMany?:
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutReasonInput
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutReasonInput[];
  deleteMany?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
};

export type OutOfOfficeEntryUncheckedUpdateManyWithoutReasonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OutOfOfficeEntryCreateWithoutReasonInput,
        Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput
      >
    | Prisma.OutOfOfficeEntryCreateWithoutReasonInput[]
    | Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput[];
  connectOrCreate?:
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput
    | Prisma.OutOfOfficeEntryCreateOrConnectWithoutReasonInput[];
  upsert?:
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutReasonInput
    | Prisma.OutOfOfficeEntryUpsertWithWhereUniqueWithoutReasonInput[];
  createMany?: Prisma.OutOfOfficeEntryCreateManyReasonInputEnvelope;
  set?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  disconnect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  delete?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  connect?: Prisma.OutOfOfficeEntryWhereUniqueInput | Prisma.OutOfOfficeEntryWhereUniqueInput[];
  update?:
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutReasonInput
    | Prisma.OutOfOfficeEntryUpdateWithWhereUniqueWithoutReasonInput[];
  updateMany?:
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutReasonInput
    | Prisma.OutOfOfficeEntryUpdateManyWithWhereWithoutReasonInput[];
  deleteMany?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
};

export type OutOfOfficeEntryCreateWithoutUserInput = {
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  toUser?: Prisma.UserCreateNestedOneWithoutBookingRedirectsToInput;
  reason?: Prisma.OutOfOfficeReasonCreateNestedOneWithoutEntriesInput;
};

export type OutOfOfficeEntryUncheckedCreateWithoutUserInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  toUserId?: number | null;
  reasonId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryCreateOrConnectWithoutUserInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OutOfOfficeEntryCreateWithoutUserInput,
    Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput
  >;
};

export type OutOfOfficeEntryCreateManyUserInputEnvelope = {
  data: Prisma.OutOfOfficeEntryCreateManyUserInput | Prisma.OutOfOfficeEntryCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type OutOfOfficeEntryCreateWithoutToUserInput = {
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutBookingRedirectsInput;
  reason?: Prisma.OutOfOfficeReasonCreateNestedOneWithoutEntriesInput;
};

export type OutOfOfficeEntryUncheckedCreateWithoutToUserInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  userId: number;
  reasonId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryCreateOrConnectWithoutToUserInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OutOfOfficeEntryCreateWithoutToUserInput,
    Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput
  >;
};

export type OutOfOfficeEntryCreateManyToUserInputEnvelope = {
  data: Prisma.OutOfOfficeEntryCreateManyToUserInput | Prisma.OutOfOfficeEntryCreateManyToUserInput[];
  skipDuplicates?: boolean;
};

export type OutOfOfficeEntryUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateWithoutUserInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.OutOfOfficeEntryCreateWithoutUserInput,
    Prisma.OutOfOfficeEntryUncheckedCreateWithoutUserInput
  >;
};

export type OutOfOfficeEntryUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateWithoutUserInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateWithoutUserInput
  >;
};

export type OutOfOfficeEntryUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.OutOfOfficeEntryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateManyMutationInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateManyWithoutUserInput
  >;
};

export type OutOfOfficeEntryScalarWhereInput = {
  AND?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
  OR?: Prisma.OutOfOfficeEntryScalarWhereInput[];
  NOT?: Prisma.OutOfOfficeEntryScalarWhereInput | Prisma.OutOfOfficeEntryScalarWhereInput[];
  id?: Prisma.IntFilter<"OutOfOfficeEntry"> | number;
  uuid?: Prisma.StringFilter<"OutOfOfficeEntry"> | string;
  start?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  end?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  notes?: Prisma.StringNullableFilter<"OutOfOfficeEntry"> | string | null;
  userId?: Prisma.IntFilter<"OutOfOfficeEntry"> | number;
  toUserId?: Prisma.IntNullableFilter<"OutOfOfficeEntry"> | number | null;
  reasonId?: Prisma.IntNullableFilter<"OutOfOfficeEntry"> | number | null;
  createdAt?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"OutOfOfficeEntry"> | Date | string;
};

export type OutOfOfficeEntryUpsertWithWhereUniqueWithoutToUserInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateWithoutToUserInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateWithoutToUserInput
  >;
  create: Prisma.XOR<
    Prisma.OutOfOfficeEntryCreateWithoutToUserInput,
    Prisma.OutOfOfficeEntryUncheckedCreateWithoutToUserInput
  >;
};

export type OutOfOfficeEntryUpdateWithWhereUniqueWithoutToUserInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateWithoutToUserInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateWithoutToUserInput
  >;
};

export type OutOfOfficeEntryUpdateManyWithWhereWithoutToUserInput = {
  where: Prisma.OutOfOfficeEntryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateManyMutationInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateManyWithoutToUserInput
  >;
};

export type OutOfOfficeEntryCreateWithoutReasonInput = {
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutBookingRedirectsInput;
  toUser?: Prisma.UserCreateNestedOneWithoutBookingRedirectsToInput;
};

export type OutOfOfficeEntryUncheckedCreateWithoutReasonInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  userId: number;
  toUserId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryCreateOrConnectWithoutReasonInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OutOfOfficeEntryCreateWithoutReasonInput,
    Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput
  >;
};

export type OutOfOfficeEntryCreateManyReasonInputEnvelope = {
  data: Prisma.OutOfOfficeEntryCreateManyReasonInput | Prisma.OutOfOfficeEntryCreateManyReasonInput[];
  skipDuplicates?: boolean;
};

export type OutOfOfficeEntryUpsertWithWhereUniqueWithoutReasonInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateWithoutReasonInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateWithoutReasonInput
  >;
  create: Prisma.XOR<
    Prisma.OutOfOfficeEntryCreateWithoutReasonInput,
    Prisma.OutOfOfficeEntryUncheckedCreateWithoutReasonInput
  >;
};

export type OutOfOfficeEntryUpdateWithWhereUniqueWithoutReasonInput = {
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateWithoutReasonInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateWithoutReasonInput
  >;
};

export type OutOfOfficeEntryUpdateManyWithWhereWithoutReasonInput = {
  where: Prisma.OutOfOfficeEntryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateManyMutationInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateManyWithoutReasonInput
  >;
};

export type OutOfOfficeEntryCreateManyUserInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  toUserId?: number | null;
  reasonId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryCreateManyToUserInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  userId: number;
  reasonId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryUpdateWithoutUserInput = {
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  toUser?: Prisma.UserUpdateOneWithoutBookingRedirectsToNestedInput;
  reason?: Prisma.OutOfOfficeReasonUpdateOneWithoutEntriesNestedInput;
};

export type OutOfOfficeEntryUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  toUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reasonId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  toUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  reasonId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryUpdateWithoutToUserInput = {
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutBookingRedirectsNestedInput;
  reason?: Prisma.OutOfOfficeReasonUpdateOneWithoutEntriesNestedInput;
};

export type OutOfOfficeEntryUncheckedUpdateWithoutToUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  reasonId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryUncheckedUpdateManyWithoutToUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  reasonId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryCreateManyReasonInput = {
  id?: number;
  uuid: string;
  start: Date | string;
  end: Date | string;
  notes?: string | null;
  userId: number;
  toUserId?: number | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type OutOfOfficeEntryUpdateWithoutReasonInput = {
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutBookingRedirectsNestedInput;
  toUser?: Prisma.UserUpdateOneWithoutBookingRedirectsToNestedInput;
};

export type OutOfOfficeEntryUncheckedUpdateWithoutReasonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  toUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntryUncheckedUpdateManyWithoutReasonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  uuid?: Prisma.StringFieldUpdateOperationsInput | string;
  start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  toUserId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type OutOfOfficeEntrySelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uuid?: boolean;
    start?: boolean;
    end?: boolean;
    notes?: boolean;
    userId?: boolean;
    toUserId?: boolean;
    reasonId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    toUser?: boolean | Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>;
    reason?: boolean | Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>;
  },
  ExtArgs["result"]["outOfOfficeEntry"]
>;

export type OutOfOfficeEntrySelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uuid?: boolean;
    start?: boolean;
    end?: boolean;
    notes?: boolean;
    userId?: boolean;
    toUserId?: boolean;
    reasonId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    toUser?: boolean | Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>;
    reason?: boolean | Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>;
  },
  ExtArgs["result"]["outOfOfficeEntry"]
>;

export type OutOfOfficeEntrySelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    uuid?: boolean;
    start?: boolean;
    end?: boolean;
    notes?: boolean;
    userId?: boolean;
    toUserId?: boolean;
    reasonId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    toUser?: boolean | Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>;
    reason?: boolean | Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>;
  },
  ExtArgs["result"]["outOfOfficeEntry"]
>;

export type OutOfOfficeEntrySelectScalar = {
  id?: boolean;
  uuid?: boolean;
  start?: boolean;
  end?: boolean;
  notes?: boolean;
  userId?: boolean;
  toUserId?: boolean;
  reasonId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type OutOfOfficeEntryOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "uuid" | "start" | "end" | "notes" | "userId" | "toUserId" | "reasonId" | "createdAt" | "updatedAt",
  ExtArgs["result"]["outOfOfficeEntry"]
>;
export type OutOfOfficeEntryInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  toUser?: boolean | Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>;
  reason?: boolean | Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>;
};
export type OutOfOfficeEntryIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  toUser?: boolean | Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>;
  reason?: boolean | Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>;
};
export type OutOfOfficeEntryIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  toUser?: boolean | Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>;
  reason?: boolean | Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>;
};

export type $OutOfOfficeEntryPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "OutOfOfficeEntry";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    toUser: Prisma.$UserPayload<ExtArgs> | null;
    reason: Prisma.$OutOfOfficeReasonPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      uuid: string;
      start: Date;
      end: Date;
      notes: string | null;
      userId: number;
      toUserId: number | null;
      reasonId: number | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["outOfOfficeEntry"]
  >;
  composites: {};
};

export type OutOfOfficeEntryGetPayload<S extends boolean | null | undefined | OutOfOfficeEntryDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$OutOfOfficeEntryPayload, S>;

export type OutOfOfficeEntryCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<OutOfOfficeEntryFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: OutOfOfficeEntryCountAggregateInputType | true;
};

export interface OutOfOfficeEntryDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["OutOfOfficeEntry"];
    meta: { name: "OutOfOfficeEntry" };
  };
  /**
   * Find zero or one OutOfOfficeEntry that matches the filter.
   * @param {OutOfOfficeEntryFindUniqueArgs} args - Arguments to find a OutOfOfficeEntry
   * @example
   * // Get one OutOfOfficeEntry
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OutOfOfficeEntryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one OutOfOfficeEntry that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OutOfOfficeEntryFindUniqueOrThrowArgs} args - Arguments to find a OutOfOfficeEntry
   * @example
   * // Get one OutOfOfficeEntry
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OutOfOfficeEntryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OutOfOfficeEntry that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryFindFirstArgs} args - Arguments to find a OutOfOfficeEntry
   * @example
   * // Get one OutOfOfficeEntry
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OutOfOfficeEntryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeEntryFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OutOfOfficeEntry that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryFindFirstOrThrowArgs} args - Arguments to find a OutOfOfficeEntry
   * @example
   * // Get one OutOfOfficeEntry
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OutOfOfficeEntryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeEntryFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more OutOfOfficeEntries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OutOfOfficeEntries
   * const outOfOfficeEntries = await prisma.outOfOfficeEntry.findMany()
   *
   * // Get first 10 OutOfOfficeEntries
   * const outOfOfficeEntries = await prisma.outOfOfficeEntry.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const outOfOfficeEntryWithIdOnly = await prisma.outOfOfficeEntry.findMany({ select: { id: true } })
   *
   */
  findMany<T extends OutOfOfficeEntryFindManyArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeEntryFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a OutOfOfficeEntry.
   * @param {OutOfOfficeEntryCreateArgs} args - Arguments to create a OutOfOfficeEntry.
   * @example
   * // Create one OutOfOfficeEntry
   * const OutOfOfficeEntry = await prisma.outOfOfficeEntry.create({
   *   data: {
   *     // ... data to create a OutOfOfficeEntry
   *   }
   * })
   *
   */
  create<T extends OutOfOfficeEntryCreateArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryCreateArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many OutOfOfficeEntries.
   * @param {OutOfOfficeEntryCreateManyArgs} args - Arguments to create many OutOfOfficeEntries.
   * @example
   * // Create many OutOfOfficeEntries
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends OutOfOfficeEntryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeEntryCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many OutOfOfficeEntries and returns the data saved in the database.
   * @param {OutOfOfficeEntryCreateManyAndReturnArgs} args - Arguments to create many OutOfOfficeEntries.
   * @example
   * // Create many OutOfOfficeEntries
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many OutOfOfficeEntries and only return the `id`
   * const outOfOfficeEntryWithIdOnly = await prisma.outOfOfficeEntry.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends OutOfOfficeEntryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeEntryCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a OutOfOfficeEntry.
   * @param {OutOfOfficeEntryDeleteArgs} args - Arguments to delete one OutOfOfficeEntry.
   * @example
   * // Delete one OutOfOfficeEntry
   * const OutOfOfficeEntry = await prisma.outOfOfficeEntry.delete({
   *   where: {
   *     // ... filter to delete one OutOfOfficeEntry
   *   }
   * })
   *
   */
  delete<T extends OutOfOfficeEntryDeleteArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one OutOfOfficeEntry.
   * @param {OutOfOfficeEntryUpdateArgs} args - Arguments to update one OutOfOfficeEntry.
   * @example
   * // Update one OutOfOfficeEntry
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends OutOfOfficeEntryUpdateArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more OutOfOfficeEntries.
   * @param {OutOfOfficeEntryDeleteManyArgs} args - Arguments to filter OutOfOfficeEntries to delete.
   * @example
   * // Delete a few OutOfOfficeEntries
   * const { count } = await prisma.outOfOfficeEntry.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends OutOfOfficeEntryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, OutOfOfficeEntryDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OutOfOfficeEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OutOfOfficeEntries
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends OutOfOfficeEntryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OutOfOfficeEntries and returns the data updated in the database.
   * @param {OutOfOfficeEntryUpdateManyAndReturnArgs} args - Arguments to update many OutOfOfficeEntries.
   * @example
   * // Update many OutOfOfficeEntries
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more OutOfOfficeEntries and only return the `id`
   * const outOfOfficeEntryWithIdOnly = await prisma.outOfOfficeEntry.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends OutOfOfficeEntryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeEntryPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one OutOfOfficeEntry.
   * @param {OutOfOfficeEntryUpsertArgs} args - Arguments to update or create a OutOfOfficeEntry.
   * @example
   * // Update or create a OutOfOfficeEntry
   * const outOfOfficeEntry = await prisma.outOfOfficeEntry.upsert({
   *   create: {
   *     // ... data to create a OutOfOfficeEntry
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OutOfOfficeEntry we want to update
   *   }
   * })
   */
  upsert<T extends OutOfOfficeEntryUpsertArgs>(
    args: Prisma.SelectSubset<T, OutOfOfficeEntryUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeEntryClient<
    runtime.Types.Result.GetResult<Prisma.$OutOfOfficeEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of OutOfOfficeEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryCountArgs} args - Arguments to filter OutOfOfficeEntries to count.
   * @example
   * // Count the number of OutOfOfficeEntries
   * const count = await prisma.outOfOfficeEntry.count({
   *   where: {
   *     // ... the filter for the OutOfOfficeEntries we want to count
   *   }
   * })
   **/
  count<T extends OutOfOfficeEntryCountArgs>(
    args?: Prisma.Subset<T, OutOfOfficeEntryCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], OutOfOfficeEntryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a OutOfOfficeEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends OutOfOfficeEntryAggregateArgs>(
    args: Prisma.Subset<T, OutOfOfficeEntryAggregateArgs>
  ): Prisma.PrismaPromise<GetOutOfOfficeEntryAggregateType<T>>;

  /**
   * Group by OutOfOfficeEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutOfOfficeEntryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends OutOfOfficeEntryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OutOfOfficeEntryGroupByArgs["orderBy"] }
      : { orderBy?: OutOfOfficeEntryGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, OutOfOfficeEntryGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetOutOfOfficeEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the OutOfOfficeEntry model
   */
  readonly fields: OutOfOfficeEntryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OutOfOfficeEntry.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OutOfOfficeEntryClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  toUser<T extends Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OutOfOfficeEntry$toUserArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  reason<T extends Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OutOfOfficeEntry$reasonArgs<ExtArgs>>
  ): Prisma.Prisma__OutOfOfficeReasonClient<
    runtime.Types.Result.GetResult<
      Prisma.$OutOfOfficeReasonPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the OutOfOfficeEntry model
 */
export interface OutOfOfficeEntryFieldRefs {
  readonly id: Prisma.FieldRef<"OutOfOfficeEntry", "Int">;
  readonly uuid: Prisma.FieldRef<"OutOfOfficeEntry", "String">;
  readonly start: Prisma.FieldRef<"OutOfOfficeEntry", "DateTime">;
  readonly end: Prisma.FieldRef<"OutOfOfficeEntry", "DateTime">;
  readonly notes: Prisma.FieldRef<"OutOfOfficeEntry", "String">;
  readonly userId: Prisma.FieldRef<"OutOfOfficeEntry", "Int">;
  readonly toUserId: Prisma.FieldRef<"OutOfOfficeEntry", "Int">;
  readonly reasonId: Prisma.FieldRef<"OutOfOfficeEntry", "Int">;
  readonly createdAt: Prisma.FieldRef<"OutOfOfficeEntry", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"OutOfOfficeEntry", "DateTime">;
}

// Custom InputTypes
/**
 * OutOfOfficeEntry findUnique
 */
export type OutOfOfficeEntryFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeEntry to fetch.
   */
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
};

/**
 * OutOfOfficeEntry findUniqueOrThrow
 */
export type OutOfOfficeEntryFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeEntry to fetch.
   */
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
};

/**
 * OutOfOfficeEntry findFirst
 */
export type OutOfOfficeEntryFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeEntry to fetch.
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeEntries to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OutOfOfficeEntries.
   */
  cursor?: Prisma.OutOfOfficeEntryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeEntries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeEntries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OutOfOfficeEntries.
   */
  distinct?: Prisma.OutOfOfficeEntryScalarFieldEnum | Prisma.OutOfOfficeEntryScalarFieldEnum[];
};

/**
 * OutOfOfficeEntry findFirstOrThrow
 */
export type OutOfOfficeEntryFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeEntry to fetch.
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeEntries to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OutOfOfficeEntries.
   */
  cursor?: Prisma.OutOfOfficeEntryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeEntries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeEntries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OutOfOfficeEntries.
   */
  distinct?: Prisma.OutOfOfficeEntryScalarFieldEnum | Prisma.OutOfOfficeEntryScalarFieldEnum[];
};

/**
 * OutOfOfficeEntry findMany
 */
export type OutOfOfficeEntryFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * Filter, which OutOfOfficeEntries to fetch.
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OutOfOfficeEntries to fetch.
   */
  orderBy?:
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput
    | Prisma.OutOfOfficeEntryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing OutOfOfficeEntries.
   */
  cursor?: Prisma.OutOfOfficeEntryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OutOfOfficeEntries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OutOfOfficeEntries.
   */
  skip?: number;
  distinct?: Prisma.OutOfOfficeEntryScalarFieldEnum | Prisma.OutOfOfficeEntryScalarFieldEnum[];
};

/**
 * OutOfOfficeEntry create
 */
export type OutOfOfficeEntryCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * The data needed to create a OutOfOfficeEntry.
   */
  data: Prisma.XOR<Prisma.OutOfOfficeEntryCreateInput, Prisma.OutOfOfficeEntryUncheckedCreateInput>;
};

/**
 * OutOfOfficeEntry createMany
 */
export type OutOfOfficeEntryCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many OutOfOfficeEntries.
   */
  data: Prisma.OutOfOfficeEntryCreateManyInput | Prisma.OutOfOfficeEntryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * OutOfOfficeEntry createManyAndReturn
 */
export type OutOfOfficeEntryCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * The data used to create many OutOfOfficeEntries.
   */
  data: Prisma.OutOfOfficeEntryCreateManyInput | Prisma.OutOfOfficeEntryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * OutOfOfficeEntry update
 */
export type OutOfOfficeEntryUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * The data needed to update a OutOfOfficeEntry.
   */
  data: Prisma.XOR<Prisma.OutOfOfficeEntryUpdateInput, Prisma.OutOfOfficeEntryUncheckedUpdateInput>;
  /**
   * Choose, which OutOfOfficeEntry to update.
   */
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
};

/**
 * OutOfOfficeEntry updateMany
 */
export type OutOfOfficeEntryUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update OutOfOfficeEntries.
   */
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateManyMutationInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateManyInput
  >;
  /**
   * Filter which OutOfOfficeEntries to update
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * Limit how many OutOfOfficeEntries to update.
   */
  limit?: number;
};

/**
 * OutOfOfficeEntry updateManyAndReturn
 */
export type OutOfOfficeEntryUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * The data used to update OutOfOfficeEntries.
   */
  data: Prisma.XOR<
    Prisma.OutOfOfficeEntryUpdateManyMutationInput,
    Prisma.OutOfOfficeEntryUncheckedUpdateManyInput
  >;
  /**
   * Filter which OutOfOfficeEntries to update
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * Limit how many OutOfOfficeEntries to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * OutOfOfficeEntry upsert
 */
export type OutOfOfficeEntryUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * The filter to search for the OutOfOfficeEntry to update in case it exists.
   */
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
  /**
   * In case the OutOfOfficeEntry found by the `where` argument doesn't exist, create a new OutOfOfficeEntry with this data.
   */
  create: Prisma.XOR<Prisma.OutOfOfficeEntryCreateInput, Prisma.OutOfOfficeEntryUncheckedCreateInput>;
  /**
   * In case the OutOfOfficeEntry was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OutOfOfficeEntryUpdateInput, Prisma.OutOfOfficeEntryUncheckedUpdateInput>;
};

/**
 * OutOfOfficeEntry delete
 */
export type OutOfOfficeEntryDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
  /**
   * Filter which OutOfOfficeEntry to delete.
   */
  where: Prisma.OutOfOfficeEntryWhereUniqueInput;
};

/**
 * OutOfOfficeEntry deleteMany
 */
export type OutOfOfficeEntryDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which OutOfOfficeEntries to delete
   */
  where?: Prisma.OutOfOfficeEntryWhereInput;
  /**
   * Limit how many OutOfOfficeEntries to delete.
   */
  limit?: number;
};

/**
 * OutOfOfficeEntry.toUser
 */
export type OutOfOfficeEntry$toUserArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * OutOfOfficeEntry.reason
 */
export type OutOfOfficeEntry$reasonArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeReason
   */
  select?: Prisma.OutOfOfficeReasonSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeReason
   */
  omit?: Prisma.OutOfOfficeReasonOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeReasonInclude<ExtArgs> | null;
  where?: Prisma.OutOfOfficeReasonWhereInput;
};

/**
 * OutOfOfficeEntry without action
 */
export type OutOfOfficeEntryDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OutOfOfficeEntry
   */
  select?: Prisma.OutOfOfficeEntrySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OutOfOfficeEntry
   */
  omit?: Prisma.OutOfOfficeEntryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutOfOfficeEntryInclude<ExtArgs> | null;
};
