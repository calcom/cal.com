/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `DSyncData` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model DSyncData
 *
 */
export type DSyncDataModel = runtime.Types.Result.DefaultSelection<Prisma.$DSyncDataPayload>;

export type AggregateDSyncData = {
  _count: DSyncDataCountAggregateOutputType | null;
  _avg: DSyncDataAvgAggregateOutputType | null;
  _sum: DSyncDataSumAggregateOutputType | null;
  _min: DSyncDataMinAggregateOutputType | null;
  _max: DSyncDataMaxAggregateOutputType | null;
};

export type DSyncDataAvgAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
};

export type DSyncDataSumAggregateOutputType = {
  id: number | null;
  organizationId: number | null;
};

export type DSyncDataMinAggregateOutputType = {
  id: number | null;
  directoryId: string | null;
  tenant: string | null;
  organizationId: number | null;
};

export type DSyncDataMaxAggregateOutputType = {
  id: number | null;
  directoryId: string | null;
  tenant: string | null;
  organizationId: number | null;
};

export type DSyncDataCountAggregateOutputType = {
  id: number;
  directoryId: number;
  tenant: number;
  organizationId: number;
  _all: number;
};

export type DSyncDataAvgAggregateInputType = {
  id?: true;
  organizationId?: true;
};

export type DSyncDataSumAggregateInputType = {
  id?: true;
  organizationId?: true;
};

export type DSyncDataMinAggregateInputType = {
  id?: true;
  directoryId?: true;
  tenant?: true;
  organizationId?: true;
};

export type DSyncDataMaxAggregateInputType = {
  id?: true;
  directoryId?: true;
  tenant?: true;
  organizationId?: true;
};

export type DSyncDataCountAggregateInputType = {
  id?: true;
  directoryId?: true;
  tenant?: true;
  organizationId?: true;
  _all?: true;
};

export type DSyncDataAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which DSyncData to aggregate.
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncData to fetch.
   */
  orderBy?: Prisma.DSyncDataOrderByWithRelationInput | Prisma.DSyncDataOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DSyncDataWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncData from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncData.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned DSyncData
   **/
  _count?: true | DSyncDataCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: DSyncDataAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: DSyncDataSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DSyncDataMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DSyncDataMaxAggregateInputType;
};

export type GetDSyncDataAggregateType<T extends DSyncDataAggregateArgs> = {
  [P in keyof T & keyof AggregateDSyncData]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDSyncData[P]>
    : Prisma.GetScalarType<T[P], AggregateDSyncData[P]>;
};

export type DSyncDataGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.DSyncDataWhereInput;
  orderBy?: Prisma.DSyncDataOrderByWithAggregationInput | Prisma.DSyncDataOrderByWithAggregationInput[];
  by: Prisma.DSyncDataScalarFieldEnum[] | Prisma.DSyncDataScalarFieldEnum;
  having?: Prisma.DSyncDataScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DSyncDataCountAggregateInputType | true;
  _avg?: DSyncDataAvgAggregateInputType;
  _sum?: DSyncDataSumAggregateInputType;
  _min?: DSyncDataMinAggregateInputType;
  _max?: DSyncDataMaxAggregateInputType;
};

export type DSyncDataGroupByOutputType = {
  id: number;
  directoryId: string;
  tenant: string;
  organizationId: number | null;
  _count: DSyncDataCountAggregateOutputType | null;
  _avg: DSyncDataAvgAggregateOutputType | null;
  _sum: DSyncDataSumAggregateOutputType | null;
  _min: DSyncDataMinAggregateOutputType | null;
  _max: DSyncDataMaxAggregateOutputType | null;
};

type GetDSyncDataGroupByPayload<T extends DSyncDataGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DSyncDataGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof DSyncDataGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], DSyncDataGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], DSyncDataGroupByOutputType[P]>;
    }
  >
>;

export type DSyncDataWhereInput = {
  AND?: Prisma.DSyncDataWhereInput | Prisma.DSyncDataWhereInput[];
  OR?: Prisma.DSyncDataWhereInput[];
  NOT?: Prisma.DSyncDataWhereInput | Prisma.DSyncDataWhereInput[];
  id?: Prisma.IntFilter<"DSyncData"> | number;
  directoryId?: Prisma.StringFilter<"DSyncData"> | string;
  tenant?: Prisma.StringFilter<"DSyncData"> | string;
  organizationId?: Prisma.IntNullableFilter<"DSyncData"> | number | null;
  org?: Prisma.XOR<
    Prisma.OrganizationSettingsNullableScalarRelationFilter,
    Prisma.OrganizationSettingsWhereInput
  > | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingListRelationFilter;
  createdAttributeToUsers?: Prisma.AttributeToUserListRelationFilter;
  updatedAttributeToUsers?: Prisma.AttributeToUserListRelationFilter;
};

export type DSyncDataOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  tenant?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrderInput | Prisma.SortOrder;
  org?: Prisma.OrganizationSettingsOrderByWithRelationInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingOrderByRelationAggregateInput;
  createdAttributeToUsers?: Prisma.AttributeToUserOrderByRelationAggregateInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserOrderByRelationAggregateInput;
};

export type DSyncDataWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    directoryId?: string;
    organizationId?: number;
    AND?: Prisma.DSyncDataWhereInput | Prisma.DSyncDataWhereInput[];
    OR?: Prisma.DSyncDataWhereInput[];
    NOT?: Prisma.DSyncDataWhereInput | Prisma.DSyncDataWhereInput[];
    tenant?: Prisma.StringFilter<"DSyncData"> | string;
    org?: Prisma.XOR<
      Prisma.OrganizationSettingsNullableScalarRelationFilter,
      Prisma.OrganizationSettingsWhereInput
    > | null;
    teamGroupMapping?: Prisma.DSyncTeamGroupMappingListRelationFilter;
    createdAttributeToUsers?: Prisma.AttributeToUserListRelationFilter;
    updatedAttributeToUsers?: Prisma.AttributeToUserListRelationFilter;
  },
  "id" | "directoryId" | "organizationId"
>;

export type DSyncDataOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  tenant?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.DSyncDataCountOrderByAggregateInput;
  _avg?: Prisma.DSyncDataAvgOrderByAggregateInput;
  _max?: Prisma.DSyncDataMaxOrderByAggregateInput;
  _min?: Prisma.DSyncDataMinOrderByAggregateInput;
  _sum?: Prisma.DSyncDataSumOrderByAggregateInput;
};

export type DSyncDataScalarWhereWithAggregatesInput = {
  AND?: Prisma.DSyncDataScalarWhereWithAggregatesInput | Prisma.DSyncDataScalarWhereWithAggregatesInput[];
  OR?: Prisma.DSyncDataScalarWhereWithAggregatesInput[];
  NOT?: Prisma.DSyncDataScalarWhereWithAggregatesInput | Prisma.DSyncDataScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"DSyncData"> | number;
  directoryId?: Prisma.StringWithAggregatesFilter<"DSyncData"> | string;
  tenant?: Prisma.StringWithAggregatesFilter<"DSyncData"> | string;
  organizationId?: Prisma.IntNullableWithAggregatesFilter<"DSyncData"> | number | null;
};

export type DSyncDataCreateInput = {
  directoryId: string;
  tenant: string;
  org?: Prisma.OrganizationSettingsCreateNestedOneWithoutDSyncDataInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingCreateNestedManyWithoutDirectoryInput;
  createdAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutCreatedByDSyncInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataUncheckedCreateInput = {
  id?: number;
  directoryId: string;
  tenant: string;
  organizationId?: number | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedCreateNestedManyWithoutDirectoryInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutCreatedByDSyncInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataUpdateInput = {
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  org?: Prisma.OrganizationSettingsUpdateOneWithoutDSyncDataNestedInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUpdateManyWithoutDirectoryNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutCreatedByDSyncNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutCreatedByDSyncNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataCreateManyInput = {
  id?: number;
  directoryId: string;
  tenant: string;
  organizationId?: number | null;
};

export type DSyncDataUpdateManyMutationInput = {
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type DSyncDataUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type DSyncDataNullableScalarRelationFilter = {
  is?: Prisma.DSyncDataWhereInput | null;
  isNot?: Prisma.DSyncDataWhereInput | null;
};

export type DSyncDataCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  tenant?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type DSyncDataAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type DSyncDataMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  tenant?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type DSyncDataMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  directoryId?: Prisma.SortOrder;
  tenant?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type DSyncDataSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
};

export type DSyncDataScalarRelationFilter = {
  is?: Prisma.DSyncDataWhereInput;
  isNot?: Prisma.DSyncDataWhereInput;
};

export type DSyncDataCreateNestedOneWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.DSyncDataCreateWithoutOrgInput, Prisma.DSyncDataUncheckedCreateWithoutOrgInput>;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutOrgInput;
  connect?: Prisma.DSyncDataWhereUniqueInput;
};

export type DSyncDataUncheckedCreateNestedOneWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.DSyncDataCreateWithoutOrgInput, Prisma.DSyncDataUncheckedCreateWithoutOrgInput>;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutOrgInput;
  connect?: Prisma.DSyncDataWhereUniqueInput;
};

export type DSyncDataUpdateOneWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.DSyncDataCreateWithoutOrgInput, Prisma.DSyncDataUncheckedCreateWithoutOrgInput>;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutOrgInput;
  upsert?: Prisma.DSyncDataUpsertWithoutOrgInput;
  disconnect?: Prisma.DSyncDataWhereInput | boolean;
  delete?: Prisma.DSyncDataWhereInput | boolean;
  connect?: Prisma.DSyncDataWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<Prisma.DSyncDataUpdateToOneWithWhereWithoutOrgInput, Prisma.DSyncDataUpdateWithoutOrgInput>,
    Prisma.DSyncDataUncheckedUpdateWithoutOrgInput
  >;
};

export type DSyncDataUncheckedUpdateOneWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.DSyncDataCreateWithoutOrgInput, Prisma.DSyncDataUncheckedCreateWithoutOrgInput>;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutOrgInput;
  upsert?: Prisma.DSyncDataUpsertWithoutOrgInput;
  disconnect?: Prisma.DSyncDataWhereInput | boolean;
  delete?: Prisma.DSyncDataWhereInput | boolean;
  connect?: Prisma.DSyncDataWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<Prisma.DSyncDataUpdateToOneWithWhereWithoutOrgInput, Prisma.DSyncDataUpdateWithoutOrgInput>,
    Prisma.DSyncDataUncheckedUpdateWithoutOrgInput
  >;
};

export type DSyncDataCreateNestedOneWithoutTeamGroupMappingInput = {
  create?: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutTeamGroupMappingInput,
    Prisma.DSyncDataUncheckedCreateWithoutTeamGroupMappingInput
  >;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutTeamGroupMappingInput;
  connect?: Prisma.DSyncDataWhereUniqueInput;
};

export type DSyncDataUpdateOneRequiredWithoutTeamGroupMappingNestedInput = {
  create?: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutTeamGroupMappingInput,
    Prisma.DSyncDataUncheckedCreateWithoutTeamGroupMappingInput
  >;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutTeamGroupMappingInput;
  upsert?: Prisma.DSyncDataUpsertWithoutTeamGroupMappingInput;
  connect?: Prisma.DSyncDataWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.DSyncDataUpdateToOneWithWhereWithoutTeamGroupMappingInput,
      Prisma.DSyncDataUpdateWithoutTeamGroupMappingInput
    >,
    Prisma.DSyncDataUncheckedUpdateWithoutTeamGroupMappingInput
  >;
};

export type DSyncDataCreateNestedOneWithoutCreatedAttributeToUsersInput = {
  create?: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutCreatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutCreatedAttributeToUsersInput
  >;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutCreatedAttributeToUsersInput;
  connect?: Prisma.DSyncDataWhereUniqueInput;
};

export type DSyncDataCreateNestedOneWithoutUpdatedAttributeToUsersInput = {
  create?: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutUpdatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutUpdatedAttributeToUsersInput
  >;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutUpdatedAttributeToUsersInput;
  connect?: Prisma.DSyncDataWhereUniqueInput;
};

export type DSyncDataUpdateOneWithoutCreatedAttributeToUsersNestedInput = {
  create?: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutCreatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutCreatedAttributeToUsersInput
  >;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutCreatedAttributeToUsersInput;
  upsert?: Prisma.DSyncDataUpsertWithoutCreatedAttributeToUsersInput;
  disconnect?: Prisma.DSyncDataWhereInput | boolean;
  delete?: Prisma.DSyncDataWhereInput | boolean;
  connect?: Prisma.DSyncDataWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.DSyncDataUpdateToOneWithWhereWithoutCreatedAttributeToUsersInput,
      Prisma.DSyncDataUpdateWithoutCreatedAttributeToUsersInput
    >,
    Prisma.DSyncDataUncheckedUpdateWithoutCreatedAttributeToUsersInput
  >;
};

export type DSyncDataUpdateOneWithoutUpdatedAttributeToUsersNestedInput = {
  create?: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutUpdatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutUpdatedAttributeToUsersInput
  >;
  connectOrCreate?: Prisma.DSyncDataCreateOrConnectWithoutUpdatedAttributeToUsersInput;
  upsert?: Prisma.DSyncDataUpsertWithoutUpdatedAttributeToUsersInput;
  disconnect?: Prisma.DSyncDataWhereInput | boolean;
  delete?: Prisma.DSyncDataWhereInput | boolean;
  connect?: Prisma.DSyncDataWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.DSyncDataUpdateToOneWithWhereWithoutUpdatedAttributeToUsersInput,
      Prisma.DSyncDataUpdateWithoutUpdatedAttributeToUsersInput
    >,
    Prisma.DSyncDataUncheckedUpdateWithoutUpdatedAttributeToUsersInput
  >;
};

export type DSyncDataCreateWithoutOrgInput = {
  directoryId: string;
  tenant: string;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingCreateNestedManyWithoutDirectoryInput;
  createdAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutCreatedByDSyncInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataUncheckedCreateWithoutOrgInput = {
  id?: number;
  directoryId: string;
  tenant: string;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedCreateNestedManyWithoutDirectoryInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutCreatedByDSyncInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataCreateOrConnectWithoutOrgInput = {
  where: Prisma.DSyncDataWhereUniqueInput;
  create: Prisma.XOR<Prisma.DSyncDataCreateWithoutOrgInput, Prisma.DSyncDataUncheckedCreateWithoutOrgInput>;
};

export type DSyncDataUpsertWithoutOrgInput = {
  update: Prisma.XOR<Prisma.DSyncDataUpdateWithoutOrgInput, Prisma.DSyncDataUncheckedUpdateWithoutOrgInput>;
  create: Prisma.XOR<Prisma.DSyncDataCreateWithoutOrgInput, Prisma.DSyncDataUncheckedCreateWithoutOrgInput>;
  where?: Prisma.DSyncDataWhereInput;
};

export type DSyncDataUpdateToOneWithWhereWithoutOrgInput = {
  where?: Prisma.DSyncDataWhereInput;
  data: Prisma.XOR<Prisma.DSyncDataUpdateWithoutOrgInput, Prisma.DSyncDataUncheckedUpdateWithoutOrgInput>;
};

export type DSyncDataUpdateWithoutOrgInput = {
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUpdateManyWithoutDirectoryNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutCreatedByDSyncNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataUncheckedUpdateWithoutOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutCreatedByDSyncNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataCreateWithoutTeamGroupMappingInput = {
  directoryId: string;
  tenant: string;
  org?: Prisma.OrganizationSettingsCreateNestedOneWithoutDSyncDataInput;
  createdAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutCreatedByDSyncInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataUncheckedCreateWithoutTeamGroupMappingInput = {
  id?: number;
  directoryId: string;
  tenant: string;
  organizationId?: number | null;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutCreatedByDSyncInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataCreateOrConnectWithoutTeamGroupMappingInput = {
  where: Prisma.DSyncDataWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutTeamGroupMappingInput,
    Prisma.DSyncDataUncheckedCreateWithoutTeamGroupMappingInput
  >;
};

export type DSyncDataUpsertWithoutTeamGroupMappingInput = {
  update: Prisma.XOR<
    Prisma.DSyncDataUpdateWithoutTeamGroupMappingInput,
    Prisma.DSyncDataUncheckedUpdateWithoutTeamGroupMappingInput
  >;
  create: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutTeamGroupMappingInput,
    Prisma.DSyncDataUncheckedCreateWithoutTeamGroupMappingInput
  >;
  where?: Prisma.DSyncDataWhereInput;
};

export type DSyncDataUpdateToOneWithWhereWithoutTeamGroupMappingInput = {
  where?: Prisma.DSyncDataWhereInput;
  data: Prisma.XOR<
    Prisma.DSyncDataUpdateWithoutTeamGroupMappingInput,
    Prisma.DSyncDataUncheckedUpdateWithoutTeamGroupMappingInput
  >;
};

export type DSyncDataUpdateWithoutTeamGroupMappingInput = {
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  org?: Prisma.OrganizationSettingsUpdateOneWithoutDSyncDataNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutCreatedByDSyncNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataUncheckedUpdateWithoutTeamGroupMappingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutCreatedByDSyncNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataCreateWithoutCreatedAttributeToUsersInput = {
  directoryId: string;
  tenant: string;
  org?: Prisma.OrganizationSettingsCreateNestedOneWithoutDSyncDataInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingCreateNestedManyWithoutDirectoryInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataUncheckedCreateWithoutCreatedAttributeToUsersInput = {
  id?: number;
  directoryId: string;
  tenant: string;
  organizationId?: number | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedCreateNestedManyWithoutDirectoryInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutUpdatedByDSyncInput;
};

export type DSyncDataCreateOrConnectWithoutCreatedAttributeToUsersInput = {
  where: Prisma.DSyncDataWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutCreatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutCreatedAttributeToUsersInput
  >;
};

export type DSyncDataCreateWithoutUpdatedAttributeToUsersInput = {
  directoryId: string;
  tenant: string;
  org?: Prisma.OrganizationSettingsCreateNestedOneWithoutDSyncDataInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingCreateNestedManyWithoutDirectoryInput;
  createdAttributeToUsers?: Prisma.AttributeToUserCreateNestedManyWithoutCreatedByDSyncInput;
};

export type DSyncDataUncheckedCreateWithoutUpdatedAttributeToUsersInput = {
  id?: number;
  directoryId: string;
  tenant: string;
  organizationId?: number | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedCreateNestedManyWithoutDirectoryInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedCreateNestedManyWithoutCreatedByDSyncInput;
};

export type DSyncDataCreateOrConnectWithoutUpdatedAttributeToUsersInput = {
  where: Prisma.DSyncDataWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutUpdatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutUpdatedAttributeToUsersInput
  >;
};

export type DSyncDataUpsertWithoutCreatedAttributeToUsersInput = {
  update: Prisma.XOR<
    Prisma.DSyncDataUpdateWithoutCreatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedUpdateWithoutCreatedAttributeToUsersInput
  >;
  create: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutCreatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutCreatedAttributeToUsersInput
  >;
  where?: Prisma.DSyncDataWhereInput;
};

export type DSyncDataUpdateToOneWithWhereWithoutCreatedAttributeToUsersInput = {
  where?: Prisma.DSyncDataWhereInput;
  data: Prisma.XOR<
    Prisma.DSyncDataUpdateWithoutCreatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedUpdateWithoutCreatedAttributeToUsersInput
  >;
};

export type DSyncDataUpdateWithoutCreatedAttributeToUsersInput = {
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  org?: Prisma.OrganizationSettingsUpdateOneWithoutDSyncDataNestedInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUpdateManyWithoutDirectoryNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataUncheckedUpdateWithoutCreatedAttributeToUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryNestedInput;
  updatedAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutUpdatedByDSyncNestedInput;
};

export type DSyncDataUpsertWithoutUpdatedAttributeToUsersInput = {
  update: Prisma.XOR<
    Prisma.DSyncDataUpdateWithoutUpdatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedUpdateWithoutUpdatedAttributeToUsersInput
  >;
  create: Prisma.XOR<
    Prisma.DSyncDataCreateWithoutUpdatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedCreateWithoutUpdatedAttributeToUsersInput
  >;
  where?: Prisma.DSyncDataWhereInput;
};

export type DSyncDataUpdateToOneWithWhereWithoutUpdatedAttributeToUsersInput = {
  where?: Prisma.DSyncDataWhereInput;
  data: Prisma.XOR<
    Prisma.DSyncDataUpdateWithoutUpdatedAttributeToUsersInput,
    Prisma.DSyncDataUncheckedUpdateWithoutUpdatedAttributeToUsersInput
  >;
};

export type DSyncDataUpdateWithoutUpdatedAttributeToUsersInput = {
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  org?: Prisma.OrganizationSettingsUpdateOneWithoutDSyncDataNestedInput;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUpdateManyWithoutDirectoryNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUpdateManyWithoutCreatedByDSyncNestedInput;
};

export type DSyncDataUncheckedUpdateWithoutUpdatedAttributeToUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  directoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  tenant?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamGroupMapping?: Prisma.DSyncTeamGroupMappingUncheckedUpdateManyWithoutDirectoryNestedInput;
  createdAttributeToUsers?: Prisma.AttributeToUserUncheckedUpdateManyWithoutCreatedByDSyncNestedInput;
};

/**
 * Count Type DSyncDataCountOutputType
 */

export type DSyncDataCountOutputType = {
  teamGroupMapping: number;
  createdAttributeToUsers: number;
  updatedAttributeToUsers: number;
};

export type DSyncDataCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  teamGroupMapping?: boolean | DSyncDataCountOutputTypeCountTeamGroupMappingArgs;
  createdAttributeToUsers?: boolean | DSyncDataCountOutputTypeCountCreatedAttributeToUsersArgs;
  updatedAttributeToUsers?: boolean | DSyncDataCountOutputTypeCountUpdatedAttributeToUsersArgs;
};

/**
 * DSyncDataCountOutputType without action
 */
export type DSyncDataCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncDataCountOutputType
   */
  select?: Prisma.DSyncDataCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * DSyncDataCountOutputType without action
 */
export type DSyncDataCountOutputTypeCountTeamGroupMappingArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
};

/**
 * DSyncDataCountOutputType without action
 */
export type DSyncDataCountOutputTypeCountCreatedAttributeToUsersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AttributeToUserWhereInput;
};

/**
 * DSyncDataCountOutputType without action
 */
export type DSyncDataCountOutputTypeCountUpdatedAttributeToUsersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AttributeToUserWhereInput;
};

export type DSyncDataSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    directoryId?: boolean;
    tenant?: boolean;
    organizationId?: boolean;
    org?: boolean | Prisma.DSyncData$orgArgs<ExtArgs>;
    teamGroupMapping?: boolean | Prisma.DSyncData$teamGroupMappingArgs<ExtArgs>;
    createdAttributeToUsers?: boolean | Prisma.DSyncData$createdAttributeToUsersArgs<ExtArgs>;
    updatedAttributeToUsers?: boolean | Prisma.DSyncData$updatedAttributeToUsersArgs<ExtArgs>;
    _count?: boolean | Prisma.DSyncDataCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["dSyncData"]
>;

export type DSyncDataSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    directoryId?: boolean;
    tenant?: boolean;
    organizationId?: boolean;
    org?: boolean | Prisma.DSyncData$orgArgs<ExtArgs>;
  },
  ExtArgs["result"]["dSyncData"]
>;

export type DSyncDataSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    directoryId?: boolean;
    tenant?: boolean;
    organizationId?: boolean;
    org?: boolean | Prisma.DSyncData$orgArgs<ExtArgs>;
  },
  ExtArgs["result"]["dSyncData"]
>;

export type DSyncDataSelectScalar = {
  id?: boolean;
  directoryId?: boolean;
  tenant?: boolean;
  organizationId?: boolean;
};

export type DSyncDataOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "directoryId" | "tenant" | "organizationId",
  ExtArgs["result"]["dSyncData"]
>;
export type DSyncDataInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  org?: boolean | Prisma.DSyncData$orgArgs<ExtArgs>;
  teamGroupMapping?: boolean | Prisma.DSyncData$teamGroupMappingArgs<ExtArgs>;
  createdAttributeToUsers?: boolean | Prisma.DSyncData$createdAttributeToUsersArgs<ExtArgs>;
  updatedAttributeToUsers?: boolean | Prisma.DSyncData$updatedAttributeToUsersArgs<ExtArgs>;
  _count?: boolean | Prisma.DSyncDataCountOutputTypeDefaultArgs<ExtArgs>;
};
export type DSyncDataIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  org?: boolean | Prisma.DSyncData$orgArgs<ExtArgs>;
};
export type DSyncDataIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  org?: boolean | Prisma.DSyncData$orgArgs<ExtArgs>;
};

export type $DSyncDataPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "DSyncData";
  objects: {
    org: Prisma.$OrganizationSettingsPayload<ExtArgs> | null;
    teamGroupMapping: Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>[];
    createdAttributeToUsers: Prisma.$AttributeToUserPayload<ExtArgs>[];
    updatedAttributeToUsers: Prisma.$AttributeToUserPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      directoryId: string;
      tenant: string;
      organizationId: number | null;
    },
    ExtArgs["result"]["dSyncData"]
  >;
  composites: {};
};

export type DSyncDataGetPayload<S extends boolean | null | undefined | DSyncDataDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$DSyncDataPayload, S>;

export type DSyncDataCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<DSyncDataFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: DSyncDataCountAggregateInputType | true;
};

export interface DSyncDataDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["DSyncData"]; meta: { name: "DSyncData" } };
  /**
   * Find zero or one DSyncData that matches the filter.
   * @param {DSyncDataFindUniqueArgs} args - Arguments to find a DSyncData
   * @example
   * // Get one DSyncData
   * const dSyncData = await prisma.dSyncData.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DSyncDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DSyncDataFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one DSyncData that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DSyncDataFindUniqueOrThrowArgs} args - Arguments to find a DSyncData
   * @example
   * // Get one DSyncData
   * const dSyncData = await prisma.dSyncData.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DSyncDataFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DSyncDataFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first DSyncData that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataFindFirstArgs} args - Arguments to find a DSyncData
   * @example
   * // Get one DSyncData
   * const dSyncData = await prisma.dSyncData.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DSyncDataFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DSyncDataFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first DSyncData that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataFindFirstOrThrowArgs} args - Arguments to find a DSyncData
   * @example
   * // Get one DSyncData
   * const dSyncData = await prisma.dSyncData.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DSyncDataFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DSyncDataFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more DSyncData that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DSyncData
   * const dSyncData = await prisma.dSyncData.findMany()
   *
   * // Get first 10 DSyncData
   * const dSyncData = await prisma.dSyncData.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const dSyncDataWithIdOnly = await prisma.dSyncData.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DSyncDataFindManyArgs>(
    args?: Prisma.SelectSubset<T, DSyncDataFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$DSyncDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a DSyncData.
   * @param {DSyncDataCreateArgs} args - Arguments to create a DSyncData.
   * @example
   * // Create one DSyncData
   * const DSyncData = await prisma.dSyncData.create({
   *   data: {
   *     // ... data to create a DSyncData
   *   }
   * })
   *
   */
  create<T extends DSyncDataCreateArgs>(
    args: Prisma.SelectSubset<T, DSyncDataCreateArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<Prisma.$DSyncDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many DSyncData.
   * @param {DSyncDataCreateManyArgs} args - Arguments to create many DSyncData.
   * @example
   * // Create many DSyncData
   * const dSyncData = await prisma.dSyncData.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DSyncDataCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DSyncDataCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many DSyncData and returns the data saved in the database.
   * @param {DSyncDataCreateManyAndReturnArgs} args - Arguments to create many DSyncData.
   * @example
   * // Create many DSyncData
   * const dSyncData = await prisma.dSyncData.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many DSyncData and only return the `id`
   * const dSyncDataWithIdOnly = await prisma.dSyncData.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DSyncDataCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DSyncDataCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a DSyncData.
   * @param {DSyncDataDeleteArgs} args - Arguments to delete one DSyncData.
   * @example
   * // Delete one DSyncData
   * const DSyncData = await prisma.dSyncData.delete({
   *   where: {
   *     // ... filter to delete one DSyncData
   *   }
   * })
   *
   */
  delete<T extends DSyncDataDeleteArgs>(
    args: Prisma.SelectSubset<T, DSyncDataDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<Prisma.$DSyncDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one DSyncData.
   * @param {DSyncDataUpdateArgs} args - Arguments to update one DSyncData.
   * @example
   * // Update one DSyncData
   * const dSyncData = await prisma.dSyncData.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DSyncDataUpdateArgs>(
    args: Prisma.SelectSubset<T, DSyncDataUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<Prisma.$DSyncDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more DSyncData.
   * @param {DSyncDataDeleteManyArgs} args - Arguments to filter DSyncData to delete.
   * @example
   * // Delete a few DSyncData
   * const { count } = await prisma.dSyncData.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DSyncDataDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DSyncDataDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more DSyncData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DSyncData
   * const dSyncData = await prisma.dSyncData.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DSyncDataUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DSyncDataUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more DSyncData and returns the data updated in the database.
   * @param {DSyncDataUpdateManyAndReturnArgs} args - Arguments to update many DSyncData.
   * @example
   * // Update many DSyncData
   * const dSyncData = await prisma.dSyncData.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more DSyncData and only return the `id`
   * const dSyncDataWithIdOnly = await prisma.dSyncData.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DSyncDataUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DSyncDataUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DSyncDataPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one DSyncData.
   * @param {DSyncDataUpsertArgs} args - Arguments to update or create a DSyncData.
   * @example
   * // Update or create a DSyncData
   * const dSyncData = await prisma.dSyncData.upsert({
   *   create: {
   *     // ... data to create a DSyncData
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DSyncData we want to update
   *   }
   * })
   */
  upsert<T extends DSyncDataUpsertArgs>(
    args: Prisma.SelectSubset<T, DSyncDataUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__DSyncDataClient<
    runtime.Types.Result.GetResult<Prisma.$DSyncDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of DSyncData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataCountArgs} args - Arguments to filter DSyncData to count.
   * @example
   * // Count the number of DSyncData
   * const count = await prisma.dSyncData.count({
   *   where: {
   *     // ... the filter for the DSyncData we want to count
   *   }
   * })
   **/
  count<T extends DSyncDataCountArgs>(
    args?: Prisma.Subset<T, DSyncDataCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], DSyncDataCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a DSyncData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DSyncDataAggregateArgs>(
    args: Prisma.Subset<T, DSyncDataAggregateArgs>
  ): Prisma.PrismaPromise<GetDSyncDataAggregateType<T>>;

  /**
   * Group by DSyncData.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DSyncDataGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DSyncDataGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DSyncDataGroupByArgs["orderBy"] }
      : { orderBy?: DSyncDataGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, DSyncDataGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetDSyncDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the DSyncData model
   */
  readonly fields: DSyncDataFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DSyncData.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DSyncDataClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  org<T extends Prisma.DSyncData$orgArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.DSyncData$orgArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationSettingsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationSettingsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  teamGroupMapping<T extends Prisma.DSyncData$teamGroupMappingArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.DSyncData$teamGroupMappingArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  createdAttributeToUsers<T extends Prisma.DSyncData$createdAttributeToUsersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.DSyncData$createdAttributeToUsersArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AttributeToUserPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  updatedAttributeToUsers<T extends Prisma.DSyncData$updatedAttributeToUsersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.DSyncData$updatedAttributeToUsersArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AttributeToUserPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the DSyncData model
 */
export interface DSyncDataFieldRefs {
  readonly id: Prisma.FieldRef<"DSyncData", "Int">;
  readonly directoryId: Prisma.FieldRef<"DSyncData", "String">;
  readonly tenant: Prisma.FieldRef<"DSyncData", "String">;
  readonly organizationId: Prisma.FieldRef<"DSyncData", "Int">;
}

// Custom InputTypes
/**
 * DSyncData findUnique
 */
export type DSyncDataFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncData to fetch.
   */
  where: Prisma.DSyncDataWhereUniqueInput;
};

/**
 * DSyncData findUniqueOrThrow
 */
export type DSyncDataFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncData to fetch.
   */
  where: Prisma.DSyncDataWhereUniqueInput;
};

/**
 * DSyncData findFirst
 */
export type DSyncDataFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncData to fetch.
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncData to fetch.
   */
  orderBy?: Prisma.DSyncDataOrderByWithRelationInput | Prisma.DSyncDataOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for DSyncData.
   */
  cursor?: Prisma.DSyncDataWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncData from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncData.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of DSyncData.
   */
  distinct?: Prisma.DSyncDataScalarFieldEnum | Prisma.DSyncDataScalarFieldEnum[];
};

/**
 * DSyncData findFirstOrThrow
 */
export type DSyncDataFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncData to fetch.
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncData to fetch.
   */
  orderBy?: Prisma.DSyncDataOrderByWithRelationInput | Prisma.DSyncDataOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for DSyncData.
   */
  cursor?: Prisma.DSyncDataWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncData from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncData.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of DSyncData.
   */
  distinct?: Prisma.DSyncDataScalarFieldEnum | Prisma.DSyncDataScalarFieldEnum[];
};

/**
 * DSyncData findMany
 */
export type DSyncDataFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * Filter, which DSyncData to fetch.
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of DSyncData to fetch.
   */
  orderBy?: Prisma.DSyncDataOrderByWithRelationInput | Prisma.DSyncDataOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing DSyncData.
   */
  cursor?: Prisma.DSyncDataWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` DSyncData from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` DSyncData.
   */
  skip?: number;
  distinct?: Prisma.DSyncDataScalarFieldEnum | Prisma.DSyncDataScalarFieldEnum[];
};

/**
 * DSyncData create
 */
export type DSyncDataCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * The data needed to create a DSyncData.
   */
  data: Prisma.XOR<Prisma.DSyncDataCreateInput, Prisma.DSyncDataUncheckedCreateInput>;
};

/**
 * DSyncData createMany
 */
export type DSyncDataCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many DSyncData.
   */
  data: Prisma.DSyncDataCreateManyInput | Prisma.DSyncDataCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * DSyncData createManyAndReturn
 */
export type DSyncDataCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * The data used to create many DSyncData.
   */
  data: Prisma.DSyncDataCreateManyInput | Prisma.DSyncDataCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * DSyncData update
 */
export type DSyncDataUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * The data needed to update a DSyncData.
   */
  data: Prisma.XOR<Prisma.DSyncDataUpdateInput, Prisma.DSyncDataUncheckedUpdateInput>;
  /**
   * Choose, which DSyncData to update.
   */
  where: Prisma.DSyncDataWhereUniqueInput;
};

/**
 * DSyncData updateMany
 */
export type DSyncDataUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update DSyncData.
   */
  data: Prisma.XOR<Prisma.DSyncDataUpdateManyMutationInput, Prisma.DSyncDataUncheckedUpdateManyInput>;
  /**
   * Filter which DSyncData to update
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * Limit how many DSyncData to update.
   */
  limit?: number;
};

/**
 * DSyncData updateManyAndReturn
 */
export type DSyncDataUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * The data used to update DSyncData.
   */
  data: Prisma.XOR<Prisma.DSyncDataUpdateManyMutationInput, Prisma.DSyncDataUncheckedUpdateManyInput>;
  /**
   * Filter which DSyncData to update
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * Limit how many DSyncData to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * DSyncData upsert
 */
export type DSyncDataUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * The filter to search for the DSyncData to update in case it exists.
   */
  where: Prisma.DSyncDataWhereUniqueInput;
  /**
   * In case the DSyncData found by the `where` argument doesn't exist, create a new DSyncData with this data.
   */
  create: Prisma.XOR<Prisma.DSyncDataCreateInput, Prisma.DSyncDataUncheckedCreateInput>;
  /**
   * In case the DSyncData was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DSyncDataUpdateInput, Prisma.DSyncDataUncheckedUpdateInput>;
};

/**
 * DSyncData delete
 */
export type DSyncDataDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
  /**
   * Filter which DSyncData to delete.
   */
  where: Prisma.DSyncDataWhereUniqueInput;
};

/**
 * DSyncData deleteMany
 */
export type DSyncDataDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which DSyncData to delete
   */
  where?: Prisma.DSyncDataWhereInput;
  /**
   * Limit how many DSyncData to delete.
   */
  limit?: number;
};

/**
 * DSyncData.org
 */
export type DSyncData$orgArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the OrganizationSettings
   */
  select?: Prisma.OrganizationSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrganizationSettings
   */
  omit?: Prisma.OrganizationSettingsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationSettingsInclude<ExtArgs> | null;
  where?: Prisma.OrganizationSettingsWhereInput;
};

/**
 * DSyncData.teamGroupMapping
 */
export type DSyncData$teamGroupMappingArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncTeamGroupMapping
   */
  select?: Prisma.DSyncTeamGroupMappingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncTeamGroupMapping
   */
  omit?: Prisma.DSyncTeamGroupMappingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncTeamGroupMappingInclude<ExtArgs> | null;
  where?: Prisma.DSyncTeamGroupMappingWhereInput;
  orderBy?:
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput
    | Prisma.DSyncTeamGroupMappingOrderByWithRelationInput[];
  cursor?: Prisma.DSyncTeamGroupMappingWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.DSyncTeamGroupMappingScalarFieldEnum | Prisma.DSyncTeamGroupMappingScalarFieldEnum[];
};

/**
 * DSyncData.createdAttributeToUsers
 */
export type DSyncData$createdAttributeToUsersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AttributeToUser
   */
  select?: Prisma.AttributeToUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AttributeToUser
   */
  omit?: Prisma.AttributeToUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeToUserInclude<ExtArgs> | null;
  where?: Prisma.AttributeToUserWhereInput;
  orderBy?: Prisma.AttributeToUserOrderByWithRelationInput | Prisma.AttributeToUserOrderByWithRelationInput[];
  cursor?: Prisma.AttributeToUserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.AttributeToUserScalarFieldEnum | Prisma.AttributeToUserScalarFieldEnum[];
};

/**
 * DSyncData.updatedAttributeToUsers
 */
export type DSyncData$updatedAttributeToUsersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AttributeToUser
   */
  select?: Prisma.AttributeToUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AttributeToUser
   */
  omit?: Prisma.AttributeToUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttributeToUserInclude<ExtArgs> | null;
  where?: Prisma.AttributeToUserWhereInput;
  orderBy?: Prisma.AttributeToUserOrderByWithRelationInput | Prisma.AttributeToUserOrderByWithRelationInput[];
  cursor?: Prisma.AttributeToUserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.AttributeToUserScalarFieldEnum | Prisma.AttributeToUserScalarFieldEnum[];
};

/**
 * DSyncData without action
 */
export type DSyncDataDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the DSyncData
   */
  select?: Prisma.DSyncDataSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DSyncData
   */
  omit?: Prisma.DSyncDataOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DSyncDataInclude<ExtArgs> | null;
};
