/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `VerifiedNumber` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model VerifiedNumber
 *
 */
export type VerifiedNumberModel = runtime.Types.Result.DefaultSelection<Prisma.$VerifiedNumberPayload>;

export type AggregateVerifiedNumber = {
  _count: VerifiedNumberCountAggregateOutputType | null;
  _avg: VerifiedNumberAvgAggregateOutputType | null;
  _sum: VerifiedNumberSumAggregateOutputType | null;
  _min: VerifiedNumberMinAggregateOutputType | null;
  _max: VerifiedNumberMaxAggregateOutputType | null;
};

export type VerifiedNumberAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
};

export type VerifiedNumberSumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
};

export type VerifiedNumberMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
  phoneNumber: string | null;
};

export type VerifiedNumberMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  teamId: number | null;
  phoneNumber: string | null;
};

export type VerifiedNumberCountAggregateOutputType = {
  id: number;
  userId: number;
  teamId: number;
  phoneNumber: number;
  _all: number;
};

export type VerifiedNumberAvgAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
};

export type VerifiedNumberSumAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
};

export type VerifiedNumberMinAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
  phoneNumber?: true;
};

export type VerifiedNumberMaxAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
  phoneNumber?: true;
};

export type VerifiedNumberCountAggregateInputType = {
  id?: true;
  userId?: true;
  teamId?: true;
  phoneNumber?: true;
  _all?: true;
};

export type VerifiedNumberAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which VerifiedNumber to aggregate.
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedNumbers to fetch.
   */
  orderBy?: Prisma.VerifiedNumberOrderByWithRelationInput | Prisma.VerifiedNumberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.VerifiedNumberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedNumbers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedNumbers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned VerifiedNumbers
   **/
  _count?: true | VerifiedNumberCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: VerifiedNumberAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: VerifiedNumberSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: VerifiedNumberMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: VerifiedNumberMaxAggregateInputType;
};

export type GetVerifiedNumberAggregateType<T extends VerifiedNumberAggregateArgs> = {
  [P in keyof T & keyof AggregateVerifiedNumber]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVerifiedNumber[P]>
    : Prisma.GetScalarType<T[P], AggregateVerifiedNumber[P]>;
};

export type VerifiedNumberGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.VerifiedNumberWhereInput;
  orderBy?:
    | Prisma.VerifiedNumberOrderByWithAggregationInput
    | Prisma.VerifiedNumberOrderByWithAggregationInput[];
  by: Prisma.VerifiedNumberScalarFieldEnum[] | Prisma.VerifiedNumberScalarFieldEnum;
  having?: Prisma.VerifiedNumberScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: VerifiedNumberCountAggregateInputType | true;
  _avg?: VerifiedNumberAvgAggregateInputType;
  _sum?: VerifiedNumberSumAggregateInputType;
  _min?: VerifiedNumberMinAggregateInputType;
  _max?: VerifiedNumberMaxAggregateInputType;
};

export type VerifiedNumberGroupByOutputType = {
  id: number;
  userId: number | null;
  teamId: number | null;
  phoneNumber: string;
  _count: VerifiedNumberCountAggregateOutputType | null;
  _avg: VerifiedNumberAvgAggregateOutputType | null;
  _sum: VerifiedNumberSumAggregateOutputType | null;
  _min: VerifiedNumberMinAggregateOutputType | null;
  _max: VerifiedNumberMaxAggregateOutputType | null;
};

type GetVerifiedNumberGroupByPayload<T extends VerifiedNumberGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VerifiedNumberGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof VerifiedNumberGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], VerifiedNumberGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], VerifiedNumberGroupByOutputType[P]>;
    }
  >
>;

export type VerifiedNumberWhereInput = {
  AND?: Prisma.VerifiedNumberWhereInput | Prisma.VerifiedNumberWhereInput[];
  OR?: Prisma.VerifiedNumberWhereInput[];
  NOT?: Prisma.VerifiedNumberWhereInput | Prisma.VerifiedNumberWhereInput[];
  id?: Prisma.IntFilter<"VerifiedNumber"> | number;
  userId?: Prisma.IntNullableFilter<"VerifiedNumber"> | number | null;
  teamId?: Prisma.IntNullableFilter<"VerifiedNumber"> | number | null;
  phoneNumber?: Prisma.StringFilter<"VerifiedNumber"> | string;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
};

export type VerifiedNumberOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
};

export type VerifiedNumberWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.VerifiedNumberWhereInput | Prisma.VerifiedNumberWhereInput[];
    OR?: Prisma.VerifiedNumberWhereInput[];
    NOT?: Prisma.VerifiedNumberWhereInput | Prisma.VerifiedNumberWhereInput[];
    userId?: Prisma.IntNullableFilter<"VerifiedNumber"> | number | null;
    teamId?: Prisma.IntNullableFilter<"VerifiedNumber"> | number | null;
    phoneNumber?: Prisma.StringFilter<"VerifiedNumber"> | string;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    team?: Prisma.XOR<Prisma.TeamNullableScalarRelationFilter, Prisma.TeamWhereInput> | null;
  },
  "id"
>;

export type VerifiedNumberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  teamId?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  _count?: Prisma.VerifiedNumberCountOrderByAggregateInput;
  _avg?: Prisma.VerifiedNumberAvgOrderByAggregateInput;
  _max?: Prisma.VerifiedNumberMaxOrderByAggregateInput;
  _min?: Prisma.VerifiedNumberMinOrderByAggregateInput;
  _sum?: Prisma.VerifiedNumberSumOrderByAggregateInput;
};

export type VerifiedNumberScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.VerifiedNumberScalarWhereWithAggregatesInput
    | Prisma.VerifiedNumberScalarWhereWithAggregatesInput[];
  OR?: Prisma.VerifiedNumberScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.VerifiedNumberScalarWhereWithAggregatesInput
    | Prisma.VerifiedNumberScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"VerifiedNumber"> | number;
  userId?: Prisma.IntNullableWithAggregatesFilter<"VerifiedNumber"> | number | null;
  teamId?: Prisma.IntNullableWithAggregatesFilter<"VerifiedNumber"> | number | null;
  phoneNumber?: Prisma.StringWithAggregatesFilter<"VerifiedNumber"> | string;
};

export type VerifiedNumberCreateInput = {
  phoneNumber: string;
  user?: Prisma.UserCreateNestedOneWithoutVerifiedNumbersInput;
  team?: Prisma.TeamCreateNestedOneWithoutVerifiedNumbersInput;
};

export type VerifiedNumberUncheckedCreateInput = {
  id?: number;
  userId?: number | null;
  teamId?: number | null;
  phoneNumber: string;
};

export type VerifiedNumberUpdateInput = {
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneWithoutVerifiedNumbersNestedInput;
  team?: Prisma.TeamUpdateOneWithoutVerifiedNumbersNestedInput;
};

export type VerifiedNumberUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberCreateManyInput = {
  id?: number;
  userId?: number | null;
  teamId?: number | null;
  phoneNumber: string;
};

export type VerifiedNumberUpdateManyMutationInput = {
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberListRelationFilter = {
  every?: Prisma.VerifiedNumberWhereInput;
  some?: Prisma.VerifiedNumberWhereInput;
  none?: Prisma.VerifiedNumberWhereInput;
};

export type VerifiedNumberOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type VerifiedNumberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
};

export type VerifiedNumberAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type VerifiedNumberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
};

export type VerifiedNumberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
};

export type VerifiedNumberSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type VerifiedNumberCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutUserInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedNumberCreateWithoutUserInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.VerifiedNumberCreateManyUserInputEnvelope;
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
};

export type VerifiedNumberUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutUserInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedNumberCreateWithoutUserInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.VerifiedNumberCreateManyUserInputEnvelope;
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
};

export type VerifiedNumberUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutUserInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedNumberCreateWithoutUserInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.VerifiedNumberCreateManyUserInputEnvelope;
  set?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  disconnect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  delete?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  update?:
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutUserInput
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.VerifiedNumberScalarWhereInput | Prisma.VerifiedNumberScalarWhereInput[];
};

export type VerifiedNumberUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutUserInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutUserInput
      >
    | Prisma.VerifiedNumberCreateWithoutUserInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.VerifiedNumberCreateManyUserInputEnvelope;
  set?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  disconnect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  delete?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  update?:
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutUserInput
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutUserInput
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.VerifiedNumberScalarWhereInput | Prisma.VerifiedNumberScalarWhereInput[];
};

export type VerifiedNumberCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutTeamInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedNumberCreateWithoutTeamInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.VerifiedNumberCreateManyTeamInputEnvelope;
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
};

export type VerifiedNumberUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutTeamInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedNumberCreateWithoutTeamInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.VerifiedNumberCreateManyTeamInputEnvelope;
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
};

export type VerifiedNumberUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutTeamInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedNumberCreateWithoutTeamInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.VerifiedNumberCreateManyTeamInputEnvelope;
  set?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  disconnect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  delete?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  update?:
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutTeamInput
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.VerifiedNumberScalarWhereInput | Prisma.VerifiedNumberScalarWhereInput[];
};

export type VerifiedNumberUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VerifiedNumberCreateWithoutTeamInput,
        Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput
      >
    | Prisma.VerifiedNumberCreateWithoutTeamInput[]
    | Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput
    | Prisma.VerifiedNumberCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedNumberUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.VerifiedNumberCreateManyTeamInputEnvelope;
  set?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  disconnect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  delete?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  connect?: Prisma.VerifiedNumberWhereUniqueInput | Prisma.VerifiedNumberWhereUniqueInput[];
  update?:
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.VerifiedNumberUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutTeamInput
    | Prisma.VerifiedNumberUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.VerifiedNumberScalarWhereInput | Prisma.VerifiedNumberScalarWhereInput[];
};

export type VerifiedNumberCreateWithoutUserInput = {
  phoneNumber: string;
  team?: Prisma.TeamCreateNestedOneWithoutVerifiedNumbersInput;
};

export type VerifiedNumberUncheckedCreateWithoutUserInput = {
  id?: number;
  teamId?: number | null;
  phoneNumber: string;
};

export type VerifiedNumberCreateOrConnectWithoutUserInput = {
  where: Prisma.VerifiedNumberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.VerifiedNumberCreateWithoutUserInput,
    Prisma.VerifiedNumberUncheckedCreateWithoutUserInput
  >;
};

export type VerifiedNumberCreateManyUserInputEnvelope = {
  data: Prisma.VerifiedNumberCreateManyUserInput | Prisma.VerifiedNumberCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type VerifiedNumberUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.VerifiedNumberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.VerifiedNumberUpdateWithoutUserInput,
    Prisma.VerifiedNumberUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.VerifiedNumberCreateWithoutUserInput,
    Prisma.VerifiedNumberUncheckedCreateWithoutUserInput
  >;
};

export type VerifiedNumberUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.VerifiedNumberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.VerifiedNumberUpdateWithoutUserInput,
    Prisma.VerifiedNumberUncheckedUpdateWithoutUserInput
  >;
};

export type VerifiedNumberUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.VerifiedNumberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.VerifiedNumberUpdateManyMutationInput,
    Prisma.VerifiedNumberUncheckedUpdateManyWithoutUserInput
  >;
};

export type VerifiedNumberScalarWhereInput = {
  AND?: Prisma.VerifiedNumberScalarWhereInput | Prisma.VerifiedNumberScalarWhereInput[];
  OR?: Prisma.VerifiedNumberScalarWhereInput[];
  NOT?: Prisma.VerifiedNumberScalarWhereInput | Prisma.VerifiedNumberScalarWhereInput[];
  id?: Prisma.IntFilter<"VerifiedNumber"> | number;
  userId?: Prisma.IntNullableFilter<"VerifiedNumber"> | number | null;
  teamId?: Prisma.IntNullableFilter<"VerifiedNumber"> | number | null;
  phoneNumber?: Prisma.StringFilter<"VerifiedNumber"> | string;
};

export type VerifiedNumberCreateWithoutTeamInput = {
  phoneNumber: string;
  user?: Prisma.UserCreateNestedOneWithoutVerifiedNumbersInput;
};

export type VerifiedNumberUncheckedCreateWithoutTeamInput = {
  id?: number;
  userId?: number | null;
  phoneNumber: string;
};

export type VerifiedNumberCreateOrConnectWithoutTeamInput = {
  where: Prisma.VerifiedNumberWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.VerifiedNumberCreateWithoutTeamInput,
    Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput
  >;
};

export type VerifiedNumberCreateManyTeamInputEnvelope = {
  data: Prisma.VerifiedNumberCreateManyTeamInput | Prisma.VerifiedNumberCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type VerifiedNumberUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.VerifiedNumberWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.VerifiedNumberUpdateWithoutTeamInput,
    Prisma.VerifiedNumberUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.VerifiedNumberCreateWithoutTeamInput,
    Prisma.VerifiedNumberUncheckedCreateWithoutTeamInput
  >;
};

export type VerifiedNumberUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.VerifiedNumberWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.VerifiedNumberUpdateWithoutTeamInput,
    Prisma.VerifiedNumberUncheckedUpdateWithoutTeamInput
  >;
};

export type VerifiedNumberUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.VerifiedNumberScalarWhereInput;
  data: Prisma.XOR<
    Prisma.VerifiedNumberUpdateManyMutationInput,
    Prisma.VerifiedNumberUncheckedUpdateManyWithoutTeamInput
  >;
};

export type VerifiedNumberCreateManyUserInput = {
  id?: number;
  teamId?: number | null;
  phoneNumber: string;
};

export type VerifiedNumberUpdateWithoutUserInput = {
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  team?: Prisma.TeamUpdateOneWithoutVerifiedNumbersNestedInput;
};

export type VerifiedNumberUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberCreateManyTeamInput = {
  id?: number;
  userId?: number | null;
  phoneNumber: string;
};

export type VerifiedNumberUpdateWithoutTeamInput = {
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneWithoutVerifiedNumbersNestedInput;
};

export type VerifiedNumberUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type VerifiedNumberSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    teamId?: boolean;
    phoneNumber?: boolean;
    user?: boolean | Prisma.VerifiedNumber$userArgs<ExtArgs>;
    team?: boolean | Prisma.VerifiedNumber$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["verifiedNumber"]
>;

export type VerifiedNumberSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    teamId?: boolean;
    phoneNumber?: boolean;
    user?: boolean | Prisma.VerifiedNumber$userArgs<ExtArgs>;
    team?: boolean | Prisma.VerifiedNumber$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["verifiedNumber"]
>;

export type VerifiedNumberSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    teamId?: boolean;
    phoneNumber?: boolean;
    user?: boolean | Prisma.VerifiedNumber$userArgs<ExtArgs>;
    team?: boolean | Prisma.VerifiedNumber$teamArgs<ExtArgs>;
  },
  ExtArgs["result"]["verifiedNumber"]
>;

export type VerifiedNumberSelectScalar = {
  id?: boolean;
  userId?: boolean;
  teamId?: boolean;
  phoneNumber?: boolean;
};

export type VerifiedNumberOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "teamId" | "phoneNumber",
  ExtArgs["result"]["verifiedNumber"]
>;
export type VerifiedNumberInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.VerifiedNumber$userArgs<ExtArgs>;
  team?: boolean | Prisma.VerifiedNumber$teamArgs<ExtArgs>;
};
export type VerifiedNumberIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.VerifiedNumber$userArgs<ExtArgs>;
  team?: boolean | Prisma.VerifiedNumber$teamArgs<ExtArgs>;
};
export type VerifiedNumberIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.VerifiedNumber$userArgs<ExtArgs>;
  team?: boolean | Prisma.VerifiedNumber$teamArgs<ExtArgs>;
};

export type $VerifiedNumberPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "VerifiedNumber";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
    team: Prisma.$TeamPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number | null;
      teamId: number | null;
      phoneNumber: string;
    },
    ExtArgs["result"]["verifiedNumber"]
  >;
  composites: {};
};

export type VerifiedNumberGetPayload<S extends boolean | null | undefined | VerifiedNumberDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$VerifiedNumberPayload, S>;

export type VerifiedNumberCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<VerifiedNumberFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: VerifiedNumberCountAggregateInputType | true;
};

export interface VerifiedNumberDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["VerifiedNumber"];
    meta: { name: "VerifiedNumber" };
  };
  /**
   * Find zero or one VerifiedNumber that matches the filter.
   * @param {VerifiedNumberFindUniqueArgs} args - Arguments to find a VerifiedNumber
   * @example
   * // Get one VerifiedNumber
   * const verifiedNumber = await prisma.verifiedNumber.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VerifiedNumberFindUniqueArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedNumberPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one VerifiedNumber that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VerifiedNumberFindUniqueOrThrowArgs} args - Arguments to find a VerifiedNumber
   * @example
   * // Get one VerifiedNumber
   * const verifiedNumber = await prisma.verifiedNumber.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VerifiedNumberFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedNumberPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VerifiedNumber that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberFindFirstArgs} args - Arguments to find a VerifiedNumber
   * @example
   * // Get one VerifiedNumber
   * const verifiedNumber = await prisma.verifiedNumber.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VerifiedNumberFindFirstArgs>(
    args?: Prisma.SelectSubset<T, VerifiedNumberFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedNumberPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VerifiedNumber that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberFindFirstOrThrowArgs} args - Arguments to find a VerifiedNumber
   * @example
   * // Get one VerifiedNumber
   * const verifiedNumber = await prisma.verifiedNumber.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VerifiedNumberFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, VerifiedNumberFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedNumberPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more VerifiedNumbers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VerifiedNumbers
   * const verifiedNumbers = await prisma.verifiedNumber.findMany()
   *
   * // Get first 10 VerifiedNumbers
   * const verifiedNumbers = await prisma.verifiedNumber.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const verifiedNumberWithIdOnly = await prisma.verifiedNumber.findMany({ select: { id: true } })
   *
   */
  findMany<T extends VerifiedNumberFindManyArgs>(
    args?: Prisma.SelectSubset<T, VerifiedNumberFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$VerifiedNumberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a VerifiedNumber.
   * @param {VerifiedNumberCreateArgs} args - Arguments to create a VerifiedNumber.
   * @example
   * // Create one VerifiedNumber
   * const VerifiedNumber = await prisma.verifiedNumber.create({
   *   data: {
   *     // ... data to create a VerifiedNumber
   *   }
   * })
   *
   */
  create<T extends VerifiedNumberCreateArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberCreateArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedNumberPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many VerifiedNumbers.
   * @param {VerifiedNumberCreateManyArgs} args - Arguments to create many VerifiedNumbers.
   * @example
   * // Create many VerifiedNumbers
   * const verifiedNumber = await prisma.verifiedNumber.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends VerifiedNumberCreateManyArgs>(
    args?: Prisma.SelectSubset<T, VerifiedNumberCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many VerifiedNumbers and returns the data saved in the database.
   * @param {VerifiedNumberCreateManyAndReturnArgs} args - Arguments to create many VerifiedNumbers.
   * @example
   * // Create many VerifiedNumbers
   * const verifiedNumber = await prisma.verifiedNumber.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many VerifiedNumbers and only return the `id`
   * const verifiedNumberWithIdOnly = await prisma.verifiedNumber.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends VerifiedNumberCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, VerifiedNumberCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedNumberPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a VerifiedNumber.
   * @param {VerifiedNumberDeleteArgs} args - Arguments to delete one VerifiedNumber.
   * @example
   * // Delete one VerifiedNumber
   * const VerifiedNumber = await prisma.verifiedNumber.delete({
   *   where: {
   *     // ... filter to delete one VerifiedNumber
   *   }
   * })
   *
   */
  delete<T extends VerifiedNumberDeleteArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedNumberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one VerifiedNumber.
   * @param {VerifiedNumberUpdateArgs} args - Arguments to update one VerifiedNumber.
   * @example
   * // Update one VerifiedNumber
   * const verifiedNumber = await prisma.verifiedNumber.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends VerifiedNumberUpdateArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedNumberPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more VerifiedNumbers.
   * @param {VerifiedNumberDeleteManyArgs} args - Arguments to filter VerifiedNumbers to delete.
   * @example
   * // Delete a few VerifiedNumbers
   * const { count } = await prisma.verifiedNumber.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends VerifiedNumberDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, VerifiedNumberDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VerifiedNumbers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VerifiedNumbers
   * const verifiedNumber = await prisma.verifiedNumber.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends VerifiedNumberUpdateManyArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VerifiedNumbers and returns the data updated in the database.
   * @param {VerifiedNumberUpdateManyAndReturnArgs} args - Arguments to update many VerifiedNumbers.
   * @example
   * // Update many VerifiedNumbers
   * const verifiedNumber = await prisma.verifiedNumber.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more VerifiedNumbers and only return the `id`
   * const verifiedNumberWithIdOnly = await prisma.verifiedNumber.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends VerifiedNumberUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VerifiedNumberPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one VerifiedNumber.
   * @param {VerifiedNumberUpsertArgs} args - Arguments to update or create a VerifiedNumber.
   * @example
   * // Update or create a VerifiedNumber
   * const verifiedNumber = await prisma.verifiedNumber.upsert({
   *   create: {
   *     // ... data to create a VerifiedNumber
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VerifiedNumber we want to update
   *   }
   * })
   */
  upsert<T extends VerifiedNumberUpsertArgs>(
    args: Prisma.SelectSubset<T, VerifiedNumberUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__VerifiedNumberClient<
    runtime.Types.Result.GetResult<Prisma.$VerifiedNumberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of VerifiedNumbers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberCountArgs} args - Arguments to filter VerifiedNumbers to count.
   * @example
   * // Count the number of VerifiedNumbers
   * const count = await prisma.verifiedNumber.count({
   *   where: {
   *     // ... the filter for the VerifiedNumbers we want to count
   *   }
   * })
   **/
  count<T extends VerifiedNumberCountArgs>(
    args?: Prisma.Subset<T, VerifiedNumberCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], VerifiedNumberCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a VerifiedNumber.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends VerifiedNumberAggregateArgs>(
    args: Prisma.Subset<T, VerifiedNumberAggregateArgs>
  ): Prisma.PrismaPromise<GetVerifiedNumberAggregateType<T>>;

  /**
   * Group by VerifiedNumber.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VerifiedNumberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends VerifiedNumberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VerifiedNumberGroupByArgs["orderBy"] }
      : { orderBy?: VerifiedNumberGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, VerifiedNumberGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetVerifiedNumberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the VerifiedNumber model
   */
  readonly fields: VerifiedNumberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VerifiedNumber.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VerifiedNumberClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.VerifiedNumber$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VerifiedNumber$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.VerifiedNumber$teamArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VerifiedNumber$teamArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the VerifiedNumber model
 */
export interface VerifiedNumberFieldRefs {
  readonly id: Prisma.FieldRef<"VerifiedNumber", "Int">;
  readonly userId: Prisma.FieldRef<"VerifiedNumber", "Int">;
  readonly teamId: Prisma.FieldRef<"VerifiedNumber", "Int">;
  readonly phoneNumber: Prisma.FieldRef<"VerifiedNumber", "String">;
}

// Custom InputTypes
/**
 * VerifiedNumber findUnique
 */
export type VerifiedNumberFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedNumber to fetch.
   */
  where: Prisma.VerifiedNumberWhereUniqueInput;
};

/**
 * VerifiedNumber findUniqueOrThrow
 */
export type VerifiedNumberFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedNumber to fetch.
   */
  where: Prisma.VerifiedNumberWhereUniqueInput;
};

/**
 * VerifiedNumber findFirst
 */
export type VerifiedNumberFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedNumber to fetch.
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedNumbers to fetch.
   */
  orderBy?: Prisma.VerifiedNumberOrderByWithRelationInput | Prisma.VerifiedNumberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VerifiedNumbers.
   */
  cursor?: Prisma.VerifiedNumberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedNumbers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedNumbers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VerifiedNumbers.
   */
  distinct?: Prisma.VerifiedNumberScalarFieldEnum | Prisma.VerifiedNumberScalarFieldEnum[];
};

/**
 * VerifiedNumber findFirstOrThrow
 */
export type VerifiedNumberFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedNumber to fetch.
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedNumbers to fetch.
   */
  orderBy?: Prisma.VerifiedNumberOrderByWithRelationInput | Prisma.VerifiedNumberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VerifiedNumbers.
   */
  cursor?: Prisma.VerifiedNumberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedNumbers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedNumbers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VerifiedNumbers.
   */
  distinct?: Prisma.VerifiedNumberScalarFieldEnum | Prisma.VerifiedNumberScalarFieldEnum[];
};

/**
 * VerifiedNumber findMany
 */
export type VerifiedNumberFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * Filter, which VerifiedNumbers to fetch.
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VerifiedNumbers to fetch.
   */
  orderBy?: Prisma.VerifiedNumberOrderByWithRelationInput | Prisma.VerifiedNumberOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing VerifiedNumbers.
   */
  cursor?: Prisma.VerifiedNumberWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VerifiedNumbers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VerifiedNumbers.
   */
  skip?: number;
  distinct?: Prisma.VerifiedNumberScalarFieldEnum | Prisma.VerifiedNumberScalarFieldEnum[];
};

/**
 * VerifiedNumber create
 */
export type VerifiedNumberCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * The data needed to create a VerifiedNumber.
   */
  data: Prisma.XOR<Prisma.VerifiedNumberCreateInput, Prisma.VerifiedNumberUncheckedCreateInput>;
};

/**
 * VerifiedNumber createMany
 */
export type VerifiedNumberCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many VerifiedNumbers.
   */
  data: Prisma.VerifiedNumberCreateManyInput | Prisma.VerifiedNumberCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * VerifiedNumber createManyAndReturn
 */
export type VerifiedNumberCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * The data used to create many VerifiedNumbers.
   */
  data: Prisma.VerifiedNumberCreateManyInput | Prisma.VerifiedNumberCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * VerifiedNumber update
 */
export type VerifiedNumberUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * The data needed to update a VerifiedNumber.
   */
  data: Prisma.XOR<Prisma.VerifiedNumberUpdateInput, Prisma.VerifiedNumberUncheckedUpdateInput>;
  /**
   * Choose, which VerifiedNumber to update.
   */
  where: Prisma.VerifiedNumberWhereUniqueInput;
};

/**
 * VerifiedNumber updateMany
 */
export type VerifiedNumberUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update VerifiedNumbers.
   */
  data: Prisma.XOR<
    Prisma.VerifiedNumberUpdateManyMutationInput,
    Prisma.VerifiedNumberUncheckedUpdateManyInput
  >;
  /**
   * Filter which VerifiedNumbers to update
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * Limit how many VerifiedNumbers to update.
   */
  limit?: number;
};

/**
 * VerifiedNumber updateManyAndReturn
 */
export type VerifiedNumberUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * The data used to update VerifiedNumbers.
   */
  data: Prisma.XOR<
    Prisma.VerifiedNumberUpdateManyMutationInput,
    Prisma.VerifiedNumberUncheckedUpdateManyInput
  >;
  /**
   * Filter which VerifiedNumbers to update
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * Limit how many VerifiedNumbers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * VerifiedNumber upsert
 */
export type VerifiedNumberUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * The filter to search for the VerifiedNumber to update in case it exists.
   */
  where: Prisma.VerifiedNumberWhereUniqueInput;
  /**
   * In case the VerifiedNumber found by the `where` argument doesn't exist, create a new VerifiedNumber with this data.
   */
  create: Prisma.XOR<Prisma.VerifiedNumberCreateInput, Prisma.VerifiedNumberUncheckedCreateInput>;
  /**
   * In case the VerifiedNumber was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VerifiedNumberUpdateInput, Prisma.VerifiedNumberUncheckedUpdateInput>;
};

/**
 * VerifiedNumber delete
 */
export type VerifiedNumberDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
  /**
   * Filter which VerifiedNumber to delete.
   */
  where: Prisma.VerifiedNumberWhereUniqueInput;
};

/**
 * VerifiedNumber deleteMany
 */
export type VerifiedNumberDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which VerifiedNumbers to delete
   */
  where?: Prisma.VerifiedNumberWhereInput;
  /**
   * Limit how many VerifiedNumbers to delete.
   */
  limit?: number;
};

/**
 * VerifiedNumber.user
 */
export type VerifiedNumber$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * VerifiedNumber.team
 */
export type VerifiedNumber$teamArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null;
  where?: Prisma.TeamWhereInput;
};

/**
 * VerifiedNumber without action
 */
export type VerifiedNumberDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the VerifiedNumber
   */
  select?: Prisma.VerifiedNumberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VerifiedNumber
   */
  omit?: Prisma.VerifiedNumberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VerifiedNumberInclude<ExtArgs> | null;
};
