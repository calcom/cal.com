/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Avatar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Avatar
 *
 */
export type AvatarModel = runtime.Types.Result.DefaultSelection<Prisma.$AvatarPayload>;

export type AggregateAvatar = {
  _count: AvatarCountAggregateOutputType | null;
  _avg: AvatarAvgAggregateOutputType | null;
  _sum: AvatarSumAggregateOutputType | null;
  _min: AvatarMinAggregateOutputType | null;
  _max: AvatarMaxAggregateOutputType | null;
};

export type AvatarAvgAggregateOutputType = {
  teamId: number | null;
  userId: number | null;
};

export type AvatarSumAggregateOutputType = {
  teamId: number | null;
  userId: number | null;
};

export type AvatarMinAggregateOutputType = {
  teamId: number | null;
  userId: number | null;
  data: string | null;
  objectKey: string | null;
  isBanner: boolean | null;
};

export type AvatarMaxAggregateOutputType = {
  teamId: number | null;
  userId: number | null;
  data: string | null;
  objectKey: string | null;
  isBanner: boolean | null;
};

export type AvatarCountAggregateOutputType = {
  teamId: number;
  userId: number;
  data: number;
  objectKey: number;
  isBanner: number;
  _all: number;
};

export type AvatarAvgAggregateInputType = {
  teamId?: true;
  userId?: true;
};

export type AvatarSumAggregateInputType = {
  teamId?: true;
  userId?: true;
};

export type AvatarMinAggregateInputType = {
  teamId?: true;
  userId?: true;
  data?: true;
  objectKey?: true;
  isBanner?: true;
};

export type AvatarMaxAggregateInputType = {
  teamId?: true;
  userId?: true;
  data?: true;
  objectKey?: true;
  isBanner?: true;
};

export type AvatarCountAggregateInputType = {
  teamId?: true;
  userId?: true;
  data?: true;
  objectKey?: true;
  isBanner?: true;
  _all?: true;
};

export type AvatarAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Avatar to aggregate.
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Avatars to fetch.
   */
  orderBy?: Prisma.AvatarOrderByWithRelationInput | Prisma.AvatarOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AvatarWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Avatars from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Avatars.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Avatars
   **/
  _count?: true | AvatarCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AvatarAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AvatarSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AvatarMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AvatarMaxAggregateInputType;
};

export type GetAvatarAggregateType<T extends AvatarAggregateArgs> = {
  [P in keyof T & keyof AggregateAvatar]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAvatar[P]>
    : Prisma.GetScalarType<T[P], AggregateAvatar[P]>;
};

export type AvatarGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AvatarWhereInput;
  orderBy?: Prisma.AvatarOrderByWithAggregationInput | Prisma.AvatarOrderByWithAggregationInput[];
  by: Prisma.AvatarScalarFieldEnum[] | Prisma.AvatarScalarFieldEnum;
  having?: Prisma.AvatarScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AvatarCountAggregateInputType | true;
  _avg?: AvatarAvgAggregateInputType;
  _sum?: AvatarSumAggregateInputType;
  _min?: AvatarMinAggregateInputType;
  _max?: AvatarMaxAggregateInputType;
};

export type AvatarGroupByOutputType = {
  teamId: number;
  userId: number;
  data: string;
  objectKey: string;
  isBanner: boolean;
  _count: AvatarCountAggregateOutputType | null;
  _avg: AvatarAvgAggregateOutputType | null;
  _sum: AvatarSumAggregateOutputType | null;
  _min: AvatarMinAggregateOutputType | null;
  _max: AvatarMaxAggregateOutputType | null;
};

type GetAvatarGroupByPayload<T extends AvatarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AvatarGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AvatarGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AvatarGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AvatarGroupByOutputType[P]>;
    }
  >
>;

export type AvatarWhereInput = {
  AND?: Prisma.AvatarWhereInput | Prisma.AvatarWhereInput[];
  OR?: Prisma.AvatarWhereInput[];
  NOT?: Prisma.AvatarWhereInput | Prisma.AvatarWhereInput[];
  teamId?: Prisma.IntFilter<"Avatar"> | number;
  userId?: Prisma.IntFilter<"Avatar"> | number;
  data?: Prisma.StringFilter<"Avatar"> | string;
  objectKey?: Prisma.StringFilter<"Avatar"> | string;
  isBanner?: Prisma.BoolFilter<"Avatar"> | boolean;
};

export type AvatarOrderByWithRelationInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  objectKey?: Prisma.SortOrder;
  isBanner?: Prisma.SortOrder;
};

export type AvatarWhereUniqueInput = Prisma.AtLeast<
  {
    objectKey?: string;
    teamId_userId_isBanner?: Prisma.AvatarTeamIdUserIdIsBannerCompoundUniqueInput;
    AND?: Prisma.AvatarWhereInput | Prisma.AvatarWhereInput[];
    OR?: Prisma.AvatarWhereInput[];
    NOT?: Prisma.AvatarWhereInput | Prisma.AvatarWhereInput[];
    teamId?: Prisma.IntFilter<"Avatar"> | number;
    userId?: Prisma.IntFilter<"Avatar"> | number;
    data?: Prisma.StringFilter<"Avatar"> | string;
    isBanner?: Prisma.BoolFilter<"Avatar"> | boolean;
  },
  "objectKey" | "teamId_userId_isBanner"
>;

export type AvatarOrderByWithAggregationInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  objectKey?: Prisma.SortOrder;
  isBanner?: Prisma.SortOrder;
  _count?: Prisma.AvatarCountOrderByAggregateInput;
  _avg?: Prisma.AvatarAvgOrderByAggregateInput;
  _max?: Prisma.AvatarMaxOrderByAggregateInput;
  _min?: Prisma.AvatarMinOrderByAggregateInput;
  _sum?: Prisma.AvatarSumOrderByAggregateInput;
};

export type AvatarScalarWhereWithAggregatesInput = {
  AND?: Prisma.AvatarScalarWhereWithAggregatesInput | Prisma.AvatarScalarWhereWithAggregatesInput[];
  OR?: Prisma.AvatarScalarWhereWithAggregatesInput[];
  NOT?: Prisma.AvatarScalarWhereWithAggregatesInput | Prisma.AvatarScalarWhereWithAggregatesInput[];
  teamId?: Prisma.IntWithAggregatesFilter<"Avatar"> | number;
  userId?: Prisma.IntWithAggregatesFilter<"Avatar"> | number;
  data?: Prisma.StringWithAggregatesFilter<"Avatar"> | string;
  objectKey?: Prisma.StringWithAggregatesFilter<"Avatar"> | string;
  isBanner?: Prisma.BoolWithAggregatesFilter<"Avatar"> | boolean;
};

export type AvatarCreateInput = {
  teamId?: number;
  userId?: number;
  data: string;
  objectKey: string;
  isBanner?: boolean;
};

export type AvatarUncheckedCreateInput = {
  teamId?: number;
  userId?: number;
  data: string;
  objectKey: string;
  isBanner?: boolean;
};

export type AvatarUpdateInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.StringFieldUpdateOperationsInput | string;
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string;
  isBanner?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AvatarUncheckedUpdateInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.StringFieldUpdateOperationsInput | string;
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string;
  isBanner?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AvatarCreateManyInput = {
  teamId?: number;
  userId?: number;
  data: string;
  objectKey: string;
  isBanner?: boolean;
};

export type AvatarUpdateManyMutationInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.StringFieldUpdateOperationsInput | string;
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string;
  isBanner?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AvatarUncheckedUpdateManyInput = {
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.IntFieldUpdateOperationsInput | number;
  data?: Prisma.StringFieldUpdateOperationsInput | string;
  objectKey?: Prisma.StringFieldUpdateOperationsInput | string;
  isBanner?: Prisma.BoolFieldUpdateOperationsInput | boolean;
};

export type AvatarTeamIdUserIdIsBannerCompoundUniqueInput = {
  teamId: number;
  userId: number;
  isBanner: boolean;
};

export type AvatarCountOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  objectKey?: Prisma.SortOrder;
  isBanner?: Prisma.SortOrder;
};

export type AvatarAvgOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type AvatarMaxOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  objectKey?: Prisma.SortOrder;
  isBanner?: Prisma.SortOrder;
};

export type AvatarMinOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  objectKey?: Prisma.SortOrder;
  isBanner?: Prisma.SortOrder;
};

export type AvatarSumOrderByAggregateInput = {
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type AvatarSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    userId?: boolean;
    data?: boolean;
    objectKey?: boolean;
    isBanner?: boolean;
  },
  ExtArgs["result"]["avatar"]
>;

export type AvatarSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    userId?: boolean;
    data?: boolean;
    objectKey?: boolean;
    isBanner?: boolean;
  },
  ExtArgs["result"]["avatar"]
>;

export type AvatarSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    teamId?: boolean;
    userId?: boolean;
    data?: boolean;
    objectKey?: boolean;
    isBanner?: boolean;
  },
  ExtArgs["result"]["avatar"]
>;

export type AvatarSelectScalar = {
  teamId?: boolean;
  userId?: boolean;
  data?: boolean;
  objectKey?: boolean;
  isBanner?: boolean;
};

export type AvatarOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "teamId" | "userId" | "data" | "objectKey" | "isBanner",
  ExtArgs["result"]["avatar"]
>;

export type $AvatarPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Avatar";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      teamId: number;
      userId: number;
      data: string;
      objectKey: string;
      isBanner: boolean;
    },
    ExtArgs["result"]["avatar"]
  >;
  composites: {};
};

export type AvatarGetPayload<S extends boolean | null | undefined | AvatarDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AvatarPayload, S>;

export type AvatarCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AvatarFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AvatarCountAggregateInputType | true;
};

export interface AvatarDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Avatar"]; meta: { name: "Avatar" } };
  /**
   * Find zero or one Avatar that matches the filter.
   * @param {AvatarFindUniqueArgs} args - Arguments to find a Avatar
   * @example
   * // Get one Avatar
   * const avatar = await prisma.avatar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AvatarFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AvatarFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Avatar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AvatarFindUniqueOrThrowArgs} args - Arguments to find a Avatar
   * @example
   * // Get one Avatar
   * const avatar = await prisma.avatar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AvatarFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AvatarFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Avatar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarFindFirstArgs} args - Arguments to find a Avatar
   * @example
   * // Get one Avatar
   * const avatar = await prisma.avatar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AvatarFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AvatarFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Avatar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarFindFirstOrThrowArgs} args - Arguments to find a Avatar
   * @example
   * // Get one Avatar
   * const avatar = await prisma.avatar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AvatarFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AvatarFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Avatars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Avatars
   * const avatars = await prisma.avatar.findMany()
   *
   * // Get first 10 Avatars
   * const avatars = await prisma.avatar.findMany({ take: 10 })
   *
   * // Only select the `teamId`
   * const avatarWithTeamIdOnly = await prisma.avatar.findMany({ select: { teamId: true } })
   *
   */
  findMany<T extends AvatarFindManyArgs>(
    args?: Prisma.SelectSubset<T, AvatarFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Avatar.
   * @param {AvatarCreateArgs} args - Arguments to create a Avatar.
   * @example
   * // Create one Avatar
   * const Avatar = await prisma.avatar.create({
   *   data: {
   *     // ... data to create a Avatar
   *   }
   * })
   *
   */
  create<T extends AvatarCreateArgs>(
    args: Prisma.SelectSubset<T, AvatarCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Avatars.
   * @param {AvatarCreateManyArgs} args - Arguments to create many Avatars.
   * @example
   * // Create many Avatars
   * const avatar = await prisma.avatar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AvatarCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AvatarCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Avatars and returns the data saved in the database.
   * @param {AvatarCreateManyAndReturnArgs} args - Arguments to create many Avatars.
   * @example
   * // Create many Avatars
   * const avatar = await prisma.avatar.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Avatars and only return the `teamId`
   * const avatarWithTeamIdOnly = await prisma.avatar.createManyAndReturn({
   *   select: { teamId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AvatarCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AvatarCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AvatarPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Avatar.
   * @param {AvatarDeleteArgs} args - Arguments to delete one Avatar.
   * @example
   * // Delete one Avatar
   * const Avatar = await prisma.avatar.delete({
   *   where: {
   *     // ... filter to delete one Avatar
   *   }
   * })
   *
   */
  delete<T extends AvatarDeleteArgs>(
    args: Prisma.SelectSubset<T, AvatarDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Avatar.
   * @param {AvatarUpdateArgs} args - Arguments to update one Avatar.
   * @example
   * // Update one Avatar
   * const avatar = await prisma.avatar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AvatarUpdateArgs>(
    args: Prisma.SelectSubset<T, AvatarUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Avatars.
   * @param {AvatarDeleteManyArgs} args - Arguments to filter Avatars to delete.
   * @example
   * // Delete a few Avatars
   * const { count } = await prisma.avatar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AvatarDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AvatarDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Avatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Avatars
   * const avatar = await prisma.avatar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AvatarUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AvatarUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Avatars and returns the data updated in the database.
   * @param {AvatarUpdateManyAndReturnArgs} args - Arguments to update many Avatars.
   * @example
   * // Update many Avatars
   * const avatar = await prisma.avatar.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Avatars and only return the `teamId`
   * const avatarWithTeamIdOnly = await prisma.avatar.updateManyAndReturn({
   *   select: { teamId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AvatarUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AvatarUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AvatarPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Avatar.
   * @param {AvatarUpsertArgs} args - Arguments to update or create a Avatar.
   * @example
   * // Update or create a Avatar
   * const avatar = await prisma.avatar.upsert({
   *   create: {
   *     // ... data to create a Avatar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Avatar we want to update
   *   }
   * })
   */
  upsert<T extends AvatarUpsertArgs>(
    args: Prisma.SelectSubset<T, AvatarUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AvatarClient<
    runtime.Types.Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Avatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarCountArgs} args - Arguments to filter Avatars to count.
   * @example
   * // Count the number of Avatars
   * const count = await prisma.avatar.count({
   *   where: {
   *     // ... the filter for the Avatars we want to count
   *   }
   * })
   **/
  count<T extends AvatarCountArgs>(
    args?: Prisma.Subset<T, AvatarCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AvatarCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Avatar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AvatarAggregateArgs>(
    args: Prisma.Subset<T, AvatarAggregateArgs>
  ): Prisma.PrismaPromise<GetAvatarAggregateType<T>>;

  /**
   * Group by Avatar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvatarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AvatarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AvatarGroupByArgs["orderBy"] }
      : { orderBy?: AvatarGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AvatarGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAvatarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Avatar model
   */
  readonly fields: AvatarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Avatar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AvatarClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Avatar model
 */
export interface AvatarFieldRefs {
  readonly teamId: Prisma.FieldRef<"Avatar", "Int">;
  readonly userId: Prisma.FieldRef<"Avatar", "Int">;
  readonly data: Prisma.FieldRef<"Avatar", "String">;
  readonly objectKey: Prisma.FieldRef<"Avatar", "String">;
  readonly isBanner: Prisma.FieldRef<"Avatar", "Boolean">;
}

// Custom InputTypes
/**
 * Avatar findUnique
 */
export type AvatarFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * Filter, which Avatar to fetch.
   */
  where: Prisma.AvatarWhereUniqueInput;
};

/**
 * Avatar findUniqueOrThrow
 */
export type AvatarFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * Filter, which Avatar to fetch.
   */
  where: Prisma.AvatarWhereUniqueInput;
};

/**
 * Avatar findFirst
 */
export type AvatarFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * Filter, which Avatar to fetch.
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Avatars to fetch.
   */
  orderBy?: Prisma.AvatarOrderByWithRelationInput | Prisma.AvatarOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Avatars.
   */
  cursor?: Prisma.AvatarWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Avatars from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Avatars.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Avatars.
   */
  distinct?: Prisma.AvatarScalarFieldEnum | Prisma.AvatarScalarFieldEnum[];
};

/**
 * Avatar findFirstOrThrow
 */
export type AvatarFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * Filter, which Avatar to fetch.
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Avatars to fetch.
   */
  orderBy?: Prisma.AvatarOrderByWithRelationInput | Prisma.AvatarOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Avatars.
   */
  cursor?: Prisma.AvatarWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Avatars from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Avatars.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Avatars.
   */
  distinct?: Prisma.AvatarScalarFieldEnum | Prisma.AvatarScalarFieldEnum[];
};

/**
 * Avatar findMany
 */
export type AvatarFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * Filter, which Avatars to fetch.
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Avatars to fetch.
   */
  orderBy?: Prisma.AvatarOrderByWithRelationInput | Prisma.AvatarOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Avatars.
   */
  cursor?: Prisma.AvatarWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Avatars from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Avatars.
   */
  skip?: number;
  distinct?: Prisma.AvatarScalarFieldEnum | Prisma.AvatarScalarFieldEnum[];
};

/**
 * Avatar create
 */
export type AvatarCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * The data needed to create a Avatar.
   */
  data: Prisma.XOR<Prisma.AvatarCreateInput, Prisma.AvatarUncheckedCreateInput>;
};

/**
 * Avatar createMany
 */
export type AvatarCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Avatars.
   */
  data: Prisma.AvatarCreateManyInput | Prisma.AvatarCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Avatar createManyAndReturn
 */
export type AvatarCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * The data used to create many Avatars.
   */
  data: Prisma.AvatarCreateManyInput | Prisma.AvatarCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Avatar update
 */
export type AvatarUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * The data needed to update a Avatar.
   */
  data: Prisma.XOR<Prisma.AvatarUpdateInput, Prisma.AvatarUncheckedUpdateInput>;
  /**
   * Choose, which Avatar to update.
   */
  where: Prisma.AvatarWhereUniqueInput;
};

/**
 * Avatar updateMany
 */
export type AvatarUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Avatars.
   */
  data: Prisma.XOR<Prisma.AvatarUpdateManyMutationInput, Prisma.AvatarUncheckedUpdateManyInput>;
  /**
   * Filter which Avatars to update
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * Limit how many Avatars to update.
   */
  limit?: number;
};

/**
 * Avatar updateManyAndReturn
 */
export type AvatarUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * The data used to update Avatars.
   */
  data: Prisma.XOR<Prisma.AvatarUpdateManyMutationInput, Prisma.AvatarUncheckedUpdateManyInput>;
  /**
   * Filter which Avatars to update
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * Limit how many Avatars to update.
   */
  limit?: number;
};

/**
 * Avatar upsert
 */
export type AvatarUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * The filter to search for the Avatar to update in case it exists.
   */
  where: Prisma.AvatarWhereUniqueInput;
  /**
   * In case the Avatar found by the `where` argument doesn't exist, create a new Avatar with this data.
   */
  create: Prisma.XOR<Prisma.AvatarCreateInput, Prisma.AvatarUncheckedCreateInput>;
  /**
   * In case the Avatar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AvatarUpdateInput, Prisma.AvatarUncheckedUpdateInput>;
};

/**
 * Avatar delete
 */
export type AvatarDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
  /**
   * Filter which Avatar to delete.
   */
  where: Prisma.AvatarWhereUniqueInput;
};

/**
 * Avatar deleteMany
 */
export type AvatarDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Avatars to delete
   */
  where?: Prisma.AvatarWhereInput;
  /**
   * Limit how many Avatars to delete.
   */
  limit?: number;
};

/**
 * Avatar without action
 */
export type AvatarDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Avatar
   */
  select?: Prisma.AvatarSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Avatar
   */
  omit?: Prisma.AvatarOmit<ExtArgs> | null;
};
