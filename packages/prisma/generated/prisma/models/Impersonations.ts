/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Impersonations` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Impersonations
 *
 */
export type ImpersonationsModel = runtime.Types.Result.DefaultSelection<Prisma.$ImpersonationsPayload>;

export type AggregateImpersonations = {
  _count: ImpersonationsCountAggregateOutputType | null;
  _avg: ImpersonationsAvgAggregateOutputType | null;
  _sum: ImpersonationsSumAggregateOutputType | null;
  _min: ImpersonationsMinAggregateOutputType | null;
  _max: ImpersonationsMaxAggregateOutputType | null;
};

export type ImpersonationsAvgAggregateOutputType = {
  id: number | null;
  impersonatedUserId: number | null;
  impersonatedById: number | null;
};

export type ImpersonationsSumAggregateOutputType = {
  id: number | null;
  impersonatedUserId: number | null;
  impersonatedById: number | null;
};

export type ImpersonationsMinAggregateOutputType = {
  id: number | null;
  createdAt: Date | null;
  impersonatedUserId: number | null;
  impersonatedById: number | null;
};

export type ImpersonationsMaxAggregateOutputType = {
  id: number | null;
  createdAt: Date | null;
  impersonatedUserId: number | null;
  impersonatedById: number | null;
};

export type ImpersonationsCountAggregateOutputType = {
  id: number;
  createdAt: number;
  impersonatedUserId: number;
  impersonatedById: number;
  _all: number;
};

export type ImpersonationsAvgAggregateInputType = {
  id?: true;
  impersonatedUserId?: true;
  impersonatedById?: true;
};

export type ImpersonationsSumAggregateInputType = {
  id?: true;
  impersonatedUserId?: true;
  impersonatedById?: true;
};

export type ImpersonationsMinAggregateInputType = {
  id?: true;
  createdAt?: true;
  impersonatedUserId?: true;
  impersonatedById?: true;
};

export type ImpersonationsMaxAggregateInputType = {
  id?: true;
  createdAt?: true;
  impersonatedUserId?: true;
  impersonatedById?: true;
};

export type ImpersonationsCountAggregateInputType = {
  id?: true;
  createdAt?: true;
  impersonatedUserId?: true;
  impersonatedById?: true;
  _all?: true;
};

export type ImpersonationsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Impersonations to aggregate.
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Impersonations to fetch.
   */
  orderBy?: Prisma.ImpersonationsOrderByWithRelationInput | Prisma.ImpersonationsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ImpersonationsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Impersonations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Impersonations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Impersonations
   **/
  _count?: true | ImpersonationsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ImpersonationsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ImpersonationsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ImpersonationsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ImpersonationsMaxAggregateInputType;
};

export type GetImpersonationsAggregateType<T extends ImpersonationsAggregateArgs> = {
  [P in keyof T & keyof AggregateImpersonations]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateImpersonations[P]>
    : Prisma.GetScalarType<T[P], AggregateImpersonations[P]>;
};

export type ImpersonationsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ImpersonationsWhereInput;
  orderBy?:
    | Prisma.ImpersonationsOrderByWithAggregationInput
    | Prisma.ImpersonationsOrderByWithAggregationInput[];
  by: Prisma.ImpersonationsScalarFieldEnum[] | Prisma.ImpersonationsScalarFieldEnum;
  having?: Prisma.ImpersonationsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ImpersonationsCountAggregateInputType | true;
  _avg?: ImpersonationsAvgAggregateInputType;
  _sum?: ImpersonationsSumAggregateInputType;
  _min?: ImpersonationsMinAggregateInputType;
  _max?: ImpersonationsMaxAggregateInputType;
};

export type ImpersonationsGroupByOutputType = {
  id: number;
  createdAt: Date;
  impersonatedUserId: number;
  impersonatedById: number;
  _count: ImpersonationsCountAggregateOutputType | null;
  _avg: ImpersonationsAvgAggregateOutputType | null;
  _sum: ImpersonationsSumAggregateOutputType | null;
  _min: ImpersonationsMinAggregateOutputType | null;
  _max: ImpersonationsMaxAggregateOutputType | null;
};

type GetImpersonationsGroupByPayload<T extends ImpersonationsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ImpersonationsGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ImpersonationsGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ImpersonationsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ImpersonationsGroupByOutputType[P]>;
    }
  >
>;

export type ImpersonationsWhereInput = {
  AND?: Prisma.ImpersonationsWhereInput | Prisma.ImpersonationsWhereInput[];
  OR?: Prisma.ImpersonationsWhereInput[];
  NOT?: Prisma.ImpersonationsWhereInput | Prisma.ImpersonationsWhereInput[];
  id?: Prisma.IntFilter<"Impersonations"> | number;
  createdAt?: Prisma.DateTimeFilter<"Impersonations"> | Date | string;
  impersonatedUserId?: Prisma.IntFilter<"Impersonations"> | number;
  impersonatedById?: Prisma.IntFilter<"Impersonations"> | number;
  impersonatedUser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  impersonatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type ImpersonationsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
  impersonatedUser?: Prisma.UserOrderByWithRelationInput;
  impersonatedBy?: Prisma.UserOrderByWithRelationInput;
};

export type ImpersonationsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ImpersonationsWhereInput | Prisma.ImpersonationsWhereInput[];
    OR?: Prisma.ImpersonationsWhereInput[];
    NOT?: Prisma.ImpersonationsWhereInput | Prisma.ImpersonationsWhereInput[];
    createdAt?: Prisma.DateTimeFilter<"Impersonations"> | Date | string;
    impersonatedUserId?: Prisma.IntFilter<"Impersonations"> | number;
    impersonatedById?: Prisma.IntFilter<"Impersonations"> | number;
    impersonatedUser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    impersonatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id"
>;

export type ImpersonationsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
  _count?: Prisma.ImpersonationsCountOrderByAggregateInput;
  _avg?: Prisma.ImpersonationsAvgOrderByAggregateInput;
  _max?: Prisma.ImpersonationsMaxOrderByAggregateInput;
  _min?: Prisma.ImpersonationsMinOrderByAggregateInput;
  _sum?: Prisma.ImpersonationsSumOrderByAggregateInput;
};

export type ImpersonationsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ImpersonationsScalarWhereWithAggregatesInput
    | Prisma.ImpersonationsScalarWhereWithAggregatesInput[];
  OR?: Prisma.ImpersonationsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ImpersonationsScalarWhereWithAggregatesInput
    | Prisma.ImpersonationsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Impersonations"> | number;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Impersonations"> | Date | string;
  impersonatedUserId?: Prisma.IntWithAggregatesFilter<"Impersonations"> | number;
  impersonatedById?: Prisma.IntWithAggregatesFilter<"Impersonations"> | number;
};

export type ImpersonationsCreateInput = {
  createdAt?: Date | string;
  impersonatedUser: Prisma.UserCreateNestedOneWithoutImpersonatedUsersInput;
  impersonatedBy: Prisma.UserCreateNestedOneWithoutImpersonatedByInput;
};

export type ImpersonationsUncheckedCreateInput = {
  id?: number;
  createdAt?: Date | string;
  impersonatedUserId: number;
  impersonatedById: number;
};

export type ImpersonationsUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedUser?: Prisma.UserUpdateOneRequiredWithoutImpersonatedUsersNestedInput;
  impersonatedBy?: Prisma.UserUpdateOneRequiredWithoutImpersonatedByNestedInput;
};

export type ImpersonationsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedUserId?: Prisma.IntFieldUpdateOperationsInput | number;
  impersonatedById?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ImpersonationsCreateManyInput = {
  id?: number;
  createdAt?: Date | string;
  impersonatedUserId: number;
  impersonatedById: number;
};

export type ImpersonationsUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ImpersonationsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedUserId?: Prisma.IntFieldUpdateOperationsInput | number;
  impersonatedById?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ImpersonationsListRelationFilter = {
  every?: Prisma.ImpersonationsWhereInput;
  some?: Prisma.ImpersonationsWhereInput;
  none?: Prisma.ImpersonationsWhereInput;
};

export type ImpersonationsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ImpersonationsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
};

export type ImpersonationsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
};

export type ImpersonationsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
};

export type ImpersonationsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
};

export type ImpersonationsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  impersonatedUserId?: Prisma.SortOrder;
  impersonatedById?: Prisma.SortOrder;
};

export type ImpersonationsCreateNestedManyWithoutImpersonatedUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedUserInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedUserInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedUserInputEnvelope;
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
};

export type ImpersonationsCreateNestedManyWithoutImpersonatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedByInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedByInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedByInputEnvelope;
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
};

export type ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedUserInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedUserInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedUserInputEnvelope;
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
};

export type ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedByInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedByInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedByInputEnvelope;
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
};

export type ImpersonationsUpdateManyWithoutImpersonatedUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedUserInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedUserInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput[];
  upsert?:
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedUserInputEnvelope;
  set?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  disconnect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  delete?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  update?:
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput[];
  updateMany?:
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput[];
  deleteMany?: Prisma.ImpersonationsScalarWhereInput | Prisma.ImpersonationsScalarWhereInput[];
};

export type ImpersonationsUpdateManyWithoutImpersonatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedByInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedByInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput[];
  upsert?:
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedByInputEnvelope;
  set?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  disconnect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  delete?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  update?:
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput[];
  updateMany?:
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput[];
  deleteMany?: Prisma.ImpersonationsScalarWhereInput | Prisma.ImpersonationsScalarWhereInput[];
};

export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedUserInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedUserInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedUserInput[];
  upsert?:
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedUserInputEnvelope;
  set?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  disconnect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  delete?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  update?:
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput[];
  updateMany?:
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput[];
  deleteMany?: Prisma.ImpersonationsScalarWhereInput | Prisma.ImpersonationsScalarWhereInput[];
};

export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ImpersonationsCreateWithoutImpersonatedByInput,
        Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput
      >
    | Prisma.ImpersonationsCreateWithoutImpersonatedByInput[]
    | Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput[];
  connectOrCreate?:
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput
    | Prisma.ImpersonationsCreateOrConnectWithoutImpersonatedByInput[];
  upsert?:
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput
    | Prisma.ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput[];
  createMany?: Prisma.ImpersonationsCreateManyImpersonatedByInputEnvelope;
  set?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  disconnect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  delete?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  connect?: Prisma.ImpersonationsWhereUniqueInput | Prisma.ImpersonationsWhereUniqueInput[];
  update?:
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput
    | Prisma.ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput[];
  updateMany?:
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput
    | Prisma.ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput[];
  deleteMany?: Prisma.ImpersonationsScalarWhereInput | Prisma.ImpersonationsScalarWhereInput[];
};

export type ImpersonationsCreateWithoutImpersonatedUserInput = {
  createdAt?: Date | string;
  impersonatedBy: Prisma.UserCreateNestedOneWithoutImpersonatedByInput;
};

export type ImpersonationsUncheckedCreateWithoutImpersonatedUserInput = {
  id?: number;
  createdAt?: Date | string;
  impersonatedById: number;
};

export type ImpersonationsCreateOrConnectWithoutImpersonatedUserInput = {
  where: Prisma.ImpersonationsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ImpersonationsCreateWithoutImpersonatedUserInput,
    Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput
  >;
};

export type ImpersonationsCreateManyImpersonatedUserInputEnvelope = {
  data:
    | Prisma.ImpersonationsCreateManyImpersonatedUserInput
    | Prisma.ImpersonationsCreateManyImpersonatedUserInput[];
  skipDuplicates?: boolean;
};

export type ImpersonationsCreateWithoutImpersonatedByInput = {
  createdAt?: Date | string;
  impersonatedUser: Prisma.UserCreateNestedOneWithoutImpersonatedUsersInput;
};

export type ImpersonationsUncheckedCreateWithoutImpersonatedByInput = {
  id?: number;
  createdAt?: Date | string;
  impersonatedUserId: number;
};

export type ImpersonationsCreateOrConnectWithoutImpersonatedByInput = {
  where: Prisma.ImpersonationsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ImpersonationsCreateWithoutImpersonatedByInput,
    Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput
  >;
};

export type ImpersonationsCreateManyImpersonatedByInputEnvelope = {
  data:
    | Prisma.ImpersonationsCreateManyImpersonatedByInput
    | Prisma.ImpersonationsCreateManyImpersonatedByInput[];
  skipDuplicates?: boolean;
};

export type ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput = {
  where: Prisma.ImpersonationsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ImpersonationsUpdateWithoutImpersonatedUserInput,
    Prisma.ImpersonationsUncheckedUpdateWithoutImpersonatedUserInput
  >;
  create: Prisma.XOR<
    Prisma.ImpersonationsCreateWithoutImpersonatedUserInput,
    Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedUserInput
  >;
};

export type ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput = {
  where: Prisma.ImpersonationsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ImpersonationsUpdateWithoutImpersonatedUserInput,
    Prisma.ImpersonationsUncheckedUpdateWithoutImpersonatedUserInput
  >;
};

export type ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput = {
  where: Prisma.ImpersonationsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ImpersonationsUpdateManyMutationInput,
    Prisma.ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
  >;
};

export type ImpersonationsScalarWhereInput = {
  AND?: Prisma.ImpersonationsScalarWhereInput | Prisma.ImpersonationsScalarWhereInput[];
  OR?: Prisma.ImpersonationsScalarWhereInput[];
  NOT?: Prisma.ImpersonationsScalarWhereInput | Prisma.ImpersonationsScalarWhereInput[];
  id?: Prisma.IntFilter<"Impersonations"> | number;
  createdAt?: Prisma.DateTimeFilter<"Impersonations"> | Date | string;
  impersonatedUserId?: Prisma.IntFilter<"Impersonations"> | number;
  impersonatedById?: Prisma.IntFilter<"Impersonations"> | number;
};

export type ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput = {
  where: Prisma.ImpersonationsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ImpersonationsUpdateWithoutImpersonatedByInput,
    Prisma.ImpersonationsUncheckedUpdateWithoutImpersonatedByInput
  >;
  create: Prisma.XOR<
    Prisma.ImpersonationsCreateWithoutImpersonatedByInput,
    Prisma.ImpersonationsUncheckedCreateWithoutImpersonatedByInput
  >;
};

export type ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput = {
  where: Prisma.ImpersonationsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ImpersonationsUpdateWithoutImpersonatedByInput,
    Prisma.ImpersonationsUncheckedUpdateWithoutImpersonatedByInput
  >;
};

export type ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput = {
  where: Prisma.ImpersonationsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ImpersonationsUpdateManyMutationInput,
    Prisma.ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
  >;
};

export type ImpersonationsCreateManyImpersonatedUserInput = {
  id?: number;
  createdAt?: Date | string;
  impersonatedById: number;
};

export type ImpersonationsCreateManyImpersonatedByInput = {
  id?: number;
  createdAt?: Date | string;
  impersonatedUserId: number;
};

export type ImpersonationsUpdateWithoutImpersonatedUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedBy?: Prisma.UserUpdateOneRequiredWithoutImpersonatedByNestedInput;
};

export type ImpersonationsUncheckedUpdateWithoutImpersonatedUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedById?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedById?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ImpersonationsUpdateWithoutImpersonatedByInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedUser?: Prisma.UserUpdateOneRequiredWithoutImpersonatedUsersNestedInput;
};

export type ImpersonationsUncheckedUpdateWithoutImpersonatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedUserId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  impersonatedUserId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ImpersonationsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    impersonatedUserId?: boolean;
    impersonatedById?: boolean;
    impersonatedUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    impersonatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["impersonations"]
>;

export type ImpersonationsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    impersonatedUserId?: boolean;
    impersonatedById?: boolean;
    impersonatedUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    impersonatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["impersonations"]
>;

export type ImpersonationsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    createdAt?: boolean;
    impersonatedUserId?: boolean;
    impersonatedById?: boolean;
    impersonatedUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    impersonatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["impersonations"]
>;

export type ImpersonationsSelectScalar = {
  id?: boolean;
  createdAt?: boolean;
  impersonatedUserId?: boolean;
  impersonatedById?: boolean;
};

export type ImpersonationsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "createdAt" | "impersonatedUserId" | "impersonatedById",
  ExtArgs["result"]["impersonations"]
>;
export type ImpersonationsInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  impersonatedUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  impersonatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ImpersonationsIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  impersonatedUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  impersonatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ImpersonationsIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  impersonatedUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  impersonatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $ImpersonationsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Impersonations";
  objects: {
    impersonatedUser: Prisma.$UserPayload<ExtArgs>;
    impersonatedBy: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      createdAt: Date;
      impersonatedUserId: number;
      impersonatedById: number;
    },
    ExtArgs["result"]["impersonations"]
  >;
  composites: {};
};

export type ImpersonationsGetPayload<S extends boolean | null | undefined | ImpersonationsDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$ImpersonationsPayload, S>;

export type ImpersonationsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ImpersonationsFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ImpersonationsCountAggregateInputType | true;
};

export interface ImpersonationsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Impersonations"];
    meta: { name: "Impersonations" };
  };
  /**
   * Find zero or one Impersonations that matches the filter.
   * @param {ImpersonationsFindUniqueArgs} args - Arguments to find a Impersonations
   * @example
   * // Get one Impersonations
   * const impersonations = await prisma.impersonations.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ImpersonationsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<
      Prisma.$ImpersonationsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Impersonations that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ImpersonationsFindUniqueOrThrowArgs} args - Arguments to find a Impersonations
   * @example
   * // Get one Impersonations
   * const impersonations = await prisma.impersonations.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ImpersonationsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<
      Prisma.$ImpersonationsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Impersonations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsFindFirstArgs} args - Arguments to find a Impersonations
   * @example
   * // Get one Impersonations
   * const impersonations = await prisma.impersonations.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ImpersonationsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ImpersonationsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<
      Prisma.$ImpersonationsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Impersonations that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsFindFirstOrThrowArgs} args - Arguments to find a Impersonations
   * @example
   * // Get one Impersonations
   * const impersonations = await prisma.impersonations.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ImpersonationsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ImpersonationsFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<
      Prisma.$ImpersonationsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Impersonations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Impersonations
   * const impersonations = await prisma.impersonations.findMany()
   *
   * // Get first 10 Impersonations
   * const impersonations = await prisma.impersonations.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const impersonationsWithIdOnly = await prisma.impersonations.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ImpersonationsFindManyArgs>(
    args?: Prisma.SelectSubset<T, ImpersonationsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$ImpersonationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Impersonations.
   * @param {ImpersonationsCreateArgs} args - Arguments to create a Impersonations.
   * @example
   * // Create one Impersonations
   * const Impersonations = await prisma.impersonations.create({
   *   data: {
   *     // ... data to create a Impersonations
   *   }
   * })
   *
   */
  create<T extends ImpersonationsCreateArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<Prisma.$ImpersonationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Impersonations.
   * @param {ImpersonationsCreateManyArgs} args - Arguments to create many Impersonations.
   * @example
   * // Create many Impersonations
   * const impersonations = await prisma.impersonations.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ImpersonationsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ImpersonationsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Impersonations and returns the data saved in the database.
   * @param {ImpersonationsCreateManyAndReturnArgs} args - Arguments to create many Impersonations.
   * @example
   * // Create many Impersonations
   * const impersonations = await prisma.impersonations.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Impersonations and only return the `id`
   * const impersonationsWithIdOnly = await prisma.impersonations.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ImpersonationsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ImpersonationsCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ImpersonationsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Impersonations.
   * @param {ImpersonationsDeleteArgs} args - Arguments to delete one Impersonations.
   * @example
   * // Delete one Impersonations
   * const Impersonations = await prisma.impersonations.delete({
   *   where: {
   *     // ... filter to delete one Impersonations
   *   }
   * })
   *
   */
  delete<T extends ImpersonationsDeleteArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<Prisma.$ImpersonationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Impersonations.
   * @param {ImpersonationsUpdateArgs} args - Arguments to update one Impersonations.
   * @example
   * // Update one Impersonations
   * const impersonations = await prisma.impersonations.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ImpersonationsUpdateArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<Prisma.$ImpersonationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Impersonations.
   * @param {ImpersonationsDeleteManyArgs} args - Arguments to filter Impersonations to delete.
   * @example
   * // Delete a few Impersonations
   * const { count } = await prisma.impersonations.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ImpersonationsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ImpersonationsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Impersonations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Impersonations
   * const impersonations = await prisma.impersonations.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ImpersonationsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Impersonations and returns the data updated in the database.
   * @param {ImpersonationsUpdateManyAndReturnArgs} args - Arguments to update many Impersonations.
   * @example
   * // Update many Impersonations
   * const impersonations = await prisma.impersonations.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Impersonations and only return the `id`
   * const impersonationsWithIdOnly = await prisma.impersonations.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ImpersonationsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ImpersonationsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Impersonations.
   * @param {ImpersonationsUpsertArgs} args - Arguments to update or create a Impersonations.
   * @example
   * // Update or create a Impersonations
   * const impersonations = await prisma.impersonations.upsert({
   *   create: {
   *     // ... data to create a Impersonations
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Impersonations we want to update
   *   }
   * })
   */
  upsert<T extends ImpersonationsUpsertArgs>(
    args: Prisma.SelectSubset<T, ImpersonationsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ImpersonationsClient<
    runtime.Types.Result.GetResult<Prisma.$ImpersonationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Impersonations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsCountArgs} args - Arguments to filter Impersonations to count.
   * @example
   * // Count the number of Impersonations
   * const count = await prisma.impersonations.count({
   *   where: {
   *     // ... the filter for the Impersonations we want to count
   *   }
   * })
   **/
  count<T extends ImpersonationsCountArgs>(
    args?: Prisma.Subset<T, ImpersonationsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ImpersonationsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Impersonations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ImpersonationsAggregateArgs>(
    args: Prisma.Subset<T, ImpersonationsAggregateArgs>
  ): Prisma.PrismaPromise<GetImpersonationsAggregateType<T>>;

  /**
   * Group by Impersonations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ImpersonationsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ImpersonationsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ImpersonationsGroupByArgs["orderBy"] }
      : { orderBy?: ImpersonationsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ImpersonationsGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetImpersonationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Impersonations model
   */
  readonly fields: ImpersonationsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Impersonations.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ImpersonationsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  impersonatedUser<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  impersonatedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Impersonations model
 */
export interface ImpersonationsFieldRefs {
  readonly id: Prisma.FieldRef<"Impersonations", "Int">;
  readonly createdAt: Prisma.FieldRef<"Impersonations", "DateTime">;
  readonly impersonatedUserId: Prisma.FieldRef<"Impersonations", "Int">;
  readonly impersonatedById: Prisma.FieldRef<"Impersonations", "Int">;
}

// Custom InputTypes
/**
 * Impersonations findUnique
 */
export type ImpersonationsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * Filter, which Impersonations to fetch.
   */
  where: Prisma.ImpersonationsWhereUniqueInput;
};

/**
 * Impersonations findUniqueOrThrow
 */
export type ImpersonationsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * Filter, which Impersonations to fetch.
   */
  where: Prisma.ImpersonationsWhereUniqueInput;
};

/**
 * Impersonations findFirst
 */
export type ImpersonationsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * Filter, which Impersonations to fetch.
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Impersonations to fetch.
   */
  orderBy?: Prisma.ImpersonationsOrderByWithRelationInput | Prisma.ImpersonationsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Impersonations.
   */
  cursor?: Prisma.ImpersonationsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Impersonations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Impersonations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Impersonations.
   */
  distinct?: Prisma.ImpersonationsScalarFieldEnum | Prisma.ImpersonationsScalarFieldEnum[];
};

/**
 * Impersonations findFirstOrThrow
 */
export type ImpersonationsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * Filter, which Impersonations to fetch.
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Impersonations to fetch.
   */
  orderBy?: Prisma.ImpersonationsOrderByWithRelationInput | Prisma.ImpersonationsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Impersonations.
   */
  cursor?: Prisma.ImpersonationsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Impersonations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Impersonations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Impersonations.
   */
  distinct?: Prisma.ImpersonationsScalarFieldEnum | Prisma.ImpersonationsScalarFieldEnum[];
};

/**
 * Impersonations findMany
 */
export type ImpersonationsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * Filter, which Impersonations to fetch.
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Impersonations to fetch.
   */
  orderBy?: Prisma.ImpersonationsOrderByWithRelationInput | Prisma.ImpersonationsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Impersonations.
   */
  cursor?: Prisma.ImpersonationsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Impersonations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Impersonations.
   */
  skip?: number;
  distinct?: Prisma.ImpersonationsScalarFieldEnum | Prisma.ImpersonationsScalarFieldEnum[];
};

/**
 * Impersonations create
 */
export type ImpersonationsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * The data needed to create a Impersonations.
   */
  data: Prisma.XOR<Prisma.ImpersonationsCreateInput, Prisma.ImpersonationsUncheckedCreateInput>;
};

/**
 * Impersonations createMany
 */
export type ImpersonationsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Impersonations.
   */
  data: Prisma.ImpersonationsCreateManyInput | Prisma.ImpersonationsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Impersonations createManyAndReturn
 */
export type ImpersonationsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * The data used to create many Impersonations.
   */
  data: Prisma.ImpersonationsCreateManyInput | Prisma.ImpersonationsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Impersonations update
 */
export type ImpersonationsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * The data needed to update a Impersonations.
   */
  data: Prisma.XOR<Prisma.ImpersonationsUpdateInput, Prisma.ImpersonationsUncheckedUpdateInput>;
  /**
   * Choose, which Impersonations to update.
   */
  where: Prisma.ImpersonationsWhereUniqueInput;
};

/**
 * Impersonations updateMany
 */
export type ImpersonationsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Impersonations.
   */
  data: Prisma.XOR<
    Prisma.ImpersonationsUpdateManyMutationInput,
    Prisma.ImpersonationsUncheckedUpdateManyInput
  >;
  /**
   * Filter which Impersonations to update
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * Limit how many Impersonations to update.
   */
  limit?: number;
};

/**
 * Impersonations updateManyAndReturn
 */
export type ImpersonationsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * The data used to update Impersonations.
   */
  data: Prisma.XOR<
    Prisma.ImpersonationsUpdateManyMutationInput,
    Prisma.ImpersonationsUncheckedUpdateManyInput
  >;
  /**
   * Filter which Impersonations to update
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * Limit how many Impersonations to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Impersonations upsert
 */
export type ImpersonationsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * The filter to search for the Impersonations to update in case it exists.
   */
  where: Prisma.ImpersonationsWhereUniqueInput;
  /**
   * In case the Impersonations found by the `where` argument doesn't exist, create a new Impersonations with this data.
   */
  create: Prisma.XOR<Prisma.ImpersonationsCreateInput, Prisma.ImpersonationsUncheckedCreateInput>;
  /**
   * In case the Impersonations was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ImpersonationsUpdateInput, Prisma.ImpersonationsUncheckedUpdateInput>;
};

/**
 * Impersonations delete
 */
export type ImpersonationsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
  /**
   * Filter which Impersonations to delete.
   */
  where: Prisma.ImpersonationsWhereUniqueInput;
};

/**
 * Impersonations deleteMany
 */
export type ImpersonationsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Impersonations to delete
   */
  where?: Prisma.ImpersonationsWhereInput;
  /**
   * Limit how many Impersonations to delete.
   */
  limit?: number;
};

/**
 * Impersonations without action
 */
export type ImpersonationsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Impersonations
   */
  select?: Prisma.ImpersonationsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Impersonations
   */
  omit?: Prisma.ImpersonationsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ImpersonationsInclude<ExtArgs> | null;
};
