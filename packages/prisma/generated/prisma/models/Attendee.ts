/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Attendee` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Attendee
 *
 */
export type AttendeeModel = runtime.Types.Result.DefaultSelection<Prisma.$AttendeePayload>;

export type AggregateAttendee = {
  _count: AttendeeCountAggregateOutputType | null;
  _avg: AttendeeAvgAggregateOutputType | null;
  _sum: AttendeeSumAggregateOutputType | null;
  _min: AttendeeMinAggregateOutputType | null;
  _max: AttendeeMaxAggregateOutputType | null;
};

export type AttendeeAvgAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
};

export type AttendeeSumAggregateOutputType = {
  id: number | null;
  bookingId: number | null;
};

export type AttendeeMinAggregateOutputType = {
  id: number | null;
  email: string | null;
  name: string | null;
  timeZone: string | null;
  phoneNumber: string | null;
  locale: string | null;
  bookingId: number | null;
  noShow: boolean | null;
};

export type AttendeeMaxAggregateOutputType = {
  id: number | null;
  email: string | null;
  name: string | null;
  timeZone: string | null;
  phoneNumber: string | null;
  locale: string | null;
  bookingId: number | null;
  noShow: boolean | null;
};

export type AttendeeCountAggregateOutputType = {
  id: number;
  email: number;
  name: number;
  timeZone: number;
  phoneNumber: number;
  locale: number;
  bookingId: number;
  noShow: number;
  _all: number;
};

export type AttendeeAvgAggregateInputType = {
  id?: true;
  bookingId?: true;
};

export type AttendeeSumAggregateInputType = {
  id?: true;
  bookingId?: true;
};

export type AttendeeMinAggregateInputType = {
  id?: true;
  email?: true;
  name?: true;
  timeZone?: true;
  phoneNumber?: true;
  locale?: true;
  bookingId?: true;
  noShow?: true;
};

export type AttendeeMaxAggregateInputType = {
  id?: true;
  email?: true;
  name?: true;
  timeZone?: true;
  phoneNumber?: true;
  locale?: true;
  bookingId?: true;
  noShow?: true;
};

export type AttendeeCountAggregateInputType = {
  id?: true;
  email?: true;
  name?: true;
  timeZone?: true;
  phoneNumber?: true;
  locale?: true;
  bookingId?: true;
  noShow?: true;
  _all?: true;
};

export type AttendeeAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Attendee to aggregate.
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attendees to fetch.
   */
  orderBy?: Prisma.AttendeeOrderByWithRelationInput | Prisma.AttendeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AttendeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attendees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attendees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Attendees
   **/
  _count?: true | AttendeeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AttendeeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AttendeeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AttendeeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AttendeeMaxAggregateInputType;
};

export type GetAttendeeAggregateType<T extends AttendeeAggregateArgs> = {
  [P in keyof T & keyof AggregateAttendee]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAttendee[P]>
    : Prisma.GetScalarType<T[P], AggregateAttendee[P]>;
};

export type AttendeeGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AttendeeWhereInput;
  orderBy?: Prisma.AttendeeOrderByWithAggregationInput | Prisma.AttendeeOrderByWithAggregationInput[];
  by: Prisma.AttendeeScalarFieldEnum[] | Prisma.AttendeeScalarFieldEnum;
  having?: Prisma.AttendeeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AttendeeCountAggregateInputType | true;
  _avg?: AttendeeAvgAggregateInputType;
  _sum?: AttendeeSumAggregateInputType;
  _min?: AttendeeMinAggregateInputType;
  _max?: AttendeeMaxAggregateInputType;
};

export type AttendeeGroupByOutputType = {
  id: number;
  email: string;
  name: string;
  timeZone: string;
  phoneNumber: string | null;
  locale: string | null;
  bookingId: number | null;
  noShow: boolean | null;
  _count: AttendeeCountAggregateOutputType | null;
  _avg: AttendeeAvgAggregateOutputType | null;
  _sum: AttendeeSumAggregateOutputType | null;
  _min: AttendeeMinAggregateOutputType | null;
  _max: AttendeeMaxAggregateOutputType | null;
};

type GetAttendeeGroupByPayload<T extends AttendeeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AttendeeGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AttendeeGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AttendeeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AttendeeGroupByOutputType[P]>;
    }
  >
>;

export type AttendeeWhereInput = {
  AND?: Prisma.AttendeeWhereInput | Prisma.AttendeeWhereInput[];
  OR?: Prisma.AttendeeWhereInput[];
  NOT?: Prisma.AttendeeWhereInput | Prisma.AttendeeWhereInput[];
  id?: Prisma.IntFilter<"Attendee"> | number;
  email?: Prisma.StringFilter<"Attendee"> | string;
  name?: Prisma.StringFilter<"Attendee"> | string;
  timeZone?: Prisma.StringFilter<"Attendee"> | string;
  phoneNumber?: Prisma.StringNullableFilter<"Attendee"> | string | null;
  locale?: Prisma.StringNullableFilter<"Attendee"> | string | null;
  bookingId?: Prisma.IntNullableFilter<"Attendee"> | number | null;
  noShow?: Prisma.BoolNullableFilter<"Attendee"> | boolean | null;
  booking?: Prisma.XOR<Prisma.BookingNullableScalarRelationFilter, Prisma.BookingWhereInput> | null;
  bookingSeat?: Prisma.XOR<
    Prisma.BookingSeatNullableScalarRelationFilter,
    Prisma.BookingSeatWhereInput
  > | null;
};

export type AttendeeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
  locale?: Prisma.SortOrderInput | Prisma.SortOrder;
  bookingId?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShow?: Prisma.SortOrderInput | Prisma.SortOrder;
  booking?: Prisma.BookingOrderByWithRelationInput;
  bookingSeat?: Prisma.BookingSeatOrderByWithRelationInput;
};

export type AttendeeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.AttendeeWhereInput | Prisma.AttendeeWhereInput[];
    OR?: Prisma.AttendeeWhereInput[];
    NOT?: Prisma.AttendeeWhereInput | Prisma.AttendeeWhereInput[];
    email?: Prisma.StringFilter<"Attendee"> | string;
    name?: Prisma.StringFilter<"Attendee"> | string;
    timeZone?: Prisma.StringFilter<"Attendee"> | string;
    phoneNumber?: Prisma.StringNullableFilter<"Attendee"> | string | null;
    locale?: Prisma.StringNullableFilter<"Attendee"> | string | null;
    bookingId?: Prisma.IntNullableFilter<"Attendee"> | number | null;
    noShow?: Prisma.BoolNullableFilter<"Attendee"> | boolean | null;
    booking?: Prisma.XOR<Prisma.BookingNullableScalarRelationFilter, Prisma.BookingWhereInput> | null;
    bookingSeat?: Prisma.XOR<
      Prisma.BookingSeatNullableScalarRelationFilter,
      Prisma.BookingSeatWhereInput
    > | null;
  },
  "id"
>;

export type AttendeeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
  locale?: Prisma.SortOrderInput | Prisma.SortOrder;
  bookingId?: Prisma.SortOrderInput | Prisma.SortOrder;
  noShow?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AttendeeCountOrderByAggregateInput;
  _avg?: Prisma.AttendeeAvgOrderByAggregateInput;
  _max?: Prisma.AttendeeMaxOrderByAggregateInput;
  _min?: Prisma.AttendeeMinOrderByAggregateInput;
  _sum?: Prisma.AttendeeSumOrderByAggregateInput;
};

export type AttendeeScalarWhereWithAggregatesInput = {
  AND?: Prisma.AttendeeScalarWhereWithAggregatesInput | Prisma.AttendeeScalarWhereWithAggregatesInput[];
  OR?: Prisma.AttendeeScalarWhereWithAggregatesInput[];
  NOT?: Prisma.AttendeeScalarWhereWithAggregatesInput | Prisma.AttendeeScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Attendee"> | number;
  email?: Prisma.StringWithAggregatesFilter<"Attendee"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Attendee"> | string;
  timeZone?: Prisma.StringWithAggregatesFilter<"Attendee"> | string;
  phoneNumber?: Prisma.StringNullableWithAggregatesFilter<"Attendee"> | string | null;
  locale?: Prisma.StringNullableWithAggregatesFilter<"Attendee"> | string | null;
  bookingId?: Prisma.IntNullableWithAggregatesFilter<"Attendee"> | number | null;
  noShow?: Prisma.BoolNullableWithAggregatesFilter<"Attendee"> | boolean | null;
};

export type AttendeeCreateInput = {
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  noShow?: boolean | null;
  booking?: Prisma.BookingCreateNestedOneWithoutAttendeesInput;
  bookingSeat?: Prisma.BookingSeatCreateNestedOneWithoutAttendeeInput;
};

export type AttendeeUncheckedCreateInput = {
  id?: number;
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  bookingId?: number | null;
  noShow?: boolean | null;
  bookingSeat?: Prisma.BookingSeatUncheckedCreateNestedOneWithoutAttendeeInput;
};

export type AttendeeUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  booking?: Prisma.BookingUpdateOneWithoutAttendeesNestedInput;
  bookingSeat?: Prisma.BookingSeatUpdateOneWithoutAttendeeNestedInput;
};

export type AttendeeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bookingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  bookingSeat?: Prisma.BookingSeatUncheckedUpdateOneWithoutAttendeeNestedInput;
};

export type AttendeeCreateManyInput = {
  id?: number;
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  bookingId?: number | null;
  noShow?: boolean | null;
};

export type AttendeeUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type AttendeeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bookingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type AttendeeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  locale?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  noShow?: Prisma.SortOrder;
};

export type AttendeeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
};

export type AttendeeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  locale?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  noShow?: Prisma.SortOrder;
};

export type AttendeeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  timeZone?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  locale?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
  noShow?: Prisma.SortOrder;
};

export type AttendeeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  bookingId?: Prisma.SortOrder;
};

export type AttendeeListRelationFilter = {
  every?: Prisma.AttendeeWhereInput;
  some?: Prisma.AttendeeWhereInput;
  none?: Prisma.AttendeeWhereInput;
};

export type AttendeeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AttendeeScalarRelationFilter = {
  is?: Prisma.AttendeeWhereInput;
  isNot?: Prisma.AttendeeWhereInput;
};

export type AttendeeCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<Prisma.AttendeeCreateWithoutBookingInput, Prisma.AttendeeUncheckedCreateWithoutBookingInput>
    | Prisma.AttendeeCreateWithoutBookingInput[]
    | Prisma.AttendeeUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.AttendeeCreateManyBookingInputEnvelope;
  connect?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
};

export type AttendeeUncheckedCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<Prisma.AttendeeCreateWithoutBookingInput, Prisma.AttendeeUncheckedCreateWithoutBookingInput>
    | Prisma.AttendeeCreateWithoutBookingInput[]
    | Prisma.AttendeeUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.AttendeeCreateManyBookingInputEnvelope;
  connect?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
};

export type AttendeeUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AttendeeCreateWithoutBookingInput, Prisma.AttendeeUncheckedCreateWithoutBookingInput>
    | Prisma.AttendeeCreateWithoutBookingInput[]
    | Prisma.AttendeeUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.AttendeeUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.AttendeeUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.AttendeeCreateManyBookingInputEnvelope;
  set?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  disconnect?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  delete?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  connect?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  update?:
    | Prisma.AttendeeUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.AttendeeUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.AttendeeUpdateManyWithWhereWithoutBookingInput
    | Prisma.AttendeeUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.AttendeeScalarWhereInput | Prisma.AttendeeScalarWhereInput[];
};

export type AttendeeUncheckedUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<Prisma.AttendeeCreateWithoutBookingInput, Prisma.AttendeeUncheckedCreateWithoutBookingInput>
    | Prisma.AttendeeCreateWithoutBookingInput[]
    | Prisma.AttendeeUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput
    | Prisma.AttendeeCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.AttendeeUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.AttendeeUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.AttendeeCreateManyBookingInputEnvelope;
  set?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  disconnect?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  delete?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  connect?: Prisma.AttendeeWhereUniqueInput | Prisma.AttendeeWhereUniqueInput[];
  update?:
    | Prisma.AttendeeUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.AttendeeUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.AttendeeUpdateManyWithWhereWithoutBookingInput
    | Prisma.AttendeeUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.AttendeeScalarWhereInput | Prisma.AttendeeScalarWhereInput[];
};

export type AttendeeCreateNestedOneWithoutBookingSeatInput = {
  create?: Prisma.XOR<
    Prisma.AttendeeCreateWithoutBookingSeatInput,
    Prisma.AttendeeUncheckedCreateWithoutBookingSeatInput
  >;
  connectOrCreate?: Prisma.AttendeeCreateOrConnectWithoutBookingSeatInput;
  connect?: Prisma.AttendeeWhereUniqueInput;
};

export type AttendeeUpdateOneRequiredWithoutBookingSeatNestedInput = {
  create?: Prisma.XOR<
    Prisma.AttendeeCreateWithoutBookingSeatInput,
    Prisma.AttendeeUncheckedCreateWithoutBookingSeatInput
  >;
  connectOrCreate?: Prisma.AttendeeCreateOrConnectWithoutBookingSeatInput;
  upsert?: Prisma.AttendeeUpsertWithoutBookingSeatInput;
  connect?: Prisma.AttendeeWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AttendeeUpdateToOneWithWhereWithoutBookingSeatInput,
      Prisma.AttendeeUpdateWithoutBookingSeatInput
    >,
    Prisma.AttendeeUncheckedUpdateWithoutBookingSeatInput
  >;
};

export type AttendeeCreateWithoutBookingInput = {
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  noShow?: boolean | null;
  bookingSeat?: Prisma.BookingSeatCreateNestedOneWithoutAttendeeInput;
};

export type AttendeeUncheckedCreateWithoutBookingInput = {
  id?: number;
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  noShow?: boolean | null;
  bookingSeat?: Prisma.BookingSeatUncheckedCreateNestedOneWithoutAttendeeInput;
};

export type AttendeeCreateOrConnectWithoutBookingInput = {
  where: Prisma.AttendeeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AttendeeCreateWithoutBookingInput,
    Prisma.AttendeeUncheckedCreateWithoutBookingInput
  >;
};

export type AttendeeCreateManyBookingInputEnvelope = {
  data: Prisma.AttendeeCreateManyBookingInput | Prisma.AttendeeCreateManyBookingInput[];
  skipDuplicates?: boolean;
};

export type AttendeeUpsertWithWhereUniqueWithoutBookingInput = {
  where: Prisma.AttendeeWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AttendeeUpdateWithoutBookingInput,
    Prisma.AttendeeUncheckedUpdateWithoutBookingInput
  >;
  create: Prisma.XOR<
    Prisma.AttendeeCreateWithoutBookingInput,
    Prisma.AttendeeUncheckedCreateWithoutBookingInput
  >;
};

export type AttendeeUpdateWithWhereUniqueWithoutBookingInput = {
  where: Prisma.AttendeeWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AttendeeUpdateWithoutBookingInput,
    Prisma.AttendeeUncheckedUpdateWithoutBookingInput
  >;
};

export type AttendeeUpdateManyWithWhereWithoutBookingInput = {
  where: Prisma.AttendeeScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AttendeeUpdateManyMutationInput,
    Prisma.AttendeeUncheckedUpdateManyWithoutBookingInput
  >;
};

export type AttendeeScalarWhereInput = {
  AND?: Prisma.AttendeeScalarWhereInput | Prisma.AttendeeScalarWhereInput[];
  OR?: Prisma.AttendeeScalarWhereInput[];
  NOT?: Prisma.AttendeeScalarWhereInput | Prisma.AttendeeScalarWhereInput[];
  id?: Prisma.IntFilter<"Attendee"> | number;
  email?: Prisma.StringFilter<"Attendee"> | string;
  name?: Prisma.StringFilter<"Attendee"> | string;
  timeZone?: Prisma.StringFilter<"Attendee"> | string;
  phoneNumber?: Prisma.StringNullableFilter<"Attendee"> | string | null;
  locale?: Prisma.StringNullableFilter<"Attendee"> | string | null;
  bookingId?: Prisma.IntNullableFilter<"Attendee"> | number | null;
  noShow?: Prisma.BoolNullableFilter<"Attendee"> | boolean | null;
};

export type AttendeeCreateWithoutBookingSeatInput = {
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  noShow?: boolean | null;
  booking?: Prisma.BookingCreateNestedOneWithoutAttendeesInput;
};

export type AttendeeUncheckedCreateWithoutBookingSeatInput = {
  id?: number;
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  bookingId?: number | null;
  noShow?: boolean | null;
};

export type AttendeeCreateOrConnectWithoutBookingSeatInput = {
  where: Prisma.AttendeeWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AttendeeCreateWithoutBookingSeatInput,
    Prisma.AttendeeUncheckedCreateWithoutBookingSeatInput
  >;
};

export type AttendeeUpsertWithoutBookingSeatInput = {
  update: Prisma.XOR<
    Prisma.AttendeeUpdateWithoutBookingSeatInput,
    Prisma.AttendeeUncheckedUpdateWithoutBookingSeatInput
  >;
  create: Prisma.XOR<
    Prisma.AttendeeCreateWithoutBookingSeatInput,
    Prisma.AttendeeUncheckedCreateWithoutBookingSeatInput
  >;
  where?: Prisma.AttendeeWhereInput;
};

export type AttendeeUpdateToOneWithWhereWithoutBookingSeatInput = {
  where?: Prisma.AttendeeWhereInput;
  data: Prisma.XOR<
    Prisma.AttendeeUpdateWithoutBookingSeatInput,
    Prisma.AttendeeUncheckedUpdateWithoutBookingSeatInput
  >;
};

export type AttendeeUpdateWithoutBookingSeatInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  booking?: Prisma.BookingUpdateOneWithoutAttendeesNestedInput;
};

export type AttendeeUncheckedUpdateWithoutBookingSeatInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bookingId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type AttendeeCreateManyBookingInput = {
  id?: number;
  email: string;
  name: string;
  timeZone: string;
  phoneNumber?: string | null;
  locale?: string | null;
  noShow?: boolean | null;
};

export type AttendeeUpdateWithoutBookingInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  bookingSeat?: Prisma.BookingSeatUpdateOneWithoutAttendeeNestedInput;
};

export type AttendeeUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
  bookingSeat?: Prisma.BookingSeatUncheckedUpdateOneWithoutAttendeeNestedInput;
};

export type AttendeeUncheckedUpdateManyWithoutBookingInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  timeZone?: Prisma.StringFieldUpdateOperationsInput | string;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  locale?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  noShow?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
};

export type AttendeeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    email?: boolean;
    name?: boolean;
    timeZone?: boolean;
    phoneNumber?: boolean;
    locale?: boolean;
    bookingId?: boolean;
    noShow?: boolean;
    booking?: boolean | Prisma.Attendee$bookingArgs<ExtArgs>;
    bookingSeat?: boolean | Prisma.Attendee$bookingSeatArgs<ExtArgs>;
  },
  ExtArgs["result"]["attendee"]
>;

export type AttendeeSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    email?: boolean;
    name?: boolean;
    timeZone?: boolean;
    phoneNumber?: boolean;
    locale?: boolean;
    bookingId?: boolean;
    noShow?: boolean;
    booking?: boolean | Prisma.Attendee$bookingArgs<ExtArgs>;
  },
  ExtArgs["result"]["attendee"]
>;

export type AttendeeSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    email?: boolean;
    name?: boolean;
    timeZone?: boolean;
    phoneNumber?: boolean;
    locale?: boolean;
    bookingId?: boolean;
    noShow?: boolean;
    booking?: boolean | Prisma.Attendee$bookingArgs<ExtArgs>;
  },
  ExtArgs["result"]["attendee"]
>;

export type AttendeeSelectScalar = {
  id?: boolean;
  email?: boolean;
  name?: boolean;
  timeZone?: boolean;
  phoneNumber?: boolean;
  locale?: boolean;
  bookingId?: boolean;
  noShow?: boolean;
};

export type AttendeeOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "email" | "name" | "timeZone" | "phoneNumber" | "locale" | "bookingId" | "noShow",
  ExtArgs["result"]["attendee"]
>;
export type AttendeeInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.Attendee$bookingArgs<ExtArgs>;
  bookingSeat?: boolean | Prisma.Attendee$bookingSeatArgs<ExtArgs>;
};
export type AttendeeIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.Attendee$bookingArgs<ExtArgs>;
};
export type AttendeeIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  booking?: boolean | Prisma.Attendee$bookingArgs<ExtArgs>;
};

export type $AttendeePayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Attendee";
  objects: {
    booking: Prisma.$BookingPayload<ExtArgs> | null;
    bookingSeat: Prisma.$BookingSeatPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      email: string;
      name: string;
      timeZone: string;
      phoneNumber: string | null;
      locale: string | null;
      bookingId: number | null;
      noShow: boolean | null;
    },
    ExtArgs["result"]["attendee"]
  >;
  composites: {};
};

export type AttendeeGetPayload<S extends boolean | null | undefined | AttendeeDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AttendeePayload, S>;

export type AttendeeCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AttendeeFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AttendeeCountAggregateInputType | true;
};

export interface AttendeeDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Attendee"]; meta: { name: "Attendee" } };
  /**
   * Find zero or one Attendee that matches the filter.
   * @param {AttendeeFindUniqueArgs} args - Arguments to find a Attendee
   * @example
   * // Get one Attendee
   * const attendee = await prisma.attendee.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AttendeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AttendeeFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttendeePayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Attendee that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AttendeeFindUniqueOrThrowArgs} args - Arguments to find a Attendee
   * @example
   * // Get one Attendee
   * const attendee = await prisma.attendee.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AttendeeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AttendeeFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttendeePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Attendee that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeFindFirstArgs} args - Arguments to find a Attendee
   * @example
   * // Get one Attendee
   * const attendee = await prisma.attendee.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AttendeeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AttendeeFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttendeePayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Attendee that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeFindFirstOrThrowArgs} args - Arguments to find a Attendee
   * @example
   * // Get one Attendee
   * const attendee = await prisma.attendee.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AttendeeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AttendeeFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<
      Prisma.$AttendeePayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Attendees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Attendees
   * const attendees = await prisma.attendee.findMany()
   *
   * // Get first 10 Attendees
   * const attendees = await prisma.attendee.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const attendeeWithIdOnly = await prisma.attendee.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AttendeeFindManyArgs>(
    args?: Prisma.SelectSubset<T, AttendeeFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Attendee.
   * @param {AttendeeCreateArgs} args - Arguments to create a Attendee.
   * @example
   * // Create one Attendee
   * const Attendee = await prisma.attendee.create({
   *   data: {
   *     // ... data to create a Attendee
   *   }
   * })
   *
   */
  create<T extends AttendeeCreateArgs>(
    args: Prisma.SelectSubset<T, AttendeeCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Attendees.
   * @param {AttendeeCreateManyArgs} args - Arguments to create many Attendees.
   * @example
   * // Create many Attendees
   * const attendee = await prisma.attendee.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AttendeeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AttendeeCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Attendees and returns the data saved in the database.
   * @param {AttendeeCreateManyAndReturnArgs} args - Arguments to create many Attendees.
   * @example
   * // Create many Attendees
   * const attendee = await prisma.attendee.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Attendees and only return the `id`
   * const attendeeWithIdOnly = await prisma.attendee.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AttendeeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AttendeeCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AttendeePayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Attendee.
   * @param {AttendeeDeleteArgs} args - Arguments to delete one Attendee.
   * @example
   * // Delete one Attendee
   * const Attendee = await prisma.attendee.delete({
   *   where: {
   *     // ... filter to delete one Attendee
   *   }
   * })
   *
   */
  delete<T extends AttendeeDeleteArgs>(
    args: Prisma.SelectSubset<T, AttendeeDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Attendee.
   * @param {AttendeeUpdateArgs} args - Arguments to update one Attendee.
   * @example
   * // Update one Attendee
   * const attendee = await prisma.attendee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AttendeeUpdateArgs>(
    args: Prisma.SelectSubset<T, AttendeeUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Attendees.
   * @param {AttendeeDeleteManyArgs} args - Arguments to filter Attendees to delete.
   * @example
   * // Delete a few Attendees
   * const { count } = await prisma.attendee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AttendeeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AttendeeDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Attendees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Attendees
   * const attendee = await prisma.attendee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AttendeeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AttendeeUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Attendees and returns the data updated in the database.
   * @param {AttendeeUpdateManyAndReturnArgs} args - Arguments to update many Attendees.
   * @example
   * // Update many Attendees
   * const attendee = await prisma.attendee.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Attendees and only return the `id`
   * const attendeeWithIdOnly = await prisma.attendee.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AttendeeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AttendeeUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AttendeePayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Attendee.
   * @param {AttendeeUpsertArgs} args - Arguments to update or create a Attendee.
   * @example
   * // Update or create a Attendee
   * const attendee = await prisma.attendee.upsert({
   *   create: {
   *     // ... data to create a Attendee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Attendee we want to update
   *   }
   * })
   */
  upsert<T extends AttendeeUpsertArgs>(
    args: Prisma.SelectSubset<T, AttendeeUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AttendeeClient<
    runtime.Types.Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Attendees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeCountArgs} args - Arguments to filter Attendees to count.
   * @example
   * // Count the number of Attendees
   * const count = await prisma.attendee.count({
   *   where: {
   *     // ... the filter for the Attendees we want to count
   *   }
   * })
   **/
  count<T extends AttendeeCountArgs>(
    args?: Prisma.Subset<T, AttendeeCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AttendeeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Attendee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AttendeeAggregateArgs>(
    args: Prisma.Subset<T, AttendeeAggregateArgs>
  ): Prisma.PrismaPromise<GetAttendeeAggregateType<T>>;

  /**
   * Group by Attendee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendeeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AttendeeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AttendeeGroupByArgs["orderBy"] }
      : { orderBy?: AttendeeGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AttendeeGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAttendeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Attendee model
   */
  readonly fields: AttendeeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Attendee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AttendeeClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  booking<T extends Prisma.Attendee$bookingArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Attendee$bookingArgs<ExtArgs>>
  ): Prisma.Prisma__BookingClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  bookingSeat<T extends Prisma.Attendee$bookingSeatArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Attendee$bookingSeatArgs<ExtArgs>>
  ): Prisma.Prisma__BookingSeatClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingSeatPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Attendee model
 */
export interface AttendeeFieldRefs {
  readonly id: Prisma.FieldRef<"Attendee", "Int">;
  readonly email: Prisma.FieldRef<"Attendee", "String">;
  readonly name: Prisma.FieldRef<"Attendee", "String">;
  readonly timeZone: Prisma.FieldRef<"Attendee", "String">;
  readonly phoneNumber: Prisma.FieldRef<"Attendee", "String">;
  readonly locale: Prisma.FieldRef<"Attendee", "String">;
  readonly bookingId: Prisma.FieldRef<"Attendee", "Int">;
  readonly noShow: Prisma.FieldRef<"Attendee", "Boolean">;
}

// Custom InputTypes
/**
 * Attendee findUnique
 */
export type AttendeeFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * Filter, which Attendee to fetch.
   */
  where: Prisma.AttendeeWhereUniqueInput;
};

/**
 * Attendee findUniqueOrThrow
 */
export type AttendeeFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * Filter, which Attendee to fetch.
   */
  where: Prisma.AttendeeWhereUniqueInput;
};

/**
 * Attendee findFirst
 */
export type AttendeeFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * Filter, which Attendee to fetch.
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attendees to fetch.
   */
  orderBy?: Prisma.AttendeeOrderByWithRelationInput | Prisma.AttendeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Attendees.
   */
  cursor?: Prisma.AttendeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attendees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attendees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Attendees.
   */
  distinct?: Prisma.AttendeeScalarFieldEnum | Prisma.AttendeeScalarFieldEnum[];
};

/**
 * Attendee findFirstOrThrow
 */
export type AttendeeFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * Filter, which Attendee to fetch.
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attendees to fetch.
   */
  orderBy?: Prisma.AttendeeOrderByWithRelationInput | Prisma.AttendeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Attendees.
   */
  cursor?: Prisma.AttendeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attendees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attendees.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Attendees.
   */
  distinct?: Prisma.AttendeeScalarFieldEnum | Prisma.AttendeeScalarFieldEnum[];
};

/**
 * Attendee findMany
 */
export type AttendeeFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * Filter, which Attendees to fetch.
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Attendees to fetch.
   */
  orderBy?: Prisma.AttendeeOrderByWithRelationInput | Prisma.AttendeeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Attendees.
   */
  cursor?: Prisma.AttendeeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Attendees from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Attendees.
   */
  skip?: number;
  distinct?: Prisma.AttendeeScalarFieldEnum | Prisma.AttendeeScalarFieldEnum[];
};

/**
 * Attendee create
 */
export type AttendeeCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * The data needed to create a Attendee.
   */
  data: Prisma.XOR<Prisma.AttendeeCreateInput, Prisma.AttendeeUncheckedCreateInput>;
};

/**
 * Attendee createMany
 */
export type AttendeeCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Attendees.
   */
  data: Prisma.AttendeeCreateManyInput | Prisma.AttendeeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Attendee createManyAndReturn
 */
export type AttendeeCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * The data used to create many Attendees.
   */
  data: Prisma.AttendeeCreateManyInput | Prisma.AttendeeCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Attendee update
 */
export type AttendeeUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * The data needed to update a Attendee.
   */
  data: Prisma.XOR<Prisma.AttendeeUpdateInput, Prisma.AttendeeUncheckedUpdateInput>;
  /**
   * Choose, which Attendee to update.
   */
  where: Prisma.AttendeeWhereUniqueInput;
};

/**
 * Attendee updateMany
 */
export type AttendeeUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Attendees.
   */
  data: Prisma.XOR<Prisma.AttendeeUpdateManyMutationInput, Prisma.AttendeeUncheckedUpdateManyInput>;
  /**
   * Filter which Attendees to update
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * Limit how many Attendees to update.
   */
  limit?: number;
};

/**
 * Attendee updateManyAndReturn
 */
export type AttendeeUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * The data used to update Attendees.
   */
  data: Prisma.XOR<Prisma.AttendeeUpdateManyMutationInput, Prisma.AttendeeUncheckedUpdateManyInput>;
  /**
   * Filter which Attendees to update
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * Limit how many Attendees to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Attendee upsert
 */
export type AttendeeUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * The filter to search for the Attendee to update in case it exists.
   */
  where: Prisma.AttendeeWhereUniqueInput;
  /**
   * In case the Attendee found by the `where` argument doesn't exist, create a new Attendee with this data.
   */
  create: Prisma.XOR<Prisma.AttendeeCreateInput, Prisma.AttendeeUncheckedCreateInput>;
  /**
   * In case the Attendee was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AttendeeUpdateInput, Prisma.AttendeeUncheckedUpdateInput>;
};

/**
 * Attendee delete
 */
export type AttendeeDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
  /**
   * Filter which Attendee to delete.
   */
  where: Prisma.AttendeeWhereUniqueInput;
};

/**
 * Attendee deleteMany
 */
export type AttendeeDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Attendees to delete
   */
  where?: Prisma.AttendeeWhereInput;
  /**
   * Limit how many Attendees to delete.
   */
  limit?: number;
};

/**
 * Attendee.booking
 */
export type Attendee$bookingArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null;
  where?: Prisma.BookingWhereInput;
};

/**
 * Attendee.bookingSeat
 */
export type Attendee$bookingSeatArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the BookingSeat
   */
  select?: Prisma.BookingSeatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BookingSeat
   */
  omit?: Prisma.BookingSeatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingSeatInclude<ExtArgs> | null;
  where?: Prisma.BookingSeatWhereInput;
};

/**
 * Attendee without action
 */
export type AttendeeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Attendee
   */
  select?: Prisma.AttendeeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Attendee
   */
  omit?: Prisma.AttendeeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AttendeeInclude<ExtArgs> | null;
};
