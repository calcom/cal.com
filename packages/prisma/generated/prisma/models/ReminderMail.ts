/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `ReminderMail` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ReminderMail
 *
 */
export type ReminderMailModel = runtime.Types.Result.DefaultSelection<Prisma.$ReminderMailPayload>;

export type AggregateReminderMail = {
  _count: ReminderMailCountAggregateOutputType | null;
  _avg: ReminderMailAvgAggregateOutputType | null;
  _sum: ReminderMailSumAggregateOutputType | null;
  _min: ReminderMailMinAggregateOutputType | null;
  _max: ReminderMailMaxAggregateOutputType | null;
};

export type ReminderMailAvgAggregateOutputType = {
  id: number | null;
  referenceId: number | null;
  elapsedMinutes: number | null;
};

export type ReminderMailSumAggregateOutputType = {
  id: number | null;
  referenceId: number | null;
  elapsedMinutes: number | null;
};

export type ReminderMailMinAggregateOutputType = {
  id: number | null;
  referenceId: number | null;
  reminderType: $Enums.ReminderType | null;
  elapsedMinutes: number | null;
  createdAt: Date | null;
};

export type ReminderMailMaxAggregateOutputType = {
  id: number | null;
  referenceId: number | null;
  reminderType: $Enums.ReminderType | null;
  elapsedMinutes: number | null;
  createdAt: Date | null;
};

export type ReminderMailCountAggregateOutputType = {
  id: number;
  referenceId: number;
  reminderType: number;
  elapsedMinutes: number;
  createdAt: number;
  _all: number;
};

export type ReminderMailAvgAggregateInputType = {
  id?: true;
  referenceId?: true;
  elapsedMinutes?: true;
};

export type ReminderMailSumAggregateInputType = {
  id?: true;
  referenceId?: true;
  elapsedMinutes?: true;
};

export type ReminderMailMinAggregateInputType = {
  id?: true;
  referenceId?: true;
  reminderType?: true;
  elapsedMinutes?: true;
  createdAt?: true;
};

export type ReminderMailMaxAggregateInputType = {
  id?: true;
  referenceId?: true;
  reminderType?: true;
  elapsedMinutes?: true;
  createdAt?: true;
};

export type ReminderMailCountAggregateInputType = {
  id?: true;
  referenceId?: true;
  reminderType?: true;
  elapsedMinutes?: true;
  createdAt?: true;
  _all?: true;
};

export type ReminderMailAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which ReminderMail to aggregate.
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReminderMails to fetch.
   */
  orderBy?: Prisma.ReminderMailOrderByWithRelationInput | Prisma.ReminderMailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReminderMailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReminderMails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReminderMails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ReminderMails
   **/
  _count?: true | ReminderMailCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ReminderMailAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ReminderMailSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReminderMailMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReminderMailMaxAggregateInputType;
};

export type GetReminderMailAggregateType<T extends ReminderMailAggregateArgs> = {
  [P in keyof T & keyof AggregateReminderMail]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReminderMail[P]>
    : Prisma.GetScalarType<T[P], AggregateReminderMail[P]>;
};

export type ReminderMailGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ReminderMailWhereInput;
  orderBy?: Prisma.ReminderMailOrderByWithAggregationInput | Prisma.ReminderMailOrderByWithAggregationInput[];
  by: Prisma.ReminderMailScalarFieldEnum[] | Prisma.ReminderMailScalarFieldEnum;
  having?: Prisma.ReminderMailScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ReminderMailCountAggregateInputType | true;
  _avg?: ReminderMailAvgAggregateInputType;
  _sum?: ReminderMailSumAggregateInputType;
  _min?: ReminderMailMinAggregateInputType;
  _max?: ReminderMailMaxAggregateInputType;
};

export type ReminderMailGroupByOutputType = {
  id: number;
  referenceId: number;
  reminderType: $Enums.ReminderType;
  elapsedMinutes: number;
  createdAt: Date;
  _count: ReminderMailCountAggregateOutputType | null;
  _avg: ReminderMailAvgAggregateOutputType | null;
  _sum: ReminderMailSumAggregateOutputType | null;
  _min: ReminderMailMinAggregateOutputType | null;
  _max: ReminderMailMaxAggregateOutputType | null;
};

type GetReminderMailGroupByPayload<T extends ReminderMailGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReminderMailGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ReminderMailGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ReminderMailGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ReminderMailGroupByOutputType[P]>;
    }
  >
>;

export type ReminderMailWhereInput = {
  AND?: Prisma.ReminderMailWhereInput | Prisma.ReminderMailWhereInput[];
  OR?: Prisma.ReminderMailWhereInput[];
  NOT?: Prisma.ReminderMailWhereInput | Prisma.ReminderMailWhereInput[];
  id?: Prisma.IntFilter<"ReminderMail"> | number;
  referenceId?: Prisma.IntFilter<"ReminderMail"> | number;
  reminderType?: Prisma.EnumReminderTypeFilter<"ReminderMail"> | $Enums.ReminderType;
  elapsedMinutes?: Prisma.IntFilter<"ReminderMail"> | number;
  createdAt?: Prisma.DateTimeFilter<"ReminderMail"> | Date | string;
};

export type ReminderMailOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  reminderType?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReminderMailWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ReminderMailWhereInput | Prisma.ReminderMailWhereInput[];
    OR?: Prisma.ReminderMailWhereInput[];
    NOT?: Prisma.ReminderMailWhereInput | Prisma.ReminderMailWhereInput[];
    referenceId?: Prisma.IntFilter<"ReminderMail"> | number;
    reminderType?: Prisma.EnumReminderTypeFilter<"ReminderMail"> | $Enums.ReminderType;
    elapsedMinutes?: Prisma.IntFilter<"ReminderMail"> | number;
    createdAt?: Prisma.DateTimeFilter<"ReminderMail"> | Date | string;
  },
  "id"
>;

export type ReminderMailOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  reminderType?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  _count?: Prisma.ReminderMailCountOrderByAggregateInput;
  _avg?: Prisma.ReminderMailAvgOrderByAggregateInput;
  _max?: Prisma.ReminderMailMaxOrderByAggregateInput;
  _min?: Prisma.ReminderMailMinOrderByAggregateInput;
  _sum?: Prisma.ReminderMailSumOrderByAggregateInput;
};

export type ReminderMailScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReminderMailScalarWhereWithAggregatesInput
    | Prisma.ReminderMailScalarWhereWithAggregatesInput[];
  OR?: Prisma.ReminderMailScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ReminderMailScalarWhereWithAggregatesInput
    | Prisma.ReminderMailScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"ReminderMail"> | number;
  referenceId?: Prisma.IntWithAggregatesFilter<"ReminderMail"> | number;
  reminderType?: Prisma.EnumReminderTypeWithAggregatesFilter<"ReminderMail"> | $Enums.ReminderType;
  elapsedMinutes?: Prisma.IntWithAggregatesFilter<"ReminderMail"> | number;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ReminderMail"> | Date | string;
};

export type ReminderMailCreateInput = {
  referenceId: number;
  reminderType: $Enums.ReminderType;
  elapsedMinutes: number;
  createdAt?: Date | string;
};

export type ReminderMailUncheckedCreateInput = {
  id?: number;
  referenceId: number;
  reminderType: $Enums.ReminderType;
  elapsedMinutes: number;
  createdAt?: Date | string;
};

export type ReminderMailUpdateInput = {
  referenceId?: Prisma.IntFieldUpdateOperationsInput | number;
  reminderType?: Prisma.EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType;
  elapsedMinutes?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReminderMailUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceId?: Prisma.IntFieldUpdateOperationsInput | number;
  reminderType?: Prisma.EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType;
  elapsedMinutes?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReminderMailCreateManyInput = {
  id?: number;
  referenceId: number;
  reminderType: $Enums.ReminderType;
  elapsedMinutes: number;
  createdAt?: Date | string;
};

export type ReminderMailUpdateManyMutationInput = {
  referenceId?: Prisma.IntFieldUpdateOperationsInput | number;
  reminderType?: Prisma.EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType;
  elapsedMinutes?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReminderMailUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  referenceId?: Prisma.IntFieldUpdateOperationsInput | number;
  reminderType?: Prisma.EnumReminderTypeFieldUpdateOperationsInput | $Enums.ReminderType;
  elapsedMinutes?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ReminderMailCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  reminderType?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReminderMailAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
};

export type ReminderMailMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  reminderType?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReminderMailMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  reminderType?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
};

export type ReminderMailSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  referenceId?: Prisma.SortOrder;
  elapsedMinutes?: Prisma.SortOrder;
};

export type EnumReminderTypeFieldUpdateOperationsInput = {
  set?: $Enums.ReminderType;
};

export type ReminderMailSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    referenceId?: boolean;
    reminderType?: boolean;
    elapsedMinutes?: boolean;
    createdAt?: boolean;
  },
  ExtArgs["result"]["reminderMail"]
>;

export type ReminderMailSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    referenceId?: boolean;
    reminderType?: boolean;
    elapsedMinutes?: boolean;
    createdAt?: boolean;
  },
  ExtArgs["result"]["reminderMail"]
>;

export type ReminderMailSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    referenceId?: boolean;
    reminderType?: boolean;
    elapsedMinutes?: boolean;
    createdAt?: boolean;
  },
  ExtArgs["result"]["reminderMail"]
>;

export type ReminderMailSelectScalar = {
  id?: boolean;
  referenceId?: boolean;
  reminderType?: boolean;
  elapsedMinutes?: boolean;
  createdAt?: boolean;
};

export type ReminderMailOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "referenceId" | "reminderType" | "elapsedMinutes" | "createdAt",
  ExtArgs["result"]["reminderMail"]
>;

export type $ReminderMailPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "ReminderMail";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      referenceId: number;
      reminderType: $Enums.ReminderType;
      elapsedMinutes: number;
      createdAt: Date;
    },
    ExtArgs["result"]["reminderMail"]
  >;
  composites: {};
};

export type ReminderMailGetPayload<S extends boolean | null | undefined | ReminderMailDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$ReminderMailPayload, S>;

export type ReminderMailCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ReminderMailFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ReminderMailCountAggregateInputType | true;
};

export interface ReminderMailDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["ReminderMail"]; meta: { name: "ReminderMail" } };
  /**
   * Find zero or one ReminderMail that matches the filter.
   * @param {ReminderMailFindUniqueArgs} args - Arguments to find a ReminderMail
   * @example
   * // Get one ReminderMail
   * const reminderMail = await prisma.reminderMail.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReminderMailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReminderMailFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReminderMailPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ReminderMail that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReminderMailFindUniqueOrThrowArgs} args - Arguments to find a ReminderMail
   * @example
   * // Get one ReminderMail
   * const reminderMail = await prisma.reminderMail.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReminderMailFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReminderMailFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReminderMailPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ReminderMail that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailFindFirstArgs} args - Arguments to find a ReminderMail
   * @example
   * // Get one ReminderMail
   * const reminderMail = await prisma.reminderMail.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReminderMailFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReminderMailFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReminderMailPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ReminderMail that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailFindFirstOrThrowArgs} args - Arguments to find a ReminderMail
   * @example
   * // Get one ReminderMail
   * const reminderMail = await prisma.reminderMail.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReminderMailFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReminderMailFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReminderMailPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ReminderMails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ReminderMails
   * const reminderMails = await prisma.reminderMail.findMany()
   *
   * // Get first 10 ReminderMails
   * const reminderMails = await prisma.reminderMail.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const reminderMailWithIdOnly = await prisma.reminderMail.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReminderMailFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReminderMailFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$ReminderMailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a ReminderMail.
   * @param {ReminderMailCreateArgs} args - Arguments to create a ReminderMail.
   * @example
   * // Create one ReminderMail
   * const ReminderMail = await prisma.reminderMail.create({
   *   data: {
   *     // ... data to create a ReminderMail
   *   }
   * })
   *
   */
  create<T extends ReminderMailCreateArgs>(
    args: Prisma.SelectSubset<T, ReminderMailCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<Prisma.$ReminderMailPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ReminderMails.
   * @param {ReminderMailCreateManyArgs} args - Arguments to create many ReminderMails.
   * @example
   * // Create many ReminderMails
   * const reminderMail = await prisma.reminderMail.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReminderMailCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReminderMailCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ReminderMails and returns the data saved in the database.
   * @param {ReminderMailCreateManyAndReturnArgs} args - Arguments to create many ReminderMails.
   * @example
   * // Create many ReminderMails
   * const reminderMail = await prisma.reminderMail.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ReminderMails and only return the `id`
   * const reminderMailWithIdOnly = await prisma.reminderMail.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReminderMailCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ReminderMailCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReminderMailPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ReminderMail.
   * @param {ReminderMailDeleteArgs} args - Arguments to delete one ReminderMail.
   * @example
   * // Delete one ReminderMail
   * const ReminderMail = await prisma.reminderMail.delete({
   *   where: {
   *     // ... filter to delete one ReminderMail
   *   }
   * })
   *
   */
  delete<T extends ReminderMailDeleteArgs>(
    args: Prisma.SelectSubset<T, ReminderMailDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<Prisma.$ReminderMailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ReminderMail.
   * @param {ReminderMailUpdateArgs} args - Arguments to update one ReminderMail.
   * @example
   * // Update one ReminderMail
   * const reminderMail = await prisma.reminderMail.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReminderMailUpdateArgs>(
    args: Prisma.SelectSubset<T, ReminderMailUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<Prisma.$ReminderMailPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ReminderMails.
   * @param {ReminderMailDeleteManyArgs} args - Arguments to filter ReminderMails to delete.
   * @example
   * // Delete a few ReminderMails
   * const { count } = await prisma.reminderMail.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReminderMailDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReminderMailDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ReminderMails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ReminderMails
   * const reminderMail = await prisma.reminderMail.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReminderMailUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReminderMailUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ReminderMails and returns the data updated in the database.
   * @param {ReminderMailUpdateManyAndReturnArgs} args - Arguments to update many ReminderMails.
   * @example
   * // Update many ReminderMails
   * const reminderMail = await prisma.reminderMail.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ReminderMails and only return the `id`
   * const reminderMailWithIdOnly = await prisma.reminderMail.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReminderMailUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReminderMailUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReminderMailPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ReminderMail.
   * @param {ReminderMailUpsertArgs} args - Arguments to update or create a ReminderMail.
   * @example
   * // Update or create a ReminderMail
   * const reminderMail = await prisma.reminderMail.upsert({
   *   create: {
   *     // ... data to create a ReminderMail
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ReminderMail we want to update
   *   }
   * })
   */
  upsert<T extends ReminderMailUpsertArgs>(
    args: Prisma.SelectSubset<T, ReminderMailUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ReminderMailClient<
    runtime.Types.Result.GetResult<Prisma.$ReminderMailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ReminderMails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailCountArgs} args - Arguments to filter ReminderMails to count.
   * @example
   * // Count the number of ReminderMails
   * const count = await prisma.reminderMail.count({
   *   where: {
   *     // ... the filter for the ReminderMails we want to count
   *   }
   * })
   **/
  count<T extends ReminderMailCountArgs>(
    args?: Prisma.Subset<T, ReminderMailCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ReminderMailCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ReminderMail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReminderMailAggregateArgs>(
    args: Prisma.Subset<T, ReminderMailAggregateArgs>
  ): Prisma.PrismaPromise<GetReminderMailAggregateType<T>>;

  /**
   * Group by ReminderMail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReminderMailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReminderMailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReminderMailGroupByArgs["orderBy"] }
      : { orderBy?: ReminderMailGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ReminderMailGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetReminderMailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ReminderMail model
   */
  readonly fields: ReminderMailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ReminderMail.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReminderMailClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ReminderMail model
 */
export interface ReminderMailFieldRefs {
  readonly id: Prisma.FieldRef<"ReminderMail", "Int">;
  readonly referenceId: Prisma.FieldRef<"ReminderMail", "Int">;
  readonly reminderType: Prisma.FieldRef<"ReminderMail", "ReminderType">;
  readonly elapsedMinutes: Prisma.FieldRef<"ReminderMail", "Int">;
  readonly createdAt: Prisma.FieldRef<"ReminderMail", "DateTime">;
}

// Custom InputTypes
/**
 * ReminderMail findUnique
 */
export type ReminderMailFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * Filter, which ReminderMail to fetch.
   */
  where: Prisma.ReminderMailWhereUniqueInput;
};

/**
 * ReminderMail findUniqueOrThrow
 */
export type ReminderMailFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * Filter, which ReminderMail to fetch.
   */
  where: Prisma.ReminderMailWhereUniqueInput;
};

/**
 * ReminderMail findFirst
 */
export type ReminderMailFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * Filter, which ReminderMail to fetch.
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReminderMails to fetch.
   */
  orderBy?: Prisma.ReminderMailOrderByWithRelationInput | Prisma.ReminderMailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ReminderMails.
   */
  cursor?: Prisma.ReminderMailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReminderMails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReminderMails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ReminderMails.
   */
  distinct?: Prisma.ReminderMailScalarFieldEnum | Prisma.ReminderMailScalarFieldEnum[];
};

/**
 * ReminderMail findFirstOrThrow
 */
export type ReminderMailFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * Filter, which ReminderMail to fetch.
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReminderMails to fetch.
   */
  orderBy?: Prisma.ReminderMailOrderByWithRelationInput | Prisma.ReminderMailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ReminderMails.
   */
  cursor?: Prisma.ReminderMailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReminderMails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReminderMails.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ReminderMails.
   */
  distinct?: Prisma.ReminderMailScalarFieldEnum | Prisma.ReminderMailScalarFieldEnum[];
};

/**
 * ReminderMail findMany
 */
export type ReminderMailFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * Filter, which ReminderMails to fetch.
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReminderMails to fetch.
   */
  orderBy?: Prisma.ReminderMailOrderByWithRelationInput | Prisma.ReminderMailOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ReminderMails.
   */
  cursor?: Prisma.ReminderMailWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReminderMails from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReminderMails.
   */
  skip?: number;
  distinct?: Prisma.ReminderMailScalarFieldEnum | Prisma.ReminderMailScalarFieldEnum[];
};

/**
 * ReminderMail create
 */
export type ReminderMailCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * The data needed to create a ReminderMail.
   */
  data: Prisma.XOR<Prisma.ReminderMailCreateInput, Prisma.ReminderMailUncheckedCreateInput>;
};

/**
 * ReminderMail createMany
 */
export type ReminderMailCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many ReminderMails.
   */
  data: Prisma.ReminderMailCreateManyInput | Prisma.ReminderMailCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ReminderMail createManyAndReturn
 */
export type ReminderMailCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * The data used to create many ReminderMails.
   */
  data: Prisma.ReminderMailCreateManyInput | Prisma.ReminderMailCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ReminderMail update
 */
export type ReminderMailUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * The data needed to update a ReminderMail.
   */
  data: Prisma.XOR<Prisma.ReminderMailUpdateInput, Prisma.ReminderMailUncheckedUpdateInput>;
  /**
   * Choose, which ReminderMail to update.
   */
  where: Prisma.ReminderMailWhereUniqueInput;
};

/**
 * ReminderMail updateMany
 */
export type ReminderMailUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update ReminderMails.
   */
  data: Prisma.XOR<Prisma.ReminderMailUpdateManyMutationInput, Prisma.ReminderMailUncheckedUpdateManyInput>;
  /**
   * Filter which ReminderMails to update
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * Limit how many ReminderMails to update.
   */
  limit?: number;
};

/**
 * ReminderMail updateManyAndReturn
 */
export type ReminderMailUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * The data used to update ReminderMails.
   */
  data: Prisma.XOR<Prisma.ReminderMailUpdateManyMutationInput, Prisma.ReminderMailUncheckedUpdateManyInput>;
  /**
   * Filter which ReminderMails to update
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * Limit how many ReminderMails to update.
   */
  limit?: number;
};

/**
 * ReminderMail upsert
 */
export type ReminderMailUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * The filter to search for the ReminderMail to update in case it exists.
   */
  where: Prisma.ReminderMailWhereUniqueInput;
  /**
   * In case the ReminderMail found by the `where` argument doesn't exist, create a new ReminderMail with this data.
   */
  create: Prisma.XOR<Prisma.ReminderMailCreateInput, Prisma.ReminderMailUncheckedCreateInput>;
  /**
   * In case the ReminderMail was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReminderMailUpdateInput, Prisma.ReminderMailUncheckedUpdateInput>;
};

/**
 * ReminderMail delete
 */
export type ReminderMailDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
  /**
   * Filter which ReminderMail to delete.
   */
  where: Prisma.ReminderMailWhereUniqueInput;
};

/**
 * ReminderMail deleteMany
 */
export type ReminderMailDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which ReminderMails to delete
   */
  where?: Prisma.ReminderMailWhereInput;
  /**
   * Limit how many ReminderMails to delete.
   */
  limit?: number;
};

/**
 * ReminderMail without action
 */
export type ReminderMailDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the ReminderMail
   */
  select?: Prisma.ReminderMailSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ReminderMail
   */
  omit?: Prisma.ReminderMailOmit<ExtArgs> | null;
};
