/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `Availability` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Availability
 *
 */
export type AvailabilityModel = runtime.Types.Result.DefaultSelection<Prisma.$AvailabilityPayload>;

export type AggregateAvailability = {
  _count: AvailabilityCountAggregateOutputType | null;
  _avg: AvailabilityAvgAggregateOutputType | null;
  _sum: AvailabilitySumAggregateOutputType | null;
  _min: AvailabilityMinAggregateOutputType | null;
  _max: AvailabilityMaxAggregateOutputType | null;
};

export type AvailabilityAvgAggregateOutputType = {
  id: number | null;
  userId: number | null;
  eventTypeId: number | null;
  days: number | null;
  scheduleId: number | null;
};

export type AvailabilitySumAggregateOutputType = {
  id: number | null;
  userId: number | null;
  eventTypeId: number | null;
  days: number[];
  scheduleId: number | null;
};

export type AvailabilityMinAggregateOutputType = {
  id: number | null;
  userId: number | null;
  eventTypeId: number | null;
  startTime: Date | null;
  endTime: Date | null;
  date: Date | null;
  scheduleId: number | null;
};

export type AvailabilityMaxAggregateOutputType = {
  id: number | null;
  userId: number | null;
  eventTypeId: number | null;
  startTime: Date | null;
  endTime: Date | null;
  date: Date | null;
  scheduleId: number | null;
};

export type AvailabilityCountAggregateOutputType = {
  id: number;
  userId: number;
  eventTypeId: number;
  days: number;
  startTime: number;
  endTime: number;
  date: number;
  scheduleId: number;
  _all: number;
};

export type AvailabilityAvgAggregateInputType = {
  id?: true;
  userId?: true;
  eventTypeId?: true;
  days?: true;
  scheduleId?: true;
};

export type AvailabilitySumAggregateInputType = {
  id?: true;
  userId?: true;
  eventTypeId?: true;
  days?: true;
  scheduleId?: true;
};

export type AvailabilityMinAggregateInputType = {
  id?: true;
  userId?: true;
  eventTypeId?: true;
  startTime?: true;
  endTime?: true;
  date?: true;
  scheduleId?: true;
};

export type AvailabilityMaxAggregateInputType = {
  id?: true;
  userId?: true;
  eventTypeId?: true;
  startTime?: true;
  endTime?: true;
  date?: true;
  scheduleId?: true;
};

export type AvailabilityCountAggregateInputType = {
  id?: true;
  userId?: true;
  eventTypeId?: true;
  days?: true;
  startTime?: true;
  endTime?: true;
  date?: true;
  scheduleId?: true;
  _all?: true;
};

export type AvailabilityAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Availability to aggregate.
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Availabilities to fetch.
   */
  orderBy?: Prisma.AvailabilityOrderByWithRelationInput | Prisma.AvailabilityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AvailabilityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Availabilities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Availabilities.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Availabilities
   **/
  _count?: true | AvailabilityCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AvailabilityAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AvailabilitySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AvailabilityMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AvailabilityMaxAggregateInputType;
};

export type GetAvailabilityAggregateType<T extends AvailabilityAggregateArgs> = {
  [P in keyof T & keyof AggregateAvailability]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAvailability[P]>
    : Prisma.GetScalarType<T[P], AggregateAvailability[P]>;
};

export type AvailabilityGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AvailabilityWhereInput;
  orderBy?: Prisma.AvailabilityOrderByWithAggregationInput | Prisma.AvailabilityOrderByWithAggregationInput[];
  by: Prisma.AvailabilityScalarFieldEnum[] | Prisma.AvailabilityScalarFieldEnum;
  having?: Prisma.AvailabilityScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AvailabilityCountAggregateInputType | true;
  _avg?: AvailabilityAvgAggregateInputType;
  _sum?: AvailabilitySumAggregateInputType;
  _min?: AvailabilityMinAggregateInputType;
  _max?: AvailabilityMaxAggregateInputType;
};

export type AvailabilityGroupByOutputType = {
  id: number;
  userId: number | null;
  eventTypeId: number | null;
  days: number[];
  startTime: Date;
  endTime: Date;
  date: Date | null;
  scheduleId: number | null;
  _count: AvailabilityCountAggregateOutputType | null;
  _avg: AvailabilityAvgAggregateOutputType | null;
  _sum: AvailabilitySumAggregateOutputType | null;
  _min: AvailabilityMinAggregateOutputType | null;
  _max: AvailabilityMaxAggregateOutputType | null;
};

type GetAvailabilityGroupByPayload<T extends AvailabilityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AvailabilityGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AvailabilityGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AvailabilityGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AvailabilityGroupByOutputType[P]>;
    }
  >
>;

export type AvailabilityWhereInput = {
  AND?: Prisma.AvailabilityWhereInput | Prisma.AvailabilityWhereInput[];
  OR?: Prisma.AvailabilityWhereInput[];
  NOT?: Prisma.AvailabilityWhereInput | Prisma.AvailabilityWhereInput[];
  id?: Prisma.IntFilter<"Availability"> | number;
  userId?: Prisma.IntNullableFilter<"Availability"> | number | null;
  eventTypeId?: Prisma.IntNullableFilter<"Availability"> | number | null;
  days?: Prisma.IntNullableListFilter<"Availability">;
  startTime?: Prisma.DateTimeFilter<"Availability"> | Date | string;
  endTime?: Prisma.DateTimeFilter<"Availability"> | Date | string;
  date?: Prisma.DateTimeNullableFilter<"Availability"> | Date | string | null;
  scheduleId?: Prisma.IntNullableFilter<"Availability"> | number | null;
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
  eventType?: Prisma.XOR<Prisma.EventTypeNullableScalarRelationFilter, Prisma.EventTypeWhereInput> | null;
  Schedule?: Prisma.XOR<Prisma.ScheduleNullableScalarRelationFilter, Prisma.ScheduleWhereInput> | null;
};

export type AvailabilityOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  days?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  date?: Prisma.SortOrderInput | Prisma.SortOrder;
  scheduleId?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  eventType?: Prisma.EventTypeOrderByWithRelationInput;
  Schedule?: Prisma.ScheduleOrderByWithRelationInput;
};

export type AvailabilityWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.AvailabilityWhereInput | Prisma.AvailabilityWhereInput[];
    OR?: Prisma.AvailabilityWhereInput[];
    NOT?: Prisma.AvailabilityWhereInput | Prisma.AvailabilityWhereInput[];
    userId?: Prisma.IntNullableFilter<"Availability"> | number | null;
    eventTypeId?: Prisma.IntNullableFilter<"Availability"> | number | null;
    days?: Prisma.IntNullableListFilter<"Availability">;
    startTime?: Prisma.DateTimeFilter<"Availability"> | Date | string;
    endTime?: Prisma.DateTimeFilter<"Availability"> | Date | string;
    date?: Prisma.DateTimeNullableFilter<"Availability"> | Date | string | null;
    scheduleId?: Prisma.IntNullableFilter<"Availability"> | number | null;
    user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null;
    eventType?: Prisma.XOR<Prisma.EventTypeNullableScalarRelationFilter, Prisma.EventTypeWhereInput> | null;
    Schedule?: Prisma.XOR<Prisma.ScheduleNullableScalarRelationFilter, Prisma.ScheduleWhereInput> | null;
  },
  "id"
>;

export type AvailabilityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrderInput | Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrderInput | Prisma.SortOrder;
  days?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  date?: Prisma.SortOrderInput | Prisma.SortOrder;
  scheduleId?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.AvailabilityCountOrderByAggregateInput;
  _avg?: Prisma.AvailabilityAvgOrderByAggregateInput;
  _max?: Prisma.AvailabilityMaxOrderByAggregateInput;
  _min?: Prisma.AvailabilityMinOrderByAggregateInput;
  _sum?: Prisma.AvailabilitySumOrderByAggregateInput;
};

export type AvailabilityScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AvailabilityScalarWhereWithAggregatesInput
    | Prisma.AvailabilityScalarWhereWithAggregatesInput[];
  OR?: Prisma.AvailabilityScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AvailabilityScalarWhereWithAggregatesInput
    | Prisma.AvailabilityScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"Availability"> | number;
  userId?: Prisma.IntNullableWithAggregatesFilter<"Availability"> | number | null;
  eventTypeId?: Prisma.IntNullableWithAggregatesFilter<"Availability"> | number | null;
  days?: Prisma.IntNullableListFilter<"Availability">;
  startTime?: Prisma.DateTimeWithAggregatesFilter<"Availability"> | Date | string;
  endTime?: Prisma.DateTimeWithAggregatesFilter<"Availability"> | Date | string;
  date?: Prisma.DateTimeNullableWithAggregatesFilter<"Availability"> | Date | string | null;
  scheduleId?: Prisma.IntNullableWithAggregatesFilter<"Availability"> | number | null;
};

export type AvailabilityCreateInput = {
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  user?: Prisma.UserCreateNestedOneWithoutAvailabilityInput;
  eventType?: Prisma.EventTypeCreateNestedOneWithoutAvailabilityInput;
  Schedule?: Prisma.ScheduleCreateNestedOneWithoutAvailabilityInput;
};

export type AvailabilityUncheckedCreateInput = {
  id?: number;
  userId?: number | null;
  eventTypeId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  scheduleId?: number | null;
};

export type AvailabilityUpdateInput = {
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  user?: Prisma.UserUpdateOneWithoutAvailabilityNestedInput;
  eventType?: Prisma.EventTypeUpdateOneWithoutAvailabilityNestedInput;
  Schedule?: Prisma.ScheduleUpdateOneWithoutAvailabilityNestedInput;
};

export type AvailabilityUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  scheduleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AvailabilityCreateManyInput = {
  id?: number;
  userId?: number | null;
  eventTypeId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  scheduleId?: number | null;
};

export type AvailabilityUpdateManyMutationInput = {
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type AvailabilityUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  scheduleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AvailabilityListRelationFilter = {
  every?: Prisma.AvailabilityWhereInput;
  some?: Prisma.AvailabilityWhereInput;
  none?: Prisma.AvailabilityWhereInput;
};

export type AvailabilityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type IntNullableListFilter<$PrismaModel = never> = {
  equals?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel> | null;
  has?: number | Prisma.IntFieldRefInput<$PrismaModel> | null;
  hasEvery?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>;
  hasSome?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>;
  isEmpty?: boolean;
};

export type AvailabilityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  days?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  scheduleId?: Prisma.SortOrder;
};

export type AvailabilityAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  days?: Prisma.SortOrder;
  scheduleId?: Prisma.SortOrder;
};

export type AvailabilityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  scheduleId?: Prisma.SortOrder;
};

export type AvailabilityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  startTime?: Prisma.SortOrder;
  endTime?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  scheduleId?: Prisma.SortOrder;
};

export type AvailabilitySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  days?: Prisma.SortOrder;
  scheduleId?: Prisma.SortOrder;
};

export type AvailabilityCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutEventTypeInput,
        Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.AvailabilityCreateWithoutEventTypeInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.AvailabilityCreateManyEventTypeInputEnvelope;
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
};

export type AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutEventTypeInput,
        Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.AvailabilityCreateWithoutEventTypeInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput[];
  createMany?: Prisma.AvailabilityCreateManyEventTypeInputEnvelope;
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
};

export type AvailabilityUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutEventTypeInput,
        Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.AvailabilityCreateWithoutEventTypeInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.AvailabilityCreateManyEventTypeInputEnvelope;
  set?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  disconnect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  delete?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  update?:
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.AvailabilityUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.AvailabilityUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
};

export type AvailabilityUncheckedUpdateManyWithoutEventTypeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutEventTypeInput,
        Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput
      >
    | Prisma.AvailabilityCreateWithoutEventTypeInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput
    | Prisma.AvailabilityCreateOrConnectWithoutEventTypeInput[];
  upsert?:
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput[];
  createMany?: Prisma.AvailabilityCreateManyEventTypeInputEnvelope;
  set?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  disconnect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  delete?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  update?:
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput[];
  updateMany?:
    | Prisma.AvailabilityUpdateManyWithWhereWithoutEventTypeInput
    | Prisma.AvailabilityUpdateManyWithWhereWithoutEventTypeInput[];
  deleteMany?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
};

export type AvailabilityCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutUserInput,
        Prisma.AvailabilityUncheckedCreateWithoutUserInput
      >
    | Prisma.AvailabilityCreateWithoutUserInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AvailabilityCreateManyUserInputEnvelope;
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
};

export type AvailabilityUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutUserInput,
        Prisma.AvailabilityUncheckedCreateWithoutUserInput
      >
    | Prisma.AvailabilityCreateWithoutUserInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AvailabilityCreateManyUserInputEnvelope;
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
};

export type AvailabilityUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutUserInput,
        Prisma.AvailabilityUncheckedCreateWithoutUserInput
      >
    | Prisma.AvailabilityCreateWithoutUserInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AvailabilityCreateManyUserInputEnvelope;
  set?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  disconnect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  delete?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  update?:
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AvailabilityUpdateManyWithWhereWithoutUserInput
    | Prisma.AvailabilityUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
};

export type AvailabilityUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutUserInput,
        Prisma.AvailabilityUncheckedCreateWithoutUserInput
      >
    | Prisma.AvailabilityCreateWithoutUserInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput
    | Prisma.AvailabilityCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AvailabilityCreateManyUserInputEnvelope;
  set?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  disconnect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  delete?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  update?:
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AvailabilityUpdateManyWithWhereWithoutUserInput
    | Prisma.AvailabilityUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
};

export type AvailabilityCreateNestedManyWithoutScheduleInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutScheduleInput,
        Prisma.AvailabilityUncheckedCreateWithoutScheduleInput
      >
    | Prisma.AvailabilityCreateWithoutScheduleInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutScheduleInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput[];
  createMany?: Prisma.AvailabilityCreateManyScheduleInputEnvelope;
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
};

export type AvailabilityUncheckedCreateNestedManyWithoutScheduleInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutScheduleInput,
        Prisma.AvailabilityUncheckedCreateWithoutScheduleInput
      >
    | Prisma.AvailabilityCreateWithoutScheduleInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutScheduleInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput[];
  createMany?: Prisma.AvailabilityCreateManyScheduleInputEnvelope;
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
};

export type AvailabilityUpdateManyWithoutScheduleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutScheduleInput,
        Prisma.AvailabilityUncheckedCreateWithoutScheduleInput
      >
    | Prisma.AvailabilityCreateWithoutScheduleInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutScheduleInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput[];
  upsert?:
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutScheduleInput
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutScheduleInput[];
  createMany?: Prisma.AvailabilityCreateManyScheduleInputEnvelope;
  set?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  disconnect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  delete?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  update?:
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutScheduleInput
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutScheduleInput[];
  updateMany?:
    | Prisma.AvailabilityUpdateManyWithWhereWithoutScheduleInput
    | Prisma.AvailabilityUpdateManyWithWhereWithoutScheduleInput[];
  deleteMany?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
};

export type AvailabilityUncheckedUpdateManyWithoutScheduleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AvailabilityCreateWithoutScheduleInput,
        Prisma.AvailabilityUncheckedCreateWithoutScheduleInput
      >
    | Prisma.AvailabilityCreateWithoutScheduleInput[]
    | Prisma.AvailabilityUncheckedCreateWithoutScheduleInput[];
  connectOrCreate?:
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput
    | Prisma.AvailabilityCreateOrConnectWithoutScheduleInput[];
  upsert?:
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutScheduleInput
    | Prisma.AvailabilityUpsertWithWhereUniqueWithoutScheduleInput[];
  createMany?: Prisma.AvailabilityCreateManyScheduleInputEnvelope;
  set?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  disconnect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  delete?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  connect?: Prisma.AvailabilityWhereUniqueInput | Prisma.AvailabilityWhereUniqueInput[];
  update?:
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutScheduleInput
    | Prisma.AvailabilityUpdateWithWhereUniqueWithoutScheduleInput[];
  updateMany?:
    | Prisma.AvailabilityUpdateManyWithWhereWithoutScheduleInput
    | Prisma.AvailabilityUpdateManyWithWhereWithoutScheduleInput[];
  deleteMany?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
};

export type AvailabilityCreatedaysInput = {
  set: number[];
};

export type AvailabilityUpdatedaysInput = {
  set?: number[];
  push?: number | number[];
};

export type AvailabilityCreateWithoutEventTypeInput = {
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  user?: Prisma.UserCreateNestedOneWithoutAvailabilityInput;
  Schedule?: Prisma.ScheduleCreateNestedOneWithoutAvailabilityInput;
};

export type AvailabilityUncheckedCreateWithoutEventTypeInput = {
  id?: number;
  userId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  scheduleId?: number | null;
};

export type AvailabilityCreateOrConnectWithoutEventTypeInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AvailabilityCreateWithoutEventTypeInput,
    Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput
  >;
};

export type AvailabilityCreateManyEventTypeInputEnvelope = {
  data: Prisma.AvailabilityCreateManyEventTypeInput | Prisma.AvailabilityCreateManyEventTypeInput[];
  skipDuplicates?: boolean;
};

export type AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AvailabilityUpdateWithoutEventTypeInput,
    Prisma.AvailabilityUncheckedUpdateWithoutEventTypeInput
  >;
  create: Prisma.XOR<
    Prisma.AvailabilityCreateWithoutEventTypeInput,
    Prisma.AvailabilityUncheckedCreateWithoutEventTypeInput
  >;
};

export type AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AvailabilityUpdateWithoutEventTypeInput,
    Prisma.AvailabilityUncheckedUpdateWithoutEventTypeInput
  >;
};

export type AvailabilityUpdateManyWithWhereWithoutEventTypeInput = {
  where: Prisma.AvailabilityScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AvailabilityUpdateManyMutationInput,
    Prisma.AvailabilityUncheckedUpdateManyWithoutEventTypeInput
  >;
};

export type AvailabilityScalarWhereInput = {
  AND?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
  OR?: Prisma.AvailabilityScalarWhereInput[];
  NOT?: Prisma.AvailabilityScalarWhereInput | Prisma.AvailabilityScalarWhereInput[];
  id?: Prisma.IntFilter<"Availability"> | number;
  userId?: Prisma.IntNullableFilter<"Availability"> | number | null;
  eventTypeId?: Prisma.IntNullableFilter<"Availability"> | number | null;
  days?: Prisma.IntNullableListFilter<"Availability">;
  startTime?: Prisma.DateTimeFilter<"Availability"> | Date | string;
  endTime?: Prisma.DateTimeFilter<"Availability"> | Date | string;
  date?: Prisma.DateTimeNullableFilter<"Availability"> | Date | string | null;
  scheduleId?: Prisma.IntNullableFilter<"Availability"> | number | null;
};

export type AvailabilityCreateWithoutUserInput = {
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  eventType?: Prisma.EventTypeCreateNestedOneWithoutAvailabilityInput;
  Schedule?: Prisma.ScheduleCreateNestedOneWithoutAvailabilityInput;
};

export type AvailabilityUncheckedCreateWithoutUserInput = {
  id?: number;
  eventTypeId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  scheduleId?: number | null;
};

export type AvailabilityCreateOrConnectWithoutUserInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AvailabilityCreateWithoutUserInput,
    Prisma.AvailabilityUncheckedCreateWithoutUserInput
  >;
};

export type AvailabilityCreateManyUserInputEnvelope = {
  data: Prisma.AvailabilityCreateManyUserInput | Prisma.AvailabilityCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AvailabilityUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AvailabilityUpdateWithoutUserInput,
    Prisma.AvailabilityUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AvailabilityCreateWithoutUserInput,
    Prisma.AvailabilityUncheckedCreateWithoutUserInput
  >;
};

export type AvailabilityUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AvailabilityUpdateWithoutUserInput,
    Prisma.AvailabilityUncheckedUpdateWithoutUserInput
  >;
};

export type AvailabilityUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AvailabilityScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AvailabilityUpdateManyMutationInput,
    Prisma.AvailabilityUncheckedUpdateManyWithoutUserInput
  >;
};

export type AvailabilityCreateWithoutScheduleInput = {
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  user?: Prisma.UserCreateNestedOneWithoutAvailabilityInput;
  eventType?: Prisma.EventTypeCreateNestedOneWithoutAvailabilityInput;
};

export type AvailabilityUncheckedCreateWithoutScheduleInput = {
  id?: number;
  userId?: number | null;
  eventTypeId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
};

export type AvailabilityCreateOrConnectWithoutScheduleInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AvailabilityCreateWithoutScheduleInput,
    Prisma.AvailabilityUncheckedCreateWithoutScheduleInput
  >;
};

export type AvailabilityCreateManyScheduleInputEnvelope = {
  data: Prisma.AvailabilityCreateManyScheduleInput | Prisma.AvailabilityCreateManyScheduleInput[];
  skipDuplicates?: boolean;
};

export type AvailabilityUpsertWithWhereUniqueWithoutScheduleInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AvailabilityUpdateWithoutScheduleInput,
    Prisma.AvailabilityUncheckedUpdateWithoutScheduleInput
  >;
  create: Prisma.XOR<
    Prisma.AvailabilityCreateWithoutScheduleInput,
    Prisma.AvailabilityUncheckedCreateWithoutScheduleInput
  >;
};

export type AvailabilityUpdateWithWhereUniqueWithoutScheduleInput = {
  where: Prisma.AvailabilityWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AvailabilityUpdateWithoutScheduleInput,
    Prisma.AvailabilityUncheckedUpdateWithoutScheduleInput
  >;
};

export type AvailabilityUpdateManyWithWhereWithoutScheduleInput = {
  where: Prisma.AvailabilityScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AvailabilityUpdateManyMutationInput,
    Prisma.AvailabilityUncheckedUpdateManyWithoutScheduleInput
  >;
};

export type AvailabilityCreateManyEventTypeInput = {
  id?: number;
  userId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  scheduleId?: number | null;
};

export type AvailabilityUpdateWithoutEventTypeInput = {
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  user?: Prisma.UserUpdateOneWithoutAvailabilityNestedInput;
  Schedule?: Prisma.ScheduleUpdateOneWithoutAvailabilityNestedInput;
};

export type AvailabilityUncheckedUpdateWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  scheduleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AvailabilityUncheckedUpdateManyWithoutEventTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  scheduleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AvailabilityCreateManyUserInput = {
  id?: number;
  eventTypeId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
  scheduleId?: number | null;
};

export type AvailabilityUpdateWithoutUserInput = {
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  eventType?: Prisma.EventTypeUpdateOneWithoutAvailabilityNestedInput;
  Schedule?: Prisma.ScheduleUpdateOneWithoutAvailabilityNestedInput;
};

export type AvailabilityUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  scheduleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AvailabilityUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  scheduleId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type AvailabilityCreateManyScheduleInput = {
  id?: number;
  userId?: number | null;
  eventTypeId?: number | null;
  days?: Prisma.AvailabilityCreatedaysInput | number[];
  startTime: Date | string;
  endTime: Date | string;
  date?: Date | string | null;
};

export type AvailabilityUpdateWithoutScheduleInput = {
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  user?: Prisma.UserUpdateOneWithoutAvailabilityNestedInput;
  eventType?: Prisma.EventTypeUpdateOneWithoutAvailabilityNestedInput;
};

export type AvailabilityUncheckedUpdateWithoutScheduleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type AvailabilityUncheckedUpdateManyWithoutScheduleInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  eventTypeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  days?: Prisma.AvailabilityUpdatedaysInput | number[];
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  endTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
};

export type AvailabilitySelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    eventTypeId?: boolean;
    days?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    date?: boolean;
    scheduleId?: boolean;
    user?: boolean | Prisma.Availability$userArgs<ExtArgs>;
    eventType?: boolean | Prisma.Availability$eventTypeArgs<ExtArgs>;
    Schedule?: boolean | Prisma.Availability$ScheduleArgs<ExtArgs>;
  },
  ExtArgs["result"]["availability"]
>;

export type AvailabilitySelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    eventTypeId?: boolean;
    days?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    date?: boolean;
    scheduleId?: boolean;
    user?: boolean | Prisma.Availability$userArgs<ExtArgs>;
    eventType?: boolean | Prisma.Availability$eventTypeArgs<ExtArgs>;
    Schedule?: boolean | Prisma.Availability$ScheduleArgs<ExtArgs>;
  },
  ExtArgs["result"]["availability"]
>;

export type AvailabilitySelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    eventTypeId?: boolean;
    days?: boolean;
    startTime?: boolean;
    endTime?: boolean;
    date?: boolean;
    scheduleId?: boolean;
    user?: boolean | Prisma.Availability$userArgs<ExtArgs>;
    eventType?: boolean | Prisma.Availability$eventTypeArgs<ExtArgs>;
    Schedule?: boolean | Prisma.Availability$ScheduleArgs<ExtArgs>;
  },
  ExtArgs["result"]["availability"]
>;

export type AvailabilitySelectScalar = {
  id?: boolean;
  userId?: boolean;
  eventTypeId?: boolean;
  days?: boolean;
  startTime?: boolean;
  endTime?: boolean;
  date?: boolean;
  scheduleId?: boolean;
};

export type AvailabilityOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "userId" | "eventTypeId" | "days" | "startTime" | "endTime" | "date" | "scheduleId",
  ExtArgs["result"]["availability"]
>;
export type AvailabilityInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Availability$userArgs<ExtArgs>;
  eventType?: boolean | Prisma.Availability$eventTypeArgs<ExtArgs>;
  Schedule?: boolean | Prisma.Availability$ScheduleArgs<ExtArgs>;
};
export type AvailabilityIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Availability$userArgs<ExtArgs>;
  eventType?: boolean | Prisma.Availability$eventTypeArgs<ExtArgs>;
  Schedule?: boolean | Prisma.Availability$ScheduleArgs<ExtArgs>;
};
export type AvailabilityIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.Availability$userArgs<ExtArgs>;
  eventType?: boolean | Prisma.Availability$eventTypeArgs<ExtArgs>;
  Schedule?: boolean | Prisma.Availability$ScheduleArgs<ExtArgs>;
};

export type $AvailabilityPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Availability";
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null;
    eventType: Prisma.$EventTypePayload<ExtArgs> | null;
    Schedule: Prisma.$SchedulePayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      userId: number | null;
      eventTypeId: number | null;
      days: number[];
      startTime: Date;
      endTime: Date;
      date: Date | null;
      scheduleId: number | null;
    },
    ExtArgs["result"]["availability"]
  >;
  composites: {};
};

export type AvailabilityGetPayload<S extends boolean | null | undefined | AvailabilityDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload, S>;

export type AvailabilityCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AvailabilityFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AvailabilityCountAggregateInputType | true;
};

export interface AvailabilityDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Availability"]; meta: { name: "Availability" } };
  /**
   * Find zero or one Availability that matches the filter.
   * @param {AvailabilityFindUniqueArgs} args - Arguments to find a Availability
   * @example
   * // Get one Availability
   * const availability = await prisma.availability.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AvailabilityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AvailabilityFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<
      Prisma.$AvailabilityPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Availability that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AvailabilityFindUniqueOrThrowArgs} args - Arguments to find a Availability
   * @example
   * // Get one Availability
   * const availability = await prisma.availability.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AvailabilityFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AvailabilityFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<
      Prisma.$AvailabilityPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Availability that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityFindFirstArgs} args - Arguments to find a Availability
   * @example
   * // Get one Availability
   * const availability = await prisma.availability.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AvailabilityFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AvailabilityFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<
      Prisma.$AvailabilityPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Availability that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityFindFirstOrThrowArgs} args - Arguments to find a Availability
   * @example
   * // Get one Availability
   * const availability = await prisma.availability.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AvailabilityFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AvailabilityFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<
      Prisma.$AvailabilityPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Availabilities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Availabilities
   * const availabilities = await prisma.availability.findMany()
   *
   * // Get first 10 Availabilities
   * const availabilities = await prisma.availability.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const availabilityWithIdOnly = await prisma.availability.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AvailabilityFindManyArgs>(
    args?: Prisma.SelectSubset<T, AvailabilityFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Availability.
   * @param {AvailabilityCreateArgs} args - Arguments to create a Availability.
   * @example
   * // Create one Availability
   * const Availability = await prisma.availability.create({
   *   data: {
   *     // ... data to create a Availability
   *   }
   * })
   *
   */
  create<T extends AvailabilityCreateArgs>(
    args: Prisma.SelectSubset<T, AvailabilityCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Availabilities.
   * @param {AvailabilityCreateManyArgs} args - Arguments to create many Availabilities.
   * @example
   * // Create many Availabilities
   * const availability = await prisma.availability.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AvailabilityCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AvailabilityCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Availabilities and returns the data saved in the database.
   * @param {AvailabilityCreateManyAndReturnArgs} args - Arguments to create many Availabilities.
   * @example
   * // Create many Availabilities
   * const availability = await prisma.availability.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Availabilities and only return the `id`
   * const availabilityWithIdOnly = await prisma.availability.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AvailabilityCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AvailabilityCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AvailabilityPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Availability.
   * @param {AvailabilityDeleteArgs} args - Arguments to delete one Availability.
   * @example
   * // Delete one Availability
   * const Availability = await prisma.availability.delete({
   *   where: {
   *     // ... filter to delete one Availability
   *   }
   * })
   *
   */
  delete<T extends AvailabilityDeleteArgs>(
    args: Prisma.SelectSubset<T, AvailabilityDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Availability.
   * @param {AvailabilityUpdateArgs} args - Arguments to update one Availability.
   * @example
   * // Update one Availability
   * const availability = await prisma.availability.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AvailabilityUpdateArgs>(
    args: Prisma.SelectSubset<T, AvailabilityUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Availabilities.
   * @param {AvailabilityDeleteManyArgs} args - Arguments to filter Availabilities to delete.
   * @example
   * // Delete a few Availabilities
   * const { count } = await prisma.availability.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AvailabilityDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AvailabilityDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Availabilities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Availabilities
   * const availability = await prisma.availability.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AvailabilityUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AvailabilityUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Availabilities and returns the data updated in the database.
   * @param {AvailabilityUpdateManyAndReturnArgs} args - Arguments to update many Availabilities.
   * @example
   * // Update many Availabilities
   * const availability = await prisma.availability.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Availabilities and only return the `id`
   * const availabilityWithIdOnly = await prisma.availability.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AvailabilityUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AvailabilityUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AvailabilityPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Availability.
   * @param {AvailabilityUpsertArgs} args - Arguments to update or create a Availability.
   * @example
   * // Update or create a Availability
   * const availability = await prisma.availability.upsert({
   *   create: {
   *     // ... data to create a Availability
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Availability we want to update
   *   }
   * })
   */
  upsert<T extends AvailabilityUpsertArgs>(
    args: Prisma.SelectSubset<T, AvailabilityUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AvailabilityClient<
    runtime.Types.Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Availabilities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityCountArgs} args - Arguments to filter Availabilities to count.
   * @example
   * // Count the number of Availabilities
   * const count = await prisma.availability.count({
   *   where: {
   *     // ... the filter for the Availabilities we want to count
   *   }
   * })
   **/
  count<T extends AvailabilityCountArgs>(
    args?: Prisma.Subset<T, AvailabilityCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AvailabilityCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Availability.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AvailabilityAggregateArgs>(
    args: Prisma.Subset<T, AvailabilityAggregateArgs>
  ): Prisma.PrismaPromise<GetAvailabilityAggregateType<T>>;

  /**
   * Group by Availability.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AvailabilityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AvailabilityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AvailabilityGroupByArgs["orderBy"] }
      : { orderBy?: AvailabilityGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AvailabilityGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAvailabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Availability model
   */
  readonly fields: AvailabilityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Availability.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AvailabilityClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.Availability$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Availability$userArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  eventType<T extends Prisma.Availability$eventTypeArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Availability$eventTypeArgs<ExtArgs>>
  ): Prisma.Prisma__EventTypeClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventTypePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  Schedule<T extends Prisma.Availability$ScheduleArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Availability$ScheduleArgs<ExtArgs>>
  ): Prisma.Prisma__ScheduleClient<
    runtime.Types.Result.GetResult<
      Prisma.$SchedulePayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Availability model
 */
export interface AvailabilityFieldRefs {
  readonly id: Prisma.FieldRef<"Availability", "Int">;
  readonly userId: Prisma.FieldRef<"Availability", "Int">;
  readonly eventTypeId: Prisma.FieldRef<"Availability", "Int">;
  readonly days: Prisma.FieldRef<"Availability", "Int[]">;
  readonly startTime: Prisma.FieldRef<"Availability", "DateTime">;
  readonly endTime: Prisma.FieldRef<"Availability", "DateTime">;
  readonly date: Prisma.FieldRef<"Availability", "DateTime">;
  readonly scheduleId: Prisma.FieldRef<"Availability", "Int">;
}

// Custom InputTypes
/**
 * Availability findUnique
 */
export type AvailabilityFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * Filter, which Availability to fetch.
   */
  where: Prisma.AvailabilityWhereUniqueInput;
};

/**
 * Availability findUniqueOrThrow
 */
export type AvailabilityFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * Filter, which Availability to fetch.
   */
  where: Prisma.AvailabilityWhereUniqueInput;
};

/**
 * Availability findFirst
 */
export type AvailabilityFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * Filter, which Availability to fetch.
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Availabilities to fetch.
   */
  orderBy?: Prisma.AvailabilityOrderByWithRelationInput | Prisma.AvailabilityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Availabilities.
   */
  cursor?: Prisma.AvailabilityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Availabilities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Availabilities.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Availabilities.
   */
  distinct?: Prisma.AvailabilityScalarFieldEnum | Prisma.AvailabilityScalarFieldEnum[];
};

/**
 * Availability findFirstOrThrow
 */
export type AvailabilityFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * Filter, which Availability to fetch.
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Availabilities to fetch.
   */
  orderBy?: Prisma.AvailabilityOrderByWithRelationInput | Prisma.AvailabilityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Availabilities.
   */
  cursor?: Prisma.AvailabilityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Availabilities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Availabilities.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Availabilities.
   */
  distinct?: Prisma.AvailabilityScalarFieldEnum | Prisma.AvailabilityScalarFieldEnum[];
};

/**
 * Availability findMany
 */
export type AvailabilityFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * Filter, which Availabilities to fetch.
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Availabilities to fetch.
   */
  orderBy?: Prisma.AvailabilityOrderByWithRelationInput | Prisma.AvailabilityOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Availabilities.
   */
  cursor?: Prisma.AvailabilityWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Availabilities from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Availabilities.
   */
  skip?: number;
  distinct?: Prisma.AvailabilityScalarFieldEnum | Prisma.AvailabilityScalarFieldEnum[];
};

/**
 * Availability create
 */
export type AvailabilityCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * The data needed to create a Availability.
   */
  data: Prisma.XOR<Prisma.AvailabilityCreateInput, Prisma.AvailabilityUncheckedCreateInput>;
};

/**
 * Availability createMany
 */
export type AvailabilityCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Availabilities.
   */
  data: Prisma.AvailabilityCreateManyInput | Prisma.AvailabilityCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Availability createManyAndReturn
 */
export type AvailabilityCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * The data used to create many Availabilities.
   */
  data: Prisma.AvailabilityCreateManyInput | Prisma.AvailabilityCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Availability update
 */
export type AvailabilityUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * The data needed to update a Availability.
   */
  data: Prisma.XOR<Prisma.AvailabilityUpdateInput, Prisma.AvailabilityUncheckedUpdateInput>;
  /**
   * Choose, which Availability to update.
   */
  where: Prisma.AvailabilityWhereUniqueInput;
};

/**
 * Availability updateMany
 */
export type AvailabilityUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Availabilities.
   */
  data: Prisma.XOR<Prisma.AvailabilityUpdateManyMutationInput, Prisma.AvailabilityUncheckedUpdateManyInput>;
  /**
   * Filter which Availabilities to update
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * Limit how many Availabilities to update.
   */
  limit?: number;
};

/**
 * Availability updateManyAndReturn
 */
export type AvailabilityUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * The data used to update Availabilities.
   */
  data: Prisma.XOR<Prisma.AvailabilityUpdateManyMutationInput, Prisma.AvailabilityUncheckedUpdateManyInput>;
  /**
   * Filter which Availabilities to update
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * Limit how many Availabilities to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Availability upsert
 */
export type AvailabilityUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * The filter to search for the Availability to update in case it exists.
   */
  where: Prisma.AvailabilityWhereUniqueInput;
  /**
   * In case the Availability found by the `where` argument doesn't exist, create a new Availability with this data.
   */
  create: Prisma.XOR<Prisma.AvailabilityCreateInput, Prisma.AvailabilityUncheckedCreateInput>;
  /**
   * In case the Availability was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AvailabilityUpdateInput, Prisma.AvailabilityUncheckedUpdateInput>;
};

/**
 * Availability delete
 */
export type AvailabilityDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
  /**
   * Filter which Availability to delete.
   */
  where: Prisma.AvailabilityWhereUniqueInput;
};

/**
 * Availability deleteMany
 */
export type AvailabilityDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Availabilities to delete
   */
  where?: Prisma.AvailabilityWhereInput;
  /**
   * Limit how many Availabilities to delete.
   */
  limit?: number;
};

/**
 * Availability.user
 */
export type Availability$userArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
};

/**
 * Availability.eventType
 */
export type Availability$eventTypeArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the EventType
   */
  select?: Prisma.EventTypeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the EventType
   */
  omit?: Prisma.EventTypeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventTypeInclude<ExtArgs> | null;
  where?: Prisma.EventTypeWhereInput;
};

/**
 * Availability.Schedule
 */
export type Availability$ScheduleArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null;
  where?: Prisma.ScheduleWhereInput;
};

/**
 * Availability without action
 */
export type AvailabilityDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Availability
   */
  select?: Prisma.AvailabilitySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Availability
   */
  omit?: Prisma.AvailabilityOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AvailabilityInclude<ExtArgs> | null;
};
