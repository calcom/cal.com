/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `CreditExpenseLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CreditExpenseLog
 *
 */
export type CreditExpenseLogModel = runtime.Types.Result.DefaultSelection<Prisma.$CreditExpenseLogPayload>;

export type AggregateCreditExpenseLog = {
  _count: CreditExpenseLogCountAggregateOutputType | null;
  _avg: CreditExpenseLogAvgAggregateOutputType | null;
  _sum: CreditExpenseLogSumAggregateOutputType | null;
  _min: CreditExpenseLogMinAggregateOutputType | null;
  _max: CreditExpenseLogMaxAggregateOutputType | null;
};

export type CreditExpenseLogAvgAggregateOutputType = {
  credits: number | null;
  smsSegments: number | null;
  callDuration: number | null;
};

export type CreditExpenseLogSumAggregateOutputType = {
  credits: number | null;
  smsSegments: number | null;
  callDuration: number | null;
};

export type CreditExpenseLogMinAggregateOutputType = {
  id: string | null;
  creditBalanceId: string | null;
  bookingUid: string | null;
  credits: number | null;
  creditType: $Enums.CreditType | null;
  date: Date | null;
  smsSid: string | null;
  smsSegments: number | null;
  phoneNumber: string | null;
  email: string | null;
  callDuration: number | null;
  creditFor: $Enums.CreditUsageType | null;
  externalRef: string | null;
};

export type CreditExpenseLogMaxAggregateOutputType = {
  id: string | null;
  creditBalanceId: string | null;
  bookingUid: string | null;
  credits: number | null;
  creditType: $Enums.CreditType | null;
  date: Date | null;
  smsSid: string | null;
  smsSegments: number | null;
  phoneNumber: string | null;
  email: string | null;
  callDuration: number | null;
  creditFor: $Enums.CreditUsageType | null;
  externalRef: string | null;
};

export type CreditExpenseLogCountAggregateOutputType = {
  id: number;
  creditBalanceId: number;
  bookingUid: number;
  credits: number;
  creditType: number;
  date: number;
  smsSid: number;
  smsSegments: number;
  phoneNumber: number;
  email: number;
  callDuration: number;
  creditFor: number;
  externalRef: number;
  _all: number;
};

export type CreditExpenseLogAvgAggregateInputType = {
  credits?: true;
  smsSegments?: true;
  callDuration?: true;
};

export type CreditExpenseLogSumAggregateInputType = {
  credits?: true;
  smsSegments?: true;
  callDuration?: true;
};

export type CreditExpenseLogMinAggregateInputType = {
  id?: true;
  creditBalanceId?: true;
  bookingUid?: true;
  credits?: true;
  creditType?: true;
  date?: true;
  smsSid?: true;
  smsSegments?: true;
  phoneNumber?: true;
  email?: true;
  callDuration?: true;
  creditFor?: true;
  externalRef?: true;
};

export type CreditExpenseLogMaxAggregateInputType = {
  id?: true;
  creditBalanceId?: true;
  bookingUid?: true;
  credits?: true;
  creditType?: true;
  date?: true;
  smsSid?: true;
  smsSegments?: true;
  phoneNumber?: true;
  email?: true;
  callDuration?: true;
  creditFor?: true;
  externalRef?: true;
};

export type CreditExpenseLogCountAggregateInputType = {
  id?: true;
  creditBalanceId?: true;
  bookingUid?: true;
  credits?: true;
  creditType?: true;
  date?: true;
  smsSid?: true;
  smsSegments?: true;
  phoneNumber?: true;
  email?: true;
  callDuration?: true;
  creditFor?: true;
  externalRef?: true;
  _all?: true;
};

export type CreditExpenseLogAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CreditExpenseLog to aggregate.
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditExpenseLogs to fetch.
   */
  orderBy?:
    | Prisma.CreditExpenseLogOrderByWithRelationInput
    | Prisma.CreditExpenseLogOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CreditExpenseLogWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditExpenseLogs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditExpenseLogs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CreditExpenseLogs
   **/
  _count?: true | CreditExpenseLogCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CreditExpenseLogAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CreditExpenseLogSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CreditExpenseLogMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CreditExpenseLogMaxAggregateInputType;
};

export type GetCreditExpenseLogAggregateType<T extends CreditExpenseLogAggregateArgs> = {
  [P in keyof T & keyof AggregateCreditExpenseLog]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCreditExpenseLog[P]>
    : Prisma.GetScalarType<T[P], AggregateCreditExpenseLog[P]>;
};

export type CreditExpenseLogGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CreditExpenseLogWhereInput;
  orderBy?:
    | Prisma.CreditExpenseLogOrderByWithAggregationInput
    | Prisma.CreditExpenseLogOrderByWithAggregationInput[];
  by: Prisma.CreditExpenseLogScalarFieldEnum[] | Prisma.CreditExpenseLogScalarFieldEnum;
  having?: Prisma.CreditExpenseLogScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CreditExpenseLogCountAggregateInputType | true;
  _avg?: CreditExpenseLogAvgAggregateInputType;
  _sum?: CreditExpenseLogSumAggregateInputType;
  _min?: CreditExpenseLogMinAggregateInputType;
  _max?: CreditExpenseLogMaxAggregateInputType;
};

export type CreditExpenseLogGroupByOutputType = {
  id: string;
  creditBalanceId: string;
  bookingUid: string | null;
  credits: number | null;
  creditType: $Enums.CreditType;
  date: Date;
  smsSid: string | null;
  smsSegments: number | null;
  phoneNumber: string | null;
  email: string | null;
  callDuration: number | null;
  creditFor: $Enums.CreditUsageType | null;
  externalRef: string | null;
  _count: CreditExpenseLogCountAggregateOutputType | null;
  _avg: CreditExpenseLogAvgAggregateOutputType | null;
  _sum: CreditExpenseLogSumAggregateOutputType | null;
  _min: CreditExpenseLogMinAggregateOutputType | null;
  _max: CreditExpenseLogMaxAggregateOutputType | null;
};

type GetCreditExpenseLogGroupByPayload<T extends CreditExpenseLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CreditExpenseLogGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof CreditExpenseLogGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], CreditExpenseLogGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], CreditExpenseLogGroupByOutputType[P]>;
    }
  >
>;

export type CreditExpenseLogWhereInput = {
  AND?: Prisma.CreditExpenseLogWhereInput | Prisma.CreditExpenseLogWhereInput[];
  OR?: Prisma.CreditExpenseLogWhereInput[];
  NOT?: Prisma.CreditExpenseLogWhereInput | Prisma.CreditExpenseLogWhereInput[];
  id?: Prisma.StringFilter<"CreditExpenseLog"> | string;
  creditBalanceId?: Prisma.StringFilter<"CreditExpenseLog"> | string;
  bookingUid?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  credits?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
  creditType?: Prisma.EnumCreditTypeFilter<"CreditExpenseLog"> | $Enums.CreditType;
  date?: Prisma.DateTimeFilter<"CreditExpenseLog"> | Date | string;
  smsSid?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  smsSegments?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
  phoneNumber?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  email?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  callDuration?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
  creditFor?: Prisma.EnumCreditUsageTypeNullableFilter<"CreditExpenseLog"> | $Enums.CreditUsageType | null;
  externalRef?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  creditBalance?: Prisma.XOR<Prisma.CreditBalanceScalarRelationFilter, Prisma.CreditBalanceWhereInput>;
  booking?: Prisma.XOR<Prisma.BookingNullableScalarRelationFilter, Prisma.BookingWhereInput> | null;
};

export type CreditExpenseLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  creditBalanceId?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrderInput | Prisma.SortOrder;
  credits?: Prisma.SortOrderInput | Prisma.SortOrder;
  creditType?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  smsSid?: Prisma.SortOrderInput | Prisma.SortOrder;
  smsSegments?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrderInput | Prisma.SortOrder;
  callDuration?: Prisma.SortOrderInput | Prisma.SortOrder;
  creditFor?: Prisma.SortOrderInput | Prisma.SortOrder;
  externalRef?: Prisma.SortOrderInput | Prisma.SortOrder;
  creditBalance?: Prisma.CreditBalanceOrderByWithRelationInput;
  booking?: Prisma.BookingOrderByWithRelationInput;
};

export type CreditExpenseLogWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    externalRef?: string;
    AND?: Prisma.CreditExpenseLogWhereInput | Prisma.CreditExpenseLogWhereInput[];
    OR?: Prisma.CreditExpenseLogWhereInput[];
    NOT?: Prisma.CreditExpenseLogWhereInput | Prisma.CreditExpenseLogWhereInput[];
    creditBalanceId?: Prisma.StringFilter<"CreditExpenseLog"> | string;
    bookingUid?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
    credits?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
    creditType?: Prisma.EnumCreditTypeFilter<"CreditExpenseLog"> | $Enums.CreditType;
    date?: Prisma.DateTimeFilter<"CreditExpenseLog"> | Date | string;
    smsSid?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
    smsSegments?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
    phoneNumber?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
    email?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
    callDuration?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
    creditFor?: Prisma.EnumCreditUsageTypeNullableFilter<"CreditExpenseLog"> | $Enums.CreditUsageType | null;
    creditBalance?: Prisma.XOR<Prisma.CreditBalanceScalarRelationFilter, Prisma.CreditBalanceWhereInput>;
    booking?: Prisma.XOR<Prisma.BookingNullableScalarRelationFilter, Prisma.BookingWhereInput> | null;
  },
  "id" | "externalRef"
>;

export type CreditExpenseLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  creditBalanceId?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrderInput | Prisma.SortOrder;
  credits?: Prisma.SortOrderInput | Prisma.SortOrder;
  creditType?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  smsSid?: Prisma.SortOrderInput | Prisma.SortOrder;
  smsSegments?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrderInput | Prisma.SortOrder;
  callDuration?: Prisma.SortOrderInput | Prisma.SortOrder;
  creditFor?: Prisma.SortOrderInput | Prisma.SortOrder;
  externalRef?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.CreditExpenseLogCountOrderByAggregateInput;
  _avg?: Prisma.CreditExpenseLogAvgOrderByAggregateInput;
  _max?: Prisma.CreditExpenseLogMaxOrderByAggregateInput;
  _min?: Prisma.CreditExpenseLogMinOrderByAggregateInput;
  _sum?: Prisma.CreditExpenseLogSumOrderByAggregateInput;
};

export type CreditExpenseLogScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CreditExpenseLogScalarWhereWithAggregatesInput
    | Prisma.CreditExpenseLogScalarWhereWithAggregatesInput[];
  OR?: Prisma.CreditExpenseLogScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CreditExpenseLogScalarWhereWithAggregatesInput
    | Prisma.CreditExpenseLogScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"CreditExpenseLog"> | string;
  creditBalanceId?: Prisma.StringWithAggregatesFilter<"CreditExpenseLog"> | string;
  bookingUid?: Prisma.StringNullableWithAggregatesFilter<"CreditExpenseLog"> | string | null;
  credits?: Prisma.IntNullableWithAggregatesFilter<"CreditExpenseLog"> | number | null;
  creditType?: Prisma.EnumCreditTypeWithAggregatesFilter<"CreditExpenseLog"> | $Enums.CreditType;
  date?: Prisma.DateTimeWithAggregatesFilter<"CreditExpenseLog"> | Date | string;
  smsSid?: Prisma.StringNullableWithAggregatesFilter<"CreditExpenseLog"> | string | null;
  smsSegments?: Prisma.IntNullableWithAggregatesFilter<"CreditExpenseLog"> | number | null;
  phoneNumber?: Prisma.StringNullableWithAggregatesFilter<"CreditExpenseLog"> | string | null;
  email?: Prisma.StringNullableWithAggregatesFilter<"CreditExpenseLog"> | string | null;
  callDuration?: Prisma.IntNullableWithAggregatesFilter<"CreditExpenseLog"> | number | null;
  creditFor?:
    | Prisma.EnumCreditUsageTypeNullableWithAggregatesFilter<"CreditExpenseLog">
    | $Enums.CreditUsageType
    | null;
  externalRef?: Prisma.StringNullableWithAggregatesFilter<"CreditExpenseLog"> | string | null;
};

export type CreditExpenseLogCreateInput = {
  id?: string;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
  creditBalance: Prisma.CreditBalanceCreateNestedOneWithoutExpenseLogsInput;
  booking?: Prisma.BookingCreateNestedOneWithoutExpenseLogsInput;
};

export type CreditExpenseLogUncheckedCreateInput = {
  id?: string;
  creditBalanceId: string;
  bookingUid?: string | null;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
};

export type CreditExpenseLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creditBalance?: Prisma.CreditBalanceUpdateOneRequiredWithoutExpenseLogsNestedInput;
  booking?: Prisma.BookingUpdateOneWithoutExpenseLogsNestedInput;
};

export type CreditExpenseLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  creditBalanceId?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogCreateManyInput = {
  id?: string;
  creditBalanceId: string;
  bookingUid?: string | null;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
};

export type CreditExpenseLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  creditBalanceId?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogListRelationFilter = {
  every?: Prisma.CreditExpenseLogWhereInput;
  some?: Prisma.CreditExpenseLogWhereInput;
  none?: Prisma.CreditExpenseLogWhereInput;
};

export type CreditExpenseLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CreditExpenseLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  creditBalanceId?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  credits?: Prisma.SortOrder;
  creditType?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  smsSid?: Prisma.SortOrder;
  smsSegments?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  callDuration?: Prisma.SortOrder;
  creditFor?: Prisma.SortOrder;
  externalRef?: Prisma.SortOrder;
};

export type CreditExpenseLogAvgOrderByAggregateInput = {
  credits?: Prisma.SortOrder;
  smsSegments?: Prisma.SortOrder;
  callDuration?: Prisma.SortOrder;
};

export type CreditExpenseLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  creditBalanceId?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  credits?: Prisma.SortOrder;
  creditType?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  smsSid?: Prisma.SortOrder;
  smsSegments?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  callDuration?: Prisma.SortOrder;
  creditFor?: Prisma.SortOrder;
  externalRef?: Prisma.SortOrder;
};

export type CreditExpenseLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  creditBalanceId?: Prisma.SortOrder;
  bookingUid?: Prisma.SortOrder;
  credits?: Prisma.SortOrder;
  creditType?: Prisma.SortOrder;
  date?: Prisma.SortOrder;
  smsSid?: Prisma.SortOrder;
  smsSegments?: Prisma.SortOrder;
  phoneNumber?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  callDuration?: Prisma.SortOrder;
  creditFor?: Prisma.SortOrder;
  externalRef?: Prisma.SortOrder;
};

export type CreditExpenseLogSumOrderByAggregateInput = {
  credits?: Prisma.SortOrder;
  smsSegments?: Prisma.SortOrder;
  callDuration?: Prisma.SortOrder;
};

export type CreditExpenseLogCreateNestedManyWithoutCreditBalanceInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput
      >
    | Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyCreditBalanceInputEnvelope;
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
};

export type CreditExpenseLogUncheckedCreateNestedManyWithoutCreditBalanceInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput
      >
    | Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyCreditBalanceInputEnvelope;
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
};

export type CreditExpenseLogUpdateManyWithoutCreditBalanceNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput
      >
    | Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput[];
  upsert?:
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutCreditBalanceInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyCreditBalanceInputEnvelope;
  set?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  disconnect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  delete?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  update?:
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutCreditBalanceInput[];
  updateMany?:
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutCreditBalanceInput[];
  deleteMany?: Prisma.CreditExpenseLogScalarWhereInput | Prisma.CreditExpenseLogScalarWhereInput[];
};

export type CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput
      >
    | Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput[];
  upsert?:
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutCreditBalanceInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyCreditBalanceInputEnvelope;
  set?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  disconnect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  delete?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  update?:
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutCreditBalanceInput[];
  updateMany?:
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutCreditBalanceInput
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutCreditBalanceInput[];
  deleteMany?: Prisma.CreditExpenseLogScalarWhereInput | Prisma.CreditExpenseLogScalarWhereInput[];
};

export type EnumCreditTypeFieldUpdateOperationsInput = {
  set?: $Enums.CreditType;
};

export type NullableEnumCreditUsageTypeFieldUpdateOperationsInput = {
  set?: $Enums.CreditUsageType | null;
};

export type CreditExpenseLogCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutBookingInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput
      >
    | Prisma.CreditExpenseLogCreateWithoutBookingInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyBookingInputEnvelope;
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
};

export type CreditExpenseLogUncheckedCreateNestedManyWithoutBookingInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutBookingInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput
      >
    | Prisma.CreditExpenseLogCreateWithoutBookingInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyBookingInputEnvelope;
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
};

export type CreditExpenseLogUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutBookingInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput
      >
    | Prisma.CreditExpenseLogCreateWithoutBookingInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyBookingInputEnvelope;
  set?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  disconnect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  delete?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  update?:
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutBookingInput
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.CreditExpenseLogScalarWhereInput | Prisma.CreditExpenseLogScalarWhereInput[];
};

export type CreditExpenseLogUncheckedUpdateManyWithoutBookingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CreditExpenseLogCreateWithoutBookingInput,
        Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput
      >
    | Prisma.CreditExpenseLogCreateWithoutBookingInput[]
    | Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput[];
  connectOrCreate?:
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput
    | Prisma.CreditExpenseLogCreateOrConnectWithoutBookingInput[];
  upsert?:
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutBookingInput
    | Prisma.CreditExpenseLogUpsertWithWhereUniqueWithoutBookingInput[];
  createMany?: Prisma.CreditExpenseLogCreateManyBookingInputEnvelope;
  set?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  disconnect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  delete?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  connect?: Prisma.CreditExpenseLogWhereUniqueInput | Prisma.CreditExpenseLogWhereUniqueInput[];
  update?:
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutBookingInput
    | Prisma.CreditExpenseLogUpdateWithWhereUniqueWithoutBookingInput[];
  updateMany?:
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutBookingInput
    | Prisma.CreditExpenseLogUpdateManyWithWhereWithoutBookingInput[];
  deleteMany?: Prisma.CreditExpenseLogScalarWhereInput | Prisma.CreditExpenseLogScalarWhereInput[];
};

export type CreditExpenseLogCreateWithoutCreditBalanceInput = {
  id?: string;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
  booking?: Prisma.BookingCreateNestedOneWithoutExpenseLogsInput;
};

export type CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput = {
  id?: string;
  bookingUid?: string | null;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
};

export type CreditExpenseLogCreateOrConnectWithoutCreditBalanceInput = {
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput,
    Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput
  >;
};

export type CreditExpenseLogCreateManyCreditBalanceInputEnvelope = {
  data:
    | Prisma.CreditExpenseLogCreateManyCreditBalanceInput
    | Prisma.CreditExpenseLogCreateManyCreditBalanceInput[];
  skipDuplicates?: boolean;
};

export type CreditExpenseLogUpsertWithWhereUniqueWithoutCreditBalanceInput = {
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateWithoutCreditBalanceInput,
    Prisma.CreditExpenseLogUncheckedUpdateWithoutCreditBalanceInput
  >;
  create: Prisma.XOR<
    Prisma.CreditExpenseLogCreateWithoutCreditBalanceInput,
    Prisma.CreditExpenseLogUncheckedCreateWithoutCreditBalanceInput
  >;
};

export type CreditExpenseLogUpdateWithWhereUniqueWithoutCreditBalanceInput = {
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateWithoutCreditBalanceInput,
    Prisma.CreditExpenseLogUncheckedUpdateWithoutCreditBalanceInput
  >;
};

export type CreditExpenseLogUpdateManyWithWhereWithoutCreditBalanceInput = {
  where: Prisma.CreditExpenseLogScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateManyMutationInput,
    Prisma.CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceInput
  >;
};

export type CreditExpenseLogScalarWhereInput = {
  AND?: Prisma.CreditExpenseLogScalarWhereInput | Prisma.CreditExpenseLogScalarWhereInput[];
  OR?: Prisma.CreditExpenseLogScalarWhereInput[];
  NOT?: Prisma.CreditExpenseLogScalarWhereInput | Prisma.CreditExpenseLogScalarWhereInput[];
  id?: Prisma.StringFilter<"CreditExpenseLog"> | string;
  creditBalanceId?: Prisma.StringFilter<"CreditExpenseLog"> | string;
  bookingUid?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  credits?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
  creditType?: Prisma.EnumCreditTypeFilter<"CreditExpenseLog"> | $Enums.CreditType;
  date?: Prisma.DateTimeFilter<"CreditExpenseLog"> | Date | string;
  smsSid?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  smsSegments?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
  phoneNumber?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  email?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
  callDuration?: Prisma.IntNullableFilter<"CreditExpenseLog"> | number | null;
  creditFor?: Prisma.EnumCreditUsageTypeNullableFilter<"CreditExpenseLog"> | $Enums.CreditUsageType | null;
  externalRef?: Prisma.StringNullableFilter<"CreditExpenseLog"> | string | null;
};

export type CreditExpenseLogCreateWithoutBookingInput = {
  id?: string;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
  creditBalance: Prisma.CreditBalanceCreateNestedOneWithoutExpenseLogsInput;
};

export type CreditExpenseLogUncheckedCreateWithoutBookingInput = {
  id?: string;
  creditBalanceId: string;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
};

export type CreditExpenseLogCreateOrConnectWithoutBookingInput = {
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CreditExpenseLogCreateWithoutBookingInput,
    Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput
  >;
};

export type CreditExpenseLogCreateManyBookingInputEnvelope = {
  data: Prisma.CreditExpenseLogCreateManyBookingInput | Prisma.CreditExpenseLogCreateManyBookingInput[];
  skipDuplicates?: boolean;
};

export type CreditExpenseLogUpsertWithWhereUniqueWithoutBookingInput = {
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateWithoutBookingInput,
    Prisma.CreditExpenseLogUncheckedUpdateWithoutBookingInput
  >;
  create: Prisma.XOR<
    Prisma.CreditExpenseLogCreateWithoutBookingInput,
    Prisma.CreditExpenseLogUncheckedCreateWithoutBookingInput
  >;
};

export type CreditExpenseLogUpdateWithWhereUniqueWithoutBookingInput = {
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateWithoutBookingInput,
    Prisma.CreditExpenseLogUncheckedUpdateWithoutBookingInput
  >;
};

export type CreditExpenseLogUpdateManyWithWhereWithoutBookingInput = {
  where: Prisma.CreditExpenseLogScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateManyMutationInput,
    Prisma.CreditExpenseLogUncheckedUpdateManyWithoutBookingInput
  >;
};

export type CreditExpenseLogCreateManyCreditBalanceInput = {
  id?: string;
  bookingUid?: string | null;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
};

export type CreditExpenseLogUpdateWithoutCreditBalanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  booking?: Prisma.BookingUpdateOneWithoutExpenseLogsNestedInput;
};

export type CreditExpenseLogUncheckedUpdateWithoutCreditBalanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogUncheckedUpdateManyWithoutCreditBalanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  bookingUid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogCreateManyBookingInput = {
  id?: string;
  creditBalanceId: string;
  credits?: number | null;
  creditType: $Enums.CreditType;
  date: Date | string;
  smsSid?: string | null;
  smsSegments?: number | null;
  phoneNumber?: string | null;
  email?: string | null;
  callDuration?: number | null;
  creditFor?: $Enums.CreditUsageType | null;
  externalRef?: string | null;
};

export type CreditExpenseLogUpdateWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  creditBalance?: Prisma.CreditBalanceUpdateOneRequiredWithoutExpenseLogsNestedInput;
};

export type CreditExpenseLogUncheckedUpdateWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  creditBalanceId?: Prisma.StringFieldUpdateOperationsInput | string;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogUncheckedUpdateManyWithoutBookingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  creditBalanceId?: Prisma.StringFieldUpdateOperationsInput | string;
  credits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditType?: Prisma.EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType;
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  smsSid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  smsSegments?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  callDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  creditFor?: Prisma.NullableEnumCreditUsageTypeFieldUpdateOperationsInput | $Enums.CreditUsageType | null;
  externalRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type CreditExpenseLogSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    creditBalanceId?: boolean;
    bookingUid?: boolean;
    credits?: boolean;
    creditType?: boolean;
    date?: boolean;
    smsSid?: boolean;
    smsSegments?: boolean;
    phoneNumber?: boolean;
    email?: boolean;
    callDuration?: boolean;
    creditFor?: boolean;
    externalRef?: boolean;
    creditBalance?: boolean | Prisma.CreditBalanceDefaultArgs<ExtArgs>;
    booking?: boolean | Prisma.CreditExpenseLog$bookingArgs<ExtArgs>;
  },
  ExtArgs["result"]["creditExpenseLog"]
>;

export type CreditExpenseLogSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    creditBalanceId?: boolean;
    bookingUid?: boolean;
    credits?: boolean;
    creditType?: boolean;
    date?: boolean;
    smsSid?: boolean;
    smsSegments?: boolean;
    phoneNumber?: boolean;
    email?: boolean;
    callDuration?: boolean;
    creditFor?: boolean;
    externalRef?: boolean;
    creditBalance?: boolean | Prisma.CreditBalanceDefaultArgs<ExtArgs>;
    booking?: boolean | Prisma.CreditExpenseLog$bookingArgs<ExtArgs>;
  },
  ExtArgs["result"]["creditExpenseLog"]
>;

export type CreditExpenseLogSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    creditBalanceId?: boolean;
    bookingUid?: boolean;
    credits?: boolean;
    creditType?: boolean;
    date?: boolean;
    smsSid?: boolean;
    smsSegments?: boolean;
    phoneNumber?: boolean;
    email?: boolean;
    callDuration?: boolean;
    creditFor?: boolean;
    externalRef?: boolean;
    creditBalance?: boolean | Prisma.CreditBalanceDefaultArgs<ExtArgs>;
    booking?: boolean | Prisma.CreditExpenseLog$bookingArgs<ExtArgs>;
  },
  ExtArgs["result"]["creditExpenseLog"]
>;

export type CreditExpenseLogSelectScalar = {
  id?: boolean;
  creditBalanceId?: boolean;
  bookingUid?: boolean;
  credits?: boolean;
  creditType?: boolean;
  date?: boolean;
  smsSid?: boolean;
  smsSegments?: boolean;
  phoneNumber?: boolean;
  email?: boolean;
  callDuration?: boolean;
  creditFor?: boolean;
  externalRef?: boolean;
};

export type CreditExpenseLogOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "creditBalanceId"
  | "bookingUid"
  | "credits"
  | "creditType"
  | "date"
  | "smsSid"
  | "smsSegments"
  | "phoneNumber"
  | "email"
  | "callDuration"
  | "creditFor"
  | "externalRef",
  ExtArgs["result"]["creditExpenseLog"]
>;
export type CreditExpenseLogInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  creditBalance?: boolean | Prisma.CreditBalanceDefaultArgs<ExtArgs>;
  booking?: boolean | Prisma.CreditExpenseLog$bookingArgs<ExtArgs>;
};
export type CreditExpenseLogIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  creditBalance?: boolean | Prisma.CreditBalanceDefaultArgs<ExtArgs>;
  booking?: boolean | Prisma.CreditExpenseLog$bookingArgs<ExtArgs>;
};
export type CreditExpenseLogIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  creditBalance?: boolean | Prisma.CreditBalanceDefaultArgs<ExtArgs>;
  booking?: boolean | Prisma.CreditExpenseLog$bookingArgs<ExtArgs>;
};

export type $CreditExpenseLogPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "CreditExpenseLog";
  objects: {
    creditBalance: Prisma.$CreditBalancePayload<ExtArgs>;
    booking: Prisma.$BookingPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      creditBalanceId: string;
      bookingUid: string | null;
      credits: number | null;
      creditType: $Enums.CreditType;
      date: Date;
      smsSid: string | null;
      smsSegments: number | null;
      phoneNumber: string | null;
      email: string | null;
      callDuration: number | null;
      creditFor: $Enums.CreditUsageType | null;
      externalRef: string | null;
    },
    ExtArgs["result"]["creditExpenseLog"]
  >;
  composites: {};
};

export type CreditExpenseLogGetPayload<S extends boolean | null | undefined | CreditExpenseLogDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$CreditExpenseLogPayload, S>;

export type CreditExpenseLogCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<CreditExpenseLogFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: CreditExpenseLogCountAggregateInputType | true;
};

export interface CreditExpenseLogDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["CreditExpenseLog"];
    meta: { name: "CreditExpenseLog" };
  };
  /**
   * Find zero or one CreditExpenseLog that matches the filter.
   * @param {CreditExpenseLogFindUniqueArgs} args - Arguments to find a CreditExpenseLog
   * @example
   * // Get one CreditExpenseLog
   * const creditExpenseLog = await prisma.creditExpenseLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CreditExpenseLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditExpenseLogPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CreditExpenseLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CreditExpenseLogFindUniqueOrThrowArgs} args - Arguments to find a CreditExpenseLog
   * @example
   * // Get one CreditExpenseLog
   * const creditExpenseLog = await prisma.creditExpenseLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CreditExpenseLogFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditExpenseLogPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CreditExpenseLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogFindFirstArgs} args - Arguments to find a CreditExpenseLog
   * @example
   * // Get one CreditExpenseLog
   * const creditExpenseLog = await prisma.creditExpenseLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CreditExpenseLogFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CreditExpenseLogFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditExpenseLogPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CreditExpenseLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogFindFirstOrThrowArgs} args - Arguments to find a CreditExpenseLog
   * @example
   * // Get one CreditExpenseLog
   * const creditExpenseLog = await prisma.creditExpenseLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CreditExpenseLogFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CreditExpenseLogFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<
      Prisma.$CreditExpenseLogPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CreditExpenseLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CreditExpenseLogs
   * const creditExpenseLogs = await prisma.creditExpenseLog.findMany()
   *
   * // Get first 10 CreditExpenseLogs
   * const creditExpenseLogs = await prisma.creditExpenseLog.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const creditExpenseLogWithIdOnly = await prisma.creditExpenseLog.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CreditExpenseLogFindManyArgs>(
    args?: Prisma.SelectSubset<T, CreditExpenseLogFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$CreditExpenseLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a CreditExpenseLog.
   * @param {CreditExpenseLogCreateArgs} args - Arguments to create a CreditExpenseLog.
   * @example
   * // Create one CreditExpenseLog
   * const CreditExpenseLog = await prisma.creditExpenseLog.create({
   *   data: {
   *     // ... data to create a CreditExpenseLog
   *   }
   * })
   *
   */
  create<T extends CreditExpenseLogCreateArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogCreateArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<Prisma.$CreditExpenseLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CreditExpenseLogs.
   * @param {CreditExpenseLogCreateManyArgs} args - Arguments to create many CreditExpenseLogs.
   * @example
   * // Create many CreditExpenseLogs
   * const creditExpenseLog = await prisma.creditExpenseLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CreditExpenseLogCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CreditExpenseLogCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CreditExpenseLogs and returns the data saved in the database.
   * @param {CreditExpenseLogCreateManyAndReturnArgs} args - Arguments to create many CreditExpenseLogs.
   * @example
   * // Create many CreditExpenseLogs
   * const creditExpenseLog = await prisma.creditExpenseLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CreditExpenseLogs and only return the `id`
   * const creditExpenseLogWithIdOnly = await prisma.creditExpenseLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CreditExpenseLogCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CreditExpenseLogCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CreditExpenseLogPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CreditExpenseLog.
   * @param {CreditExpenseLogDeleteArgs} args - Arguments to delete one CreditExpenseLog.
   * @example
   * // Delete one CreditExpenseLog
   * const CreditExpenseLog = await prisma.creditExpenseLog.delete({
   *   where: {
   *     // ... filter to delete one CreditExpenseLog
   *   }
   * })
   *
   */
  delete<T extends CreditExpenseLogDeleteArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<Prisma.$CreditExpenseLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CreditExpenseLog.
   * @param {CreditExpenseLogUpdateArgs} args - Arguments to update one CreditExpenseLog.
   * @example
   * // Update one CreditExpenseLog
   * const creditExpenseLog = await prisma.creditExpenseLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CreditExpenseLogUpdateArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<Prisma.$CreditExpenseLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CreditExpenseLogs.
   * @param {CreditExpenseLogDeleteManyArgs} args - Arguments to filter CreditExpenseLogs to delete.
   * @example
   * // Delete a few CreditExpenseLogs
   * const { count } = await prisma.creditExpenseLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CreditExpenseLogDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CreditExpenseLogDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CreditExpenseLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CreditExpenseLogs
   * const creditExpenseLog = await prisma.creditExpenseLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CreditExpenseLogUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CreditExpenseLogs and returns the data updated in the database.
   * @param {CreditExpenseLogUpdateManyAndReturnArgs} args - Arguments to update many CreditExpenseLogs.
   * @example
   * // Update many CreditExpenseLogs
   * const creditExpenseLog = await prisma.creditExpenseLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CreditExpenseLogs and only return the `id`
   * const creditExpenseLogWithIdOnly = await prisma.creditExpenseLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CreditExpenseLogUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CreditExpenseLogPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CreditExpenseLog.
   * @param {CreditExpenseLogUpsertArgs} args - Arguments to update or create a CreditExpenseLog.
   * @example
   * // Update or create a CreditExpenseLog
   * const creditExpenseLog = await prisma.creditExpenseLog.upsert({
   *   create: {
   *     // ... data to create a CreditExpenseLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CreditExpenseLog we want to update
   *   }
   * })
   */
  upsert<T extends CreditExpenseLogUpsertArgs>(
    args: Prisma.SelectSubset<T, CreditExpenseLogUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__CreditExpenseLogClient<
    runtime.Types.Result.GetResult<Prisma.$CreditExpenseLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CreditExpenseLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogCountArgs} args - Arguments to filter CreditExpenseLogs to count.
   * @example
   * // Count the number of CreditExpenseLogs
   * const count = await prisma.creditExpenseLog.count({
   *   where: {
   *     // ... the filter for the CreditExpenseLogs we want to count
   *   }
   * })
   **/
  count<T extends CreditExpenseLogCountArgs>(
    args?: Prisma.Subset<T, CreditExpenseLogCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], CreditExpenseLogCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CreditExpenseLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CreditExpenseLogAggregateArgs>(
    args: Prisma.Subset<T, CreditExpenseLogAggregateArgs>
  ): Prisma.PrismaPromise<GetCreditExpenseLogAggregateType<T>>;

  /**
   * Group by CreditExpenseLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CreditExpenseLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CreditExpenseLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CreditExpenseLogGroupByArgs["orderBy"] }
      : { orderBy?: CreditExpenseLogGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, CreditExpenseLogGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetCreditExpenseLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CreditExpenseLog model
   */
  readonly fields: CreditExpenseLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CreditExpenseLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CreditExpenseLogClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  creditBalance<T extends Prisma.CreditBalanceDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CreditBalanceDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__CreditBalanceClient<
    | runtime.Types.Result.GetResult<
        Prisma.$CreditBalancePayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  booking<T extends Prisma.CreditExpenseLog$bookingArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CreditExpenseLog$bookingArgs<ExtArgs>>
  ): Prisma.Prisma__BookingClient<
    runtime.Types.Result.GetResult<
      Prisma.$BookingPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CreditExpenseLog model
 */
export interface CreditExpenseLogFieldRefs {
  readonly id: Prisma.FieldRef<"CreditExpenseLog", "String">;
  readonly creditBalanceId: Prisma.FieldRef<"CreditExpenseLog", "String">;
  readonly bookingUid: Prisma.FieldRef<"CreditExpenseLog", "String">;
  readonly credits: Prisma.FieldRef<"CreditExpenseLog", "Int">;
  readonly creditType: Prisma.FieldRef<"CreditExpenseLog", "CreditType">;
  readonly date: Prisma.FieldRef<"CreditExpenseLog", "DateTime">;
  readonly smsSid: Prisma.FieldRef<"CreditExpenseLog", "String">;
  readonly smsSegments: Prisma.FieldRef<"CreditExpenseLog", "Int">;
  readonly phoneNumber: Prisma.FieldRef<"CreditExpenseLog", "String">;
  readonly email: Prisma.FieldRef<"CreditExpenseLog", "String">;
  readonly callDuration: Prisma.FieldRef<"CreditExpenseLog", "Int">;
  readonly creditFor: Prisma.FieldRef<"CreditExpenseLog", "CreditUsageType">;
  readonly externalRef: Prisma.FieldRef<"CreditExpenseLog", "String">;
}

// Custom InputTypes
/**
 * CreditExpenseLog findUnique
 */
export type CreditExpenseLogFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * Filter, which CreditExpenseLog to fetch.
   */
  where: Prisma.CreditExpenseLogWhereUniqueInput;
};

/**
 * CreditExpenseLog findUniqueOrThrow
 */
export type CreditExpenseLogFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * Filter, which CreditExpenseLog to fetch.
   */
  where: Prisma.CreditExpenseLogWhereUniqueInput;
};

/**
 * CreditExpenseLog findFirst
 */
export type CreditExpenseLogFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * Filter, which CreditExpenseLog to fetch.
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditExpenseLogs to fetch.
   */
  orderBy?:
    | Prisma.CreditExpenseLogOrderByWithRelationInput
    | Prisma.CreditExpenseLogOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CreditExpenseLogs.
   */
  cursor?: Prisma.CreditExpenseLogWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditExpenseLogs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditExpenseLogs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CreditExpenseLogs.
   */
  distinct?: Prisma.CreditExpenseLogScalarFieldEnum | Prisma.CreditExpenseLogScalarFieldEnum[];
};

/**
 * CreditExpenseLog findFirstOrThrow
 */
export type CreditExpenseLogFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * Filter, which CreditExpenseLog to fetch.
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditExpenseLogs to fetch.
   */
  orderBy?:
    | Prisma.CreditExpenseLogOrderByWithRelationInput
    | Prisma.CreditExpenseLogOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CreditExpenseLogs.
   */
  cursor?: Prisma.CreditExpenseLogWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditExpenseLogs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditExpenseLogs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CreditExpenseLogs.
   */
  distinct?: Prisma.CreditExpenseLogScalarFieldEnum | Prisma.CreditExpenseLogScalarFieldEnum[];
};

/**
 * CreditExpenseLog findMany
 */
export type CreditExpenseLogFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * Filter, which CreditExpenseLogs to fetch.
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CreditExpenseLogs to fetch.
   */
  orderBy?:
    | Prisma.CreditExpenseLogOrderByWithRelationInput
    | Prisma.CreditExpenseLogOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CreditExpenseLogs.
   */
  cursor?: Prisma.CreditExpenseLogWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CreditExpenseLogs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CreditExpenseLogs.
   */
  skip?: number;
  distinct?: Prisma.CreditExpenseLogScalarFieldEnum | Prisma.CreditExpenseLogScalarFieldEnum[];
};

/**
 * CreditExpenseLog create
 */
export type CreditExpenseLogCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * The data needed to create a CreditExpenseLog.
   */
  data: Prisma.XOR<Prisma.CreditExpenseLogCreateInput, Prisma.CreditExpenseLogUncheckedCreateInput>;
};

/**
 * CreditExpenseLog createMany
 */
export type CreditExpenseLogCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many CreditExpenseLogs.
   */
  data: Prisma.CreditExpenseLogCreateManyInput | Prisma.CreditExpenseLogCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CreditExpenseLog createManyAndReturn
 */
export type CreditExpenseLogCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * The data used to create many CreditExpenseLogs.
   */
  data: Prisma.CreditExpenseLogCreateManyInput | Prisma.CreditExpenseLogCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CreditExpenseLog update
 */
export type CreditExpenseLogUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * The data needed to update a CreditExpenseLog.
   */
  data: Prisma.XOR<Prisma.CreditExpenseLogUpdateInput, Prisma.CreditExpenseLogUncheckedUpdateInput>;
  /**
   * Choose, which CreditExpenseLog to update.
   */
  where: Prisma.CreditExpenseLogWhereUniqueInput;
};

/**
 * CreditExpenseLog updateMany
 */
export type CreditExpenseLogUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update CreditExpenseLogs.
   */
  data: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateManyMutationInput,
    Prisma.CreditExpenseLogUncheckedUpdateManyInput
  >;
  /**
   * Filter which CreditExpenseLogs to update
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * Limit how many CreditExpenseLogs to update.
   */
  limit?: number;
};

/**
 * CreditExpenseLog updateManyAndReturn
 */
export type CreditExpenseLogUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * The data used to update CreditExpenseLogs.
   */
  data: Prisma.XOR<
    Prisma.CreditExpenseLogUpdateManyMutationInput,
    Prisma.CreditExpenseLogUncheckedUpdateManyInput
  >;
  /**
   * Filter which CreditExpenseLogs to update
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * Limit how many CreditExpenseLogs to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CreditExpenseLog upsert
 */
export type CreditExpenseLogUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * The filter to search for the CreditExpenseLog to update in case it exists.
   */
  where: Prisma.CreditExpenseLogWhereUniqueInput;
  /**
   * In case the CreditExpenseLog found by the `where` argument doesn't exist, create a new CreditExpenseLog with this data.
   */
  create: Prisma.XOR<Prisma.CreditExpenseLogCreateInput, Prisma.CreditExpenseLogUncheckedCreateInput>;
  /**
   * In case the CreditExpenseLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CreditExpenseLogUpdateInput, Prisma.CreditExpenseLogUncheckedUpdateInput>;
};

/**
 * CreditExpenseLog delete
 */
export type CreditExpenseLogDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
  /**
   * Filter which CreditExpenseLog to delete.
   */
  where: Prisma.CreditExpenseLogWhereUniqueInput;
};

/**
 * CreditExpenseLog deleteMany
 */
export type CreditExpenseLogDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which CreditExpenseLogs to delete
   */
  where?: Prisma.CreditExpenseLogWhereInput;
  /**
   * Limit how many CreditExpenseLogs to delete.
   */
  limit?: number;
};

/**
 * CreditExpenseLog.booking
 */
export type CreditExpenseLog$bookingArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null;
  where?: Prisma.BookingWhereInput;
};

/**
 * CreditExpenseLog without action
 */
export type CreditExpenseLogDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the CreditExpenseLog
   */
  select?: Prisma.CreditExpenseLogSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CreditExpenseLog
   */
  omit?: Prisma.CreditExpenseLogOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CreditExpenseLogInclude<ExtArgs> | null;
};
