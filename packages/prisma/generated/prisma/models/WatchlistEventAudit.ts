/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `WatchlistEventAudit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model WatchlistEventAudit
 *
 */
export type WatchlistEventAuditModel =
  runtime.Types.Result.DefaultSelection<Prisma.$WatchlistEventAuditPayload>;

export type AggregateWatchlistEventAudit = {
  _count: WatchlistEventAuditCountAggregateOutputType | null;
  _avg: WatchlistEventAuditAvgAggregateOutputType | null;
  _sum: WatchlistEventAuditSumAggregateOutputType | null;
  _min: WatchlistEventAuditMinAggregateOutputType | null;
  _max: WatchlistEventAuditMaxAggregateOutputType | null;
};

export type WatchlistEventAuditAvgAggregateOutputType = {
  eventTypeId: number | null;
};

export type WatchlistEventAuditSumAggregateOutputType = {
  eventTypeId: number | null;
};

export type WatchlistEventAuditMinAggregateOutputType = {
  id: string | null;
  watchlistId: string | null;
  eventTypeId: number | null;
  actionTaken: $Enums.WatchlistAction | null;
  timestamp: Date | null;
};

export type WatchlistEventAuditMaxAggregateOutputType = {
  id: string | null;
  watchlistId: string | null;
  eventTypeId: number | null;
  actionTaken: $Enums.WatchlistAction | null;
  timestamp: Date | null;
};

export type WatchlistEventAuditCountAggregateOutputType = {
  id: number;
  watchlistId: number;
  eventTypeId: number;
  actionTaken: number;
  timestamp: number;
  _all: number;
};

export type WatchlistEventAuditAvgAggregateInputType = {
  eventTypeId?: true;
};

export type WatchlistEventAuditSumAggregateInputType = {
  eventTypeId?: true;
};

export type WatchlistEventAuditMinAggregateInputType = {
  id?: true;
  watchlistId?: true;
  eventTypeId?: true;
  actionTaken?: true;
  timestamp?: true;
};

export type WatchlistEventAuditMaxAggregateInputType = {
  id?: true;
  watchlistId?: true;
  eventTypeId?: true;
  actionTaken?: true;
  timestamp?: true;
};

export type WatchlistEventAuditCountAggregateInputType = {
  id?: true;
  watchlistId?: true;
  eventTypeId?: true;
  actionTaken?: true;
  timestamp?: true;
  _all?: true;
};

export type WatchlistEventAuditAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WatchlistEventAudit to aggregate.
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WatchlistEventAudits to fetch.
   */
  orderBy?:
    | Prisma.WatchlistEventAuditOrderByWithRelationInput
    | Prisma.WatchlistEventAuditOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WatchlistEventAuditWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WatchlistEventAudits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WatchlistEventAudits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned WatchlistEventAudits
   **/
  _count?: true | WatchlistEventAuditCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WatchlistEventAuditAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WatchlistEventAuditSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WatchlistEventAuditMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WatchlistEventAuditMaxAggregateInputType;
};

export type GetWatchlistEventAuditAggregateType<T extends WatchlistEventAuditAggregateArgs> = {
  [P in keyof T & keyof AggregateWatchlistEventAudit]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWatchlistEventAudit[P]>
    : Prisma.GetScalarType<T[P], AggregateWatchlistEventAudit[P]>;
};

export type WatchlistEventAuditGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WatchlistEventAuditWhereInput;
  orderBy?:
    | Prisma.WatchlistEventAuditOrderByWithAggregationInput
    | Prisma.WatchlistEventAuditOrderByWithAggregationInput[];
  by: Prisma.WatchlistEventAuditScalarFieldEnum[] | Prisma.WatchlistEventAuditScalarFieldEnum;
  having?: Prisma.WatchlistEventAuditScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WatchlistEventAuditCountAggregateInputType | true;
  _avg?: WatchlistEventAuditAvgAggregateInputType;
  _sum?: WatchlistEventAuditSumAggregateInputType;
  _min?: WatchlistEventAuditMinAggregateInputType;
  _max?: WatchlistEventAuditMaxAggregateInputType;
};

export type WatchlistEventAuditGroupByOutputType = {
  id: string;
  watchlistId: string;
  eventTypeId: number;
  actionTaken: $Enums.WatchlistAction;
  timestamp: Date;
  _count: WatchlistEventAuditCountAggregateOutputType | null;
  _avg: WatchlistEventAuditAvgAggregateOutputType | null;
  _sum: WatchlistEventAuditSumAggregateOutputType | null;
  _min: WatchlistEventAuditMinAggregateOutputType | null;
  _max: WatchlistEventAuditMaxAggregateOutputType | null;
};

type GetWatchlistEventAuditGroupByPayload<T extends WatchlistEventAuditGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WatchlistEventAuditGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof WatchlistEventAuditGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], WatchlistEventAuditGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], WatchlistEventAuditGroupByOutputType[P]>;
    }
  >
>;

export type WatchlistEventAuditWhereInput = {
  AND?: Prisma.WatchlistEventAuditWhereInput | Prisma.WatchlistEventAuditWhereInput[];
  OR?: Prisma.WatchlistEventAuditWhereInput[];
  NOT?: Prisma.WatchlistEventAuditWhereInput | Prisma.WatchlistEventAuditWhereInput[];
  id?: Prisma.UuidFilter<"WatchlistEventAudit"> | string;
  watchlistId?: Prisma.UuidFilter<"WatchlistEventAudit"> | string;
  eventTypeId?: Prisma.IntFilter<"WatchlistEventAudit"> | number;
  actionTaken?: Prisma.EnumWatchlistActionFilter<"WatchlistEventAudit"> | $Enums.WatchlistAction;
  timestamp?: Prisma.DateTimeFilter<"WatchlistEventAudit"> | Date | string;
};

export type WatchlistEventAuditOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  actionTaken?: Prisma.SortOrder;
  timestamp?: Prisma.SortOrder;
};

export type WatchlistEventAuditWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.WatchlistEventAuditWhereInput | Prisma.WatchlistEventAuditWhereInput[];
    OR?: Prisma.WatchlistEventAuditWhereInput[];
    NOT?: Prisma.WatchlistEventAuditWhereInput | Prisma.WatchlistEventAuditWhereInput[];
    watchlistId?: Prisma.UuidFilter<"WatchlistEventAudit"> | string;
    eventTypeId?: Prisma.IntFilter<"WatchlistEventAudit"> | number;
    actionTaken?: Prisma.EnumWatchlistActionFilter<"WatchlistEventAudit"> | $Enums.WatchlistAction;
    timestamp?: Prisma.DateTimeFilter<"WatchlistEventAudit"> | Date | string;
  },
  "id"
>;

export type WatchlistEventAuditOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  actionTaken?: Prisma.SortOrder;
  timestamp?: Prisma.SortOrder;
  _count?: Prisma.WatchlistEventAuditCountOrderByAggregateInput;
  _avg?: Prisma.WatchlistEventAuditAvgOrderByAggregateInput;
  _max?: Prisma.WatchlistEventAuditMaxOrderByAggregateInput;
  _min?: Prisma.WatchlistEventAuditMinOrderByAggregateInput;
  _sum?: Prisma.WatchlistEventAuditSumOrderByAggregateInput;
};

export type WatchlistEventAuditScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.WatchlistEventAuditScalarWhereWithAggregatesInput
    | Prisma.WatchlistEventAuditScalarWhereWithAggregatesInput[];
  OR?: Prisma.WatchlistEventAuditScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.WatchlistEventAuditScalarWhereWithAggregatesInput
    | Prisma.WatchlistEventAuditScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<"WatchlistEventAudit"> | string;
  watchlistId?: Prisma.UuidWithAggregatesFilter<"WatchlistEventAudit"> | string;
  eventTypeId?: Prisma.IntWithAggregatesFilter<"WatchlistEventAudit"> | number;
  actionTaken?:
    | Prisma.EnumWatchlistActionWithAggregatesFilter<"WatchlistEventAudit">
    | $Enums.WatchlistAction;
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"WatchlistEventAudit"> | Date | string;
};

export type WatchlistEventAuditCreateInput = {
  id?: string;
  watchlistId: string;
  eventTypeId: number;
  actionTaken: $Enums.WatchlistAction;
  timestamp?: Date | string;
};

export type WatchlistEventAuditUncheckedCreateInput = {
  id?: string;
  watchlistId: string;
  eventTypeId: number;
  actionTaken: $Enums.WatchlistAction;
  timestamp?: Date | string;
};

export type WatchlistEventAuditUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  watchlistId?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionTaken?: Prisma.EnumWatchlistActionFieldUpdateOperationsInput | $Enums.WatchlistAction;
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WatchlistEventAuditUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  watchlistId?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionTaken?: Prisma.EnumWatchlistActionFieldUpdateOperationsInput | $Enums.WatchlistAction;
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WatchlistEventAuditCreateManyInput = {
  id?: string;
  watchlistId: string;
  eventTypeId: number;
  actionTaken: $Enums.WatchlistAction;
  timestamp?: Date | string;
};

export type WatchlistEventAuditUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  watchlistId?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionTaken?: Prisma.EnumWatchlistActionFieldUpdateOperationsInput | $Enums.WatchlistAction;
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WatchlistEventAuditUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  watchlistId?: Prisma.StringFieldUpdateOperationsInput | string;
  eventTypeId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionTaken?: Prisma.EnumWatchlistActionFieldUpdateOperationsInput | $Enums.WatchlistAction;
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WatchlistEventAuditCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  actionTaken?: Prisma.SortOrder;
  timestamp?: Prisma.SortOrder;
};

export type WatchlistEventAuditAvgOrderByAggregateInput = {
  eventTypeId?: Prisma.SortOrder;
};

export type WatchlistEventAuditMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  actionTaken?: Prisma.SortOrder;
  timestamp?: Prisma.SortOrder;
};

export type WatchlistEventAuditMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  watchlistId?: Prisma.SortOrder;
  eventTypeId?: Prisma.SortOrder;
  actionTaken?: Prisma.SortOrder;
  timestamp?: Prisma.SortOrder;
};

export type WatchlistEventAuditSumOrderByAggregateInput = {
  eventTypeId?: Prisma.SortOrder;
};

export type WatchlistEventAuditSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    watchlistId?: boolean;
    eventTypeId?: boolean;
    actionTaken?: boolean;
    timestamp?: boolean;
  },
  ExtArgs["result"]["watchlistEventAudit"]
>;

export type WatchlistEventAuditSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    watchlistId?: boolean;
    eventTypeId?: boolean;
    actionTaken?: boolean;
    timestamp?: boolean;
  },
  ExtArgs["result"]["watchlistEventAudit"]
>;

export type WatchlistEventAuditSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    watchlistId?: boolean;
    eventTypeId?: boolean;
    actionTaken?: boolean;
    timestamp?: boolean;
  },
  ExtArgs["result"]["watchlistEventAudit"]
>;

export type WatchlistEventAuditSelectScalar = {
  id?: boolean;
  watchlistId?: boolean;
  eventTypeId?: boolean;
  actionTaken?: boolean;
  timestamp?: boolean;
};

export type WatchlistEventAuditOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "watchlistId" | "eventTypeId" | "actionTaken" | "timestamp",
  ExtArgs["result"]["watchlistEventAudit"]
>;

export type $WatchlistEventAuditPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "WatchlistEventAudit";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      watchlistId: string;
      eventTypeId: number;
      actionTaken: $Enums.WatchlistAction;
      timestamp: Date;
    },
    ExtArgs["result"]["watchlistEventAudit"]
  >;
  composites: {};
};

export type WatchlistEventAuditGetPayload<
  S extends boolean | null | undefined | WatchlistEventAuditDefaultArgs
> = runtime.Types.Result.GetResult<Prisma.$WatchlistEventAuditPayload, S>;

export type WatchlistEventAuditCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<WatchlistEventAuditFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: WatchlistEventAuditCountAggregateInputType | true;
};

export interface WatchlistEventAuditDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["WatchlistEventAudit"];
    meta: { name: "WatchlistEventAudit" };
  };
  /**
   * Find zero or one WatchlistEventAudit that matches the filter.
   * @param {WatchlistEventAuditFindUniqueArgs} args - Arguments to find a WatchlistEventAudit
   * @example
   * // Get one WatchlistEventAudit
   * const watchlistEventAudit = await prisma.watchlistEventAudit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WatchlistEventAuditFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one WatchlistEventAudit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WatchlistEventAuditFindUniqueOrThrowArgs} args - Arguments to find a WatchlistEventAudit
   * @example
   * // Get one WatchlistEventAudit
   * const watchlistEventAudit = await prisma.watchlistEventAudit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WatchlistEventAuditFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WatchlistEventAudit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditFindFirstArgs} args - Arguments to find a WatchlistEventAudit
   * @example
   * // Get one WatchlistEventAudit
   * const watchlistEventAudit = await prisma.watchlistEventAudit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WatchlistEventAuditFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WatchlistEventAuditFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WatchlistEventAudit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditFindFirstOrThrowArgs} args - Arguments to find a WatchlistEventAudit
   * @example
   * // Get one WatchlistEventAudit
   * const watchlistEventAudit = await prisma.watchlistEventAudit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WatchlistEventAuditFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, WatchlistEventAuditFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more WatchlistEventAudits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WatchlistEventAudits
   * const watchlistEventAudits = await prisma.watchlistEventAudit.findMany()
   *
   * // Get first 10 WatchlistEventAudits
   * const watchlistEventAudits = await prisma.watchlistEventAudit.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const watchlistEventAuditWithIdOnly = await prisma.watchlistEventAudit.findMany({ select: { id: true } })
   *
   */
  findMany<T extends WatchlistEventAuditFindManyArgs>(
    args?: Prisma.SelectSubset<T, WatchlistEventAuditFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a WatchlistEventAudit.
   * @param {WatchlistEventAuditCreateArgs} args - Arguments to create a WatchlistEventAudit.
   * @example
   * // Create one WatchlistEventAudit
   * const WatchlistEventAudit = await prisma.watchlistEventAudit.create({
   *   data: {
   *     // ... data to create a WatchlistEventAudit
   *   }
   * })
   *
   */
  create<T extends WatchlistEventAuditCreateArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many WatchlistEventAudits.
   * @param {WatchlistEventAuditCreateManyArgs} args - Arguments to create many WatchlistEventAudits.
   * @example
   * // Create many WatchlistEventAudits
   * const watchlistEventAudit = await prisma.watchlistEventAudit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WatchlistEventAuditCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WatchlistEventAuditCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many WatchlistEventAudits and returns the data saved in the database.
   * @param {WatchlistEventAuditCreateManyAndReturnArgs} args - Arguments to create many WatchlistEventAudits.
   * @example
   * // Create many WatchlistEventAudits
   * const watchlistEventAudit = await prisma.watchlistEventAudit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many WatchlistEventAudits and only return the `id`
   * const watchlistEventAuditWithIdOnly = await prisma.watchlistEventAudit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WatchlistEventAuditCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, WatchlistEventAuditCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a WatchlistEventAudit.
   * @param {WatchlistEventAuditDeleteArgs} args - Arguments to delete one WatchlistEventAudit.
   * @example
   * // Delete one WatchlistEventAudit
   * const WatchlistEventAudit = await prisma.watchlistEventAudit.delete({
   *   where: {
   *     // ... filter to delete one WatchlistEventAudit
   *   }
   * })
   *
   */
  delete<T extends WatchlistEventAuditDeleteArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one WatchlistEventAudit.
   * @param {WatchlistEventAuditUpdateArgs} args - Arguments to update one WatchlistEventAudit.
   * @example
   * // Update one WatchlistEventAudit
   * const watchlistEventAudit = await prisma.watchlistEventAudit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WatchlistEventAuditUpdateArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more WatchlistEventAudits.
   * @param {WatchlistEventAuditDeleteManyArgs} args - Arguments to filter WatchlistEventAudits to delete.
   * @example
   * // Delete a few WatchlistEventAudits
   * const { count } = await prisma.watchlistEventAudit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WatchlistEventAuditDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WatchlistEventAuditDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WatchlistEventAudits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WatchlistEventAudits
   * const watchlistEventAudit = await prisma.watchlistEventAudit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WatchlistEventAuditUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WatchlistEventAudits and returns the data updated in the database.
   * @param {WatchlistEventAuditUpdateManyAndReturnArgs} args - Arguments to update many WatchlistEventAudits.
   * @example
   * // Update many WatchlistEventAudits
   * const watchlistEventAudit = await prisma.watchlistEventAudit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more WatchlistEventAudits and only return the `id`
   * const watchlistEventAuditWithIdOnly = await prisma.watchlistEventAudit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WatchlistEventAuditUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one WatchlistEventAudit.
   * @param {WatchlistEventAuditUpsertArgs} args - Arguments to update or create a WatchlistEventAudit.
   * @example
   * // Update or create a WatchlistEventAudit
   * const watchlistEventAudit = await prisma.watchlistEventAudit.upsert({
   *   create: {
   *     // ... data to create a WatchlistEventAudit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WatchlistEventAudit we want to update
   *   }
   * })
   */
  upsert<T extends WatchlistEventAuditUpsertArgs>(
    args: Prisma.SelectSubset<T, WatchlistEventAuditUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WatchlistEventAuditClient<
    runtime.Types.Result.GetResult<
      Prisma.$WatchlistEventAuditPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of WatchlistEventAudits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditCountArgs} args - Arguments to filter WatchlistEventAudits to count.
   * @example
   * // Count the number of WatchlistEventAudits
   * const count = await prisma.watchlistEventAudit.count({
   *   where: {
   *     // ... the filter for the WatchlistEventAudits we want to count
   *   }
   * })
   **/
  count<T extends WatchlistEventAuditCountArgs>(
    args?: Prisma.Subset<T, WatchlistEventAuditCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], WatchlistEventAuditCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a WatchlistEventAudit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WatchlistEventAuditAggregateArgs>(
    args: Prisma.Subset<T, WatchlistEventAuditAggregateArgs>
  ): Prisma.PrismaPromise<GetWatchlistEventAuditAggregateType<T>>;

  /**
   * Group by WatchlistEventAudit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WatchlistEventAuditGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WatchlistEventAuditGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WatchlistEventAuditGroupByArgs["orderBy"] }
      : { orderBy?: WatchlistEventAuditGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, WatchlistEventAuditGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetWatchlistEventAuditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the WatchlistEventAudit model
   */
  readonly fields: WatchlistEventAuditFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WatchlistEventAudit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WatchlistEventAuditClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WatchlistEventAudit model
 */
export interface WatchlistEventAuditFieldRefs {
  readonly id: Prisma.FieldRef<"WatchlistEventAudit", "String">;
  readonly watchlistId: Prisma.FieldRef<"WatchlistEventAudit", "String">;
  readonly eventTypeId: Prisma.FieldRef<"WatchlistEventAudit", "Int">;
  readonly actionTaken: Prisma.FieldRef<"WatchlistEventAudit", "WatchlistAction">;
  readonly timestamp: Prisma.FieldRef<"WatchlistEventAudit", "DateTime">;
}

// Custom InputTypes
/**
 * WatchlistEventAudit findUnique
 */
export type WatchlistEventAuditFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * Filter, which WatchlistEventAudit to fetch.
   */
  where: Prisma.WatchlistEventAuditWhereUniqueInput;
};

/**
 * WatchlistEventAudit findUniqueOrThrow
 */
export type WatchlistEventAuditFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * Filter, which WatchlistEventAudit to fetch.
   */
  where: Prisma.WatchlistEventAuditWhereUniqueInput;
};

/**
 * WatchlistEventAudit findFirst
 */
export type WatchlistEventAuditFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * Filter, which WatchlistEventAudit to fetch.
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WatchlistEventAudits to fetch.
   */
  orderBy?:
    | Prisma.WatchlistEventAuditOrderByWithRelationInput
    | Prisma.WatchlistEventAuditOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WatchlistEventAudits.
   */
  cursor?: Prisma.WatchlistEventAuditWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WatchlistEventAudits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WatchlistEventAudits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WatchlistEventAudits.
   */
  distinct?: Prisma.WatchlistEventAuditScalarFieldEnum | Prisma.WatchlistEventAuditScalarFieldEnum[];
};

/**
 * WatchlistEventAudit findFirstOrThrow
 */
export type WatchlistEventAuditFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * Filter, which WatchlistEventAudit to fetch.
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WatchlistEventAudits to fetch.
   */
  orderBy?:
    | Prisma.WatchlistEventAuditOrderByWithRelationInput
    | Prisma.WatchlistEventAuditOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WatchlistEventAudits.
   */
  cursor?: Prisma.WatchlistEventAuditWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WatchlistEventAudits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WatchlistEventAudits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WatchlistEventAudits.
   */
  distinct?: Prisma.WatchlistEventAuditScalarFieldEnum | Prisma.WatchlistEventAuditScalarFieldEnum[];
};

/**
 * WatchlistEventAudit findMany
 */
export type WatchlistEventAuditFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * Filter, which WatchlistEventAudits to fetch.
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WatchlistEventAudits to fetch.
   */
  orderBy?:
    | Prisma.WatchlistEventAuditOrderByWithRelationInput
    | Prisma.WatchlistEventAuditOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing WatchlistEventAudits.
   */
  cursor?: Prisma.WatchlistEventAuditWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WatchlistEventAudits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WatchlistEventAudits.
   */
  skip?: number;
  distinct?: Prisma.WatchlistEventAuditScalarFieldEnum | Prisma.WatchlistEventAuditScalarFieldEnum[];
};

/**
 * WatchlistEventAudit create
 */
export type WatchlistEventAuditCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * The data needed to create a WatchlistEventAudit.
   */
  data: Prisma.XOR<Prisma.WatchlistEventAuditCreateInput, Prisma.WatchlistEventAuditUncheckedCreateInput>;
};

/**
 * WatchlistEventAudit createMany
 */
export type WatchlistEventAuditCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many WatchlistEventAudits.
   */
  data: Prisma.WatchlistEventAuditCreateManyInput | Prisma.WatchlistEventAuditCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WatchlistEventAudit createManyAndReturn
 */
export type WatchlistEventAuditCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * The data used to create many WatchlistEventAudits.
   */
  data: Prisma.WatchlistEventAuditCreateManyInput | Prisma.WatchlistEventAuditCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WatchlistEventAudit update
 */
export type WatchlistEventAuditUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * The data needed to update a WatchlistEventAudit.
   */
  data: Prisma.XOR<Prisma.WatchlistEventAuditUpdateInput, Prisma.WatchlistEventAuditUncheckedUpdateInput>;
  /**
   * Choose, which WatchlistEventAudit to update.
   */
  where: Prisma.WatchlistEventAuditWhereUniqueInput;
};

/**
 * WatchlistEventAudit updateMany
 */
export type WatchlistEventAuditUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update WatchlistEventAudits.
   */
  data: Prisma.XOR<
    Prisma.WatchlistEventAuditUpdateManyMutationInput,
    Prisma.WatchlistEventAuditUncheckedUpdateManyInput
  >;
  /**
   * Filter which WatchlistEventAudits to update
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * Limit how many WatchlistEventAudits to update.
   */
  limit?: number;
};

/**
 * WatchlistEventAudit updateManyAndReturn
 */
export type WatchlistEventAuditUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * The data used to update WatchlistEventAudits.
   */
  data: Prisma.XOR<
    Prisma.WatchlistEventAuditUpdateManyMutationInput,
    Prisma.WatchlistEventAuditUncheckedUpdateManyInput
  >;
  /**
   * Filter which WatchlistEventAudits to update
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * Limit how many WatchlistEventAudits to update.
   */
  limit?: number;
};

/**
 * WatchlistEventAudit upsert
 */
export type WatchlistEventAuditUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * The filter to search for the WatchlistEventAudit to update in case it exists.
   */
  where: Prisma.WatchlistEventAuditWhereUniqueInput;
  /**
   * In case the WatchlistEventAudit found by the `where` argument doesn't exist, create a new WatchlistEventAudit with this data.
   */
  create: Prisma.XOR<Prisma.WatchlistEventAuditCreateInput, Prisma.WatchlistEventAuditUncheckedCreateInput>;
  /**
   * In case the WatchlistEventAudit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WatchlistEventAuditUpdateInput, Prisma.WatchlistEventAuditUncheckedUpdateInput>;
};

/**
 * WatchlistEventAudit delete
 */
export type WatchlistEventAuditDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
  /**
   * Filter which WatchlistEventAudit to delete.
   */
  where: Prisma.WatchlistEventAuditWhereUniqueInput;
};

/**
 * WatchlistEventAudit deleteMany
 */
export type WatchlistEventAuditDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WatchlistEventAudits to delete
   */
  where?: Prisma.WatchlistEventAuditWhereInput;
  /**
   * Limit how many WatchlistEventAudits to delete.
   */
  limit?: number;
};

/**
 * WatchlistEventAudit without action
 */
export type WatchlistEventAuditDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WatchlistEventAudit
   */
  select?: Prisma.WatchlistEventAuditSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WatchlistEventAudit
   */
  omit?: Prisma.WatchlistEventAuditOmit<ExtArgs> | null;
};
