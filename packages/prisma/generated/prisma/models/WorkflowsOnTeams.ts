/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * This file exports the `WorkflowsOnTeams` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";

import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model WorkflowsOnTeams
 *
 */
export type WorkflowsOnTeamsModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkflowsOnTeamsPayload>;

export type AggregateWorkflowsOnTeams = {
  _count: WorkflowsOnTeamsCountAggregateOutputType | null;
  _avg: WorkflowsOnTeamsAvgAggregateOutputType | null;
  _sum: WorkflowsOnTeamsSumAggregateOutputType | null;
  _min: WorkflowsOnTeamsMinAggregateOutputType | null;
  _max: WorkflowsOnTeamsMaxAggregateOutputType | null;
};

export type WorkflowsOnTeamsAvgAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  teamId: number | null;
};

export type WorkflowsOnTeamsSumAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  teamId: number | null;
};

export type WorkflowsOnTeamsMinAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  teamId: number | null;
};

export type WorkflowsOnTeamsMaxAggregateOutputType = {
  id: number | null;
  workflowId: number | null;
  teamId: number | null;
};

export type WorkflowsOnTeamsCountAggregateOutputType = {
  id: number;
  workflowId: number;
  teamId: number;
  _all: number;
};

export type WorkflowsOnTeamsAvgAggregateInputType = {
  id?: true;
  workflowId?: true;
  teamId?: true;
};

export type WorkflowsOnTeamsSumAggregateInputType = {
  id?: true;
  workflowId?: true;
  teamId?: true;
};

export type WorkflowsOnTeamsMinAggregateInputType = {
  id?: true;
  workflowId?: true;
  teamId?: true;
};

export type WorkflowsOnTeamsMaxAggregateInputType = {
  id?: true;
  workflowId?: true;
  teamId?: true;
};

export type WorkflowsOnTeamsCountAggregateInputType = {
  id?: true;
  workflowId?: true;
  teamId?: true;
  _all?: true;
};

export type WorkflowsOnTeamsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WorkflowsOnTeams to aggregate.
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnTeams to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned WorkflowsOnTeams
   **/
  _count?: true | WorkflowsOnTeamsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WorkflowsOnTeamsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WorkflowsOnTeamsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WorkflowsOnTeamsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WorkflowsOnTeamsMaxAggregateInputType;
};

export type GetWorkflowsOnTeamsAggregateType<T extends WorkflowsOnTeamsAggregateArgs> = {
  [P in keyof T & keyof AggregateWorkflowsOnTeams]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkflowsOnTeams[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkflowsOnTeams[P]>;
};

export type WorkflowsOnTeamsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  orderBy?:
    | Prisma.WorkflowsOnTeamsOrderByWithAggregationInput
    | Prisma.WorkflowsOnTeamsOrderByWithAggregationInput[];
  by: Prisma.WorkflowsOnTeamsScalarFieldEnum[] | Prisma.WorkflowsOnTeamsScalarFieldEnum;
  having?: Prisma.WorkflowsOnTeamsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WorkflowsOnTeamsCountAggregateInputType | true;
  _avg?: WorkflowsOnTeamsAvgAggregateInputType;
  _sum?: WorkflowsOnTeamsSumAggregateInputType;
  _min?: WorkflowsOnTeamsMinAggregateInputType;
  _max?: WorkflowsOnTeamsMaxAggregateInputType;
};

export type WorkflowsOnTeamsGroupByOutputType = {
  id: number;
  workflowId: number;
  teamId: number;
  _count: WorkflowsOnTeamsCountAggregateOutputType | null;
  _avg: WorkflowsOnTeamsAvgAggregateOutputType | null;
  _sum: WorkflowsOnTeamsSumAggregateOutputType | null;
  _min: WorkflowsOnTeamsMinAggregateOutputType | null;
  _max: WorkflowsOnTeamsMaxAggregateOutputType | null;
};

type GetWorkflowsOnTeamsGroupByPayload<T extends WorkflowsOnTeamsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkflowsOnTeamsGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof WorkflowsOnTeamsGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], WorkflowsOnTeamsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], WorkflowsOnTeamsGroupByOutputType[P]>;
    }
  >
>;

export type WorkflowsOnTeamsWhereInput = {
  AND?: Prisma.WorkflowsOnTeamsWhereInput | Prisma.WorkflowsOnTeamsWhereInput[];
  OR?: Prisma.WorkflowsOnTeamsWhereInput[];
  NOT?: Prisma.WorkflowsOnTeamsWhereInput | Prisma.WorkflowsOnTeamsWhereInput[];
  id?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
  workflowId?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
  teamId?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
  workflow?: Prisma.XOR<Prisma.WorkflowScalarRelationFilter, Prisma.WorkflowWhereInput>;
  team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
};

export type WorkflowsOnTeamsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  workflow?: Prisma.WorkflowOrderByWithRelationInput;
  team?: Prisma.TeamOrderByWithRelationInput;
};

export type WorkflowsOnTeamsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    workflowId_teamId?: Prisma.WorkflowsOnTeamsWorkflowIdTeamIdCompoundUniqueInput;
    AND?: Prisma.WorkflowsOnTeamsWhereInput | Prisma.WorkflowsOnTeamsWhereInput[];
    OR?: Prisma.WorkflowsOnTeamsWhereInput[];
    NOT?: Prisma.WorkflowsOnTeamsWhereInput | Prisma.WorkflowsOnTeamsWhereInput[];
    workflowId?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
    teamId?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
    workflow?: Prisma.XOR<Prisma.WorkflowScalarRelationFilter, Prisma.WorkflowWhereInput>;
    team?: Prisma.XOR<Prisma.TeamScalarRelationFilter, Prisma.TeamWhereInput>;
  },
  "id" | "workflowId_teamId"
>;

export type WorkflowsOnTeamsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  _count?: Prisma.WorkflowsOnTeamsCountOrderByAggregateInput;
  _avg?: Prisma.WorkflowsOnTeamsAvgOrderByAggregateInput;
  _max?: Prisma.WorkflowsOnTeamsMaxOrderByAggregateInput;
  _min?: Prisma.WorkflowsOnTeamsMinOrderByAggregateInput;
  _sum?: Prisma.WorkflowsOnTeamsSumOrderByAggregateInput;
};

export type WorkflowsOnTeamsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.WorkflowsOnTeamsScalarWhereWithAggregatesInput
    | Prisma.WorkflowsOnTeamsScalarWhereWithAggregatesInput[];
  OR?: Prisma.WorkflowsOnTeamsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.WorkflowsOnTeamsScalarWhereWithAggregatesInput
    | Prisma.WorkflowsOnTeamsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"WorkflowsOnTeams"> | number;
  workflowId?: Prisma.IntWithAggregatesFilter<"WorkflowsOnTeams"> | number;
  teamId?: Prisma.IntWithAggregatesFilter<"WorkflowsOnTeams"> | number;
};

export type WorkflowsOnTeamsCreateInput = {
  workflow: Prisma.WorkflowCreateNestedOneWithoutActiveOnTeamsInput;
  team: Prisma.TeamCreateNestedOneWithoutActiveOrgWorkflowsInput;
};

export type WorkflowsOnTeamsUncheckedCreateInput = {
  id?: number;
  workflowId: number;
  teamId: number;
};

export type WorkflowsOnTeamsUpdateInput = {
  workflow?: Prisma.WorkflowUpdateOneRequiredWithoutActiveOnTeamsNestedInput;
  team?: Prisma.TeamUpdateOneRequiredWithoutActiveOrgWorkflowsNestedInput;
};

export type WorkflowsOnTeamsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnTeamsCreateManyInput = {
  id?: number;
  workflowId: number;
  teamId: number;
};

export type WorkflowsOnTeamsUpdateManyMutationInput = {};

export type WorkflowsOnTeamsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnTeamsListRelationFilter = {
  every?: Prisma.WorkflowsOnTeamsWhereInput;
  some?: Prisma.WorkflowsOnTeamsWhereInput;
  none?: Prisma.WorkflowsOnTeamsWhereInput;
};

export type WorkflowsOnTeamsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type WorkflowsOnTeamsWorkflowIdTeamIdCompoundUniqueInput = {
  workflowId: number;
  teamId: number;
};

export type WorkflowsOnTeamsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type WorkflowsOnTeamsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type WorkflowsOnTeamsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type WorkflowsOnTeamsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type WorkflowsOnTeamsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  workflowId?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
};

export type WorkflowsOnTeamsCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutTeamInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutTeamInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyTeamInputEnvelope;
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
};

export type WorkflowsOnTeamsUncheckedCreateNestedManyWithoutTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutTeamInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutTeamInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyTeamInputEnvelope;
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
};

export type WorkflowsOnTeamsUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutTeamInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutTeamInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyTeamInputEnvelope;
  set?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutTeamInput
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.WorkflowsOnTeamsScalarWhereInput | Prisma.WorkflowsOnTeamsScalarWhereInput[];
};

export type WorkflowsOnTeamsUncheckedUpdateManyWithoutTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutTeamInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutTeamInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutTeamInput[];
  upsert?:
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutTeamInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyTeamInputEnvelope;
  set?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutTeamInput
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutTeamInput[];
  updateMany?:
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutTeamInput
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutTeamInput[];
  deleteMany?: Prisma.WorkflowsOnTeamsScalarWhereInput | Prisma.WorkflowsOnTeamsScalarWhereInput[];
};

export type WorkflowsOnTeamsCreateNestedManyWithoutWorkflowInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyWorkflowInputEnvelope;
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
};

export type WorkflowsOnTeamsUncheckedCreateNestedManyWithoutWorkflowInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyWorkflowInputEnvelope;
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
};

export type WorkflowsOnTeamsUpdateManyWithoutWorkflowNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput[];
  upsert?:
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyWorkflowInputEnvelope;
  set?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutWorkflowInput[];
  updateMany?:
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutWorkflowInput[];
  deleteMany?: Prisma.WorkflowsOnTeamsScalarWhereInput | Prisma.WorkflowsOnTeamsScalarWhereInput[];
};

export type WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput,
        Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput
      >
    | Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput[]
    | Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput[];
  connectOrCreate?:
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput[];
  upsert?:
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsUpsertWithWhereUniqueWithoutWorkflowInput[];
  createMany?: Prisma.WorkflowsOnTeamsCreateManyWorkflowInputEnvelope;
  set?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  disconnect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  delete?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  connect?: Prisma.WorkflowsOnTeamsWhereUniqueInput | Prisma.WorkflowsOnTeamsWhereUniqueInput[];
  update?:
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsUpdateWithWhereUniqueWithoutWorkflowInput[];
  updateMany?:
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutWorkflowInput
    | Prisma.WorkflowsOnTeamsUpdateManyWithWhereWithoutWorkflowInput[];
  deleteMany?: Prisma.WorkflowsOnTeamsScalarWhereInput | Prisma.WorkflowsOnTeamsScalarWhereInput[];
};

export type WorkflowsOnTeamsCreateWithoutTeamInput = {
  workflow: Prisma.WorkflowCreateNestedOneWithoutActiveOnTeamsInput;
};

export type WorkflowsOnTeamsUncheckedCreateWithoutTeamInput = {
  id?: number;
  workflowId: number;
};

export type WorkflowsOnTeamsCreateOrConnectWithoutTeamInput = {
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowsOnTeamsCreateWithoutTeamInput,
    Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput
  >;
};

export type WorkflowsOnTeamsCreateManyTeamInputEnvelope = {
  data: Prisma.WorkflowsOnTeamsCreateManyTeamInput | Prisma.WorkflowsOnTeamsCreateManyTeamInput[];
  skipDuplicates?: boolean;
};

export type WorkflowsOnTeamsUpsertWithWhereUniqueWithoutTeamInput = {
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateWithoutTeamInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateWithoutTeamInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowsOnTeamsCreateWithoutTeamInput,
    Prisma.WorkflowsOnTeamsUncheckedCreateWithoutTeamInput
  >;
};

export type WorkflowsOnTeamsUpdateWithWhereUniqueWithoutTeamInput = {
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateWithoutTeamInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateWithoutTeamInput
  >;
};

export type WorkflowsOnTeamsUpdateManyWithWhereWithoutTeamInput = {
  where: Prisma.WorkflowsOnTeamsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateManyMutationInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutTeamInput
  >;
};

export type WorkflowsOnTeamsScalarWhereInput = {
  AND?: Prisma.WorkflowsOnTeamsScalarWhereInput | Prisma.WorkflowsOnTeamsScalarWhereInput[];
  OR?: Prisma.WorkflowsOnTeamsScalarWhereInput[];
  NOT?: Prisma.WorkflowsOnTeamsScalarWhereInput | Prisma.WorkflowsOnTeamsScalarWhereInput[];
  id?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
  workflowId?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
  teamId?: Prisma.IntFilter<"WorkflowsOnTeams"> | number;
};

export type WorkflowsOnTeamsCreateWithoutWorkflowInput = {
  team: Prisma.TeamCreateNestedOneWithoutActiveOrgWorkflowsInput;
};

export type WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput = {
  id?: number;
  teamId: number;
};

export type WorkflowsOnTeamsCreateOrConnectWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput,
    Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput
  >;
};

export type WorkflowsOnTeamsCreateManyWorkflowInputEnvelope = {
  data: Prisma.WorkflowsOnTeamsCreateManyWorkflowInput | Prisma.WorkflowsOnTeamsCreateManyWorkflowInput[];
  skipDuplicates?: boolean;
};

export type WorkflowsOnTeamsUpsertWithWhereUniqueWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateWithoutWorkflowInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateWithoutWorkflowInput
  >;
  create: Prisma.XOR<
    Prisma.WorkflowsOnTeamsCreateWithoutWorkflowInput,
    Prisma.WorkflowsOnTeamsUncheckedCreateWithoutWorkflowInput
  >;
};

export type WorkflowsOnTeamsUpdateWithWhereUniqueWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateWithoutWorkflowInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateWithoutWorkflowInput
  >;
};

export type WorkflowsOnTeamsUpdateManyWithWhereWithoutWorkflowInput = {
  where: Prisma.WorkflowsOnTeamsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateManyMutationInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowInput
  >;
};

export type WorkflowsOnTeamsCreateManyTeamInput = {
  id?: number;
  workflowId: number;
};

export type WorkflowsOnTeamsUpdateWithoutTeamInput = {
  workflow?: Prisma.WorkflowUpdateOneRequiredWithoutActiveOnTeamsNestedInput;
};

export type WorkflowsOnTeamsUncheckedUpdateWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnTeamsUncheckedUpdateManyWithoutTeamInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  workflowId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnTeamsCreateManyWorkflowInput = {
  id?: number;
  teamId: number;
};

export type WorkflowsOnTeamsUpdateWithoutWorkflowInput = {
  team?: Prisma.TeamUpdateOneRequiredWithoutActiveOrgWorkflowsNestedInput;
};

export type WorkflowsOnTeamsUncheckedUpdateWithoutWorkflowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnTeamsUncheckedUpdateManyWithoutWorkflowInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  teamId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type WorkflowsOnTeamsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    teamId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnTeams"]
>;

export type WorkflowsOnTeamsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    teamId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnTeams"]
>;

export type WorkflowsOnTeamsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    workflowId?: boolean;
    teamId?: boolean;
    workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
    team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["workflowsOnTeams"]
>;

export type WorkflowsOnTeamsSelectScalar = {
  id?: boolean;
  workflowId?: boolean;
  teamId?: boolean;
};

export type WorkflowsOnTeamsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<"id" | "workflowId" | "teamId", ExtArgs["result"]["workflowsOnTeams"]>;
export type WorkflowsOnTeamsInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type WorkflowsOnTeamsIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};
export type WorkflowsOnTeamsIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  workflow?: boolean | Prisma.WorkflowDefaultArgs<ExtArgs>;
  team?: boolean | Prisma.TeamDefaultArgs<ExtArgs>;
};

export type $WorkflowsOnTeamsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "WorkflowsOnTeams";
  objects: {
    workflow: Prisma.$WorkflowPayload<ExtArgs>;
    team: Prisma.$TeamPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      workflowId: number;
      teamId: number;
    },
    ExtArgs["result"]["workflowsOnTeams"]
  >;
  composites: {};
};

export type WorkflowsOnTeamsGetPayload<S extends boolean | null | undefined | WorkflowsOnTeamsDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$WorkflowsOnTeamsPayload, S>;

export type WorkflowsOnTeamsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<WorkflowsOnTeamsFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: WorkflowsOnTeamsCountAggregateInputType | true;
};

export interface WorkflowsOnTeamsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["WorkflowsOnTeams"];
    meta: { name: "WorkflowsOnTeams" };
  };
  /**
   * Find zero or one WorkflowsOnTeams that matches the filter.
   * @param {WorkflowsOnTeamsFindUniqueArgs} args - Arguments to find a WorkflowsOnTeams
   * @example
   * // Get one WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkflowsOnTeamsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one WorkflowsOnTeams that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkflowsOnTeamsFindUniqueOrThrowArgs} args - Arguments to find a WorkflowsOnTeams
   * @example
   * // Get one WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkflowsOnTeamsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkflowsOnTeams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsFindFirstArgs} args - Arguments to find a WorkflowsOnTeams
   * @example
   * // Get one WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkflowsOnTeamsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnTeamsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkflowsOnTeams that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsFindFirstOrThrowArgs} args - Arguments to find a WorkflowsOnTeams
   * @example
   * // Get one WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkflowsOnTeamsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnTeamsFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more WorkflowsOnTeams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findMany()
   *
   * // Get first 10 WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const workflowsOnTeamsWithIdOnly = await prisma.workflowsOnTeams.findMany({ select: { id: true } })
   *
   */
  findMany<T extends WorkflowsOnTeamsFindManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnTeamsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$WorkflowsOnTeamsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a WorkflowsOnTeams.
   * @param {WorkflowsOnTeamsCreateArgs} args - Arguments to create a WorkflowsOnTeams.
   * @example
   * // Create one WorkflowsOnTeams
   * const WorkflowsOnTeams = await prisma.workflowsOnTeams.create({
   *   data: {
   *     // ... data to create a WorkflowsOnTeams
   *   }
   * })
   *
   */
  create<T extends WorkflowsOnTeamsCreateArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowsOnTeamsPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many WorkflowsOnTeams.
   * @param {WorkflowsOnTeamsCreateManyArgs} args - Arguments to create many WorkflowsOnTeams.
   * @example
   * // Create many WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WorkflowsOnTeamsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnTeamsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many WorkflowsOnTeams and returns the data saved in the database.
   * @param {WorkflowsOnTeamsCreateManyAndReturnArgs} args - Arguments to create many WorkflowsOnTeams.
   * @example
   * // Create many WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many WorkflowsOnTeams and only return the `id`
   * const workflowsOnTeamsWithIdOnly = await prisma.workflowsOnTeams.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WorkflowsOnTeamsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnTeamsCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a WorkflowsOnTeams.
   * @param {WorkflowsOnTeamsDeleteArgs} args - Arguments to delete one WorkflowsOnTeams.
   * @example
   * // Delete one WorkflowsOnTeams
   * const WorkflowsOnTeams = await prisma.workflowsOnTeams.delete({
   *   where: {
   *     // ... filter to delete one WorkflowsOnTeams
   *   }
   * })
   *
   */
  delete<T extends WorkflowsOnTeamsDeleteArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowsOnTeamsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one WorkflowsOnTeams.
   * @param {WorkflowsOnTeamsUpdateArgs} args - Arguments to update one WorkflowsOnTeams.
   * @example
   * // Update one WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WorkflowsOnTeamsUpdateArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowsOnTeamsPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more WorkflowsOnTeams.
   * @param {WorkflowsOnTeamsDeleteManyArgs} args - Arguments to filter WorkflowsOnTeams to delete.
   * @example
   * // Delete a few WorkflowsOnTeams
   * const { count } = await prisma.workflowsOnTeams.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WorkflowsOnTeamsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WorkflowsOnTeamsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkflowsOnTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WorkflowsOnTeamsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkflowsOnTeams and returns the data updated in the database.
   * @param {WorkflowsOnTeamsUpdateManyAndReturnArgs} args - Arguments to update many WorkflowsOnTeams.
   * @example
   * // Update many WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more WorkflowsOnTeams and only return the `id`
   * const workflowsOnTeamsWithIdOnly = await prisma.workflowsOnTeams.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WorkflowsOnTeamsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkflowsOnTeamsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one WorkflowsOnTeams.
   * @param {WorkflowsOnTeamsUpsertArgs} args - Arguments to update or create a WorkflowsOnTeams.
   * @example
   * // Update or create a WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.upsert({
   *   create: {
   *     // ... data to create a WorkflowsOnTeams
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkflowsOnTeams we want to update
   *   }
   * })
   */
  upsert<T extends WorkflowsOnTeamsUpsertArgs>(
    args: Prisma.SelectSubset<T, WorkflowsOnTeamsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowsOnTeamsClient<
    runtime.Types.Result.GetResult<Prisma.$WorkflowsOnTeamsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of WorkflowsOnTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsCountArgs} args - Arguments to filter WorkflowsOnTeams to count.
   * @example
   * // Count the number of WorkflowsOnTeams
   * const count = await prisma.workflowsOnTeams.count({
   *   where: {
   *     // ... the filter for the WorkflowsOnTeams we want to count
   *   }
   * })
   **/
  count<T extends WorkflowsOnTeamsCountArgs>(
    args?: Prisma.Subset<T, WorkflowsOnTeamsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], WorkflowsOnTeamsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a WorkflowsOnTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WorkflowsOnTeamsAggregateArgs>(
    args: Prisma.Subset<T, WorkflowsOnTeamsAggregateArgs>
  ): Prisma.PrismaPromise<GetWorkflowsOnTeamsAggregateType<T>>;

  /**
   * Group by WorkflowsOnTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkflowsOnTeamsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WorkflowsOnTeamsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkflowsOnTeamsGroupByArgs["orderBy"] }
      : { orderBy?: WorkflowsOnTeamsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
        }[HavingFields]
      : "take" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : "skip" extends Prisma.Keys<T>
      ? "orderBy" extends Prisma.Keys<T>
        ? ByValid extends Prisma.True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends Prisma.True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
        }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, WorkflowsOnTeamsGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetWorkflowsOnTeamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the WorkflowsOnTeams model
   */
  readonly fields: WorkflowsOnTeamsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkflowsOnTeams.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkflowsOnTeamsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  workflow<T extends Prisma.WorkflowDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WorkflowDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__WorkflowClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkflowPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  team<T extends Prisma.TeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TeamDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    | runtime.Types.Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WorkflowsOnTeams model
 */
export interface WorkflowsOnTeamsFieldRefs {
  readonly id: Prisma.FieldRef<"WorkflowsOnTeams", "Int">;
  readonly workflowId: Prisma.FieldRef<"WorkflowsOnTeams", "Int">;
  readonly teamId: Prisma.FieldRef<"WorkflowsOnTeams", "Int">;
}

// Custom InputTypes
/**
 * WorkflowsOnTeams findUnique
 */
export type WorkflowsOnTeamsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnTeams to fetch.
   */
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
};

/**
 * WorkflowsOnTeams findUniqueOrThrow
 */
export type WorkflowsOnTeamsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnTeams to fetch.
   */
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
};

/**
 * WorkflowsOnTeams findFirst
 */
export type WorkflowsOnTeamsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnTeams to fetch.
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnTeams to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkflowsOnTeams.
   */
  cursor?: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkflowsOnTeams.
   */
  distinct?: Prisma.WorkflowsOnTeamsScalarFieldEnum | Prisma.WorkflowsOnTeamsScalarFieldEnum[];
};

/**
 * WorkflowsOnTeams findFirstOrThrow
 */
export type WorkflowsOnTeamsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnTeams to fetch.
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnTeams to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkflowsOnTeams.
   */
  cursor?: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkflowsOnTeams.
   */
  distinct?: Prisma.WorkflowsOnTeamsScalarFieldEnum | Prisma.WorkflowsOnTeamsScalarFieldEnum[];
};

/**
 * WorkflowsOnTeams findMany
 */
export type WorkflowsOnTeamsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * Filter, which WorkflowsOnTeams to fetch.
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkflowsOnTeams to fetch.
   */
  orderBy?:
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput
    | Prisma.WorkflowsOnTeamsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing WorkflowsOnTeams.
   */
  cursor?: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` WorkflowsOnTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkflowsOnTeams.
   */
  skip?: number;
  distinct?: Prisma.WorkflowsOnTeamsScalarFieldEnum | Prisma.WorkflowsOnTeamsScalarFieldEnum[];
};

/**
 * WorkflowsOnTeams create
 */
export type WorkflowsOnTeamsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * The data needed to create a WorkflowsOnTeams.
   */
  data: Prisma.XOR<Prisma.WorkflowsOnTeamsCreateInput, Prisma.WorkflowsOnTeamsUncheckedCreateInput>;
};

/**
 * WorkflowsOnTeams createMany
 */
export type WorkflowsOnTeamsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many WorkflowsOnTeams.
   */
  data: Prisma.WorkflowsOnTeamsCreateManyInput | Prisma.WorkflowsOnTeamsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WorkflowsOnTeams createManyAndReturn
 */
export type WorkflowsOnTeamsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * The data used to create many WorkflowsOnTeams.
   */
  data: Prisma.WorkflowsOnTeamsCreateManyInput | Prisma.WorkflowsOnTeamsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkflowsOnTeams update
 */
export type WorkflowsOnTeamsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * The data needed to update a WorkflowsOnTeams.
   */
  data: Prisma.XOR<Prisma.WorkflowsOnTeamsUpdateInput, Prisma.WorkflowsOnTeamsUncheckedUpdateInput>;
  /**
   * Choose, which WorkflowsOnTeams to update.
   */
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
};

/**
 * WorkflowsOnTeams updateMany
 */
export type WorkflowsOnTeamsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update WorkflowsOnTeams.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateManyMutationInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkflowsOnTeams to update
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * Limit how many WorkflowsOnTeams to update.
   */
  limit?: number;
};

/**
 * WorkflowsOnTeams updateManyAndReturn
 */
export type WorkflowsOnTeamsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * The data used to update WorkflowsOnTeams.
   */
  data: Prisma.XOR<
    Prisma.WorkflowsOnTeamsUpdateManyMutationInput,
    Prisma.WorkflowsOnTeamsUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkflowsOnTeams to update
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * Limit how many WorkflowsOnTeams to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkflowsOnTeams upsert
 */
export type WorkflowsOnTeamsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * The filter to search for the WorkflowsOnTeams to update in case it exists.
   */
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
  /**
   * In case the WorkflowsOnTeams found by the `where` argument doesn't exist, create a new WorkflowsOnTeams with this data.
   */
  create: Prisma.XOR<Prisma.WorkflowsOnTeamsCreateInput, Prisma.WorkflowsOnTeamsUncheckedCreateInput>;
  /**
   * In case the WorkflowsOnTeams was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkflowsOnTeamsUpdateInput, Prisma.WorkflowsOnTeamsUncheckedUpdateInput>;
};

/**
 * WorkflowsOnTeams delete
 */
export type WorkflowsOnTeamsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
  /**
   * Filter which WorkflowsOnTeams to delete.
   */
  where: Prisma.WorkflowsOnTeamsWhereUniqueInput;
};

/**
 * WorkflowsOnTeams deleteMany
 */
export type WorkflowsOnTeamsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which WorkflowsOnTeams to delete
   */
  where?: Prisma.WorkflowsOnTeamsWhereInput;
  /**
   * Limit how many WorkflowsOnTeams to delete.
   */
  limit?: number;
};

/**
 * WorkflowsOnTeams without action
 */
export type WorkflowsOnTeamsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the WorkflowsOnTeams
   */
  select?: Prisma.WorkflowsOnTeamsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkflowsOnTeams
   */
  omit?: Prisma.WorkflowsOnTeamsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkflowsOnTeamsInclude<ExtArgs> | null;
};
