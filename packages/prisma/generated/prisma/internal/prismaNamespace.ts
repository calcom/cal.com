/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */
import * as runtime from "@prisma/client/runtime/client";

import type * as Prisma from "../models";
import { type PrismaClient } from "./class";

export type * from "../models";

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>;
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>;
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
  client: string;
  engine: string;
};

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
  select: any;
  include: any;
};

type SelectAndOmit = {
  select: any;
  omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
  ? "Please either choose `select` or `include`."
  : T extends SelectAndOmit
  ? "Please either choose `select` or `omit`."
  : {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
  ? U extends object
    ? (Without<T, U> & U) | (Without<U, T> & T)
    : U
  : T;

/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
  }[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>;
  0: EitherLoose<O, K>;
}[strict];

export type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown
  ? _Either<O, K, strict>
  : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (U extends unknown ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>;
    }
  >
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>;
  0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K];
    } & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ?
        | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>;

type _Strict<U, _U = U> = U extends unknown
  ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
  : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
  0: 1;
  1: 0;
}[B];

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0;

export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0;
    1: 1;
  };
  1: {
    0: 1;
    1: 1;
  };
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never;
    }
  : never;

type FieldPaths<T, U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">> = IsObject<T> extends True
  ? U
  : T;

export type GetHavingFields<T> = {
  [K in keyof T]: Or<Or<Extends<"OR", K>, Extends<"AND", K>>, Extends<"NOT", K>> extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<
  T,
  MaybeTupleToUnion<K>
>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>;

export const ModelName = {
  Host: "Host",
  HostGroup: "HostGroup",
  CalVideoSettings: "CalVideoSettings",
  EventType: "EventType",
  Credential: "Credential",
  DestinationCalendar: "DestinationCalendar",
  UserPassword: "UserPassword",
  TravelSchedule: "TravelSchedule",
  User: "User",
  NotificationsSubscriptions: "NotificationsSubscriptions",
  Profile: "Profile",
  Team: "Team",
  CreditBalance: "CreditBalance",
  CreditPurchaseLog: "CreditPurchaseLog",
  CreditExpenseLog: "CreditExpenseLog",
  OrganizationSettings: "OrganizationSettings",
  Membership: "Membership",
  VerificationToken: "VerificationToken",
  InstantMeetingToken: "InstantMeetingToken",
  BookingReference: "BookingReference",
  Attendee: "Attendee",
  Booking: "Booking",
  Tracking: "Tracking",
  Schedule: "Schedule",
  Availability: "Availability",
  SelectedCalendar: "SelectedCalendar",
  EventTypeCustomInput: "EventTypeCustomInput",
  ResetPasswordRequest: "ResetPasswordRequest",
  ReminderMail: "ReminderMail",
  Payment: "Payment",
  Webhook: "Webhook",
  Impersonations: "Impersonations",
  ApiKey: "ApiKey",
  RateLimit: "RateLimit",
  HashedLink: "HashedLink",
  Account: "Account",
  Session: "Session",
  App: "App",
  App_RoutingForms_Form: "App_RoutingForms_Form",
  App_RoutingForms_FormResponse: "App_RoutingForms_FormResponse",
  App_RoutingForms_QueuedFormResponse: "App_RoutingForms_QueuedFormResponse",
  RoutingFormResponseField: "RoutingFormResponseField",
  RoutingFormResponseDenormalized: "RoutingFormResponseDenormalized",
  Feedback: "Feedback",
  WorkflowStep: "WorkflowStep",
  Workflow: "Workflow",
  AIPhoneCallConfiguration: "AIPhoneCallConfiguration",
  WorkflowsOnEventTypes: "WorkflowsOnEventTypes",
  WorkflowsOnRoutingForms: "WorkflowsOnRoutingForms",
  WorkflowsOnTeams: "WorkflowsOnTeams",
  Deployment: "Deployment",
  WorkflowReminder: "WorkflowReminder",
  WebhookScheduledTriggers: "WebhookScheduledTriggers",
  BookingSeat: "BookingSeat",
  VerifiedNumber: "VerifiedNumber",
  VerifiedEmail: "VerifiedEmail",
  Feature: "Feature",
  UserFeatures: "UserFeatures",
  TeamFeatures: "TeamFeatures",
  SelectedSlots: "SelectedSlots",
  OAuthClient: "OAuthClient",
  AccessCode: "AccessCode",
  BookingDenormalized: "BookingDenormalized",
  CalendarCache: "CalendarCache",
  TempOrgRedirect: "TempOrgRedirect",
  Avatar: "Avatar",
  OutOfOfficeEntry: "OutOfOfficeEntry",
  OutOfOfficeReason: "OutOfOfficeReason",
  PlatformOAuthClient: "PlatformOAuthClient",
  PlatformAuthorizationToken: "PlatformAuthorizationToken",
  AccessToken: "AccessToken",
  RefreshToken: "RefreshToken",
  DSyncData: "DSyncData",
  DSyncTeamGroupMapping: "DSyncTeamGroupMapping",
  SecondaryEmail: "SecondaryEmail",
  Task: "Task",
  ManagedOrganization: "ManagedOrganization",
  PlatformBilling: "PlatformBilling",
  AttributeOption: "AttributeOption",
  Attribute: "Attribute",
  AttributeToUser: "AttributeToUser",
  AssignmentReason: "AssignmentReason",
  DelegationCredential: "DelegationCredential",
  DomainWideDelegation: "DomainWideDelegation",
  WorkspacePlatform: "WorkspacePlatform",
  EventTypeTranslation: "EventTypeTranslation",
  Watchlist: "Watchlist",
  WatchlistAudit: "WatchlistAudit",
  WatchlistEventAudit: "WatchlistEventAudit",
  BookingReport: "BookingReport",
  OrganizationOnboarding: "OrganizationOnboarding",
  App_RoutingForms_IncompleteBookingActions: "App_RoutingForms_IncompleteBookingActions",
  InternalNotePreset: "InternalNotePreset",
  FilterSegment: "FilterSegment",
  UserFilterSegmentPreference: "UserFilterSegmentPreference",
  BookingInternalNote: "BookingInternalNote",
  WorkflowOptOutContact: "WorkflowOptOutContact",
  Role: "Role",
  RolePermission: "RolePermission",
  Agent: "Agent",
  CalAiPhoneNumber: "CalAiPhoneNumber",
  TeamBilling: "TeamBilling",
  OrganizationBilling: "OrganizationBilling",
  CalendarCacheEvent: "CalendarCacheEvent",
  RoutingFormResponse: "RoutingFormResponse",
  BookingTimeStatus: "BookingTimeStatus",
  BookingTimeStatusDenormalized: "BookingTimeStatusDenormalized",
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<GlobalOmitOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<this["params"]["extArgs"], GlobalOmitOptions>;
}

export type TypeMap<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions;
  };
  meta: {
    modelProps:
      | "host"
      | "hostGroup"
      | "calVideoSettings"
      | "eventType"
      | "credential"
      | "destinationCalendar"
      | "userPassword"
      | "travelSchedule"
      | "user"
      | "notificationsSubscriptions"
      | "profile"
      | "team"
      | "creditBalance"
      | "creditPurchaseLog"
      | "creditExpenseLog"
      | "organizationSettings"
      | "membership"
      | "verificationToken"
      | "instantMeetingToken"
      | "bookingReference"
      | "attendee"
      | "booking"
      | "tracking"
      | "schedule"
      | "availability"
      | "selectedCalendar"
      | "eventTypeCustomInput"
      | "resetPasswordRequest"
      | "reminderMail"
      | "payment"
      | "webhook"
      | "impersonations"
      | "apiKey"
      | "rateLimit"
      | "hashedLink"
      | "account"
      | "session"
      | "app"
      | "app_RoutingForms_Form"
      | "app_RoutingForms_FormResponse"
      | "app_RoutingForms_QueuedFormResponse"
      | "routingFormResponseField"
      | "routingFormResponseDenormalized"
      | "feedback"
      | "workflowStep"
      | "workflow"
      | "aIPhoneCallConfiguration"
      | "workflowsOnEventTypes"
      | "workflowsOnRoutingForms"
      | "workflowsOnTeams"
      | "deployment"
      | "workflowReminder"
      | "webhookScheduledTriggers"
      | "bookingSeat"
      | "verifiedNumber"
      | "verifiedEmail"
      | "feature"
      | "userFeatures"
      | "teamFeatures"
      | "selectedSlots"
      | "oAuthClient"
      | "accessCode"
      | "bookingDenormalized"
      | "calendarCache"
      | "tempOrgRedirect"
      | "avatar"
      | "outOfOfficeEntry"
      | "outOfOfficeReason"
      | "platformOAuthClient"
      | "platformAuthorizationToken"
      | "accessToken"
      | "refreshToken"
      | "dSyncData"
      | "dSyncTeamGroupMapping"
      | "secondaryEmail"
      | "task"
      | "managedOrganization"
      | "platformBilling"
      | "attributeOption"
      | "attribute"
      | "attributeToUser"
      | "assignmentReason"
      | "delegationCredential"
      | "domainWideDelegation"
      | "workspacePlatform"
      | "eventTypeTranslation"
      | "watchlist"
      | "watchlistAudit"
      | "watchlistEventAudit"
      | "bookingReport"
      | "organizationOnboarding"
      | "app_RoutingForms_IncompleteBookingActions"
      | "internalNotePreset"
      | "filterSegment"
      | "userFilterSegmentPreference"
      | "bookingInternalNote"
      | "workflowOptOutContact"
      | "role"
      | "rolePermission"
      | "agent"
      | "calAiPhoneNumber"
      | "teamBilling"
      | "organizationBilling"
      | "calendarCacheEvent"
      | "routingFormResponse"
      | "bookingTimeStatus"
      | "bookingTimeStatusDenormalized";
    txIsolationLevel: TransactionIsolationLevel;
  };
  model: {
    Host: {
      payload: Prisma.$HostPayload<ExtArgs>;
      fields: Prisma.HostFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.HostFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.HostFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>;
        };
        findFirst: {
          args: Prisma.HostFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.HostFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>;
        };
        findMany: {
          args: Prisma.HostFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>[];
        };
        create: {
          args: Prisma.HostCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>;
        };
        createMany: {
          args: Prisma.HostCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.HostCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>[];
        };
        delete: {
          args: Prisma.HostDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>;
        };
        update: {
          args: Prisma.HostUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>;
        };
        deleteMany: {
          args: Prisma.HostDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.HostUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.HostUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>[];
        };
        upsert: {
          args: Prisma.HostUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostPayload>;
        };
        aggregate: {
          args: Prisma.HostAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateHost>;
        };
        groupBy: {
          args: Prisma.HostGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.HostGroupByOutputType>[];
        };
        count: {
          args: Prisma.HostCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.HostCountAggregateOutputType> | number;
        };
      };
    };
    HostGroup: {
      payload: Prisma.$HostGroupPayload<ExtArgs>;
      fields: Prisma.HostGroupFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.HostGroupFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.HostGroupFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>;
        };
        findFirst: {
          args: Prisma.HostGroupFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.HostGroupFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>;
        };
        findMany: {
          args: Prisma.HostGroupFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>[];
        };
        create: {
          args: Prisma.HostGroupCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>;
        };
        createMany: {
          args: Prisma.HostGroupCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.HostGroupCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>[];
        };
        delete: {
          args: Prisma.HostGroupDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>;
        };
        update: {
          args: Prisma.HostGroupUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>;
        };
        deleteMany: {
          args: Prisma.HostGroupDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.HostGroupUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.HostGroupUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>[];
        };
        upsert: {
          args: Prisma.HostGroupUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HostGroupPayload>;
        };
        aggregate: {
          args: Prisma.HostGroupAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateHostGroup>;
        };
        groupBy: {
          args: Prisma.HostGroupGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.HostGroupGroupByOutputType>[];
        };
        count: {
          args: Prisma.HostGroupCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.HostGroupCountAggregateOutputType> | number;
        };
      };
    };
    CalVideoSettings: {
      payload: Prisma.$CalVideoSettingsPayload<ExtArgs>;
      fields: Prisma.CalVideoSettingsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CalVideoSettingsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CalVideoSettingsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>;
        };
        findFirst: {
          args: Prisma.CalVideoSettingsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CalVideoSettingsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>;
        };
        findMany: {
          args: Prisma.CalVideoSettingsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>[];
        };
        create: {
          args: Prisma.CalVideoSettingsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>;
        };
        createMany: {
          args: Prisma.CalVideoSettingsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CalVideoSettingsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>[];
        };
        delete: {
          args: Prisma.CalVideoSettingsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>;
        };
        update: {
          args: Prisma.CalVideoSettingsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>;
        };
        deleteMany: {
          args: Prisma.CalVideoSettingsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CalVideoSettingsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CalVideoSettingsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>[];
        };
        upsert: {
          args: Prisma.CalVideoSettingsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalVideoSettingsPayload>;
        };
        aggregate: {
          args: Prisma.CalVideoSettingsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCalVideoSettings>;
        };
        groupBy: {
          args: Prisma.CalVideoSettingsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalVideoSettingsGroupByOutputType>[];
        };
        count: {
          args: Prisma.CalVideoSettingsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalVideoSettingsCountAggregateOutputType> | number;
        };
      };
    };
    EventType: {
      payload: Prisma.$EventTypePayload<ExtArgs>;
      fields: Prisma.EventTypeFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EventTypeFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EventTypeFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>;
        };
        findFirst: {
          args: Prisma.EventTypeFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EventTypeFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>;
        };
        findMany: {
          args: Prisma.EventTypeFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>[];
        };
        create: {
          args: Prisma.EventTypeCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>;
        };
        createMany: {
          args: Prisma.EventTypeCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EventTypeCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>[];
        };
        delete: {
          args: Prisma.EventTypeDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>;
        };
        update: {
          args: Prisma.EventTypeUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>;
        };
        deleteMany: {
          args: Prisma.EventTypeDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EventTypeUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EventTypeUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>[];
        };
        upsert: {
          args: Prisma.EventTypeUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypePayload>;
        };
        aggregate: {
          args: Prisma.EventTypeAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEventType>;
        };
        groupBy: {
          args: Prisma.EventTypeGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventTypeGroupByOutputType>[];
        };
        count: {
          args: Prisma.EventTypeCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventTypeCountAggregateOutputType> | number;
        };
      };
    };
    Credential: {
      payload: Prisma.$CredentialPayload<ExtArgs>;
      fields: Prisma.CredentialFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CredentialFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CredentialFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>;
        };
        findFirst: {
          args: Prisma.CredentialFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CredentialFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>;
        };
        findMany: {
          args: Prisma.CredentialFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>[];
        };
        create: {
          args: Prisma.CredentialCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>;
        };
        createMany: {
          args: Prisma.CredentialCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CredentialCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>[];
        };
        delete: {
          args: Prisma.CredentialDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>;
        };
        update: {
          args: Prisma.CredentialUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>;
        };
        deleteMany: {
          args: Prisma.CredentialDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CredentialUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CredentialUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>[];
        };
        upsert: {
          args: Prisma.CredentialUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CredentialPayload>;
        };
        aggregate: {
          args: Prisma.CredentialAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCredential>;
        };
        groupBy: {
          args: Prisma.CredentialGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CredentialGroupByOutputType>[];
        };
        count: {
          args: Prisma.CredentialCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CredentialCountAggregateOutputType> | number;
        };
      };
    };
    DestinationCalendar: {
      payload: Prisma.$DestinationCalendarPayload<ExtArgs>;
      fields: Prisma.DestinationCalendarFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DestinationCalendarFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DestinationCalendarFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>;
        };
        findFirst: {
          args: Prisma.DestinationCalendarFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DestinationCalendarFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>;
        };
        findMany: {
          args: Prisma.DestinationCalendarFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>[];
        };
        create: {
          args: Prisma.DestinationCalendarCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>;
        };
        createMany: {
          args: Prisma.DestinationCalendarCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DestinationCalendarCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>[];
        };
        delete: {
          args: Prisma.DestinationCalendarDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>;
        };
        update: {
          args: Prisma.DestinationCalendarUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>;
        };
        deleteMany: {
          args: Prisma.DestinationCalendarDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DestinationCalendarUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DestinationCalendarUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>[];
        };
        upsert: {
          args: Prisma.DestinationCalendarUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DestinationCalendarPayload>;
        };
        aggregate: {
          args: Prisma.DestinationCalendarAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDestinationCalendar>;
        };
        groupBy: {
          args: Prisma.DestinationCalendarGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DestinationCalendarGroupByOutputType>[];
        };
        count: {
          args: Prisma.DestinationCalendarCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DestinationCalendarCountAggregateOutputType> | number;
        };
      };
    };
    UserPassword: {
      payload: Prisma.$UserPasswordPayload<ExtArgs>;
      fields: Prisma.UserPasswordFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserPasswordFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserPasswordFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>;
        };
        findFirst: {
          args: Prisma.UserPasswordFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserPasswordFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>;
        };
        findMany: {
          args: Prisma.UserPasswordFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>[];
        };
        create: {
          args: Prisma.UserPasswordCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>;
        };
        createMany: {
          args: Prisma.UserPasswordCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserPasswordCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>[];
        };
        delete: {
          args: Prisma.UserPasswordDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>;
        };
        update: {
          args: Prisma.UserPasswordUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>;
        };
        deleteMany: {
          args: Prisma.UserPasswordDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserPasswordUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserPasswordUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>[];
        };
        upsert: {
          args: Prisma.UserPasswordUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPasswordPayload>;
        };
        aggregate: {
          args: Prisma.UserPasswordAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserPassword>;
        };
        groupBy: {
          args: Prisma.UserPasswordGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserPasswordGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserPasswordCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserPasswordCountAggregateOutputType> | number;
        };
      };
    };
    TravelSchedule: {
      payload: Prisma.$TravelSchedulePayload<ExtArgs>;
      fields: Prisma.TravelScheduleFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TravelScheduleFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TravelScheduleFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>;
        };
        findFirst: {
          args: Prisma.TravelScheduleFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TravelScheduleFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>;
        };
        findMany: {
          args: Prisma.TravelScheduleFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>[];
        };
        create: {
          args: Prisma.TravelScheduleCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>;
        };
        createMany: {
          args: Prisma.TravelScheduleCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TravelScheduleCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>[];
        };
        delete: {
          args: Prisma.TravelScheduleDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>;
        };
        update: {
          args: Prisma.TravelScheduleUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>;
        };
        deleteMany: {
          args: Prisma.TravelScheduleDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TravelScheduleUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TravelScheduleUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>[];
        };
        upsert: {
          args: Prisma.TravelScheduleUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TravelSchedulePayload>;
        };
        aggregate: {
          args: Prisma.TravelScheduleAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTravelSchedule>;
        };
        groupBy: {
          args: Prisma.TravelScheduleGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TravelScheduleGroupByOutputType>[];
        };
        count: {
          args: Prisma.TravelScheduleCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TravelScheduleCountAggregateOutputType> | number;
        };
      };
    };
    User: {
      payload: Prisma.$UserPayload<ExtArgs>;
      fields: Prisma.UserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>;
        };
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number;
        };
      };
    };
    NotificationsSubscriptions: {
      payload: Prisma.$NotificationsSubscriptionsPayload<ExtArgs>;
      fields: Prisma.NotificationsSubscriptionsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.NotificationsSubscriptionsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.NotificationsSubscriptionsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>;
        };
        findFirst: {
          args: Prisma.NotificationsSubscriptionsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.NotificationsSubscriptionsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>;
        };
        findMany: {
          args: Prisma.NotificationsSubscriptionsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>[];
        };
        create: {
          args: Prisma.NotificationsSubscriptionsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>;
        };
        createMany: {
          args: Prisma.NotificationsSubscriptionsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.NotificationsSubscriptionsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>[];
        };
        delete: {
          args: Prisma.NotificationsSubscriptionsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>;
        };
        update: {
          args: Prisma.NotificationsSubscriptionsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>;
        };
        deleteMany: {
          args: Prisma.NotificationsSubscriptionsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.NotificationsSubscriptionsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.NotificationsSubscriptionsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>[];
        };
        upsert: {
          args: Prisma.NotificationsSubscriptionsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationsSubscriptionsPayload>;
        };
        aggregate: {
          args: Prisma.NotificationsSubscriptionsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotificationsSubscriptions>;
        };
        groupBy: {
          args: Prisma.NotificationsSubscriptionsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.NotificationsSubscriptionsGroupByOutputType>[];
        };
        count: {
          args: Prisma.NotificationsSubscriptionsCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.NotificationsSubscriptionsCountAggregateOutputType>
            | number;
        };
      };
    };
    Profile: {
      payload: Prisma.$ProfilePayload<ExtArgs>;
      fields: Prisma.ProfileFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ProfileFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>;
        };
        findFirst: {
          args: Prisma.ProfileFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>;
        };
        findMany: {
          args: Prisma.ProfileFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[];
        };
        create: {
          args: Prisma.ProfileCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>;
        };
        createMany: {
          args: Prisma.ProfileCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[];
        };
        delete: {
          args: Prisma.ProfileDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>;
        };
        update: {
          args: Prisma.ProfileUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>;
        };
        deleteMany: {
          args: Prisma.ProfileDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ProfileUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[];
        };
        upsert: {
          args: Prisma.ProfileUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>;
        };
        aggregate: {
          args: Prisma.ProfileAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfile>;
        };
        groupBy: {
          args: Prisma.ProfileGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ProfileGroupByOutputType>[];
        };
        count: {
          args: Prisma.ProfileCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ProfileCountAggregateOutputType> | number;
        };
      };
    };
    Team: {
      payload: Prisma.$TeamPayload<ExtArgs>;
      fields: Prisma.TeamFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TeamFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>;
        };
        findFirst: {
          args: Prisma.TeamFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>;
        };
        findMany: {
          args: Prisma.TeamFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>[];
        };
        create: {
          args: Prisma.TeamCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>;
        };
        createMany: {
          args: Prisma.TeamCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>[];
        };
        delete: {
          args: Prisma.TeamDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>;
        };
        update: {
          args: Prisma.TeamUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>;
        };
        deleteMany: {
          args: Prisma.TeamDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TeamUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>[];
        };
        upsert: {
          args: Prisma.TeamUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>;
        };
        aggregate: {
          args: Prisma.TeamAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeam>;
        };
        groupBy: {
          args: Prisma.TeamGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TeamGroupByOutputType>[];
        };
        count: {
          args: Prisma.TeamCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TeamCountAggregateOutputType> | number;
        };
      };
    };
    CreditBalance: {
      payload: Prisma.$CreditBalancePayload<ExtArgs>;
      fields: Prisma.CreditBalanceFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CreditBalanceFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CreditBalanceFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>;
        };
        findFirst: {
          args: Prisma.CreditBalanceFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CreditBalanceFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>;
        };
        findMany: {
          args: Prisma.CreditBalanceFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>[];
        };
        create: {
          args: Prisma.CreditBalanceCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>;
        };
        createMany: {
          args: Prisma.CreditBalanceCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CreditBalanceCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>[];
        };
        delete: {
          args: Prisma.CreditBalanceDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>;
        };
        update: {
          args: Prisma.CreditBalanceUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>;
        };
        deleteMany: {
          args: Prisma.CreditBalanceDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CreditBalanceUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CreditBalanceUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>[];
        };
        upsert: {
          args: Prisma.CreditBalanceUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditBalancePayload>;
        };
        aggregate: {
          args: Prisma.CreditBalanceAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCreditBalance>;
        };
        groupBy: {
          args: Prisma.CreditBalanceGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CreditBalanceGroupByOutputType>[];
        };
        count: {
          args: Prisma.CreditBalanceCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CreditBalanceCountAggregateOutputType> | number;
        };
      };
    };
    CreditPurchaseLog: {
      payload: Prisma.$CreditPurchaseLogPayload<ExtArgs>;
      fields: Prisma.CreditPurchaseLogFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CreditPurchaseLogFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CreditPurchaseLogFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>;
        };
        findFirst: {
          args: Prisma.CreditPurchaseLogFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CreditPurchaseLogFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>;
        };
        findMany: {
          args: Prisma.CreditPurchaseLogFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>[];
        };
        create: {
          args: Prisma.CreditPurchaseLogCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>;
        };
        createMany: {
          args: Prisma.CreditPurchaseLogCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CreditPurchaseLogCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>[];
        };
        delete: {
          args: Prisma.CreditPurchaseLogDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>;
        };
        update: {
          args: Prisma.CreditPurchaseLogUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>;
        };
        deleteMany: {
          args: Prisma.CreditPurchaseLogDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CreditPurchaseLogUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CreditPurchaseLogUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>[];
        };
        upsert: {
          args: Prisma.CreditPurchaseLogUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditPurchaseLogPayload>;
        };
        aggregate: {
          args: Prisma.CreditPurchaseLogAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCreditPurchaseLog>;
        };
        groupBy: {
          args: Prisma.CreditPurchaseLogGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CreditPurchaseLogGroupByOutputType>[];
        };
        count: {
          args: Prisma.CreditPurchaseLogCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CreditPurchaseLogCountAggregateOutputType> | number;
        };
      };
    };
    CreditExpenseLog: {
      payload: Prisma.$CreditExpenseLogPayload<ExtArgs>;
      fields: Prisma.CreditExpenseLogFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CreditExpenseLogFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CreditExpenseLogFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>;
        };
        findFirst: {
          args: Prisma.CreditExpenseLogFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CreditExpenseLogFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>;
        };
        findMany: {
          args: Prisma.CreditExpenseLogFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>[];
        };
        create: {
          args: Prisma.CreditExpenseLogCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>;
        };
        createMany: {
          args: Prisma.CreditExpenseLogCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CreditExpenseLogCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>[];
        };
        delete: {
          args: Prisma.CreditExpenseLogDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>;
        };
        update: {
          args: Prisma.CreditExpenseLogUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>;
        };
        deleteMany: {
          args: Prisma.CreditExpenseLogDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CreditExpenseLogUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CreditExpenseLogUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>[];
        };
        upsert: {
          args: Prisma.CreditExpenseLogUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CreditExpenseLogPayload>;
        };
        aggregate: {
          args: Prisma.CreditExpenseLogAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCreditExpenseLog>;
        };
        groupBy: {
          args: Prisma.CreditExpenseLogGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CreditExpenseLogGroupByOutputType>[];
        };
        count: {
          args: Prisma.CreditExpenseLogCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CreditExpenseLogCountAggregateOutputType> | number;
        };
      };
    };
    OrganizationSettings: {
      payload: Prisma.$OrganizationSettingsPayload<ExtArgs>;
      fields: Prisma.OrganizationSettingsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OrganizationSettingsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OrganizationSettingsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>;
        };
        findFirst: {
          args: Prisma.OrganizationSettingsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OrganizationSettingsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>;
        };
        findMany: {
          args: Prisma.OrganizationSettingsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>[];
        };
        create: {
          args: Prisma.OrganizationSettingsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>;
        };
        createMany: {
          args: Prisma.OrganizationSettingsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OrganizationSettingsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>[];
        };
        delete: {
          args: Prisma.OrganizationSettingsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>;
        };
        update: {
          args: Prisma.OrganizationSettingsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>;
        };
        deleteMany: {
          args: Prisma.OrganizationSettingsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OrganizationSettingsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OrganizationSettingsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>[];
        };
        upsert: {
          args: Prisma.OrganizationSettingsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationSettingsPayload>;
        };
        aggregate: {
          args: Prisma.OrganizationSettingsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationSettings>;
        };
        groupBy: {
          args: Prisma.OrganizationSettingsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OrganizationSettingsGroupByOutputType>[];
        };
        count: {
          args: Prisma.OrganizationSettingsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OrganizationSettingsCountAggregateOutputType> | number;
        };
      };
    };
    Membership: {
      payload: Prisma.$MembershipPayload<ExtArgs>;
      fields: Prisma.MembershipFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MembershipFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MembershipFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>;
        };
        findFirst: {
          args: Prisma.MembershipFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MembershipFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>;
        };
        findMany: {
          args: Prisma.MembershipFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>[];
        };
        create: {
          args: Prisma.MembershipCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>;
        };
        createMany: {
          args: Prisma.MembershipCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MembershipCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>[];
        };
        delete: {
          args: Prisma.MembershipDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>;
        };
        update: {
          args: Prisma.MembershipUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>;
        };
        deleteMany: {
          args: Prisma.MembershipDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MembershipUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MembershipUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>[];
        };
        upsert: {
          args: Prisma.MembershipUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MembershipPayload>;
        };
        aggregate: {
          args: Prisma.MembershipAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMembership>;
        };
        groupBy: {
          args: Prisma.MembershipGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MembershipGroupByOutputType>[];
        };
        count: {
          args: Prisma.MembershipCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MembershipCountAggregateOutputType> | number;
        };
      };
    };
    VerificationToken: {
      payload: Prisma.$VerificationTokenPayload<ExtArgs>;
      fields: Prisma.VerificationTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        findFirst: {
          args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        findMany: {
          args: Prisma.VerificationTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
        };
        create: {
          args: Prisma.VerificationTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        createMany: {
          args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
        };
        delete: {
          args: Prisma.VerificationTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        update: {
          args: Prisma.VerificationTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        deleteMany: {
          args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[];
        };
        upsert: {
          args: Prisma.VerificationTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationTokenPayload>;
        };
        aggregate: {
          args: Prisma.VerificationTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerificationToken>;
        };
        groupBy: {
          args: Prisma.VerificationTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerificationTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.VerificationTokenCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerificationTokenCountAggregateOutputType> | number;
        };
      };
    };
    InstantMeetingToken: {
      payload: Prisma.$InstantMeetingTokenPayload<ExtArgs>;
      fields: Prisma.InstantMeetingTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.InstantMeetingTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.InstantMeetingTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>;
        };
        findFirst: {
          args: Prisma.InstantMeetingTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.InstantMeetingTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>;
        };
        findMany: {
          args: Prisma.InstantMeetingTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>[];
        };
        create: {
          args: Prisma.InstantMeetingTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>;
        };
        createMany: {
          args: Prisma.InstantMeetingTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.InstantMeetingTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>[];
        };
        delete: {
          args: Prisma.InstantMeetingTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>;
        };
        update: {
          args: Prisma.InstantMeetingTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>;
        };
        deleteMany: {
          args: Prisma.InstantMeetingTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.InstantMeetingTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.InstantMeetingTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>[];
        };
        upsert: {
          args: Prisma.InstantMeetingTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InstantMeetingTokenPayload>;
        };
        aggregate: {
          args: Prisma.InstantMeetingTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateInstantMeetingToken>;
        };
        groupBy: {
          args: Prisma.InstantMeetingTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InstantMeetingTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.InstantMeetingTokenCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InstantMeetingTokenCountAggregateOutputType> | number;
        };
      };
    };
    BookingReference: {
      payload: Prisma.$BookingReferencePayload<ExtArgs>;
      fields: Prisma.BookingReferenceFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingReferenceFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingReferenceFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>;
        };
        findFirst: {
          args: Prisma.BookingReferenceFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingReferenceFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>;
        };
        findMany: {
          args: Prisma.BookingReferenceFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>[];
        };
        create: {
          args: Prisma.BookingReferenceCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>;
        };
        createMany: {
          args: Prisma.BookingReferenceCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BookingReferenceCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>[];
        };
        delete: {
          args: Prisma.BookingReferenceDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>;
        };
        update: {
          args: Prisma.BookingReferenceUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>;
        };
        deleteMany: {
          args: Prisma.BookingReferenceDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BookingReferenceUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BookingReferenceUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>[];
        };
        upsert: {
          args: Prisma.BookingReferenceUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReferencePayload>;
        };
        aggregate: {
          args: Prisma.BookingReferenceAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingReference>;
        };
        groupBy: {
          args: Prisma.BookingReferenceGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingReferenceGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingReferenceCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingReferenceCountAggregateOutputType> | number;
        };
      };
    };
    Attendee: {
      payload: Prisma.$AttendeePayload<ExtArgs>;
      fields: Prisma.AttendeeFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AttendeeFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AttendeeFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>;
        };
        findFirst: {
          args: Prisma.AttendeeFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AttendeeFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>;
        };
        findMany: {
          args: Prisma.AttendeeFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>[];
        };
        create: {
          args: Prisma.AttendeeCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>;
        };
        createMany: {
          args: Prisma.AttendeeCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AttendeeCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>[];
        };
        delete: {
          args: Prisma.AttendeeDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>;
        };
        update: {
          args: Prisma.AttendeeUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>;
        };
        deleteMany: {
          args: Prisma.AttendeeDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AttendeeUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AttendeeUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>[];
        };
        upsert: {
          args: Prisma.AttendeeUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttendeePayload>;
        };
        aggregate: {
          args: Prisma.AttendeeAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAttendee>;
        };
        groupBy: {
          args: Prisma.AttendeeGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttendeeGroupByOutputType>[];
        };
        count: {
          args: Prisma.AttendeeCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttendeeCountAggregateOutputType> | number;
        };
      };
    };
    Booking: {
      payload: Prisma.$BookingPayload<ExtArgs>;
      fields: Prisma.BookingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>;
        };
        findFirst: {
          args: Prisma.BookingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>;
        };
        findMany: {
          args: Prisma.BookingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>[];
        };
        create: {
          args: Prisma.BookingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>;
        };
        createMany: {
          args: Prisma.BookingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BookingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>[];
        };
        delete: {
          args: Prisma.BookingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>;
        };
        update: {
          args: Prisma.BookingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>;
        };
        deleteMany: {
          args: Prisma.BookingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BookingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BookingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>[];
        };
        upsert: {
          args: Prisma.BookingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingPayload>;
        };
        aggregate: {
          args: Prisma.BookingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBooking>;
        };
        groupBy: {
          args: Prisma.BookingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingCountAggregateOutputType> | number;
        };
      };
    };
    Tracking: {
      payload: Prisma.$TrackingPayload<ExtArgs>;
      fields: Prisma.TrackingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TrackingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TrackingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>;
        };
        findFirst: {
          args: Prisma.TrackingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TrackingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>;
        };
        findMany: {
          args: Prisma.TrackingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>[];
        };
        create: {
          args: Prisma.TrackingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>;
        };
        createMany: {
          args: Prisma.TrackingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TrackingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>[];
        };
        delete: {
          args: Prisma.TrackingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>;
        };
        update: {
          args: Prisma.TrackingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>;
        };
        deleteMany: {
          args: Prisma.TrackingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TrackingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TrackingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>[];
        };
        upsert: {
          args: Prisma.TrackingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TrackingPayload>;
        };
        aggregate: {
          args: Prisma.TrackingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTracking>;
        };
        groupBy: {
          args: Prisma.TrackingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TrackingGroupByOutputType>[];
        };
        count: {
          args: Prisma.TrackingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TrackingCountAggregateOutputType> | number;
        };
      };
    };
    Schedule: {
      payload: Prisma.$SchedulePayload<ExtArgs>;
      fields: Prisma.ScheduleFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ScheduleFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>;
        };
        findFirst: {
          args: Prisma.ScheduleFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>;
        };
        findMany: {
          args: Prisma.ScheduleFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>[];
        };
        create: {
          args: Prisma.ScheduleCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>;
        };
        createMany: {
          args: Prisma.ScheduleCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>[];
        };
        delete: {
          args: Prisma.ScheduleDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>;
        };
        update: {
          args: Prisma.ScheduleUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>;
        };
        deleteMany: {
          args: Prisma.ScheduleDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ScheduleUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ScheduleUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>[];
        };
        upsert: {
          args: Prisma.ScheduleUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>;
        };
        aggregate: {
          args: Prisma.ScheduleAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSchedule>;
        };
        groupBy: {
          args: Prisma.ScheduleGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ScheduleGroupByOutputType>[];
        };
        count: {
          args: Prisma.ScheduleCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ScheduleCountAggregateOutputType> | number;
        };
      };
    };
    Availability: {
      payload: Prisma.$AvailabilityPayload<ExtArgs>;
      fields: Prisma.AvailabilityFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AvailabilityFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AvailabilityFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>;
        };
        findFirst: {
          args: Prisma.AvailabilityFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AvailabilityFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>;
        };
        findMany: {
          args: Prisma.AvailabilityFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>[];
        };
        create: {
          args: Prisma.AvailabilityCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>;
        };
        createMany: {
          args: Prisma.AvailabilityCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AvailabilityCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>[];
        };
        delete: {
          args: Prisma.AvailabilityDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>;
        };
        update: {
          args: Prisma.AvailabilityUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>;
        };
        deleteMany: {
          args: Prisma.AvailabilityDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AvailabilityUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AvailabilityUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>[];
        };
        upsert: {
          args: Prisma.AvailabilityUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvailabilityPayload>;
        };
        aggregate: {
          args: Prisma.AvailabilityAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAvailability>;
        };
        groupBy: {
          args: Prisma.AvailabilityGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AvailabilityGroupByOutputType>[];
        };
        count: {
          args: Prisma.AvailabilityCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AvailabilityCountAggregateOutputType> | number;
        };
      };
    };
    SelectedCalendar: {
      payload: Prisma.$SelectedCalendarPayload<ExtArgs>;
      fields: Prisma.SelectedCalendarFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SelectedCalendarFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SelectedCalendarFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>;
        };
        findFirst: {
          args: Prisma.SelectedCalendarFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SelectedCalendarFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>;
        };
        findMany: {
          args: Prisma.SelectedCalendarFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>[];
        };
        create: {
          args: Prisma.SelectedCalendarCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>;
        };
        createMany: {
          args: Prisma.SelectedCalendarCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SelectedCalendarCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>[];
        };
        delete: {
          args: Prisma.SelectedCalendarDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>;
        };
        update: {
          args: Prisma.SelectedCalendarUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>;
        };
        deleteMany: {
          args: Prisma.SelectedCalendarDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SelectedCalendarUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SelectedCalendarUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>[];
        };
        upsert: {
          args: Prisma.SelectedCalendarUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedCalendarPayload>;
        };
        aggregate: {
          args: Prisma.SelectedCalendarAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSelectedCalendar>;
        };
        groupBy: {
          args: Prisma.SelectedCalendarGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SelectedCalendarGroupByOutputType>[];
        };
        count: {
          args: Prisma.SelectedCalendarCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SelectedCalendarCountAggregateOutputType> | number;
        };
      };
    };
    EventTypeCustomInput: {
      payload: Prisma.$EventTypeCustomInputPayload<ExtArgs>;
      fields: Prisma.EventTypeCustomInputFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EventTypeCustomInputFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EventTypeCustomInputFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>;
        };
        findFirst: {
          args: Prisma.EventTypeCustomInputFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EventTypeCustomInputFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>;
        };
        findMany: {
          args: Prisma.EventTypeCustomInputFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>[];
        };
        create: {
          args: Prisma.EventTypeCustomInputCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>;
        };
        createMany: {
          args: Prisma.EventTypeCustomInputCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EventTypeCustomInputCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>[];
        };
        delete: {
          args: Prisma.EventTypeCustomInputDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>;
        };
        update: {
          args: Prisma.EventTypeCustomInputUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>;
        };
        deleteMany: {
          args: Prisma.EventTypeCustomInputDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EventTypeCustomInputUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EventTypeCustomInputUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>[];
        };
        upsert: {
          args: Prisma.EventTypeCustomInputUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeCustomInputPayload>;
        };
        aggregate: {
          args: Prisma.EventTypeCustomInputAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEventTypeCustomInput>;
        };
        groupBy: {
          args: Prisma.EventTypeCustomInputGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventTypeCustomInputGroupByOutputType>[];
        };
        count: {
          args: Prisma.EventTypeCustomInputCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventTypeCustomInputCountAggregateOutputType> | number;
        };
      };
    };
    ResetPasswordRequest: {
      payload: Prisma.$ResetPasswordRequestPayload<ExtArgs>;
      fields: Prisma.ResetPasswordRequestFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ResetPasswordRequestFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ResetPasswordRequestFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>;
        };
        findFirst: {
          args: Prisma.ResetPasswordRequestFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ResetPasswordRequestFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>;
        };
        findMany: {
          args: Prisma.ResetPasswordRequestFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>[];
        };
        create: {
          args: Prisma.ResetPasswordRequestCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>;
        };
        createMany: {
          args: Prisma.ResetPasswordRequestCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ResetPasswordRequestCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>[];
        };
        delete: {
          args: Prisma.ResetPasswordRequestDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>;
        };
        update: {
          args: Prisma.ResetPasswordRequestUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>;
        };
        deleteMany: {
          args: Prisma.ResetPasswordRequestDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ResetPasswordRequestUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ResetPasswordRequestUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>[];
        };
        upsert: {
          args: Prisma.ResetPasswordRequestUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordRequestPayload>;
        };
        aggregate: {
          args: Prisma.ResetPasswordRequestAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateResetPasswordRequest>;
        };
        groupBy: {
          args: Prisma.ResetPasswordRequestGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ResetPasswordRequestGroupByOutputType>[];
        };
        count: {
          args: Prisma.ResetPasswordRequestCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ResetPasswordRequestCountAggregateOutputType> | number;
        };
      };
    };
    ReminderMail: {
      payload: Prisma.$ReminderMailPayload<ExtArgs>;
      fields: Prisma.ReminderMailFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ReminderMailFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ReminderMailFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>;
        };
        findFirst: {
          args: Prisma.ReminderMailFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ReminderMailFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>;
        };
        findMany: {
          args: Prisma.ReminderMailFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>[];
        };
        create: {
          args: Prisma.ReminderMailCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>;
        };
        createMany: {
          args: Prisma.ReminderMailCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ReminderMailCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>[];
        };
        delete: {
          args: Prisma.ReminderMailDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>;
        };
        update: {
          args: Prisma.ReminderMailUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>;
        };
        deleteMany: {
          args: Prisma.ReminderMailDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ReminderMailUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ReminderMailUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>[];
        };
        upsert: {
          args: Prisma.ReminderMailUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReminderMailPayload>;
        };
        aggregate: {
          args: Prisma.ReminderMailAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateReminderMail>;
        };
        groupBy: {
          args: Prisma.ReminderMailGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ReminderMailGroupByOutputType>[];
        };
        count: {
          args: Prisma.ReminderMailCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ReminderMailCountAggregateOutputType> | number;
        };
      };
    };
    Payment: {
      payload: Prisma.$PaymentPayload<ExtArgs>;
      fields: Prisma.PaymentFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.PaymentFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>;
        };
        findFirst: {
          args: Prisma.PaymentFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>;
        };
        findMany: {
          args: Prisma.PaymentFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[];
        };
        create: {
          args: Prisma.PaymentCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>;
        };
        createMany: {
          args: Prisma.PaymentCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[];
        };
        delete: {
          args: Prisma.PaymentDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>;
        };
        update: {
          args: Prisma.PaymentUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>;
        };
        deleteMany: {
          args: Prisma.PaymentDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.PaymentUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[];
        };
        upsert: {
          args: Prisma.PaymentUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>;
        };
        aggregate: {
          args: Prisma.PaymentAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayment>;
        };
        groupBy: {
          args: Prisma.PaymentGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PaymentGroupByOutputType>[];
        };
        count: {
          args: Prisma.PaymentCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PaymentCountAggregateOutputType> | number;
        };
      };
    };
    Webhook: {
      payload: Prisma.$WebhookPayload<ExtArgs>;
      fields: Prisma.WebhookFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WebhookFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WebhookFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>;
        };
        findFirst: {
          args: Prisma.WebhookFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WebhookFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>;
        };
        findMany: {
          args: Prisma.WebhookFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>[];
        };
        create: {
          args: Prisma.WebhookCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>;
        };
        createMany: {
          args: Prisma.WebhookCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WebhookCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>[];
        };
        delete: {
          args: Prisma.WebhookDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>;
        };
        update: {
          args: Prisma.WebhookUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>;
        };
        deleteMany: {
          args: Prisma.WebhookDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WebhookUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WebhookUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>[];
        };
        upsert: {
          args: Prisma.WebhookUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookPayload>;
        };
        aggregate: {
          args: Prisma.WebhookAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWebhook>;
        };
        groupBy: {
          args: Prisma.WebhookGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WebhookGroupByOutputType>[];
        };
        count: {
          args: Prisma.WebhookCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WebhookCountAggregateOutputType> | number;
        };
      };
    };
    Impersonations: {
      payload: Prisma.$ImpersonationsPayload<ExtArgs>;
      fields: Prisma.ImpersonationsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ImpersonationsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ImpersonationsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>;
        };
        findFirst: {
          args: Prisma.ImpersonationsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ImpersonationsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>;
        };
        findMany: {
          args: Prisma.ImpersonationsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>[];
        };
        create: {
          args: Prisma.ImpersonationsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>;
        };
        createMany: {
          args: Prisma.ImpersonationsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ImpersonationsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>[];
        };
        delete: {
          args: Prisma.ImpersonationsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>;
        };
        update: {
          args: Prisma.ImpersonationsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>;
        };
        deleteMany: {
          args: Prisma.ImpersonationsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ImpersonationsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ImpersonationsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>[];
        };
        upsert: {
          args: Prisma.ImpersonationsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImpersonationsPayload>;
        };
        aggregate: {
          args: Prisma.ImpersonationsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateImpersonations>;
        };
        groupBy: {
          args: Prisma.ImpersonationsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ImpersonationsGroupByOutputType>[];
        };
        count: {
          args: Prisma.ImpersonationsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ImpersonationsCountAggregateOutputType> | number;
        };
      };
    };
    ApiKey: {
      payload: Prisma.$ApiKeyPayload<ExtArgs>;
      fields: Prisma.ApiKeyFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>;
        };
        findFirst: {
          args: Prisma.ApiKeyFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>;
        };
        findMany: {
          args: Prisma.ApiKeyFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>[];
        };
        create: {
          args: Prisma.ApiKeyCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>;
        };
        createMany: {
          args: Prisma.ApiKeyCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ApiKeyCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>[];
        };
        delete: {
          args: Prisma.ApiKeyDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>;
        };
        update: {
          args: Prisma.ApiKeyUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>;
        };
        deleteMany: {
          args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ApiKeyUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>[];
        };
        upsert: {
          args: Prisma.ApiKeyUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>;
        };
        aggregate: {
          args: Prisma.ApiKeyAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApiKey>;
        };
        groupBy: {
          args: Prisma.ApiKeyGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ApiKeyGroupByOutputType>[];
        };
        count: {
          args: Prisma.ApiKeyCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ApiKeyCountAggregateOutputType> | number;
        };
      };
    };
    RateLimit: {
      payload: Prisma.$RateLimitPayload<ExtArgs>;
      fields: Prisma.RateLimitFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RateLimitFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RateLimitFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>;
        };
        findFirst: {
          args: Prisma.RateLimitFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RateLimitFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>;
        };
        findMany: {
          args: Prisma.RateLimitFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>[];
        };
        create: {
          args: Prisma.RateLimitCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>;
        };
        createMany: {
          args: Prisma.RateLimitCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.RateLimitCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>[];
        };
        delete: {
          args: Prisma.RateLimitDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>;
        };
        update: {
          args: Prisma.RateLimitUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>;
        };
        deleteMany: {
          args: Prisma.RateLimitDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.RateLimitUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.RateLimitUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>[];
        };
        upsert: {
          args: Prisma.RateLimitUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RateLimitPayload>;
        };
        aggregate: {
          args: Prisma.RateLimitAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRateLimit>;
        };
        groupBy: {
          args: Prisma.RateLimitGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RateLimitGroupByOutputType>[];
        };
        count: {
          args: Prisma.RateLimitCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RateLimitCountAggregateOutputType> | number;
        };
      };
    };
    HashedLink: {
      payload: Prisma.$HashedLinkPayload<ExtArgs>;
      fields: Prisma.HashedLinkFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.HashedLinkFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.HashedLinkFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>;
        };
        findFirst: {
          args: Prisma.HashedLinkFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.HashedLinkFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>;
        };
        findMany: {
          args: Prisma.HashedLinkFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>[];
        };
        create: {
          args: Prisma.HashedLinkCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>;
        };
        createMany: {
          args: Prisma.HashedLinkCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.HashedLinkCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>[];
        };
        delete: {
          args: Prisma.HashedLinkDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>;
        };
        update: {
          args: Prisma.HashedLinkUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>;
        };
        deleteMany: {
          args: Prisma.HashedLinkDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.HashedLinkUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.HashedLinkUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>[];
        };
        upsert: {
          args: Prisma.HashedLinkUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HashedLinkPayload>;
        };
        aggregate: {
          args: Prisma.HashedLinkAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateHashedLink>;
        };
        groupBy: {
          args: Prisma.HashedLinkGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.HashedLinkGroupByOutputType>[];
        };
        count: {
          args: Prisma.HashedLinkCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.HashedLinkCountAggregateOutputType> | number;
        };
      };
    };
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>;
      fields: Prisma.AccountFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>;
        };
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number;
        };
      };
    };
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>;
      fields: Prisma.SessionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>;
        };
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[];
        };
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number;
        };
      };
    };
    App: {
      payload: Prisma.$AppPayload<ExtArgs>;
      fields: Prisma.AppFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AppFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AppFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>;
        };
        findFirst: {
          args: Prisma.AppFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AppFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>;
        };
        findMany: {
          args: Prisma.AppFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>[];
        };
        create: {
          args: Prisma.AppCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>;
        };
        createMany: {
          args: Prisma.AppCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AppCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>[];
        };
        delete: {
          args: Prisma.AppDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>;
        };
        update: {
          args: Prisma.AppUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>;
        };
        deleteMany: {
          args: Prisma.AppDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AppUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AppUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>[];
        };
        upsert: {
          args: Prisma.AppUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppPayload>;
        };
        aggregate: {
          args: Prisma.AppAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApp>;
        };
        groupBy: {
          args: Prisma.AppGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AppGroupByOutputType>[];
        };
        count: {
          args: Prisma.AppCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AppCountAggregateOutputType> | number;
        };
      };
    };
    App_RoutingForms_Form: {
      payload: Prisma.$App_RoutingForms_FormPayload<ExtArgs>;
      fields: Prisma.App_RoutingForms_FormFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.App_RoutingForms_FormFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.App_RoutingForms_FormFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>;
        };
        findFirst: {
          args: Prisma.App_RoutingForms_FormFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.App_RoutingForms_FormFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>;
        };
        findMany: {
          args: Prisma.App_RoutingForms_FormFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>[];
        };
        create: {
          args: Prisma.App_RoutingForms_FormCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>;
        };
        createMany: {
          args: Prisma.App_RoutingForms_FormCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.App_RoutingForms_FormCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>[];
        };
        delete: {
          args: Prisma.App_RoutingForms_FormDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>;
        };
        update: {
          args: Prisma.App_RoutingForms_FormUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>;
        };
        deleteMany: {
          args: Prisma.App_RoutingForms_FormDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.App_RoutingForms_FormUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.App_RoutingForms_FormUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>[];
        };
        upsert: {
          args: Prisma.App_RoutingForms_FormUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormPayload>;
        };
        aggregate: {
          args: Prisma.App_RoutingForms_FormAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApp_RoutingForms_Form>;
        };
        groupBy: {
          args: Prisma.App_RoutingForms_FormGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.App_RoutingForms_FormGroupByOutputType>[];
        };
        count: {
          args: Prisma.App_RoutingForms_FormCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.App_RoutingForms_FormCountAggregateOutputType> | number;
        };
      };
    };
    App_RoutingForms_FormResponse: {
      payload: Prisma.$App_RoutingForms_FormResponsePayload<ExtArgs>;
      fields: Prisma.App_RoutingForms_FormResponseFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.App_RoutingForms_FormResponseFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.App_RoutingForms_FormResponseFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>;
        };
        findFirst: {
          args: Prisma.App_RoutingForms_FormResponseFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.App_RoutingForms_FormResponseFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>;
        };
        findMany: {
          args: Prisma.App_RoutingForms_FormResponseFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>[];
        };
        create: {
          args: Prisma.App_RoutingForms_FormResponseCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>;
        };
        createMany: {
          args: Prisma.App_RoutingForms_FormResponseCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.App_RoutingForms_FormResponseCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>[];
        };
        delete: {
          args: Prisma.App_RoutingForms_FormResponseDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>;
        };
        update: {
          args: Prisma.App_RoutingForms_FormResponseUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>;
        };
        deleteMany: {
          args: Prisma.App_RoutingForms_FormResponseDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.App_RoutingForms_FormResponseUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.App_RoutingForms_FormResponseUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>[];
        };
        upsert: {
          args: Prisma.App_RoutingForms_FormResponseUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_FormResponsePayload>;
        };
        aggregate: {
          args: Prisma.App_RoutingForms_FormResponseAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApp_RoutingForms_FormResponse>;
        };
        groupBy: {
          args: Prisma.App_RoutingForms_FormResponseGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.App_RoutingForms_FormResponseGroupByOutputType>[];
        };
        count: {
          args: Prisma.App_RoutingForms_FormResponseCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.App_RoutingForms_FormResponseCountAggregateOutputType>
            | number;
        };
      };
    };
    App_RoutingForms_QueuedFormResponse: {
      payload: Prisma.$App_RoutingForms_QueuedFormResponsePayload<ExtArgs>;
      fields: Prisma.App_RoutingForms_QueuedFormResponseFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.App_RoutingForms_QueuedFormResponseFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.App_RoutingForms_QueuedFormResponseFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>;
        };
        findFirst: {
          args: Prisma.App_RoutingForms_QueuedFormResponseFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.App_RoutingForms_QueuedFormResponseFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>;
        };
        findMany: {
          args: Prisma.App_RoutingForms_QueuedFormResponseFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>[];
        };
        create: {
          args: Prisma.App_RoutingForms_QueuedFormResponseCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>;
        };
        createMany: {
          args: Prisma.App_RoutingForms_QueuedFormResponseCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.App_RoutingForms_QueuedFormResponseCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>[];
        };
        delete: {
          args: Prisma.App_RoutingForms_QueuedFormResponseDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>;
        };
        update: {
          args: Prisma.App_RoutingForms_QueuedFormResponseUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>;
        };
        deleteMany: {
          args: Prisma.App_RoutingForms_QueuedFormResponseDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.App_RoutingForms_QueuedFormResponseUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.App_RoutingForms_QueuedFormResponseUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>[];
        };
        upsert: {
          args: Prisma.App_RoutingForms_QueuedFormResponseUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_QueuedFormResponsePayload>;
        };
        aggregate: {
          args: Prisma.App_RoutingForms_QueuedFormResponseAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApp_RoutingForms_QueuedFormResponse>;
        };
        groupBy: {
          args: Prisma.App_RoutingForms_QueuedFormResponseGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.App_RoutingForms_QueuedFormResponseGroupByOutputType>[];
        };
        count: {
          args: Prisma.App_RoutingForms_QueuedFormResponseCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.App_RoutingForms_QueuedFormResponseCountAggregateOutputType>
            | number;
        };
      };
    };
    RoutingFormResponseField: {
      payload: Prisma.$RoutingFormResponseFieldPayload<ExtArgs>;
      fields: Prisma.RoutingFormResponseFieldFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RoutingFormResponseFieldFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RoutingFormResponseFieldFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>;
        };
        findFirst: {
          args: Prisma.RoutingFormResponseFieldFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RoutingFormResponseFieldFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>;
        };
        findMany: {
          args: Prisma.RoutingFormResponseFieldFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>[];
        };
        create: {
          args: Prisma.RoutingFormResponseFieldCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>;
        };
        createMany: {
          args: Prisma.RoutingFormResponseFieldCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.RoutingFormResponseFieldCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>[];
        };
        delete: {
          args: Prisma.RoutingFormResponseFieldDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>;
        };
        update: {
          args: Prisma.RoutingFormResponseFieldUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>;
        };
        deleteMany: {
          args: Prisma.RoutingFormResponseFieldDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.RoutingFormResponseFieldUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.RoutingFormResponseFieldUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>[];
        };
        upsert: {
          args: Prisma.RoutingFormResponseFieldUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseFieldPayload>;
        };
        aggregate: {
          args: Prisma.RoutingFormResponseFieldAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRoutingFormResponseField>;
        };
        groupBy: {
          args: Prisma.RoutingFormResponseFieldGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RoutingFormResponseFieldGroupByOutputType>[];
        };
        count: {
          args: Prisma.RoutingFormResponseFieldCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.RoutingFormResponseFieldCountAggregateOutputType>
            | number;
        };
      };
    };
    RoutingFormResponseDenormalized: {
      payload: Prisma.$RoutingFormResponseDenormalizedPayload<ExtArgs>;
      fields: Prisma.RoutingFormResponseDenormalizedFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RoutingFormResponseDenormalizedFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RoutingFormResponseDenormalizedFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>;
        };
        findFirst: {
          args: Prisma.RoutingFormResponseDenormalizedFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RoutingFormResponseDenormalizedFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>;
        };
        findMany: {
          args: Prisma.RoutingFormResponseDenormalizedFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>[];
        };
        create: {
          args: Prisma.RoutingFormResponseDenormalizedCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>;
        };
        createMany: {
          args: Prisma.RoutingFormResponseDenormalizedCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.RoutingFormResponseDenormalizedCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>[];
        };
        delete: {
          args: Prisma.RoutingFormResponseDenormalizedDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>;
        };
        update: {
          args: Prisma.RoutingFormResponseDenormalizedUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>;
        };
        deleteMany: {
          args: Prisma.RoutingFormResponseDenormalizedDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.RoutingFormResponseDenormalizedUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.RoutingFormResponseDenormalizedUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>[];
        };
        upsert: {
          args: Prisma.RoutingFormResponseDenormalizedUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponseDenormalizedPayload>;
        };
        aggregate: {
          args: Prisma.RoutingFormResponseDenormalizedAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRoutingFormResponseDenormalized>;
        };
        groupBy: {
          args: Prisma.RoutingFormResponseDenormalizedGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RoutingFormResponseDenormalizedGroupByOutputType>[];
        };
        count: {
          args: Prisma.RoutingFormResponseDenormalizedCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.RoutingFormResponseDenormalizedCountAggregateOutputType>
            | number;
        };
      };
    };
    Feedback: {
      payload: Prisma.$FeedbackPayload<ExtArgs>;
      fields: Prisma.FeedbackFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.FeedbackFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>;
        };
        findFirst: {
          args: Prisma.FeedbackFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>;
        };
        findMany: {
          args: Prisma.FeedbackFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>[];
        };
        create: {
          args: Prisma.FeedbackCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>;
        };
        createMany: {
          args: Prisma.FeedbackCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>[];
        };
        delete: {
          args: Prisma.FeedbackDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>;
        };
        update: {
          args: Prisma.FeedbackUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>;
        };
        deleteMany: {
          args: Prisma.FeedbackDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.FeedbackUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>[];
        };
        upsert: {
          args: Prisma.FeedbackUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>;
        };
        aggregate: {
          args: Prisma.FeedbackAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeedback>;
        };
        groupBy: {
          args: Prisma.FeedbackGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FeedbackGroupByOutputType>[];
        };
        count: {
          args: Prisma.FeedbackCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FeedbackCountAggregateOutputType> | number;
        };
      };
    };
    WorkflowStep: {
      payload: Prisma.$WorkflowStepPayload<ExtArgs>;
      fields: Prisma.WorkflowStepFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowStepFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowStepFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowStepFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowStepFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>;
        };
        findMany: {
          args: Prisma.WorkflowStepFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[];
        };
        create: {
          args: Prisma.WorkflowStepCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>;
        };
        createMany: {
          args: Prisma.WorkflowStepCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowStepCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[];
        };
        delete: {
          args: Prisma.WorkflowStepDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>;
        };
        update: {
          args: Prisma.WorkflowStepUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowStepDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowStepUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowStepUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowStepUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowStepPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowStepAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflowStep>;
        };
        groupBy: {
          args: Prisma.WorkflowStepGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowStepGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowStepCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowStepCountAggregateOutputType> | number;
        };
      };
    };
    Workflow: {
      payload: Prisma.$WorkflowPayload<ExtArgs>;
      fields: Prisma.WorkflowFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>;
        };
        findMany: {
          args: Prisma.WorkflowFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>[];
        };
        create: {
          args: Prisma.WorkflowCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>;
        };
        createMany: {
          args: Prisma.WorkflowCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>[];
        };
        delete: {
          args: Prisma.WorkflowDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>;
        };
        update: {
          args: Prisma.WorkflowUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflow>;
        };
        groupBy: {
          args: Prisma.WorkflowGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowCountAggregateOutputType> | number;
        };
      };
    };
    AIPhoneCallConfiguration: {
      payload: Prisma.$AIPhoneCallConfigurationPayload<ExtArgs>;
      fields: Prisma.AIPhoneCallConfigurationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AIPhoneCallConfigurationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AIPhoneCallConfigurationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>;
        };
        findFirst: {
          args: Prisma.AIPhoneCallConfigurationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AIPhoneCallConfigurationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>;
        };
        findMany: {
          args: Prisma.AIPhoneCallConfigurationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>[];
        };
        create: {
          args: Prisma.AIPhoneCallConfigurationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>;
        };
        createMany: {
          args: Prisma.AIPhoneCallConfigurationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AIPhoneCallConfigurationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>[];
        };
        delete: {
          args: Prisma.AIPhoneCallConfigurationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>;
        };
        update: {
          args: Prisma.AIPhoneCallConfigurationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>;
        };
        deleteMany: {
          args: Prisma.AIPhoneCallConfigurationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AIPhoneCallConfigurationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AIPhoneCallConfigurationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>[];
        };
        upsert: {
          args: Prisma.AIPhoneCallConfigurationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AIPhoneCallConfigurationPayload>;
        };
        aggregate: {
          args: Prisma.AIPhoneCallConfigurationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAIPhoneCallConfiguration>;
        };
        groupBy: {
          args: Prisma.AIPhoneCallConfigurationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AIPhoneCallConfigurationGroupByOutputType>[];
        };
        count: {
          args: Prisma.AIPhoneCallConfigurationCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.AIPhoneCallConfigurationCountAggregateOutputType>
            | number;
        };
      };
    };
    WorkflowsOnEventTypes: {
      payload: Prisma.$WorkflowsOnEventTypesPayload<ExtArgs>;
      fields: Prisma.WorkflowsOnEventTypesFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowsOnEventTypesFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowsOnEventTypesFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowsOnEventTypesFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowsOnEventTypesFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>;
        };
        findMany: {
          args: Prisma.WorkflowsOnEventTypesFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>[];
        };
        create: {
          args: Prisma.WorkflowsOnEventTypesCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>;
        };
        createMany: {
          args: Prisma.WorkflowsOnEventTypesCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowsOnEventTypesCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>[];
        };
        delete: {
          args: Prisma.WorkflowsOnEventTypesDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>;
        };
        update: {
          args: Prisma.WorkflowsOnEventTypesUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowsOnEventTypesDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowsOnEventTypesUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowsOnEventTypesUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowsOnEventTypesUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnEventTypesPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowsOnEventTypesAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflowsOnEventTypes>;
        };
        groupBy: {
          args: Prisma.WorkflowsOnEventTypesGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowsOnEventTypesGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowsOnEventTypesCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowsOnEventTypesCountAggregateOutputType> | number;
        };
      };
    };
    WorkflowsOnRoutingForms: {
      payload: Prisma.$WorkflowsOnRoutingFormsPayload<ExtArgs>;
      fields: Prisma.WorkflowsOnRoutingFormsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowsOnRoutingFormsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowsOnRoutingFormsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowsOnRoutingFormsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowsOnRoutingFormsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>;
        };
        findMany: {
          args: Prisma.WorkflowsOnRoutingFormsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>[];
        };
        create: {
          args: Prisma.WorkflowsOnRoutingFormsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>;
        };
        createMany: {
          args: Prisma.WorkflowsOnRoutingFormsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowsOnRoutingFormsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>[];
        };
        delete: {
          args: Prisma.WorkflowsOnRoutingFormsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>;
        };
        update: {
          args: Prisma.WorkflowsOnRoutingFormsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowsOnRoutingFormsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowsOnRoutingFormsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowsOnRoutingFormsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowsOnRoutingFormsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnRoutingFormsPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowsOnRoutingFormsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflowsOnRoutingForms>;
        };
        groupBy: {
          args: Prisma.WorkflowsOnRoutingFormsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowsOnRoutingFormsGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowsOnRoutingFormsCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.WorkflowsOnRoutingFormsCountAggregateOutputType>
            | number;
        };
      };
    };
    WorkflowsOnTeams: {
      payload: Prisma.$WorkflowsOnTeamsPayload<ExtArgs>;
      fields: Prisma.WorkflowsOnTeamsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowsOnTeamsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowsOnTeamsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowsOnTeamsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowsOnTeamsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>;
        };
        findMany: {
          args: Prisma.WorkflowsOnTeamsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>[];
        };
        create: {
          args: Prisma.WorkflowsOnTeamsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>;
        };
        createMany: {
          args: Prisma.WorkflowsOnTeamsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowsOnTeamsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>[];
        };
        delete: {
          args: Prisma.WorkflowsOnTeamsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>;
        };
        update: {
          args: Prisma.WorkflowsOnTeamsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowsOnTeamsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowsOnTeamsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowsOnTeamsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowsOnTeamsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowsOnTeamsPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowsOnTeamsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflowsOnTeams>;
        };
        groupBy: {
          args: Prisma.WorkflowsOnTeamsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowsOnTeamsGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowsOnTeamsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowsOnTeamsCountAggregateOutputType> | number;
        };
      };
    };
    Deployment: {
      payload: Prisma.$DeploymentPayload<ExtArgs>;
      fields: Prisma.DeploymentFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DeploymentFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DeploymentFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>;
        };
        findFirst: {
          args: Prisma.DeploymentFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DeploymentFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>;
        };
        findMany: {
          args: Prisma.DeploymentFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>[];
        };
        create: {
          args: Prisma.DeploymentCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>;
        };
        createMany: {
          args: Prisma.DeploymentCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DeploymentCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>[];
        };
        delete: {
          args: Prisma.DeploymentDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>;
        };
        update: {
          args: Prisma.DeploymentUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>;
        };
        deleteMany: {
          args: Prisma.DeploymentDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DeploymentUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DeploymentUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>[];
        };
        upsert: {
          args: Prisma.DeploymentUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeploymentPayload>;
        };
        aggregate: {
          args: Prisma.DeploymentAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDeployment>;
        };
        groupBy: {
          args: Prisma.DeploymentGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DeploymentGroupByOutputType>[];
        };
        count: {
          args: Prisma.DeploymentCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DeploymentCountAggregateOutputType> | number;
        };
      };
    };
    WorkflowReminder: {
      payload: Prisma.$WorkflowReminderPayload<ExtArgs>;
      fields: Prisma.WorkflowReminderFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowReminderFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowReminderFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowReminderFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowReminderFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>;
        };
        findMany: {
          args: Prisma.WorkflowReminderFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>[];
        };
        create: {
          args: Prisma.WorkflowReminderCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>;
        };
        createMany: {
          args: Prisma.WorkflowReminderCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowReminderCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>[];
        };
        delete: {
          args: Prisma.WorkflowReminderDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>;
        };
        update: {
          args: Prisma.WorkflowReminderUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowReminderDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowReminderUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowReminderUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowReminderUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowReminderPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowReminderAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflowReminder>;
        };
        groupBy: {
          args: Prisma.WorkflowReminderGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowReminderGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowReminderCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowReminderCountAggregateOutputType> | number;
        };
      };
    };
    WebhookScheduledTriggers: {
      payload: Prisma.$WebhookScheduledTriggersPayload<ExtArgs>;
      fields: Prisma.WebhookScheduledTriggersFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WebhookScheduledTriggersFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WebhookScheduledTriggersFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>;
        };
        findFirst: {
          args: Prisma.WebhookScheduledTriggersFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WebhookScheduledTriggersFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>;
        };
        findMany: {
          args: Prisma.WebhookScheduledTriggersFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>[];
        };
        create: {
          args: Prisma.WebhookScheduledTriggersCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>;
        };
        createMany: {
          args: Prisma.WebhookScheduledTriggersCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WebhookScheduledTriggersCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>[];
        };
        delete: {
          args: Prisma.WebhookScheduledTriggersDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>;
        };
        update: {
          args: Prisma.WebhookScheduledTriggersUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>;
        };
        deleteMany: {
          args: Prisma.WebhookScheduledTriggersDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WebhookScheduledTriggersUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WebhookScheduledTriggersUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>[];
        };
        upsert: {
          args: Prisma.WebhookScheduledTriggersUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WebhookScheduledTriggersPayload>;
        };
        aggregate: {
          args: Prisma.WebhookScheduledTriggersAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWebhookScheduledTriggers>;
        };
        groupBy: {
          args: Prisma.WebhookScheduledTriggersGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WebhookScheduledTriggersGroupByOutputType>[];
        };
        count: {
          args: Prisma.WebhookScheduledTriggersCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.WebhookScheduledTriggersCountAggregateOutputType>
            | number;
        };
      };
    };
    BookingSeat: {
      payload: Prisma.$BookingSeatPayload<ExtArgs>;
      fields: Prisma.BookingSeatFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingSeatFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingSeatFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>;
        };
        findFirst: {
          args: Prisma.BookingSeatFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingSeatFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>;
        };
        findMany: {
          args: Prisma.BookingSeatFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>[];
        };
        create: {
          args: Prisma.BookingSeatCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>;
        };
        createMany: {
          args: Prisma.BookingSeatCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BookingSeatCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>[];
        };
        delete: {
          args: Prisma.BookingSeatDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>;
        };
        update: {
          args: Prisma.BookingSeatUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>;
        };
        deleteMany: {
          args: Prisma.BookingSeatDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BookingSeatUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BookingSeatUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>[];
        };
        upsert: {
          args: Prisma.BookingSeatUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingSeatPayload>;
        };
        aggregate: {
          args: Prisma.BookingSeatAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingSeat>;
        };
        groupBy: {
          args: Prisma.BookingSeatGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingSeatGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingSeatCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingSeatCountAggregateOutputType> | number;
        };
      };
    };
    VerifiedNumber: {
      payload: Prisma.$VerifiedNumberPayload<ExtArgs>;
      fields: Prisma.VerifiedNumberFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.VerifiedNumberFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.VerifiedNumberFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>;
        };
        findFirst: {
          args: Prisma.VerifiedNumberFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.VerifiedNumberFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>;
        };
        findMany: {
          args: Prisma.VerifiedNumberFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>[];
        };
        create: {
          args: Prisma.VerifiedNumberCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>;
        };
        createMany: {
          args: Prisma.VerifiedNumberCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.VerifiedNumberCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>[];
        };
        delete: {
          args: Prisma.VerifiedNumberDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>;
        };
        update: {
          args: Prisma.VerifiedNumberUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>;
        };
        deleteMany: {
          args: Prisma.VerifiedNumberDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.VerifiedNumberUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.VerifiedNumberUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>[];
        };
        upsert: {
          args: Prisma.VerifiedNumberUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedNumberPayload>;
        };
        aggregate: {
          args: Prisma.VerifiedNumberAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerifiedNumber>;
        };
        groupBy: {
          args: Prisma.VerifiedNumberGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerifiedNumberGroupByOutputType>[];
        };
        count: {
          args: Prisma.VerifiedNumberCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerifiedNumberCountAggregateOutputType> | number;
        };
      };
    };
    VerifiedEmail: {
      payload: Prisma.$VerifiedEmailPayload<ExtArgs>;
      fields: Prisma.VerifiedEmailFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.VerifiedEmailFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.VerifiedEmailFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>;
        };
        findFirst: {
          args: Prisma.VerifiedEmailFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.VerifiedEmailFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>;
        };
        findMany: {
          args: Prisma.VerifiedEmailFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>[];
        };
        create: {
          args: Prisma.VerifiedEmailCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>;
        };
        createMany: {
          args: Prisma.VerifiedEmailCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.VerifiedEmailCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>[];
        };
        delete: {
          args: Prisma.VerifiedEmailDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>;
        };
        update: {
          args: Prisma.VerifiedEmailUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>;
        };
        deleteMany: {
          args: Prisma.VerifiedEmailDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.VerifiedEmailUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.VerifiedEmailUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>[];
        };
        upsert: {
          args: Prisma.VerifiedEmailUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerifiedEmailPayload>;
        };
        aggregate: {
          args: Prisma.VerifiedEmailAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerifiedEmail>;
        };
        groupBy: {
          args: Prisma.VerifiedEmailGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerifiedEmailGroupByOutputType>[];
        };
        count: {
          args: Prisma.VerifiedEmailCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.VerifiedEmailCountAggregateOutputType> | number;
        };
      };
    };
    Feature: {
      payload: Prisma.$FeaturePayload<ExtArgs>;
      fields: Prisma.FeatureFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.FeatureFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.FeatureFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>;
        };
        findFirst: {
          args: Prisma.FeatureFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.FeatureFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>;
        };
        findMany: {
          args: Prisma.FeatureFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>[];
        };
        create: {
          args: Prisma.FeatureCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>;
        };
        createMany: {
          args: Prisma.FeatureCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.FeatureCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>[];
        };
        delete: {
          args: Prisma.FeatureDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>;
        };
        update: {
          args: Prisma.FeatureUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>;
        };
        deleteMany: {
          args: Prisma.FeatureDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.FeatureUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.FeatureUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>[];
        };
        upsert: {
          args: Prisma.FeatureUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeaturePayload>;
        };
        aggregate: {
          args: Prisma.FeatureAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeature>;
        };
        groupBy: {
          args: Prisma.FeatureGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FeatureGroupByOutputType>[];
        };
        count: {
          args: Prisma.FeatureCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FeatureCountAggregateOutputType> | number;
        };
      };
    };
    UserFeatures: {
      payload: Prisma.$UserFeaturesPayload<ExtArgs>;
      fields: Prisma.UserFeaturesFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFeaturesFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFeaturesFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>;
        };
        findFirst: {
          args: Prisma.UserFeaturesFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFeaturesFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>;
        };
        findMany: {
          args: Prisma.UserFeaturesFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>[];
        };
        create: {
          args: Prisma.UserFeaturesCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>;
        };
        createMany: {
          args: Prisma.UserFeaturesCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserFeaturesCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>[];
        };
        delete: {
          args: Prisma.UserFeaturesDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>;
        };
        update: {
          args: Prisma.UserFeaturesUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>;
        };
        deleteMany: {
          args: Prisma.UserFeaturesDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserFeaturesUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserFeaturesUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>[];
        };
        upsert: {
          args: Prisma.UserFeaturesUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFeaturesPayload>;
        };
        aggregate: {
          args: Prisma.UserFeaturesAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserFeatures>;
        };
        groupBy: {
          args: Prisma.UserFeaturesGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserFeaturesGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserFeaturesCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserFeaturesCountAggregateOutputType> | number;
        };
      };
    };
    TeamFeatures: {
      payload: Prisma.$TeamFeaturesPayload<ExtArgs>;
      fields: Prisma.TeamFeaturesFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TeamFeaturesFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TeamFeaturesFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>;
        };
        findFirst: {
          args: Prisma.TeamFeaturesFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TeamFeaturesFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>;
        };
        findMany: {
          args: Prisma.TeamFeaturesFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>[];
        };
        create: {
          args: Prisma.TeamFeaturesCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>;
        };
        createMany: {
          args: Prisma.TeamFeaturesCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TeamFeaturesCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>[];
        };
        delete: {
          args: Prisma.TeamFeaturesDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>;
        };
        update: {
          args: Prisma.TeamFeaturesUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>;
        };
        deleteMany: {
          args: Prisma.TeamFeaturesDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TeamFeaturesUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TeamFeaturesUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>[];
        };
        upsert: {
          args: Prisma.TeamFeaturesUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamFeaturesPayload>;
        };
        aggregate: {
          args: Prisma.TeamFeaturesAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeamFeatures>;
        };
        groupBy: {
          args: Prisma.TeamFeaturesGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TeamFeaturesGroupByOutputType>[];
        };
        count: {
          args: Prisma.TeamFeaturesCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TeamFeaturesCountAggregateOutputType> | number;
        };
      };
    };
    SelectedSlots: {
      payload: Prisma.$SelectedSlotsPayload<ExtArgs>;
      fields: Prisma.SelectedSlotsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SelectedSlotsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SelectedSlotsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>;
        };
        findFirst: {
          args: Prisma.SelectedSlotsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SelectedSlotsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>;
        };
        findMany: {
          args: Prisma.SelectedSlotsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>[];
        };
        create: {
          args: Prisma.SelectedSlotsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>;
        };
        createMany: {
          args: Prisma.SelectedSlotsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SelectedSlotsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>[];
        };
        delete: {
          args: Prisma.SelectedSlotsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>;
        };
        update: {
          args: Prisma.SelectedSlotsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>;
        };
        deleteMany: {
          args: Prisma.SelectedSlotsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SelectedSlotsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SelectedSlotsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>[];
        };
        upsert: {
          args: Prisma.SelectedSlotsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SelectedSlotsPayload>;
        };
        aggregate: {
          args: Prisma.SelectedSlotsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSelectedSlots>;
        };
        groupBy: {
          args: Prisma.SelectedSlotsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SelectedSlotsGroupByOutputType>[];
        };
        count: {
          args: Prisma.SelectedSlotsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SelectedSlotsCountAggregateOutputType> | number;
        };
      };
    };
    OAuthClient: {
      payload: Prisma.$OAuthClientPayload<ExtArgs>;
      fields: Prisma.OAuthClientFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OAuthClientFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OAuthClientFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>;
        };
        findFirst: {
          args: Prisma.OAuthClientFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OAuthClientFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>;
        };
        findMany: {
          args: Prisma.OAuthClientFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>[];
        };
        create: {
          args: Prisma.OAuthClientCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>;
        };
        createMany: {
          args: Prisma.OAuthClientCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OAuthClientCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>[];
        };
        delete: {
          args: Prisma.OAuthClientDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>;
        };
        update: {
          args: Prisma.OAuthClientUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>;
        };
        deleteMany: {
          args: Prisma.OAuthClientDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OAuthClientUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OAuthClientUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>[];
        };
        upsert: {
          args: Prisma.OAuthClientUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OAuthClientPayload>;
        };
        aggregate: {
          args: Prisma.OAuthClientAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOAuthClient>;
        };
        groupBy: {
          args: Prisma.OAuthClientGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OAuthClientGroupByOutputType>[];
        };
        count: {
          args: Prisma.OAuthClientCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OAuthClientCountAggregateOutputType> | number;
        };
      };
    };
    AccessCode: {
      payload: Prisma.$AccessCodePayload<ExtArgs>;
      fields: Prisma.AccessCodeFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccessCodeFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccessCodeFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>;
        };
        findFirst: {
          args: Prisma.AccessCodeFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccessCodeFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>;
        };
        findMany: {
          args: Prisma.AccessCodeFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>[];
        };
        create: {
          args: Prisma.AccessCodeCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>;
        };
        createMany: {
          args: Prisma.AccessCodeCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccessCodeCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>[];
        };
        delete: {
          args: Prisma.AccessCodeDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>;
        };
        update: {
          args: Prisma.AccessCodeUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>;
        };
        deleteMany: {
          args: Prisma.AccessCodeDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccessCodeUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccessCodeUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>[];
        };
        upsert: {
          args: Prisma.AccessCodeUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessCodePayload>;
        };
        aggregate: {
          args: Prisma.AccessCodeAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccessCode>;
        };
        groupBy: {
          args: Prisma.AccessCodeGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccessCodeGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccessCodeCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccessCodeCountAggregateOutputType> | number;
        };
      };
    };
    BookingDenormalized: {
      payload: Prisma.$BookingDenormalizedPayload<ExtArgs>;
      fields: Prisma.BookingDenormalizedFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingDenormalizedFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingDenormalizedFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>;
        };
        findFirst: {
          args: Prisma.BookingDenormalizedFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingDenormalizedFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>;
        };
        findMany: {
          args: Prisma.BookingDenormalizedFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>[];
        };
        create: {
          args: Prisma.BookingDenormalizedCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>;
        };
        createMany: {
          args: Prisma.BookingDenormalizedCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BookingDenormalizedCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>[];
        };
        delete: {
          args: Prisma.BookingDenormalizedDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>;
        };
        update: {
          args: Prisma.BookingDenormalizedUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>;
        };
        deleteMany: {
          args: Prisma.BookingDenormalizedDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BookingDenormalizedUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BookingDenormalizedUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>[];
        };
        upsert: {
          args: Prisma.BookingDenormalizedUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingDenormalizedPayload>;
        };
        aggregate: {
          args: Prisma.BookingDenormalizedAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingDenormalized>;
        };
        groupBy: {
          args: Prisma.BookingDenormalizedGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingDenormalizedGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingDenormalizedCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingDenormalizedCountAggregateOutputType> | number;
        };
      };
    };
    CalendarCache: {
      payload: Prisma.$CalendarCachePayload<ExtArgs>;
      fields: Prisma.CalendarCacheFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CalendarCacheFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CalendarCacheFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>;
        };
        findFirst: {
          args: Prisma.CalendarCacheFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CalendarCacheFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>;
        };
        findMany: {
          args: Prisma.CalendarCacheFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>[];
        };
        create: {
          args: Prisma.CalendarCacheCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>;
        };
        createMany: {
          args: Prisma.CalendarCacheCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CalendarCacheCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>[];
        };
        delete: {
          args: Prisma.CalendarCacheDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>;
        };
        update: {
          args: Prisma.CalendarCacheUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>;
        };
        deleteMany: {
          args: Prisma.CalendarCacheDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CalendarCacheUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CalendarCacheUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>[];
        };
        upsert: {
          args: Prisma.CalendarCacheUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCachePayload>;
        };
        aggregate: {
          args: Prisma.CalendarCacheAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCalendarCache>;
        };
        groupBy: {
          args: Prisma.CalendarCacheGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalendarCacheGroupByOutputType>[];
        };
        count: {
          args: Prisma.CalendarCacheCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalendarCacheCountAggregateOutputType> | number;
        };
      };
    };
    TempOrgRedirect: {
      payload: Prisma.$TempOrgRedirectPayload<ExtArgs>;
      fields: Prisma.TempOrgRedirectFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TempOrgRedirectFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TempOrgRedirectFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>;
        };
        findFirst: {
          args: Prisma.TempOrgRedirectFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TempOrgRedirectFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>;
        };
        findMany: {
          args: Prisma.TempOrgRedirectFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>[];
        };
        create: {
          args: Prisma.TempOrgRedirectCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>;
        };
        createMany: {
          args: Prisma.TempOrgRedirectCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TempOrgRedirectCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>[];
        };
        delete: {
          args: Prisma.TempOrgRedirectDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>;
        };
        update: {
          args: Prisma.TempOrgRedirectUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>;
        };
        deleteMany: {
          args: Prisma.TempOrgRedirectDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TempOrgRedirectUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TempOrgRedirectUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>[];
        };
        upsert: {
          args: Prisma.TempOrgRedirectUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TempOrgRedirectPayload>;
        };
        aggregate: {
          args: Prisma.TempOrgRedirectAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTempOrgRedirect>;
        };
        groupBy: {
          args: Prisma.TempOrgRedirectGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TempOrgRedirectGroupByOutputType>[];
        };
        count: {
          args: Prisma.TempOrgRedirectCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TempOrgRedirectCountAggregateOutputType> | number;
        };
      };
    };
    Avatar: {
      payload: Prisma.$AvatarPayload<ExtArgs>;
      fields: Prisma.AvatarFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AvatarFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AvatarFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>;
        };
        findFirst: {
          args: Prisma.AvatarFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AvatarFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>;
        };
        findMany: {
          args: Prisma.AvatarFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>[];
        };
        create: {
          args: Prisma.AvatarCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>;
        };
        createMany: {
          args: Prisma.AvatarCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AvatarCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>[];
        };
        delete: {
          args: Prisma.AvatarDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>;
        };
        update: {
          args: Prisma.AvatarUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>;
        };
        deleteMany: {
          args: Prisma.AvatarDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AvatarUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AvatarUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>[];
        };
        upsert: {
          args: Prisma.AvatarUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AvatarPayload>;
        };
        aggregate: {
          args: Prisma.AvatarAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAvatar>;
        };
        groupBy: {
          args: Prisma.AvatarGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AvatarGroupByOutputType>[];
        };
        count: {
          args: Prisma.AvatarCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AvatarCountAggregateOutputType> | number;
        };
      };
    };
    OutOfOfficeEntry: {
      payload: Prisma.$OutOfOfficeEntryPayload<ExtArgs>;
      fields: Prisma.OutOfOfficeEntryFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OutOfOfficeEntryFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OutOfOfficeEntryFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>;
        };
        findFirst: {
          args: Prisma.OutOfOfficeEntryFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OutOfOfficeEntryFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>;
        };
        findMany: {
          args: Prisma.OutOfOfficeEntryFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>[];
        };
        create: {
          args: Prisma.OutOfOfficeEntryCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>;
        };
        createMany: {
          args: Prisma.OutOfOfficeEntryCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OutOfOfficeEntryCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>[];
        };
        delete: {
          args: Prisma.OutOfOfficeEntryDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>;
        };
        update: {
          args: Prisma.OutOfOfficeEntryUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>;
        };
        deleteMany: {
          args: Prisma.OutOfOfficeEntryDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OutOfOfficeEntryUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OutOfOfficeEntryUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>[];
        };
        upsert: {
          args: Prisma.OutOfOfficeEntryUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeEntryPayload>;
        };
        aggregate: {
          args: Prisma.OutOfOfficeEntryAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOutOfOfficeEntry>;
        };
        groupBy: {
          args: Prisma.OutOfOfficeEntryGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OutOfOfficeEntryGroupByOutputType>[];
        };
        count: {
          args: Prisma.OutOfOfficeEntryCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OutOfOfficeEntryCountAggregateOutputType> | number;
        };
      };
    };
    OutOfOfficeReason: {
      payload: Prisma.$OutOfOfficeReasonPayload<ExtArgs>;
      fields: Prisma.OutOfOfficeReasonFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OutOfOfficeReasonFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OutOfOfficeReasonFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>;
        };
        findFirst: {
          args: Prisma.OutOfOfficeReasonFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OutOfOfficeReasonFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>;
        };
        findMany: {
          args: Prisma.OutOfOfficeReasonFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>[];
        };
        create: {
          args: Prisma.OutOfOfficeReasonCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>;
        };
        createMany: {
          args: Prisma.OutOfOfficeReasonCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OutOfOfficeReasonCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>[];
        };
        delete: {
          args: Prisma.OutOfOfficeReasonDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>;
        };
        update: {
          args: Prisma.OutOfOfficeReasonUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>;
        };
        deleteMany: {
          args: Prisma.OutOfOfficeReasonDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OutOfOfficeReasonUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OutOfOfficeReasonUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>[];
        };
        upsert: {
          args: Prisma.OutOfOfficeReasonUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutOfOfficeReasonPayload>;
        };
        aggregate: {
          args: Prisma.OutOfOfficeReasonAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOutOfOfficeReason>;
        };
        groupBy: {
          args: Prisma.OutOfOfficeReasonGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OutOfOfficeReasonGroupByOutputType>[];
        };
        count: {
          args: Prisma.OutOfOfficeReasonCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OutOfOfficeReasonCountAggregateOutputType> | number;
        };
      };
    };
    PlatformOAuthClient: {
      payload: Prisma.$PlatformOAuthClientPayload<ExtArgs>;
      fields: Prisma.PlatformOAuthClientFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.PlatformOAuthClientFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.PlatformOAuthClientFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>;
        };
        findFirst: {
          args: Prisma.PlatformOAuthClientFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.PlatformOAuthClientFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>;
        };
        findMany: {
          args: Prisma.PlatformOAuthClientFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>[];
        };
        create: {
          args: Prisma.PlatformOAuthClientCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>;
        };
        createMany: {
          args: Prisma.PlatformOAuthClientCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.PlatformOAuthClientCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>[];
        };
        delete: {
          args: Prisma.PlatformOAuthClientDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>;
        };
        update: {
          args: Prisma.PlatformOAuthClientUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>;
        };
        deleteMany: {
          args: Prisma.PlatformOAuthClientDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.PlatformOAuthClientUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.PlatformOAuthClientUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>[];
        };
        upsert: {
          args: Prisma.PlatformOAuthClientUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformOAuthClientPayload>;
        };
        aggregate: {
          args: Prisma.PlatformOAuthClientAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlatformOAuthClient>;
        };
        groupBy: {
          args: Prisma.PlatformOAuthClientGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PlatformOAuthClientGroupByOutputType>[];
        };
        count: {
          args: Prisma.PlatformOAuthClientCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PlatformOAuthClientCountAggregateOutputType> | number;
        };
      };
    };
    PlatformAuthorizationToken: {
      payload: Prisma.$PlatformAuthorizationTokenPayload<ExtArgs>;
      fields: Prisma.PlatformAuthorizationTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.PlatformAuthorizationTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.PlatformAuthorizationTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>;
        };
        findFirst: {
          args: Prisma.PlatformAuthorizationTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.PlatformAuthorizationTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>;
        };
        findMany: {
          args: Prisma.PlatformAuthorizationTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>[];
        };
        create: {
          args: Prisma.PlatformAuthorizationTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>;
        };
        createMany: {
          args: Prisma.PlatformAuthorizationTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.PlatformAuthorizationTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>[];
        };
        delete: {
          args: Prisma.PlatformAuthorizationTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>;
        };
        update: {
          args: Prisma.PlatformAuthorizationTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>;
        };
        deleteMany: {
          args: Prisma.PlatformAuthorizationTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.PlatformAuthorizationTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.PlatformAuthorizationTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>[];
        };
        upsert: {
          args: Prisma.PlatformAuthorizationTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformAuthorizationTokenPayload>;
        };
        aggregate: {
          args: Prisma.PlatformAuthorizationTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlatformAuthorizationToken>;
        };
        groupBy: {
          args: Prisma.PlatformAuthorizationTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PlatformAuthorizationTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.PlatformAuthorizationTokenCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.PlatformAuthorizationTokenCountAggregateOutputType>
            | number;
        };
      };
    };
    AccessToken: {
      payload: Prisma.$AccessTokenPayload<ExtArgs>;
      fields: Prisma.AccessTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccessTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccessTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>;
        };
        findFirst: {
          args: Prisma.AccessTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccessTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>;
        };
        findMany: {
          args: Prisma.AccessTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>[];
        };
        create: {
          args: Prisma.AccessTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>;
        };
        createMany: {
          args: Prisma.AccessTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccessTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>[];
        };
        delete: {
          args: Prisma.AccessTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>;
        };
        update: {
          args: Prisma.AccessTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>;
        };
        deleteMany: {
          args: Prisma.AccessTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccessTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccessTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>[];
        };
        upsert: {
          args: Prisma.AccessTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccessTokenPayload>;
        };
        aggregate: {
          args: Prisma.AccessTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccessToken>;
        };
        groupBy: {
          args: Prisma.AccessTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccessTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccessTokenCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccessTokenCountAggregateOutputType> | number;
        };
      };
    };
    RefreshToken: {
      payload: Prisma.$RefreshTokenPayload<ExtArgs>;
      fields: Prisma.RefreshTokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>;
        };
        findFirst: {
          args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>;
        };
        findMany: {
          args: Prisma.RefreshTokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[];
        };
        create: {
          args: Prisma.RefreshTokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>;
        };
        createMany: {
          args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[];
        };
        delete: {
          args: Prisma.RefreshTokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>;
        };
        update: {
          args: Prisma.RefreshTokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>;
        };
        deleteMany: {
          args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.RefreshTokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[];
        };
        upsert: {
          args: Prisma.RefreshTokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>;
        };
        aggregate: {
          args: Prisma.RefreshTokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRefreshToken>;
        };
        groupBy: {
          args: Prisma.RefreshTokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RefreshTokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.RefreshTokenCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RefreshTokenCountAggregateOutputType> | number;
        };
      };
    };
    DSyncData: {
      payload: Prisma.$DSyncDataPayload<ExtArgs>;
      fields: Prisma.DSyncDataFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DSyncDataFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DSyncDataFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>;
        };
        findFirst: {
          args: Prisma.DSyncDataFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DSyncDataFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>;
        };
        findMany: {
          args: Prisma.DSyncDataFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>[];
        };
        create: {
          args: Prisma.DSyncDataCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>;
        };
        createMany: {
          args: Prisma.DSyncDataCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DSyncDataCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>[];
        };
        delete: {
          args: Prisma.DSyncDataDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>;
        };
        update: {
          args: Prisma.DSyncDataUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>;
        };
        deleteMany: {
          args: Prisma.DSyncDataDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DSyncDataUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DSyncDataUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>[];
        };
        upsert: {
          args: Prisma.DSyncDataUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncDataPayload>;
        };
        aggregate: {
          args: Prisma.DSyncDataAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDSyncData>;
        };
        groupBy: {
          args: Prisma.DSyncDataGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DSyncDataGroupByOutputType>[];
        };
        count: {
          args: Prisma.DSyncDataCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DSyncDataCountAggregateOutputType> | number;
        };
      };
    };
    DSyncTeamGroupMapping: {
      payload: Prisma.$DSyncTeamGroupMappingPayload<ExtArgs>;
      fields: Prisma.DSyncTeamGroupMappingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DSyncTeamGroupMappingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DSyncTeamGroupMappingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>;
        };
        findFirst: {
          args: Prisma.DSyncTeamGroupMappingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DSyncTeamGroupMappingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>;
        };
        findMany: {
          args: Prisma.DSyncTeamGroupMappingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>[];
        };
        create: {
          args: Prisma.DSyncTeamGroupMappingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>;
        };
        createMany: {
          args: Prisma.DSyncTeamGroupMappingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DSyncTeamGroupMappingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>[];
        };
        delete: {
          args: Prisma.DSyncTeamGroupMappingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>;
        };
        update: {
          args: Prisma.DSyncTeamGroupMappingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>;
        };
        deleteMany: {
          args: Prisma.DSyncTeamGroupMappingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DSyncTeamGroupMappingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DSyncTeamGroupMappingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>[];
        };
        upsert: {
          args: Prisma.DSyncTeamGroupMappingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DSyncTeamGroupMappingPayload>;
        };
        aggregate: {
          args: Prisma.DSyncTeamGroupMappingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDSyncTeamGroupMapping>;
        };
        groupBy: {
          args: Prisma.DSyncTeamGroupMappingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DSyncTeamGroupMappingGroupByOutputType>[];
        };
        count: {
          args: Prisma.DSyncTeamGroupMappingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DSyncTeamGroupMappingCountAggregateOutputType> | number;
        };
      };
    };
    SecondaryEmail: {
      payload: Prisma.$SecondaryEmailPayload<ExtArgs>;
      fields: Prisma.SecondaryEmailFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SecondaryEmailFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SecondaryEmailFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>;
        };
        findFirst: {
          args: Prisma.SecondaryEmailFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SecondaryEmailFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>;
        };
        findMany: {
          args: Prisma.SecondaryEmailFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>[];
        };
        create: {
          args: Prisma.SecondaryEmailCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>;
        };
        createMany: {
          args: Prisma.SecondaryEmailCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SecondaryEmailCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>[];
        };
        delete: {
          args: Prisma.SecondaryEmailDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>;
        };
        update: {
          args: Prisma.SecondaryEmailUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>;
        };
        deleteMany: {
          args: Prisma.SecondaryEmailDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SecondaryEmailUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SecondaryEmailUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>[];
        };
        upsert: {
          args: Prisma.SecondaryEmailUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SecondaryEmailPayload>;
        };
        aggregate: {
          args: Prisma.SecondaryEmailAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSecondaryEmail>;
        };
        groupBy: {
          args: Prisma.SecondaryEmailGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SecondaryEmailGroupByOutputType>[];
        };
        count: {
          args: Prisma.SecondaryEmailCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SecondaryEmailCountAggregateOutputType> | number;
        };
      };
    };
    Task: {
      payload: Prisma.$TaskPayload<ExtArgs>;
      fields: Prisma.TaskFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TaskFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>;
        };
        findFirst: {
          args: Prisma.TaskFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>;
        };
        findMany: {
          args: Prisma.TaskFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[];
        };
        create: {
          args: Prisma.TaskCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>;
        };
        createMany: {
          args: Prisma.TaskCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[];
        };
        delete: {
          args: Prisma.TaskDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>;
        };
        update: {
          args: Prisma.TaskUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>;
        };
        deleteMany: {
          args: Prisma.TaskDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TaskUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[];
        };
        upsert: {
          args: Prisma.TaskUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>;
        };
        aggregate: {
          args: Prisma.TaskAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTask>;
        };
        groupBy: {
          args: Prisma.TaskGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TaskGroupByOutputType>[];
        };
        count: {
          args: Prisma.TaskCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TaskCountAggregateOutputType> | number;
        };
      };
    };
    ManagedOrganization: {
      payload: Prisma.$ManagedOrganizationPayload<ExtArgs>;
      fields: Prisma.ManagedOrganizationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ManagedOrganizationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ManagedOrganizationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>;
        };
        findFirst: {
          args: Prisma.ManagedOrganizationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ManagedOrganizationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>;
        };
        findMany: {
          args: Prisma.ManagedOrganizationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>[];
        };
        create: {
          args: Prisma.ManagedOrganizationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>;
        };
        createMany: {
          args: Prisma.ManagedOrganizationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ManagedOrganizationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>[];
        };
        delete: {
          args: Prisma.ManagedOrganizationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>;
        };
        update: {
          args: Prisma.ManagedOrganizationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>;
        };
        deleteMany: {
          args: Prisma.ManagedOrganizationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ManagedOrganizationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ManagedOrganizationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>[];
        };
        upsert: {
          args: Prisma.ManagedOrganizationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManagedOrganizationPayload>;
        };
        aggregate: {
          args: Prisma.ManagedOrganizationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateManagedOrganization>;
        };
        groupBy: {
          args: Prisma.ManagedOrganizationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ManagedOrganizationGroupByOutputType>[];
        };
        count: {
          args: Prisma.ManagedOrganizationCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ManagedOrganizationCountAggregateOutputType> | number;
        };
      };
    };
    PlatformBilling: {
      payload: Prisma.$PlatformBillingPayload<ExtArgs>;
      fields: Prisma.PlatformBillingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.PlatformBillingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.PlatformBillingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>;
        };
        findFirst: {
          args: Prisma.PlatformBillingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.PlatformBillingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>;
        };
        findMany: {
          args: Prisma.PlatformBillingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>[];
        };
        create: {
          args: Prisma.PlatformBillingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>;
        };
        createMany: {
          args: Prisma.PlatformBillingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.PlatformBillingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>[];
        };
        delete: {
          args: Prisma.PlatformBillingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>;
        };
        update: {
          args: Prisma.PlatformBillingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>;
        };
        deleteMany: {
          args: Prisma.PlatformBillingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.PlatformBillingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.PlatformBillingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>[];
        };
        upsert: {
          args: Prisma.PlatformBillingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PlatformBillingPayload>;
        };
        aggregate: {
          args: Prisma.PlatformBillingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregatePlatformBilling>;
        };
        groupBy: {
          args: Prisma.PlatformBillingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PlatformBillingGroupByOutputType>[];
        };
        count: {
          args: Prisma.PlatformBillingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.PlatformBillingCountAggregateOutputType> | number;
        };
      };
    };
    AttributeOption: {
      payload: Prisma.$AttributeOptionPayload<ExtArgs>;
      fields: Prisma.AttributeOptionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AttributeOptionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AttributeOptionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>;
        };
        findFirst: {
          args: Prisma.AttributeOptionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AttributeOptionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>;
        };
        findMany: {
          args: Prisma.AttributeOptionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>[];
        };
        create: {
          args: Prisma.AttributeOptionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>;
        };
        createMany: {
          args: Prisma.AttributeOptionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AttributeOptionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>[];
        };
        delete: {
          args: Prisma.AttributeOptionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>;
        };
        update: {
          args: Prisma.AttributeOptionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>;
        };
        deleteMany: {
          args: Prisma.AttributeOptionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AttributeOptionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AttributeOptionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>[];
        };
        upsert: {
          args: Prisma.AttributeOptionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeOptionPayload>;
        };
        aggregate: {
          args: Prisma.AttributeOptionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAttributeOption>;
        };
        groupBy: {
          args: Prisma.AttributeOptionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttributeOptionGroupByOutputType>[];
        };
        count: {
          args: Prisma.AttributeOptionCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttributeOptionCountAggregateOutputType> | number;
        };
      };
    };
    Attribute: {
      payload: Prisma.$AttributePayload<ExtArgs>;
      fields: Prisma.AttributeFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AttributeFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AttributeFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>;
        };
        findFirst: {
          args: Prisma.AttributeFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AttributeFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>;
        };
        findMany: {
          args: Prisma.AttributeFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>[];
        };
        create: {
          args: Prisma.AttributeCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>;
        };
        createMany: {
          args: Prisma.AttributeCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AttributeCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>[];
        };
        delete: {
          args: Prisma.AttributeDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>;
        };
        update: {
          args: Prisma.AttributeUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>;
        };
        deleteMany: {
          args: Prisma.AttributeDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AttributeUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AttributeUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>[];
        };
        upsert: {
          args: Prisma.AttributeUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributePayload>;
        };
        aggregate: {
          args: Prisma.AttributeAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAttribute>;
        };
        groupBy: {
          args: Prisma.AttributeGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttributeGroupByOutputType>[];
        };
        count: {
          args: Prisma.AttributeCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttributeCountAggregateOutputType> | number;
        };
      };
    };
    AttributeToUser: {
      payload: Prisma.$AttributeToUserPayload<ExtArgs>;
      fields: Prisma.AttributeToUserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AttributeToUserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AttributeToUserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>;
        };
        findFirst: {
          args: Prisma.AttributeToUserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AttributeToUserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>;
        };
        findMany: {
          args: Prisma.AttributeToUserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>[];
        };
        create: {
          args: Prisma.AttributeToUserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>;
        };
        createMany: {
          args: Prisma.AttributeToUserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AttributeToUserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>[];
        };
        delete: {
          args: Prisma.AttributeToUserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>;
        };
        update: {
          args: Prisma.AttributeToUserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>;
        };
        deleteMany: {
          args: Prisma.AttributeToUserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AttributeToUserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AttributeToUserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>[];
        };
        upsert: {
          args: Prisma.AttributeToUserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AttributeToUserPayload>;
        };
        aggregate: {
          args: Prisma.AttributeToUserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAttributeToUser>;
        };
        groupBy: {
          args: Prisma.AttributeToUserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttributeToUserGroupByOutputType>[];
        };
        count: {
          args: Prisma.AttributeToUserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AttributeToUserCountAggregateOutputType> | number;
        };
      };
    };
    AssignmentReason: {
      payload: Prisma.$AssignmentReasonPayload<ExtArgs>;
      fields: Prisma.AssignmentReasonFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AssignmentReasonFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AssignmentReasonFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>;
        };
        findFirst: {
          args: Prisma.AssignmentReasonFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AssignmentReasonFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>;
        };
        findMany: {
          args: Prisma.AssignmentReasonFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>[];
        };
        create: {
          args: Prisma.AssignmentReasonCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>;
        };
        createMany: {
          args: Prisma.AssignmentReasonCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AssignmentReasonCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>[];
        };
        delete: {
          args: Prisma.AssignmentReasonDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>;
        };
        update: {
          args: Prisma.AssignmentReasonUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>;
        };
        deleteMany: {
          args: Prisma.AssignmentReasonDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AssignmentReasonUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AssignmentReasonUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>[];
        };
        upsert: {
          args: Prisma.AssignmentReasonUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssignmentReasonPayload>;
        };
        aggregate: {
          args: Prisma.AssignmentReasonAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssignmentReason>;
        };
        groupBy: {
          args: Prisma.AssignmentReasonGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AssignmentReasonGroupByOutputType>[];
        };
        count: {
          args: Prisma.AssignmentReasonCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AssignmentReasonCountAggregateOutputType> | number;
        };
      };
    };
    DelegationCredential: {
      payload: Prisma.$DelegationCredentialPayload<ExtArgs>;
      fields: Prisma.DelegationCredentialFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DelegationCredentialFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DelegationCredentialFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>;
        };
        findFirst: {
          args: Prisma.DelegationCredentialFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DelegationCredentialFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>;
        };
        findMany: {
          args: Prisma.DelegationCredentialFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>[];
        };
        create: {
          args: Prisma.DelegationCredentialCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>;
        };
        createMany: {
          args: Prisma.DelegationCredentialCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DelegationCredentialCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>[];
        };
        delete: {
          args: Prisma.DelegationCredentialDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>;
        };
        update: {
          args: Prisma.DelegationCredentialUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>;
        };
        deleteMany: {
          args: Prisma.DelegationCredentialDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DelegationCredentialUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DelegationCredentialUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>[];
        };
        upsert: {
          args: Prisma.DelegationCredentialUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DelegationCredentialPayload>;
        };
        aggregate: {
          args: Prisma.DelegationCredentialAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDelegationCredential>;
        };
        groupBy: {
          args: Prisma.DelegationCredentialGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DelegationCredentialGroupByOutputType>[];
        };
        count: {
          args: Prisma.DelegationCredentialCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DelegationCredentialCountAggregateOutputType> | number;
        };
      };
    };
    DomainWideDelegation: {
      payload: Prisma.$DomainWideDelegationPayload<ExtArgs>;
      fields: Prisma.DomainWideDelegationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DomainWideDelegationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DomainWideDelegationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>;
        };
        findFirst: {
          args: Prisma.DomainWideDelegationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DomainWideDelegationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>;
        };
        findMany: {
          args: Prisma.DomainWideDelegationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>[];
        };
        create: {
          args: Prisma.DomainWideDelegationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>;
        };
        createMany: {
          args: Prisma.DomainWideDelegationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DomainWideDelegationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>[];
        };
        delete: {
          args: Prisma.DomainWideDelegationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>;
        };
        update: {
          args: Prisma.DomainWideDelegationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>;
        };
        deleteMany: {
          args: Prisma.DomainWideDelegationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DomainWideDelegationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DomainWideDelegationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>[];
        };
        upsert: {
          args: Prisma.DomainWideDelegationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DomainWideDelegationPayload>;
        };
        aggregate: {
          args: Prisma.DomainWideDelegationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDomainWideDelegation>;
        };
        groupBy: {
          args: Prisma.DomainWideDelegationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DomainWideDelegationGroupByOutputType>[];
        };
        count: {
          args: Prisma.DomainWideDelegationCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DomainWideDelegationCountAggregateOutputType> | number;
        };
      };
    };
    WorkspacePlatform: {
      payload: Prisma.$WorkspacePlatformPayload<ExtArgs>;
      fields: Prisma.WorkspacePlatformFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkspacePlatformFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkspacePlatformFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>;
        };
        findFirst: {
          args: Prisma.WorkspacePlatformFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkspacePlatformFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>;
        };
        findMany: {
          args: Prisma.WorkspacePlatformFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>[];
        };
        create: {
          args: Prisma.WorkspacePlatformCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>;
        };
        createMany: {
          args: Prisma.WorkspacePlatformCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkspacePlatformCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>[];
        };
        delete: {
          args: Prisma.WorkspacePlatformDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>;
        };
        update: {
          args: Prisma.WorkspacePlatformUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>;
        };
        deleteMany: {
          args: Prisma.WorkspacePlatformDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkspacePlatformUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkspacePlatformUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>[];
        };
        upsert: {
          args: Prisma.WorkspacePlatformUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkspacePlatformPayload>;
        };
        aggregate: {
          args: Prisma.WorkspacePlatformAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkspacePlatform>;
        };
        groupBy: {
          args: Prisma.WorkspacePlatformGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkspacePlatformGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkspacePlatformCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkspacePlatformCountAggregateOutputType> | number;
        };
      };
    };
    EventTypeTranslation: {
      payload: Prisma.$EventTypeTranslationPayload<ExtArgs>;
      fields: Prisma.EventTypeTranslationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EventTypeTranslationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EventTypeTranslationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>;
        };
        findFirst: {
          args: Prisma.EventTypeTranslationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EventTypeTranslationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>;
        };
        findMany: {
          args: Prisma.EventTypeTranslationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>[];
        };
        create: {
          args: Prisma.EventTypeTranslationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>;
        };
        createMany: {
          args: Prisma.EventTypeTranslationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EventTypeTranslationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>[];
        };
        delete: {
          args: Prisma.EventTypeTranslationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>;
        };
        update: {
          args: Prisma.EventTypeTranslationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>;
        };
        deleteMany: {
          args: Prisma.EventTypeTranslationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EventTypeTranslationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EventTypeTranslationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>[];
        };
        upsert: {
          args: Prisma.EventTypeTranslationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventTypeTranslationPayload>;
        };
        aggregate: {
          args: Prisma.EventTypeTranslationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEventTypeTranslation>;
        };
        groupBy: {
          args: Prisma.EventTypeTranslationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventTypeTranslationGroupByOutputType>[];
        };
        count: {
          args: Prisma.EventTypeTranslationCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventTypeTranslationCountAggregateOutputType> | number;
        };
      };
    };
    Watchlist: {
      payload: Prisma.$WatchlistPayload<ExtArgs>;
      fields: Prisma.WatchlistFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WatchlistFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WatchlistFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>;
        };
        findFirst: {
          args: Prisma.WatchlistFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WatchlistFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>;
        };
        findMany: {
          args: Prisma.WatchlistFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>[];
        };
        create: {
          args: Prisma.WatchlistCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>;
        };
        createMany: {
          args: Prisma.WatchlistCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WatchlistCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>[];
        };
        delete: {
          args: Prisma.WatchlistDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>;
        };
        update: {
          args: Prisma.WatchlistUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>;
        };
        deleteMany: {
          args: Prisma.WatchlistDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WatchlistUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WatchlistUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>[];
        };
        upsert: {
          args: Prisma.WatchlistUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistPayload>;
        };
        aggregate: {
          args: Prisma.WatchlistAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWatchlist>;
        };
        groupBy: {
          args: Prisma.WatchlistGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WatchlistGroupByOutputType>[];
        };
        count: {
          args: Prisma.WatchlistCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WatchlistCountAggregateOutputType> | number;
        };
      };
    };
    WatchlistAudit: {
      payload: Prisma.$WatchlistAuditPayload<ExtArgs>;
      fields: Prisma.WatchlistAuditFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WatchlistAuditFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WatchlistAuditFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>;
        };
        findFirst: {
          args: Prisma.WatchlistAuditFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WatchlistAuditFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>;
        };
        findMany: {
          args: Prisma.WatchlistAuditFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>[];
        };
        create: {
          args: Prisma.WatchlistAuditCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>;
        };
        createMany: {
          args: Prisma.WatchlistAuditCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WatchlistAuditCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>[];
        };
        delete: {
          args: Prisma.WatchlistAuditDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>;
        };
        update: {
          args: Prisma.WatchlistAuditUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>;
        };
        deleteMany: {
          args: Prisma.WatchlistAuditDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WatchlistAuditUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WatchlistAuditUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>[];
        };
        upsert: {
          args: Prisma.WatchlistAuditUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistAuditPayload>;
        };
        aggregate: {
          args: Prisma.WatchlistAuditAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWatchlistAudit>;
        };
        groupBy: {
          args: Prisma.WatchlistAuditGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WatchlistAuditGroupByOutputType>[];
        };
        count: {
          args: Prisma.WatchlistAuditCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WatchlistAuditCountAggregateOutputType> | number;
        };
      };
    };
    WatchlistEventAudit: {
      payload: Prisma.$WatchlistEventAuditPayload<ExtArgs>;
      fields: Prisma.WatchlistEventAuditFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WatchlistEventAuditFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WatchlistEventAuditFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>;
        };
        findFirst: {
          args: Prisma.WatchlistEventAuditFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WatchlistEventAuditFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>;
        };
        findMany: {
          args: Prisma.WatchlistEventAuditFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>[];
        };
        create: {
          args: Prisma.WatchlistEventAuditCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>;
        };
        createMany: {
          args: Prisma.WatchlistEventAuditCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WatchlistEventAuditCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>[];
        };
        delete: {
          args: Prisma.WatchlistEventAuditDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>;
        };
        update: {
          args: Prisma.WatchlistEventAuditUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>;
        };
        deleteMany: {
          args: Prisma.WatchlistEventAuditDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WatchlistEventAuditUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WatchlistEventAuditUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>[];
        };
        upsert: {
          args: Prisma.WatchlistEventAuditUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WatchlistEventAuditPayload>;
        };
        aggregate: {
          args: Prisma.WatchlistEventAuditAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWatchlistEventAudit>;
        };
        groupBy: {
          args: Prisma.WatchlistEventAuditGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WatchlistEventAuditGroupByOutputType>[];
        };
        count: {
          args: Prisma.WatchlistEventAuditCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WatchlistEventAuditCountAggregateOutputType> | number;
        };
      };
    };
    BookingReport: {
      payload: Prisma.$BookingReportPayload<ExtArgs>;
      fields: Prisma.BookingReportFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingReportFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingReportFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>;
        };
        findFirst: {
          args: Prisma.BookingReportFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingReportFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>;
        };
        findMany: {
          args: Prisma.BookingReportFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>[];
        };
        create: {
          args: Prisma.BookingReportCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>;
        };
        createMany: {
          args: Prisma.BookingReportCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BookingReportCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>[];
        };
        delete: {
          args: Prisma.BookingReportDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>;
        };
        update: {
          args: Prisma.BookingReportUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>;
        };
        deleteMany: {
          args: Prisma.BookingReportDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BookingReportUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BookingReportUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>[];
        };
        upsert: {
          args: Prisma.BookingReportUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingReportPayload>;
        };
        aggregate: {
          args: Prisma.BookingReportAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingReport>;
        };
        groupBy: {
          args: Prisma.BookingReportGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingReportGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingReportCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingReportCountAggregateOutputType> | number;
        };
      };
    };
    OrganizationOnboarding: {
      payload: Prisma.$OrganizationOnboardingPayload<ExtArgs>;
      fields: Prisma.OrganizationOnboardingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OrganizationOnboardingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OrganizationOnboardingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>;
        };
        findFirst: {
          args: Prisma.OrganizationOnboardingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OrganizationOnboardingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>;
        };
        findMany: {
          args: Prisma.OrganizationOnboardingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>[];
        };
        create: {
          args: Prisma.OrganizationOnboardingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>;
        };
        createMany: {
          args: Prisma.OrganizationOnboardingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OrganizationOnboardingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>[];
        };
        delete: {
          args: Prisma.OrganizationOnboardingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>;
        };
        update: {
          args: Prisma.OrganizationOnboardingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>;
        };
        deleteMany: {
          args: Prisma.OrganizationOnboardingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OrganizationOnboardingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OrganizationOnboardingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>[];
        };
        upsert: {
          args: Prisma.OrganizationOnboardingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationOnboardingPayload>;
        };
        aggregate: {
          args: Prisma.OrganizationOnboardingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationOnboarding>;
        };
        groupBy: {
          args: Prisma.OrganizationOnboardingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OrganizationOnboardingGroupByOutputType>[];
        };
        count: {
          args: Prisma.OrganizationOnboardingCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.OrganizationOnboardingCountAggregateOutputType>
            | number;
        };
      };
    };
    App_RoutingForms_IncompleteBookingActions: {
      payload: Prisma.$App_RoutingForms_IncompleteBookingActionsPayload<ExtArgs>;
      fields: Prisma.App_RoutingForms_IncompleteBookingActionsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>;
        };
        findFirst: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>;
        };
        findMany: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>[];
        };
        create: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>;
        };
        createMany: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>[];
        };
        delete: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>;
        };
        update: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>;
        };
        deleteMany: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>[];
        };
        upsert: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$App_RoutingForms_IncompleteBookingActionsPayload>;
        };
        aggregate: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateApp_RoutingForms_IncompleteBookingActions>;
        };
        groupBy: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.App_RoutingForms_IncompleteBookingActionsGroupByOutputType>[];
        };
        count: {
          args: Prisma.App_RoutingForms_IncompleteBookingActionsCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.App_RoutingForms_IncompleteBookingActionsCountAggregateOutputType>
            | number;
        };
      };
    };
    InternalNotePreset: {
      payload: Prisma.$InternalNotePresetPayload<ExtArgs>;
      fields: Prisma.InternalNotePresetFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.InternalNotePresetFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.InternalNotePresetFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>;
        };
        findFirst: {
          args: Prisma.InternalNotePresetFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.InternalNotePresetFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>;
        };
        findMany: {
          args: Prisma.InternalNotePresetFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>[];
        };
        create: {
          args: Prisma.InternalNotePresetCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>;
        };
        createMany: {
          args: Prisma.InternalNotePresetCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.InternalNotePresetCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>[];
        };
        delete: {
          args: Prisma.InternalNotePresetDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>;
        };
        update: {
          args: Prisma.InternalNotePresetUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>;
        };
        deleteMany: {
          args: Prisma.InternalNotePresetDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.InternalNotePresetUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.InternalNotePresetUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>[];
        };
        upsert: {
          args: Prisma.InternalNotePresetUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InternalNotePresetPayload>;
        };
        aggregate: {
          args: Prisma.InternalNotePresetAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateInternalNotePreset>;
        };
        groupBy: {
          args: Prisma.InternalNotePresetGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InternalNotePresetGroupByOutputType>[];
        };
        count: {
          args: Prisma.InternalNotePresetCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InternalNotePresetCountAggregateOutputType> | number;
        };
      };
    };
    FilterSegment: {
      payload: Prisma.$FilterSegmentPayload<ExtArgs>;
      fields: Prisma.FilterSegmentFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.FilterSegmentFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.FilterSegmentFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>;
        };
        findFirst: {
          args: Prisma.FilterSegmentFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.FilterSegmentFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>;
        };
        findMany: {
          args: Prisma.FilterSegmentFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>[];
        };
        create: {
          args: Prisma.FilterSegmentCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>;
        };
        createMany: {
          args: Prisma.FilterSegmentCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.FilterSegmentCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>[];
        };
        delete: {
          args: Prisma.FilterSegmentDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>;
        };
        update: {
          args: Prisma.FilterSegmentUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>;
        };
        deleteMany: {
          args: Prisma.FilterSegmentDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.FilterSegmentUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.FilterSegmentUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>[];
        };
        upsert: {
          args: Prisma.FilterSegmentUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilterSegmentPayload>;
        };
        aggregate: {
          args: Prisma.FilterSegmentAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateFilterSegment>;
        };
        groupBy: {
          args: Prisma.FilterSegmentGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FilterSegmentGroupByOutputType>[];
        };
        count: {
          args: Prisma.FilterSegmentCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FilterSegmentCountAggregateOutputType> | number;
        };
      };
    };
    UserFilterSegmentPreference: {
      payload: Prisma.$UserFilterSegmentPreferencePayload<ExtArgs>;
      fields: Prisma.UserFilterSegmentPreferenceFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFilterSegmentPreferenceFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFilterSegmentPreferenceFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>;
        };
        findFirst: {
          args: Prisma.UserFilterSegmentPreferenceFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFilterSegmentPreferenceFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>;
        };
        findMany: {
          args: Prisma.UserFilterSegmentPreferenceFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>[];
        };
        create: {
          args: Prisma.UserFilterSegmentPreferenceCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>;
        };
        createMany: {
          args: Prisma.UserFilterSegmentPreferenceCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserFilterSegmentPreferenceCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>[];
        };
        delete: {
          args: Prisma.UserFilterSegmentPreferenceDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>;
        };
        update: {
          args: Prisma.UserFilterSegmentPreferenceUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>;
        };
        deleteMany: {
          args: Prisma.UserFilterSegmentPreferenceDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserFilterSegmentPreferenceUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserFilterSegmentPreferenceUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>[];
        };
        upsert: {
          args: Prisma.UserFilterSegmentPreferenceUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFilterSegmentPreferencePayload>;
        };
        aggregate: {
          args: Prisma.UserFilterSegmentPreferenceAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserFilterSegmentPreference>;
        };
        groupBy: {
          args: Prisma.UserFilterSegmentPreferenceGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserFilterSegmentPreferenceGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserFilterSegmentPreferenceCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.UserFilterSegmentPreferenceCountAggregateOutputType>
            | number;
        };
      };
    };
    BookingInternalNote: {
      payload: Prisma.$BookingInternalNotePayload<ExtArgs>;
      fields: Prisma.BookingInternalNoteFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingInternalNoteFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingInternalNoteFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>;
        };
        findFirst: {
          args: Prisma.BookingInternalNoteFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingInternalNoteFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>;
        };
        findMany: {
          args: Prisma.BookingInternalNoteFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>[];
        };
        create: {
          args: Prisma.BookingInternalNoteCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>;
        };
        createMany: {
          args: Prisma.BookingInternalNoteCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BookingInternalNoteCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>[];
        };
        delete: {
          args: Prisma.BookingInternalNoteDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>;
        };
        update: {
          args: Prisma.BookingInternalNoteUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>;
        };
        deleteMany: {
          args: Prisma.BookingInternalNoteDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BookingInternalNoteUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BookingInternalNoteUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>[];
        };
        upsert: {
          args: Prisma.BookingInternalNoteUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingInternalNotePayload>;
        };
        aggregate: {
          args: Prisma.BookingInternalNoteAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingInternalNote>;
        };
        groupBy: {
          args: Prisma.BookingInternalNoteGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingInternalNoteGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingInternalNoteCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingInternalNoteCountAggregateOutputType> | number;
        };
      };
    };
    WorkflowOptOutContact: {
      payload: Prisma.$WorkflowOptOutContactPayload<ExtArgs>;
      fields: Prisma.WorkflowOptOutContactFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.WorkflowOptOutContactFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.WorkflowOptOutContactFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>;
        };
        findFirst: {
          args: Prisma.WorkflowOptOutContactFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.WorkflowOptOutContactFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>;
        };
        findMany: {
          args: Prisma.WorkflowOptOutContactFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>[];
        };
        create: {
          args: Prisma.WorkflowOptOutContactCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>;
        };
        createMany: {
          args: Prisma.WorkflowOptOutContactCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.WorkflowOptOutContactCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>[];
        };
        delete: {
          args: Prisma.WorkflowOptOutContactDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>;
        };
        update: {
          args: Prisma.WorkflowOptOutContactUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>;
        };
        deleteMany: {
          args: Prisma.WorkflowOptOutContactDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.WorkflowOptOutContactUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.WorkflowOptOutContactUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>[];
        };
        upsert: {
          args: Prisma.WorkflowOptOutContactUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkflowOptOutContactPayload>;
        };
        aggregate: {
          args: Prisma.WorkflowOptOutContactAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkflowOptOutContact>;
        };
        groupBy: {
          args: Prisma.WorkflowOptOutContactGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowOptOutContactGroupByOutputType>[];
        };
        count: {
          args: Prisma.WorkflowOptOutContactCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.WorkflowOptOutContactCountAggregateOutputType> | number;
        };
      };
    };
    Role: {
      payload: Prisma.$RolePayload<ExtArgs>;
      fields: Prisma.RoleFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RoleFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>;
        };
        findFirst: {
          args: Prisma.RoleFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>;
        };
        findMany: {
          args: Prisma.RoleFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[];
        };
        create: {
          args: Prisma.RoleCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>;
        };
        createMany: {
          args: Prisma.RoleCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[];
        };
        delete: {
          args: Prisma.RoleDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>;
        };
        update: {
          args: Prisma.RoleUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>;
        };
        deleteMany: {
          args: Prisma.RoleDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.RoleUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[];
        };
        upsert: {
          args: Prisma.RoleUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>;
        };
        aggregate: {
          args: Prisma.RoleAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRole>;
        };
        groupBy: {
          args: Prisma.RoleGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RoleGroupByOutputType>[];
        };
        count: {
          args: Prisma.RoleCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RoleCountAggregateOutputType> | number;
        };
      };
    };
    RolePermission: {
      payload: Prisma.$RolePermissionPayload<ExtArgs>;
      fields: Prisma.RolePermissionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>;
        };
        findFirst: {
          args: Prisma.RolePermissionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>;
        };
        findMany: {
          args: Prisma.RolePermissionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>[];
        };
        create: {
          args: Prisma.RolePermissionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>;
        };
        createMany: {
          args: Prisma.RolePermissionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>[];
        };
        delete: {
          args: Prisma.RolePermissionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>;
        };
        update: {
          args: Prisma.RolePermissionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>;
        };
        deleteMany: {
          args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.RolePermissionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>[];
        };
        upsert: {
          args: Prisma.RolePermissionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePermissionPayload>;
        };
        aggregate: {
          args: Prisma.RolePermissionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRolePermission>;
        };
        groupBy: {
          args: Prisma.RolePermissionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RolePermissionGroupByOutputType>[];
        };
        count: {
          args: Prisma.RolePermissionCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RolePermissionCountAggregateOutputType> | number;
        };
      };
    };
    Agent: {
      payload: Prisma.$AgentPayload<ExtArgs>;
      fields: Prisma.AgentFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AgentFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>;
        };
        findFirst: {
          args: Prisma.AgentFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>;
        };
        findMany: {
          args: Prisma.AgentFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>[];
        };
        create: {
          args: Prisma.AgentCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>;
        };
        createMany: {
          args: Prisma.AgentCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AgentCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>[];
        };
        delete: {
          args: Prisma.AgentDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>;
        };
        update: {
          args: Prisma.AgentUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>;
        };
        deleteMany: {
          args: Prisma.AgentDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AgentUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AgentUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>[];
        };
        upsert: {
          args: Prisma.AgentUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AgentPayload>;
        };
        aggregate: {
          args: Prisma.AgentAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAgent>;
        };
        groupBy: {
          args: Prisma.AgentGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AgentGroupByOutputType>[];
        };
        count: {
          args: Prisma.AgentCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AgentCountAggregateOutputType> | number;
        };
      };
    };
    CalAiPhoneNumber: {
      payload: Prisma.$CalAiPhoneNumberPayload<ExtArgs>;
      fields: Prisma.CalAiPhoneNumberFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CalAiPhoneNumberFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CalAiPhoneNumberFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>;
        };
        findFirst: {
          args: Prisma.CalAiPhoneNumberFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CalAiPhoneNumberFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>;
        };
        findMany: {
          args: Prisma.CalAiPhoneNumberFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>[];
        };
        create: {
          args: Prisma.CalAiPhoneNumberCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>;
        };
        createMany: {
          args: Prisma.CalAiPhoneNumberCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CalAiPhoneNumberCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>[];
        };
        delete: {
          args: Prisma.CalAiPhoneNumberDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>;
        };
        update: {
          args: Prisma.CalAiPhoneNumberUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>;
        };
        deleteMany: {
          args: Prisma.CalAiPhoneNumberDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CalAiPhoneNumberUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CalAiPhoneNumberUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>[];
        };
        upsert: {
          args: Prisma.CalAiPhoneNumberUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalAiPhoneNumberPayload>;
        };
        aggregate: {
          args: Prisma.CalAiPhoneNumberAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCalAiPhoneNumber>;
        };
        groupBy: {
          args: Prisma.CalAiPhoneNumberGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalAiPhoneNumberGroupByOutputType>[];
        };
        count: {
          args: Prisma.CalAiPhoneNumberCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalAiPhoneNumberCountAggregateOutputType> | number;
        };
      };
    };
    TeamBilling: {
      payload: Prisma.$TeamBillingPayload<ExtArgs>;
      fields: Prisma.TeamBillingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TeamBillingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TeamBillingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>;
        };
        findFirst: {
          args: Prisma.TeamBillingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TeamBillingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>;
        };
        findMany: {
          args: Prisma.TeamBillingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>[];
        };
        create: {
          args: Prisma.TeamBillingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>;
        };
        createMany: {
          args: Prisma.TeamBillingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TeamBillingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>[];
        };
        delete: {
          args: Prisma.TeamBillingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>;
        };
        update: {
          args: Prisma.TeamBillingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>;
        };
        deleteMany: {
          args: Prisma.TeamBillingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TeamBillingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TeamBillingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>[];
        };
        upsert: {
          args: Prisma.TeamBillingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamBillingPayload>;
        };
        aggregate: {
          args: Prisma.TeamBillingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeamBilling>;
        };
        groupBy: {
          args: Prisma.TeamBillingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TeamBillingGroupByOutputType>[];
        };
        count: {
          args: Prisma.TeamBillingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TeamBillingCountAggregateOutputType> | number;
        };
      };
    };
    OrganizationBilling: {
      payload: Prisma.$OrganizationBillingPayload<ExtArgs>;
      fields: Prisma.OrganizationBillingFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OrganizationBillingFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OrganizationBillingFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>;
        };
        findFirst: {
          args: Prisma.OrganizationBillingFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OrganizationBillingFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>;
        };
        findMany: {
          args: Prisma.OrganizationBillingFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>[];
        };
        create: {
          args: Prisma.OrganizationBillingCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>;
        };
        createMany: {
          args: Prisma.OrganizationBillingCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OrganizationBillingCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>[];
        };
        delete: {
          args: Prisma.OrganizationBillingDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>;
        };
        update: {
          args: Prisma.OrganizationBillingUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>;
        };
        deleteMany: {
          args: Prisma.OrganizationBillingDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OrganizationBillingUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OrganizationBillingUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>[];
        };
        upsert: {
          args: Prisma.OrganizationBillingUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationBillingPayload>;
        };
        aggregate: {
          args: Prisma.OrganizationBillingAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationBilling>;
        };
        groupBy: {
          args: Prisma.OrganizationBillingGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OrganizationBillingGroupByOutputType>[];
        };
        count: {
          args: Prisma.OrganizationBillingCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OrganizationBillingCountAggregateOutputType> | number;
        };
      };
    };
    CalendarCacheEvent: {
      payload: Prisma.$CalendarCacheEventPayload<ExtArgs>;
      fields: Prisma.CalendarCacheEventFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CalendarCacheEventFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CalendarCacheEventFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>;
        };
        findFirst: {
          args: Prisma.CalendarCacheEventFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CalendarCacheEventFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>;
        };
        findMany: {
          args: Prisma.CalendarCacheEventFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>[];
        };
        create: {
          args: Prisma.CalendarCacheEventCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>;
        };
        createMany: {
          args: Prisma.CalendarCacheEventCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CalendarCacheEventCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>[];
        };
        delete: {
          args: Prisma.CalendarCacheEventDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>;
        };
        update: {
          args: Prisma.CalendarCacheEventUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>;
        };
        deleteMany: {
          args: Prisma.CalendarCacheEventDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CalendarCacheEventUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CalendarCacheEventUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>[];
        };
        upsert: {
          args: Prisma.CalendarCacheEventUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CalendarCacheEventPayload>;
        };
        aggregate: {
          args: Prisma.CalendarCacheEventAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCalendarCacheEvent>;
        };
        groupBy: {
          args: Prisma.CalendarCacheEventGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalendarCacheEventGroupByOutputType>[];
        };
        count: {
          args: Prisma.CalendarCacheEventCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CalendarCacheEventCountAggregateOutputType> | number;
        };
      };
    };
    RoutingFormResponse: {
      payload: Prisma.$RoutingFormResponsePayload<ExtArgs>;
      fields: Prisma.RoutingFormResponseFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.RoutingFormResponseFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponsePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.RoutingFormResponseFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponsePayload>;
        };
        findFirst: {
          args: Prisma.RoutingFormResponseFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponsePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.RoutingFormResponseFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponsePayload>;
        };
        findMany: {
          args: Prisma.RoutingFormResponseFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoutingFormResponsePayload>[];
        };
        aggregate: {
          args: Prisma.RoutingFormResponseAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateRoutingFormResponse>;
        };
        groupBy: {
          args: Prisma.RoutingFormResponseGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RoutingFormResponseGroupByOutputType>[];
        };
        count: {
          args: Prisma.RoutingFormResponseCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.RoutingFormResponseCountAggregateOutputType> | number;
        };
      };
    };
    BookingTimeStatus: {
      payload: Prisma.$BookingTimeStatusPayload<ExtArgs>;
      fields: Prisma.BookingTimeStatusFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingTimeStatusFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingTimeStatusFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusPayload>;
        };
        findFirst: {
          args: Prisma.BookingTimeStatusFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingTimeStatusFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusPayload>;
        };
        findMany: {
          args: Prisma.BookingTimeStatusFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusPayload>[];
        };
        aggregate: {
          args: Prisma.BookingTimeStatusAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingTimeStatus>;
        };
        groupBy: {
          args: Prisma.BookingTimeStatusGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingTimeStatusGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingTimeStatusCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingTimeStatusCountAggregateOutputType> | number;
        };
      };
    };
    BookingTimeStatusDenormalized: {
      payload: Prisma.$BookingTimeStatusDenormalizedPayload<ExtArgs>;
      fields: Prisma.BookingTimeStatusDenormalizedFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BookingTimeStatusDenormalizedFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusDenormalizedPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BookingTimeStatusDenormalizedFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusDenormalizedPayload>;
        };
        findFirst: {
          args: Prisma.BookingTimeStatusDenormalizedFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusDenormalizedPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BookingTimeStatusDenormalizedFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusDenormalizedPayload>;
        };
        findMany: {
          args: Prisma.BookingTimeStatusDenormalizedFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BookingTimeStatusDenormalizedPayload>[];
        };
        aggregate: {
          args: Prisma.BookingTimeStatusDenormalizedAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBookingTimeStatusDenormalized>;
        };
        groupBy: {
          args: Prisma.BookingTimeStatusDenormalizedGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BookingTimeStatusDenormalizedGroupByOutputType>[];
        };
        count: {
          args: Prisma.BookingTimeStatusDenormalizedCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.BookingTimeStatusDenormalizedCountAggregateOutputType>
            | number;
        };
      };
    };
  };
} & {
  other: {
    payload: any;
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
    };
  };
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
} as const);

export type TransactionIsolationLevel =
  (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const HostScalarFieldEnum = {
  userId: "userId",
  eventTypeId: "eventTypeId",
  isFixed: "isFixed",
  priority: "priority",
  weight: "weight",
  weightAdjustment: "weightAdjustment",
  scheduleId: "scheduleId",
  createdAt: "createdAt",
  groupId: "groupId",
  memberId: "memberId",
} as const;

export type HostScalarFieldEnum = (typeof HostScalarFieldEnum)[keyof typeof HostScalarFieldEnum];

export const HostGroupScalarFieldEnum = {
  id: "id",
  name: "name",
  eventTypeId: "eventTypeId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type HostGroupScalarFieldEnum =
  (typeof HostGroupScalarFieldEnum)[keyof typeof HostGroupScalarFieldEnum];

export const CalVideoSettingsScalarFieldEnum = {
  eventTypeId: "eventTypeId",
  disableRecordingForOrganizer: "disableRecordingForOrganizer",
  disableRecordingForGuests: "disableRecordingForGuests",
  enableAutomaticTranscription: "enableAutomaticTranscription",
  enableAutomaticRecordingForOrganizer: "enableAutomaticRecordingForOrganizer",
  redirectUrlOnExit: "redirectUrlOnExit",
  disableTranscriptionForGuests: "disableTranscriptionForGuests",
  disableTranscriptionForOrganizer: "disableTranscriptionForOrganizer",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type CalVideoSettingsScalarFieldEnum =
  (typeof CalVideoSettingsScalarFieldEnum)[keyof typeof CalVideoSettingsScalarFieldEnum];

export const EventTypeScalarFieldEnum = {
  id: "id",
  title: "title",
  slug: "slug",
  description: "description",
  interfaceLanguage: "interfaceLanguage",
  position: "position",
  locations: "locations",
  length: "length",
  offsetStart: "offsetStart",
  hidden: "hidden",
  userId: "userId",
  profileId: "profileId",
  teamId: "teamId",
  useEventLevelSelectedCalendars: "useEventLevelSelectedCalendars",
  eventName: "eventName",
  parentId: "parentId",
  bookingFields: "bookingFields",
  timeZone: "timeZone",
  periodType: "periodType",
  periodStartDate: "periodStartDate",
  periodEndDate: "periodEndDate",
  periodDays: "periodDays",
  periodCountCalendarDays: "periodCountCalendarDays",
  lockTimeZoneToggleOnBookingPage: "lockTimeZoneToggleOnBookingPage",
  lockedTimeZone: "lockedTimeZone",
  requiresConfirmation: "requiresConfirmation",
  requiresConfirmationWillBlockSlot: "requiresConfirmationWillBlockSlot",
  requiresConfirmationForFreeEmail: "requiresConfirmationForFreeEmail",
  requiresBookerEmailVerification: "requiresBookerEmailVerification",
  canSendCalVideoTranscriptionEmails: "canSendCalVideoTranscriptionEmails",
  autoTranslateDescriptionEnabled: "autoTranslateDescriptionEnabled",
  recurringEvent: "recurringEvent",
  disableGuests: "disableGuests",
  hideCalendarNotes: "hideCalendarNotes",
  hideCalendarEventDetails: "hideCalendarEventDetails",
  minimumBookingNotice: "minimumBookingNotice",
  beforeEventBuffer: "beforeEventBuffer",
  afterEventBuffer: "afterEventBuffer",
  seatsPerTimeSlot: "seatsPerTimeSlot",
  onlyShowFirstAvailableSlot: "onlyShowFirstAvailableSlot",
  showOptimizedSlots: "showOptimizedSlots",
  disableCancelling: "disableCancelling",
  disableRescheduling: "disableRescheduling",
  seatsShowAttendees: "seatsShowAttendees",
  seatsShowAvailabilityCount: "seatsShowAvailabilityCount",
  schedulingType: "schedulingType",
  scheduleId: "scheduleId",
  allowReschedulingCancelledBookings: "allowReschedulingCancelledBookings",
  price: "price",
  currency: "currency",
  slotInterval: "slotInterval",
  metadata: "metadata",
  successRedirectUrl: "successRedirectUrl",
  forwardParamsSuccessRedirect: "forwardParamsSuccessRedirect",
  bookingLimits: "bookingLimits",
  durationLimits: "durationLimits",
  isInstantEvent: "isInstantEvent",
  instantMeetingExpiryTimeOffsetInSeconds: "instantMeetingExpiryTimeOffsetInSeconds",
  instantMeetingScheduleId: "instantMeetingScheduleId",
  instantMeetingParameters: "instantMeetingParameters",
  assignAllTeamMembers: "assignAllTeamMembers",
  assignRRMembersUsingSegment: "assignRRMembersUsingSegment",
  rrSegmentQueryValue: "rrSegmentQueryValue",
  useEventTypeDestinationCalendarEmail: "useEventTypeDestinationCalendarEmail",
  isRRWeightsEnabled: "isRRWeightsEnabled",
  maxLeadThreshold: "maxLeadThreshold",
  includeNoShowInRRCalculation: "includeNoShowInRRCalculation",
  allowReschedulingPastBookings: "allowReschedulingPastBookings",
  hideOrganizerEmail: "hideOrganizerEmail",
  maxActiveBookingsPerBooker: "maxActiveBookingsPerBooker",
  maxActiveBookingPerBookerOfferReschedule: "maxActiveBookingPerBookerOfferReschedule",
  customReplyToEmail: "customReplyToEmail",
  eventTypeColor: "eventTypeColor",
  rescheduleWithSameRoundRobinHost: "rescheduleWithSameRoundRobinHost",
  secondaryEmailId: "secondaryEmailId",
  useBookerTimezone: "useBookerTimezone",
  restrictionScheduleId: "restrictionScheduleId",
  bookingRequiresAuthentication: "bookingRequiresAuthentication",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type EventTypeScalarFieldEnum =
  (typeof EventTypeScalarFieldEnum)[keyof typeof EventTypeScalarFieldEnum];

export const CredentialScalarFieldEnum = {
  id: "id",
  type: "type",
  key: "key",
  userId: "userId",
  teamId: "teamId",
  appId: "appId",
  subscriptionId: "subscriptionId",
  paymentStatus: "paymentStatus",
  billingCycleStart: "billingCycleStart",
  invalid: "invalid",
  delegationCredentialId: "delegationCredentialId",
} as const;

export type CredentialScalarFieldEnum =
  (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum];

export const DestinationCalendarScalarFieldEnum = {
  id: "id",
  integration: "integration",
  externalId: "externalId",
  primaryEmail: "primaryEmail",
  userId: "userId",
  eventTypeId: "eventTypeId",
  credentialId: "credentialId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  delegationCredentialId: "delegationCredentialId",
  domainWideDelegationCredentialId: "domainWideDelegationCredentialId",
} as const;

export type DestinationCalendarScalarFieldEnum =
  (typeof DestinationCalendarScalarFieldEnum)[keyof typeof DestinationCalendarScalarFieldEnum];

export const UserPasswordScalarFieldEnum = {
  hash: "hash",
  userId: "userId",
} as const;

export type UserPasswordScalarFieldEnum =
  (typeof UserPasswordScalarFieldEnum)[keyof typeof UserPasswordScalarFieldEnum];

export const TravelScheduleScalarFieldEnum = {
  id: "id",
  userId: "userId",
  timeZone: "timeZone",
  startDate: "startDate",
  endDate: "endDate",
  prevTimeZone: "prevTimeZone",
} as const;

export type TravelScheduleScalarFieldEnum =
  (typeof TravelScheduleScalarFieldEnum)[keyof typeof TravelScheduleScalarFieldEnum];

export const UserScalarFieldEnum = {
  id: "id",
  username: "username",
  name: "name",
  email: "email",
  emailVerified: "emailVerified",
  bio: "bio",
  avatarUrl: "avatarUrl",
  timeZone: "timeZone",
  weekStart: "weekStart",
  startTime: "startTime",
  endTime: "endTime",
  bufferTime: "bufferTime",
  hideBranding: "hideBranding",
  theme: "theme",
  appTheme: "appTheme",
  createdDate: "createdDate",
  trialEndsAt: "trialEndsAt",
  lastActiveAt: "lastActiveAt",
  defaultScheduleId: "defaultScheduleId",
  completedOnboarding: "completedOnboarding",
  locale: "locale",
  timeFormat: "timeFormat",
  twoFactorSecret: "twoFactorSecret",
  twoFactorEnabled: "twoFactorEnabled",
  backupCodes: "backupCodes",
  identityProvider: "identityProvider",
  identityProviderId: "identityProviderId",
  invitedTo: "invitedTo",
  brandColor: "brandColor",
  darkBrandColor: "darkBrandColor",
  allowDynamicBooking: "allowDynamicBooking",
  allowSEOIndexing: "allowSEOIndexing",
  receiveMonthlyDigestEmail: "receiveMonthlyDigestEmail",
  requiresBookerEmailVerification: "requiresBookerEmailVerification",
  metadata: "metadata",
  verified: "verified",
  role: "role",
  disableImpersonation: "disableImpersonation",
  organizationId: "organizationId",
  locked: "locked",
  movedToProfileId: "movedToProfileId",
  isPlatformManaged: "isPlatformManaged",
  smsLockState: "smsLockState",
  smsLockReviewedByAdmin: "smsLockReviewedByAdmin",
  referralLinkId: "referralLinkId",
  creationSource: "creationSource",
  whitelistWorkflows: "whitelistWorkflows",
} as const;

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const NotificationsSubscriptionsScalarFieldEnum = {
  id: "id",
  userId: "userId",
  subscription: "subscription",
} as const;

export type NotificationsSubscriptionsScalarFieldEnum =
  (typeof NotificationsSubscriptionsScalarFieldEnum)[keyof typeof NotificationsSubscriptionsScalarFieldEnum];

export const ProfileScalarFieldEnum = {
  id: "id",
  uid: "uid",
  userId: "userId",
  organizationId: "organizationId",
  username: "username",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum];

export const TeamScalarFieldEnum = {
  id: "id",
  name: "name",
  slug: "slug",
  logoUrl: "logoUrl",
  calVideoLogo: "calVideoLogo",
  appLogo: "appLogo",
  appIconLogo: "appIconLogo",
  bio: "bio",
  hideBranding: "hideBranding",
  hideTeamProfileLink: "hideTeamProfileLink",
  isPrivate: "isPrivate",
  hideBookATeamMember: "hideBookATeamMember",
  createdAt: "createdAt",
  metadata: "metadata",
  theme: "theme",
  rrResetInterval: "rrResetInterval",
  rrTimestampBasis: "rrTimestampBasis",
  brandColor: "brandColor",
  darkBrandColor: "darkBrandColor",
  bannerUrl: "bannerUrl",
  parentId: "parentId",
  timeFormat: "timeFormat",
  timeZone: "timeZone",
  weekStart: "weekStart",
  isOrganization: "isOrganization",
  pendingPayment: "pendingPayment",
  isPlatform: "isPlatform",
  createdByOAuthClientId: "createdByOAuthClientId",
  smsLockState: "smsLockState",
  smsLockReviewedByAdmin: "smsLockReviewedByAdmin",
  bookingLimits: "bookingLimits",
  includeManagedEventsInLimits: "includeManagedEventsInLimits",
} as const;

export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum];

export const CreditBalanceScalarFieldEnum = {
  id: "id",
  teamId: "teamId",
  userId: "userId",
  additionalCredits: "additionalCredits",
  limitReachedAt: "limitReachedAt",
  warningSentAt: "warningSentAt",
} as const;

export type CreditBalanceScalarFieldEnum =
  (typeof CreditBalanceScalarFieldEnum)[keyof typeof CreditBalanceScalarFieldEnum];

export const CreditPurchaseLogScalarFieldEnum = {
  id: "id",
  creditBalanceId: "creditBalanceId",
  credits: "credits",
  createdAt: "createdAt",
} as const;

export type CreditPurchaseLogScalarFieldEnum =
  (typeof CreditPurchaseLogScalarFieldEnum)[keyof typeof CreditPurchaseLogScalarFieldEnum];

export const CreditExpenseLogScalarFieldEnum = {
  id: "id",
  creditBalanceId: "creditBalanceId",
  bookingUid: "bookingUid",
  credits: "credits",
  creditType: "creditType",
  date: "date",
  smsSid: "smsSid",
  smsSegments: "smsSegments",
  phoneNumber: "phoneNumber",
  email: "email",
  callDuration: "callDuration",
  creditFor: "creditFor",
  externalRef: "externalRef",
} as const;

export type CreditExpenseLogScalarFieldEnum =
  (typeof CreditExpenseLogScalarFieldEnum)[keyof typeof CreditExpenseLogScalarFieldEnum];

export const OrganizationSettingsScalarFieldEnum = {
  id: "id",
  organizationId: "organizationId",
  isOrganizationConfigured: "isOrganizationConfigured",
  isOrganizationVerified: "isOrganizationVerified",
  orgAutoAcceptEmail: "orgAutoAcceptEmail",
  lockEventTypeCreationForUsers: "lockEventTypeCreationForUsers",
  adminGetsNoSlotsNotification: "adminGetsNoSlotsNotification",
  isAdminReviewed: "isAdminReviewed",
  isAdminAPIEnabled: "isAdminAPIEnabled",
  allowSEOIndexing: "allowSEOIndexing",
  orgProfileRedirectsToVerifiedDomain: "orgProfileRedirectsToVerifiedDomain",
  disablePhoneOnlySMSNotifications: "disablePhoneOnlySMSNotifications",
} as const;

export type OrganizationSettingsScalarFieldEnum =
  (typeof OrganizationSettingsScalarFieldEnum)[keyof typeof OrganizationSettingsScalarFieldEnum];

export const MembershipScalarFieldEnum = {
  id: "id",
  teamId: "teamId",
  userId: "userId",
  accepted: "accepted",
  role: "role",
  customRoleId: "customRoleId",
  disableImpersonation: "disableImpersonation",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type MembershipScalarFieldEnum =
  (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum];

export const VerificationTokenScalarFieldEnum = {
  id: "id",
  identifier: "identifier",
  token: "token",
  expires: "expires",
  expiresInDays: "expiresInDays",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  teamId: "teamId",
  secondaryEmailId: "secondaryEmailId",
} as const;

export type VerificationTokenScalarFieldEnum =
  (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum];

export const InstantMeetingTokenScalarFieldEnum = {
  id: "id",
  token: "token",
  expires: "expires",
  teamId: "teamId",
  bookingId: "bookingId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type InstantMeetingTokenScalarFieldEnum =
  (typeof InstantMeetingTokenScalarFieldEnum)[keyof typeof InstantMeetingTokenScalarFieldEnum];

export const BookingReferenceScalarFieldEnum = {
  id: "id",
  type: "type",
  uid: "uid",
  meetingId: "meetingId",
  thirdPartyRecurringEventId: "thirdPartyRecurringEventId",
  meetingPassword: "meetingPassword",
  meetingUrl: "meetingUrl",
  bookingId: "bookingId",
  externalCalendarId: "externalCalendarId",
  deleted: "deleted",
  credentialId: "credentialId",
  delegationCredentialId: "delegationCredentialId",
  domainWideDelegationCredentialId: "domainWideDelegationCredentialId",
} as const;

export type BookingReferenceScalarFieldEnum =
  (typeof BookingReferenceScalarFieldEnum)[keyof typeof BookingReferenceScalarFieldEnum];

export const AttendeeScalarFieldEnum = {
  id: "id",
  email: "email",
  name: "name",
  timeZone: "timeZone",
  phoneNumber: "phoneNumber",
  locale: "locale",
  bookingId: "bookingId",
  noShow: "noShow",
} as const;

export type AttendeeScalarFieldEnum = (typeof AttendeeScalarFieldEnum)[keyof typeof AttendeeScalarFieldEnum];

export const BookingScalarFieldEnum = {
  id: "id",
  uid: "uid",
  idempotencyKey: "idempotencyKey",
  userId: "userId",
  userPrimaryEmail: "userPrimaryEmail",
  eventTypeId: "eventTypeId",
  title: "title",
  description: "description",
  customInputs: "customInputs",
  responses: "responses",
  startTime: "startTime",
  endTime: "endTime",
  location: "location",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  status: "status",
  paid: "paid",
  destinationCalendarId: "destinationCalendarId",
  cancellationReason: "cancellationReason",
  rejectionReason: "rejectionReason",
  reassignReason: "reassignReason",
  reassignById: "reassignById",
  dynamicEventSlugRef: "dynamicEventSlugRef",
  dynamicGroupSlugRef: "dynamicGroupSlugRef",
  rescheduled: "rescheduled",
  fromReschedule: "fromReschedule",
  recurringEventId: "recurringEventId",
  smsReminderNumber: "smsReminderNumber",
  scheduledJobs: "scheduledJobs",
  metadata: "metadata",
  isRecorded: "isRecorded",
  iCalUID: "iCalUID",
  iCalSequence: "iCalSequence",
  rating: "rating",
  ratingFeedback: "ratingFeedback",
  noShowHost: "noShowHost",
  oneTimePassword: "oneTimePassword",
  cancelledBy: "cancelledBy",
  rescheduledBy: "rescheduledBy",
  creationSource: "creationSource",
} as const;

export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum];

export const TrackingScalarFieldEnum = {
  id: "id",
  bookingId: "bookingId",
  utm_source: "utm_source",
  utm_medium: "utm_medium",
  utm_campaign: "utm_campaign",
  utm_term: "utm_term",
  utm_content: "utm_content",
} as const;

export type TrackingScalarFieldEnum = (typeof TrackingScalarFieldEnum)[keyof typeof TrackingScalarFieldEnum];

export const ScheduleScalarFieldEnum = {
  id: "id",
  userId: "userId",
  name: "name",
  timeZone: "timeZone",
} as const;

export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum];

export const AvailabilityScalarFieldEnum = {
  id: "id",
  userId: "userId",
  eventTypeId: "eventTypeId",
  days: "days",
  startTime: "startTime",
  endTime: "endTime",
  date: "date",
  scheduleId: "scheduleId",
} as const;

export type AvailabilityScalarFieldEnum =
  (typeof AvailabilityScalarFieldEnum)[keyof typeof AvailabilityScalarFieldEnum];

export const SelectedCalendarScalarFieldEnum = {
  id: "id",
  userId: "userId",
  integration: "integration",
  externalId: "externalId",
  credentialId: "credentialId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  googleChannelId: "googleChannelId",
  googleChannelKind: "googleChannelKind",
  googleChannelResourceId: "googleChannelResourceId",
  googleChannelResourceUri: "googleChannelResourceUri",
  googleChannelExpiration: "googleChannelExpiration",
  channelId: "channelId",
  channelKind: "channelKind",
  channelResourceId: "channelResourceId",
  channelResourceUri: "channelResourceUri",
  channelExpiration: "channelExpiration",
  syncSubscribedAt: "syncSubscribedAt",
  syncToken: "syncToken",
  syncedAt: "syncedAt",
  syncErrorAt: "syncErrorAt",
  syncErrorCount: "syncErrorCount",
  delegationCredentialId: "delegationCredentialId",
  domainWideDelegationCredentialId: "domainWideDelegationCredentialId",
  error: "error",
  lastErrorAt: "lastErrorAt",
  watchAttempts: "watchAttempts",
  unwatchAttempts: "unwatchAttempts",
  maxAttempts: "maxAttempts",
  eventTypeId: "eventTypeId",
} as const;

export type SelectedCalendarScalarFieldEnum =
  (typeof SelectedCalendarScalarFieldEnum)[keyof typeof SelectedCalendarScalarFieldEnum];

export const EventTypeCustomInputScalarFieldEnum = {
  id: "id",
  eventTypeId: "eventTypeId",
  label: "label",
  type: "type",
  options: "options",
  required: "required",
  placeholder: "placeholder",
} as const;

export type EventTypeCustomInputScalarFieldEnum =
  (typeof EventTypeCustomInputScalarFieldEnum)[keyof typeof EventTypeCustomInputScalarFieldEnum];

export const ResetPasswordRequestScalarFieldEnum = {
  id: "id",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  email: "email",
  expires: "expires",
} as const;

export type ResetPasswordRequestScalarFieldEnum =
  (typeof ResetPasswordRequestScalarFieldEnum)[keyof typeof ResetPasswordRequestScalarFieldEnum];

export const ReminderMailScalarFieldEnum = {
  id: "id",
  referenceId: "referenceId",
  reminderType: "reminderType",
  elapsedMinutes: "elapsedMinutes",
  createdAt: "createdAt",
} as const;

export type ReminderMailScalarFieldEnum =
  (typeof ReminderMailScalarFieldEnum)[keyof typeof ReminderMailScalarFieldEnum];

export const PaymentScalarFieldEnum = {
  id: "id",
  uid: "uid",
  appId: "appId",
  bookingId: "bookingId",
  amount: "amount",
  fee: "fee",
  currency: "currency",
  success: "success",
  refunded: "refunded",
  data: "data",
  externalId: "externalId",
  paymentOption: "paymentOption",
} as const;

export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum];

export const WebhookScalarFieldEnum = {
  id: "id",
  userId: "userId",
  teamId: "teamId",
  eventTypeId: "eventTypeId",
  platformOAuthClientId: "platformOAuthClientId",
  subscriberUrl: "subscriberUrl",
  payloadTemplate: "payloadTemplate",
  createdAt: "createdAt",
  active: "active",
  eventTriggers: "eventTriggers",
  appId: "appId",
  secret: "secret",
  platform: "platform",
  time: "time",
  timeUnit: "timeUnit",
} as const;

export type WebhookScalarFieldEnum = (typeof WebhookScalarFieldEnum)[keyof typeof WebhookScalarFieldEnum];

export const ImpersonationsScalarFieldEnum = {
  id: "id",
  createdAt: "createdAt",
  impersonatedUserId: "impersonatedUserId",
  impersonatedById: "impersonatedById",
} as const;

export type ImpersonationsScalarFieldEnum =
  (typeof ImpersonationsScalarFieldEnum)[keyof typeof ImpersonationsScalarFieldEnum];

export const ApiKeyScalarFieldEnum = {
  id: "id",
  userId: "userId",
  teamId: "teamId",
  note: "note",
  createdAt: "createdAt",
  expiresAt: "expiresAt",
  lastUsedAt: "lastUsedAt",
  hashedKey: "hashedKey",
  appId: "appId",
} as const;

export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum];

export const RateLimitScalarFieldEnum = {
  id: "id",
  name: "name",
  apiKeyId: "apiKeyId",
  ttl: "ttl",
  limit: "limit",
  blockDuration: "blockDuration",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type RateLimitScalarFieldEnum =
  (typeof RateLimitScalarFieldEnum)[keyof typeof RateLimitScalarFieldEnum];

export const HashedLinkScalarFieldEnum = {
  id: "id",
  link: "link",
  eventTypeId: "eventTypeId",
  expiresAt: "expiresAt",
  maxUsageCount: "maxUsageCount",
  usageCount: "usageCount",
} as const;

export type HashedLinkScalarFieldEnum =
  (typeof HashedLinkScalarFieldEnum)[keyof typeof HashedLinkScalarFieldEnum];

export const AccountScalarFieldEnum = {
  id: "id",
  userId: "userId",
  type: "type",
  provider: "provider",
  providerAccountId: "providerAccountId",
  providerEmail: "providerEmail",
  refresh_token: "refresh_token",
  access_token: "access_token",
  expires_at: "expires_at",
  token_type: "token_type",
  scope: "scope",
  id_token: "id_token",
  session_state: "session_state",
} as const;

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

export const SessionScalarFieldEnum = {
  id: "id",
  sessionToken: "sessionToken",
  userId: "userId",
  expires: "expires",
} as const;

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];

export const AppScalarFieldEnum = {
  slug: "slug",
  dirName: "dirName",
  keys: "keys",
  categories: "categories",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  enabled: "enabled",
} as const;

export type AppScalarFieldEnum = (typeof AppScalarFieldEnum)[keyof typeof AppScalarFieldEnum];

export const App_RoutingForms_FormScalarFieldEnum = {
  id: "id",
  description: "description",
  position: "position",
  routes: "routes",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  name: "name",
  fields: "fields",
  updatedById: "updatedById",
  userId: "userId",
  teamId: "teamId",
  disabled: "disabled",
  settings: "settings",
} as const;

export type App_RoutingForms_FormScalarFieldEnum =
  (typeof App_RoutingForms_FormScalarFieldEnum)[keyof typeof App_RoutingForms_FormScalarFieldEnum];

export const App_RoutingForms_FormResponseScalarFieldEnum = {
  id: "id",
  uuid: "uuid",
  formFillerId: "formFillerId",
  formId: "formId",
  response: "response",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  routedToBookingUid: "routedToBookingUid",
  chosenRouteId: "chosenRouteId",
} as const;

export type App_RoutingForms_FormResponseScalarFieldEnum =
  (typeof App_RoutingForms_FormResponseScalarFieldEnum)[keyof typeof App_RoutingForms_FormResponseScalarFieldEnum];

export const App_RoutingForms_QueuedFormResponseScalarFieldEnum = {
  id: "id",
  formId: "formId",
  response: "response",
  chosenRouteId: "chosenRouteId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  actualResponseId: "actualResponseId",
} as const;

export type App_RoutingForms_QueuedFormResponseScalarFieldEnum =
  (typeof App_RoutingForms_QueuedFormResponseScalarFieldEnum)[keyof typeof App_RoutingForms_QueuedFormResponseScalarFieldEnum];

export const RoutingFormResponseFieldScalarFieldEnum = {
  id: "id",
  responseId: "responseId",
  fieldId: "fieldId",
  valueString: "valueString",
  valueNumber: "valueNumber",
  valueStringArray: "valueStringArray",
} as const;

export type RoutingFormResponseFieldScalarFieldEnum =
  (typeof RoutingFormResponseFieldScalarFieldEnum)[keyof typeof RoutingFormResponseFieldScalarFieldEnum];

export const RoutingFormResponseDenormalizedScalarFieldEnum = {
  id: "id",
  uuid: "uuid",
  formId: "formId",
  formName: "formName",
  formTeamId: "formTeamId",
  formUserId: "formUserId",
  bookingUid: "bookingUid",
  bookingId: "bookingId",
  bookingStatus: "bookingStatus",
  bookingStatusOrder: "bookingStatusOrder",
  bookingCreatedAt: "bookingCreatedAt",
  bookingStartTime: "bookingStartTime",
  bookingEndTime: "bookingEndTime",
  bookingUserId: "bookingUserId",
  bookingUserName: "bookingUserName",
  bookingUserEmail: "bookingUserEmail",
  bookingUserAvatarUrl: "bookingUserAvatarUrl",
  bookingAssignmentReason: "bookingAssignmentReason",
  eventTypeId: "eventTypeId",
  eventTypeParentId: "eventTypeParentId",
  eventTypeSchedulingType: "eventTypeSchedulingType",
  createdAt: "createdAt",
  utm_source: "utm_source",
  utm_medium: "utm_medium",
  utm_campaign: "utm_campaign",
  utm_term: "utm_term",
  utm_content: "utm_content",
} as const;

export type RoutingFormResponseDenormalizedScalarFieldEnum =
  (typeof RoutingFormResponseDenormalizedScalarFieldEnum)[keyof typeof RoutingFormResponseDenormalizedScalarFieldEnum];

export const FeedbackScalarFieldEnum = {
  id: "id",
  date: "date",
  userId: "userId",
  rating: "rating",
  comment: "comment",
} as const;

export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum];

export const WorkflowStepScalarFieldEnum = {
  id: "id",
  stepNumber: "stepNumber",
  action: "action",
  workflowId: "workflowId",
  sendTo: "sendTo",
  reminderBody: "reminderBody",
  emailSubject: "emailSubject",
  template: "template",
  numberRequired: "numberRequired",
  sender: "sender",
  numberVerificationPending: "numberVerificationPending",
  includeCalendarEvent: "includeCalendarEvent",
  verifiedAt: "verifiedAt",
  agentId: "agentId",
  inboundAgentId: "inboundAgentId",
} as const;

export type WorkflowStepScalarFieldEnum =
  (typeof WorkflowStepScalarFieldEnum)[keyof typeof WorkflowStepScalarFieldEnum];

export const WorkflowScalarFieldEnum = {
  id: "id",
  position: "position",
  name: "name",
  userId: "userId",
  teamId: "teamId",
  isActiveOnAll: "isActiveOnAll",
  trigger: "trigger",
  time: "time",
  timeUnit: "timeUnit",
  type: "type",
} as const;

export type WorkflowScalarFieldEnum = (typeof WorkflowScalarFieldEnum)[keyof typeof WorkflowScalarFieldEnum];

export const AIPhoneCallConfigurationScalarFieldEnum = {
  id: "id",
  eventTypeId: "eventTypeId",
  templateType: "templateType",
  schedulerName: "schedulerName",
  generalPrompt: "generalPrompt",
  yourPhoneNumber: "yourPhoneNumber",
  numberToCall: "numberToCall",
  guestName: "guestName",
  guestEmail: "guestEmail",
  guestCompany: "guestCompany",
  enabled: "enabled",
  beginMessage: "beginMessage",
  llmId: "llmId",
} as const;

export type AIPhoneCallConfigurationScalarFieldEnum =
  (typeof AIPhoneCallConfigurationScalarFieldEnum)[keyof typeof AIPhoneCallConfigurationScalarFieldEnum];

export const WorkflowsOnEventTypesScalarFieldEnum = {
  id: "id",
  workflowId: "workflowId",
  eventTypeId: "eventTypeId",
} as const;

export type WorkflowsOnEventTypesScalarFieldEnum =
  (typeof WorkflowsOnEventTypesScalarFieldEnum)[keyof typeof WorkflowsOnEventTypesScalarFieldEnum];

export const WorkflowsOnRoutingFormsScalarFieldEnum = {
  id: "id",
  workflowId: "workflowId",
  routingFormId: "routingFormId",
} as const;

export type WorkflowsOnRoutingFormsScalarFieldEnum =
  (typeof WorkflowsOnRoutingFormsScalarFieldEnum)[keyof typeof WorkflowsOnRoutingFormsScalarFieldEnum];

export const WorkflowsOnTeamsScalarFieldEnum = {
  id: "id",
  workflowId: "workflowId",
  teamId: "teamId",
} as const;

export type WorkflowsOnTeamsScalarFieldEnum =
  (typeof WorkflowsOnTeamsScalarFieldEnum)[keyof typeof WorkflowsOnTeamsScalarFieldEnum];

export const DeploymentScalarFieldEnum = {
  id: "id",
  logo: "logo",
  theme: "theme",
  licenseKey: "licenseKey",
  signatureTokenEncrypted: "signatureTokenEncrypted",
  agreedLicenseAt: "agreedLicenseAt",
} as const;

export type DeploymentScalarFieldEnum =
  (typeof DeploymentScalarFieldEnum)[keyof typeof DeploymentScalarFieldEnum];

export const WorkflowReminderScalarFieldEnum = {
  id: "id",
  uuid: "uuid",
  bookingUid: "bookingUid",
  method: "method",
  scheduledDate: "scheduledDate",
  referenceId: "referenceId",
  scheduled: "scheduled",
  workflowStepId: "workflowStepId",
  cancelled: "cancelled",
  seatReferenceId: "seatReferenceId",
  isMandatoryReminder: "isMandatoryReminder",
  retryCount: "retryCount",
} as const;

export type WorkflowReminderScalarFieldEnum =
  (typeof WorkflowReminderScalarFieldEnum)[keyof typeof WorkflowReminderScalarFieldEnum];

export const WebhookScheduledTriggersScalarFieldEnum = {
  id: "id",
  jobName: "jobName",
  subscriberUrl: "subscriberUrl",
  payload: "payload",
  startAfter: "startAfter",
  retryCount: "retryCount",
  createdAt: "createdAt",
  appId: "appId",
  webhookId: "webhookId",
  bookingId: "bookingId",
} as const;

export type WebhookScheduledTriggersScalarFieldEnum =
  (typeof WebhookScheduledTriggersScalarFieldEnum)[keyof typeof WebhookScheduledTriggersScalarFieldEnum];

export const BookingSeatScalarFieldEnum = {
  id: "id",
  referenceUid: "referenceUid",
  bookingId: "bookingId",
  attendeeId: "attendeeId",
  data: "data",
  metadata: "metadata",
} as const;

export type BookingSeatScalarFieldEnum =
  (typeof BookingSeatScalarFieldEnum)[keyof typeof BookingSeatScalarFieldEnum];

export const VerifiedNumberScalarFieldEnum = {
  id: "id",
  userId: "userId",
  teamId: "teamId",
  phoneNumber: "phoneNumber",
} as const;

export type VerifiedNumberScalarFieldEnum =
  (typeof VerifiedNumberScalarFieldEnum)[keyof typeof VerifiedNumberScalarFieldEnum];

export const VerifiedEmailScalarFieldEnum = {
  id: "id",
  userId: "userId",
  teamId: "teamId",
  email: "email",
} as const;

export type VerifiedEmailScalarFieldEnum =
  (typeof VerifiedEmailScalarFieldEnum)[keyof typeof VerifiedEmailScalarFieldEnum];

export const FeatureScalarFieldEnum = {
  slug: "slug",
  enabled: "enabled",
  description: "description",
  type: "type",
  stale: "stale",
  lastUsedAt: "lastUsedAt",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  updatedBy: "updatedBy",
} as const;

export type FeatureScalarFieldEnum = (typeof FeatureScalarFieldEnum)[keyof typeof FeatureScalarFieldEnum];

export const UserFeaturesScalarFieldEnum = {
  userId: "userId",
  featureId: "featureId",
  assignedAt: "assignedAt",
  assignedBy: "assignedBy",
  updatedAt: "updatedAt",
} as const;

export type UserFeaturesScalarFieldEnum =
  (typeof UserFeaturesScalarFieldEnum)[keyof typeof UserFeaturesScalarFieldEnum];

export const TeamFeaturesScalarFieldEnum = {
  teamId: "teamId",
  featureId: "featureId",
  assignedAt: "assignedAt",
  assignedBy: "assignedBy",
  updatedAt: "updatedAt",
} as const;

export type TeamFeaturesScalarFieldEnum =
  (typeof TeamFeaturesScalarFieldEnum)[keyof typeof TeamFeaturesScalarFieldEnum];

export const SelectedSlotsScalarFieldEnum = {
  id: "id",
  eventTypeId: "eventTypeId",
  userId: "userId",
  slotUtcStartDate: "slotUtcStartDate",
  slotUtcEndDate: "slotUtcEndDate",
  uid: "uid",
  releaseAt: "releaseAt",
  isSeat: "isSeat",
} as const;

export type SelectedSlotsScalarFieldEnum =
  (typeof SelectedSlotsScalarFieldEnum)[keyof typeof SelectedSlotsScalarFieldEnum];

export const OAuthClientScalarFieldEnum = {
  clientId: "clientId",
  redirectUri: "redirectUri",
  clientSecret: "clientSecret",
  name: "name",
  logo: "logo",
} as const;

export type OAuthClientScalarFieldEnum =
  (typeof OAuthClientScalarFieldEnum)[keyof typeof OAuthClientScalarFieldEnum];

export const AccessCodeScalarFieldEnum = {
  id: "id",
  code: "code",
  clientId: "clientId",
  expiresAt: "expiresAt",
  scopes: "scopes",
  userId: "userId",
  teamId: "teamId",
} as const;

export type AccessCodeScalarFieldEnum =
  (typeof AccessCodeScalarFieldEnum)[keyof typeof AccessCodeScalarFieldEnum];

export const BookingDenormalizedScalarFieldEnum = {
  id: "id",
  uid: "uid",
  eventTypeId: "eventTypeId",
  title: "title",
  description: "description",
  startTime: "startTime",
  endTime: "endTime",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  location: "location",
  paid: "paid",
  status: "status",
  rescheduled: "rescheduled",
  userId: "userId",
  teamId: "teamId",
  eventLength: "eventLength",
  eventParentId: "eventParentId",
  userEmail: "userEmail",
  userName: "userName",
  userUsername: "userUsername",
  ratingFeedback: "ratingFeedback",
  rating: "rating",
  noShowHost: "noShowHost",
  isTeamBooking: "isTeamBooking",
} as const;

export type BookingDenormalizedScalarFieldEnum =
  (typeof BookingDenormalizedScalarFieldEnum)[keyof typeof BookingDenormalizedScalarFieldEnum];

export const CalendarCacheScalarFieldEnum = {
  id: "id",
  key: "key",
  value: "value",
  expiresAt: "expiresAt",
  updatedAt: "updatedAt",
  credentialId: "credentialId",
  userId: "userId",
} as const;

export type CalendarCacheScalarFieldEnum =
  (typeof CalendarCacheScalarFieldEnum)[keyof typeof CalendarCacheScalarFieldEnum];

export const TempOrgRedirectScalarFieldEnum = {
  id: "id",
  from: "from",
  fromOrgId: "fromOrgId",
  type: "type",
  toUrl: "toUrl",
  enabled: "enabled",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type TempOrgRedirectScalarFieldEnum =
  (typeof TempOrgRedirectScalarFieldEnum)[keyof typeof TempOrgRedirectScalarFieldEnum];

export const AvatarScalarFieldEnum = {
  teamId: "teamId",
  userId: "userId",
  data: "data",
  objectKey: "objectKey",
  isBanner: "isBanner",
} as const;

export type AvatarScalarFieldEnum = (typeof AvatarScalarFieldEnum)[keyof typeof AvatarScalarFieldEnum];

export const OutOfOfficeEntryScalarFieldEnum = {
  id: "id",
  uuid: "uuid",
  start: "start",
  end: "end",
  notes: "notes",
  userId: "userId",
  toUserId: "toUserId",
  reasonId: "reasonId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type OutOfOfficeEntryScalarFieldEnum =
  (typeof OutOfOfficeEntryScalarFieldEnum)[keyof typeof OutOfOfficeEntryScalarFieldEnum];

export const OutOfOfficeReasonScalarFieldEnum = {
  id: "id",
  emoji: "emoji",
  reason: "reason",
  enabled: "enabled",
  userId: "userId",
} as const;

export type OutOfOfficeReasonScalarFieldEnum =
  (typeof OutOfOfficeReasonScalarFieldEnum)[keyof typeof OutOfOfficeReasonScalarFieldEnum];

export const PlatformOAuthClientScalarFieldEnum = {
  id: "id",
  name: "name",
  secret: "secret",
  permissions: "permissions",
  logo: "logo",
  redirectUris: "redirectUris",
  organizationId: "organizationId",
  bookingRedirectUri: "bookingRedirectUri",
  bookingCancelRedirectUri: "bookingCancelRedirectUri",
  bookingRescheduleRedirectUri: "bookingRescheduleRedirectUri",
  areEmailsEnabled: "areEmailsEnabled",
  areDefaultEventTypesEnabled: "areDefaultEventTypesEnabled",
  areCalendarEventsEnabled: "areCalendarEventsEnabled",
  createdAt: "createdAt",
} as const;

export type PlatformOAuthClientScalarFieldEnum =
  (typeof PlatformOAuthClientScalarFieldEnum)[keyof typeof PlatformOAuthClientScalarFieldEnum];

export const PlatformAuthorizationTokenScalarFieldEnum = {
  id: "id",
  platformOAuthClientId: "platformOAuthClientId",
  userId: "userId",
  createdAt: "createdAt",
} as const;

export type PlatformAuthorizationTokenScalarFieldEnum =
  (typeof PlatformAuthorizationTokenScalarFieldEnum)[keyof typeof PlatformAuthorizationTokenScalarFieldEnum];

export const AccessTokenScalarFieldEnum = {
  id: "id",
  secret: "secret",
  createdAt: "createdAt",
  expiresAt: "expiresAt",
  platformOAuthClientId: "platformOAuthClientId",
  userId: "userId",
} as const;

export type AccessTokenScalarFieldEnum =
  (typeof AccessTokenScalarFieldEnum)[keyof typeof AccessTokenScalarFieldEnum];

export const RefreshTokenScalarFieldEnum = {
  id: "id",
  secret: "secret",
  createdAt: "createdAt",
  expiresAt: "expiresAt",
  platformOAuthClientId: "platformOAuthClientId",
  userId: "userId",
} as const;

export type RefreshTokenScalarFieldEnum =
  (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum];

export const DSyncDataScalarFieldEnum = {
  id: "id",
  directoryId: "directoryId",
  tenant: "tenant",
  organizationId: "organizationId",
} as const;

export type DSyncDataScalarFieldEnum =
  (typeof DSyncDataScalarFieldEnum)[keyof typeof DSyncDataScalarFieldEnum];

export const DSyncTeamGroupMappingScalarFieldEnum = {
  id: "id",
  organizationId: "organizationId",
  teamId: "teamId",
  directoryId: "directoryId",
  groupName: "groupName",
} as const;

export type DSyncTeamGroupMappingScalarFieldEnum =
  (typeof DSyncTeamGroupMappingScalarFieldEnum)[keyof typeof DSyncTeamGroupMappingScalarFieldEnum];

export const SecondaryEmailScalarFieldEnum = {
  id: "id",
  userId: "userId",
  email: "email",
  emailVerified: "emailVerified",
} as const;

export type SecondaryEmailScalarFieldEnum =
  (typeof SecondaryEmailScalarFieldEnum)[keyof typeof SecondaryEmailScalarFieldEnum];

export const TaskScalarFieldEnum = {
  id: "id",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  scheduledAt: "scheduledAt",
  succeededAt: "succeededAt",
  type: "type",
  payload: "payload",
  attempts: "attempts",
  maxAttempts: "maxAttempts",
  lastError: "lastError",
  lastFailedAttemptAt: "lastFailedAttemptAt",
  referenceUid: "referenceUid",
} as const;

export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum];

export const ManagedOrganizationScalarFieldEnum = {
  managedOrganizationId: "managedOrganizationId",
  managerOrganizationId: "managerOrganizationId",
  createdAt: "createdAt",
} as const;

export type ManagedOrganizationScalarFieldEnum =
  (typeof ManagedOrganizationScalarFieldEnum)[keyof typeof ManagedOrganizationScalarFieldEnum];

export const PlatformBillingScalarFieldEnum = {
  id: "id",
  customerId: "customerId",
  subscriptionId: "subscriptionId",
  priceId: "priceId",
  plan: "plan",
  billingCycleStart: "billingCycleStart",
  billingCycleEnd: "billingCycleEnd",
  overdue: "overdue",
  managerBillingId: "managerBillingId",
} as const;

export type PlatformBillingScalarFieldEnum =
  (typeof PlatformBillingScalarFieldEnum)[keyof typeof PlatformBillingScalarFieldEnum];

export const AttributeOptionScalarFieldEnum = {
  id: "id",
  attributeId: "attributeId",
  value: "value",
  slug: "slug",
  isGroup: "isGroup",
  contains: "contains",
} as const;

export type AttributeOptionScalarFieldEnum =
  (typeof AttributeOptionScalarFieldEnum)[keyof typeof AttributeOptionScalarFieldEnum];

export const AttributeScalarFieldEnum = {
  id: "id",
  teamId: "teamId",
  type: "type",
  name: "name",
  slug: "slug",
  enabled: "enabled",
  usersCanEditRelation: "usersCanEditRelation",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  isWeightsEnabled: "isWeightsEnabled",
  isLocked: "isLocked",
} as const;

export type AttributeScalarFieldEnum =
  (typeof AttributeScalarFieldEnum)[keyof typeof AttributeScalarFieldEnum];

export const AttributeToUserScalarFieldEnum = {
  id: "id",
  memberId: "memberId",
  attributeOptionId: "attributeOptionId",
  weight: "weight",
  createdAt: "createdAt",
  createdById: "createdById",
  createdByDSyncId: "createdByDSyncId",
  updatedAt: "updatedAt",
  updatedById: "updatedById",
  updatedByDSyncId: "updatedByDSyncId",
} as const;

export type AttributeToUserScalarFieldEnum =
  (typeof AttributeToUserScalarFieldEnum)[keyof typeof AttributeToUserScalarFieldEnum];

export const AssignmentReasonScalarFieldEnum = {
  id: "id",
  createdAt: "createdAt",
  bookingId: "bookingId",
  reasonEnum: "reasonEnum",
  reasonString: "reasonString",
} as const;

export type AssignmentReasonScalarFieldEnum =
  (typeof AssignmentReasonScalarFieldEnum)[keyof typeof AssignmentReasonScalarFieldEnum];

export const DelegationCredentialScalarFieldEnum = {
  id: "id",
  workspacePlatformId: "workspacePlatformId",
  serviceAccountKey: "serviceAccountKey",
  enabled: "enabled",
  lastEnabledAt: "lastEnabledAt",
  lastDisabledAt: "lastDisabledAt",
  organizationId: "organizationId",
  domain: "domain",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type DelegationCredentialScalarFieldEnum =
  (typeof DelegationCredentialScalarFieldEnum)[keyof typeof DelegationCredentialScalarFieldEnum];

export const DomainWideDelegationScalarFieldEnum = {
  id: "id",
  workspacePlatformId: "workspacePlatformId",
  serviceAccountKey: "serviceAccountKey",
  enabled: "enabled",
  organizationId: "organizationId",
  domain: "domain",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type DomainWideDelegationScalarFieldEnum =
  (typeof DomainWideDelegationScalarFieldEnum)[keyof typeof DomainWideDelegationScalarFieldEnum];

export const WorkspacePlatformScalarFieldEnum = {
  id: "id",
  slug: "slug",
  name: "name",
  description: "description",
  defaultServiceAccountKey: "defaultServiceAccountKey",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  enabled: "enabled",
} as const;

export type WorkspacePlatformScalarFieldEnum =
  (typeof WorkspacePlatformScalarFieldEnum)[keyof typeof WorkspacePlatformScalarFieldEnum];

export const EventTypeTranslationScalarFieldEnum = {
  uid: "uid",
  eventTypeId: "eventTypeId",
  field: "field",
  sourceLocale: "sourceLocale",
  targetLocale: "targetLocale",
  translatedText: "translatedText",
  createdAt: "createdAt",
  createdBy: "createdBy",
  updatedAt: "updatedAt",
  updatedBy: "updatedBy",
} as const;

export type EventTypeTranslationScalarFieldEnum =
  (typeof EventTypeTranslationScalarFieldEnum)[keyof typeof EventTypeTranslationScalarFieldEnum];

export const WatchlistScalarFieldEnum = {
  id: "id",
  type: "type",
  value: "value",
  description: "description",
  isGlobal: "isGlobal",
  organizationId: "organizationId",
  action: "action",
  source: "source",
  lastUpdatedAt: "lastUpdatedAt",
} as const;

export type WatchlistScalarFieldEnum =
  (typeof WatchlistScalarFieldEnum)[keyof typeof WatchlistScalarFieldEnum];

export const WatchlistAuditScalarFieldEnum = {
  id: "id",
  type: "type",
  value: "value",
  description: "description",
  action: "action",
  changedAt: "changedAt",
  changedByUserId: "changedByUserId",
  watchlistId: "watchlistId",
} as const;

export type WatchlistAuditScalarFieldEnum =
  (typeof WatchlistAuditScalarFieldEnum)[keyof typeof WatchlistAuditScalarFieldEnum];

export const WatchlistEventAuditScalarFieldEnum = {
  id: "id",
  watchlistId: "watchlistId",
  eventTypeId: "eventTypeId",
  actionTaken: "actionTaken",
  timestamp: "timestamp",
} as const;

export type WatchlistEventAuditScalarFieldEnum =
  (typeof WatchlistEventAuditScalarFieldEnum)[keyof typeof WatchlistEventAuditScalarFieldEnum];

export const BookingReportScalarFieldEnum = {
  id: "id",
  bookingUid: "bookingUid",
  bookerEmail: "bookerEmail",
  reportedById: "reportedById",
  organizationId: "organizationId",
  reason: "reason",
  description: "description",
  cancelled: "cancelled",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  watchlistId: "watchlistId",
} as const;

export type BookingReportScalarFieldEnum =
  (typeof BookingReportScalarFieldEnum)[keyof typeof BookingReportScalarFieldEnum];

export const OrganizationOnboardingScalarFieldEnum = {
  id: "id",
  createdById: "createdById",
  createdAt: "createdAt",
  orgOwnerEmail: "orgOwnerEmail",
  error: "error",
  updatedAt: "updatedAt",
  organizationId: "organizationId",
  billingPeriod: "billingPeriod",
  pricePerSeat: "pricePerSeat",
  seats: "seats",
  isPlatform: "isPlatform",
  name: "name",
  slug: "slug",
  logo: "logo",
  bio: "bio",
  brandColor: "brandColor",
  bannerUrl: "bannerUrl",
  isDomainConfigured: "isDomainConfigured",
  stripeCustomerId: "stripeCustomerId",
  stripeSubscriptionId: "stripeSubscriptionId",
  stripeSubscriptionItemId: "stripeSubscriptionItemId",
  invitedMembers: "invitedMembers",
  teams: "teams",
  isComplete: "isComplete",
} as const;

export type OrganizationOnboardingScalarFieldEnum =
  (typeof OrganizationOnboardingScalarFieldEnum)[keyof typeof OrganizationOnboardingScalarFieldEnum];

export const App_RoutingForms_IncompleteBookingActionsScalarFieldEnum = {
  id: "id",
  formId: "formId",
  actionType: "actionType",
  data: "data",
  enabled: "enabled",
  credentialId: "credentialId",
} as const;

export type App_RoutingForms_IncompleteBookingActionsScalarFieldEnum =
  (typeof App_RoutingForms_IncompleteBookingActionsScalarFieldEnum)[keyof typeof App_RoutingForms_IncompleteBookingActionsScalarFieldEnum];

export const InternalNotePresetScalarFieldEnum = {
  id: "id",
  name: "name",
  cancellationReason: "cancellationReason",
  teamId: "teamId",
  createdAt: "createdAt",
} as const;

export type InternalNotePresetScalarFieldEnum =
  (typeof InternalNotePresetScalarFieldEnum)[keyof typeof InternalNotePresetScalarFieldEnum];

export const FilterSegmentScalarFieldEnum = {
  id: "id",
  name: "name",
  tableIdentifier: "tableIdentifier",
  scope: "scope",
  activeFilters: "activeFilters",
  sorting: "sorting",
  columnVisibility: "columnVisibility",
  columnSizing: "columnSizing",
  perPage: "perPage",
  searchTerm: "searchTerm",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  userId: "userId",
  teamId: "teamId",
} as const;

export type FilterSegmentScalarFieldEnum =
  (typeof FilterSegmentScalarFieldEnum)[keyof typeof FilterSegmentScalarFieldEnum];

export const UserFilterSegmentPreferenceScalarFieldEnum = {
  id: "id",
  userId: "userId",
  tableIdentifier: "tableIdentifier",
  segmentId: "segmentId",
  systemSegmentId: "systemSegmentId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type UserFilterSegmentPreferenceScalarFieldEnum =
  (typeof UserFilterSegmentPreferenceScalarFieldEnum)[keyof typeof UserFilterSegmentPreferenceScalarFieldEnum];

export const BookingInternalNoteScalarFieldEnum = {
  id: "id",
  notePresetId: "notePresetId",
  text: "text",
  bookingId: "bookingId",
  createdById: "createdById",
  createdAt: "createdAt",
} as const;

export type BookingInternalNoteScalarFieldEnum =
  (typeof BookingInternalNoteScalarFieldEnum)[keyof typeof BookingInternalNoteScalarFieldEnum];

export const WorkflowOptOutContactScalarFieldEnum = {
  id: "id",
  type: "type",
  value: "value",
  optedOut: "optedOut",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type WorkflowOptOutContactScalarFieldEnum =
  (typeof WorkflowOptOutContactScalarFieldEnum)[keyof typeof WorkflowOptOutContactScalarFieldEnum];

export const RoleScalarFieldEnum = {
  id: "id",
  name: "name",
  color: "color",
  description: "description",
  teamId: "teamId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  type: "type",
} as const;

export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum];

export const RolePermissionScalarFieldEnum = {
  id: "id",
  roleId: "roleId",
  resource: "resource",
  action: "action",
  createdAt: "createdAt",
} as const;

export type RolePermissionScalarFieldEnum =
  (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum];

export const AgentScalarFieldEnum = {
  id: "id",
  name: "name",
  userId: "userId",
  teamId: "teamId",
  providerAgentId: "providerAgentId",
  inboundEventTypeId: "inboundEventTypeId",
  enabled: "enabled",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum];

export const CalAiPhoneNumberScalarFieldEnum = {
  id: "id",
  userId: "userId",
  teamId: "teamId",
  phoneNumber: "phoneNumber",
  provider: "provider",
  providerPhoneNumberId: "providerPhoneNumberId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  stripeCustomerId: "stripeCustomerId",
  stripeSubscriptionId: "stripeSubscriptionId",
  subscriptionStatus: "subscriptionStatus",
  inboundAgentId: "inboundAgentId",
  outboundAgentId: "outboundAgentId",
} as const;

export type CalAiPhoneNumberScalarFieldEnum =
  (typeof CalAiPhoneNumberScalarFieldEnum)[keyof typeof CalAiPhoneNumberScalarFieldEnum];

export const TeamBillingScalarFieldEnum = {
  id: "id",
  teamId: "teamId",
  subscriptionId: "subscriptionId",
  subscriptionItemId: "subscriptionItemId",
  customerId: "customerId",
  status: "status",
  planName: "planName",
  subscriptionStart: "subscriptionStart",
  subscriptionTrialEnd: "subscriptionTrialEnd",
  subscriptionEnd: "subscriptionEnd",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type TeamBillingScalarFieldEnum =
  (typeof TeamBillingScalarFieldEnum)[keyof typeof TeamBillingScalarFieldEnum];

export const OrganizationBillingScalarFieldEnum = {
  id: "id",
  teamId: "teamId",
  subscriptionId: "subscriptionId",
  subscriptionItemId: "subscriptionItemId",
  customerId: "customerId",
  status: "status",
  planName: "planName",
  subscriptionStart: "subscriptionStart",
  subscriptionTrialEnd: "subscriptionTrialEnd",
  subscriptionEnd: "subscriptionEnd",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
} as const;

export type OrganizationBillingScalarFieldEnum =
  (typeof OrganizationBillingScalarFieldEnum)[keyof typeof OrganizationBillingScalarFieldEnum];

export const CalendarCacheEventScalarFieldEnum = {
  id: "id",
  selectedCalendarId: "selectedCalendarId",
  externalId: "externalId",
  externalEtag: "externalEtag",
  iCalUID: "iCalUID",
  iCalSequence: "iCalSequence",
  summary: "summary",
  description: "description",
  location: "location",
  start: "start",
  end: "end",
  isAllDay: "isAllDay",
  timeZone: "timeZone",
  status: "status",
  recurringEventId: "recurringEventId",
  originalStartTime: "originalStartTime",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  externalCreatedAt: "externalCreatedAt",
  externalUpdatedAt: "externalUpdatedAt",
} as const;

export type CalendarCacheEventScalarFieldEnum =
  (typeof CalendarCacheEventScalarFieldEnum)[keyof typeof CalendarCacheEventScalarFieldEnum];

export const RoutingFormResponseScalarFieldEnum = {
  id: "id",
  response: "response",
  responseLowercase: "responseLowercase",
  formId: "formId",
  formName: "formName",
  formTeamId: "formTeamId",
  formUserId: "formUserId",
  bookingUid: "bookingUid",
  bookingStatus: "bookingStatus",
  bookingStatusOrder: "bookingStatusOrder",
  bookingCreatedAt: "bookingCreatedAt",
  bookingAttendees: "bookingAttendees",
  bookingUserId: "bookingUserId",
  bookingUserName: "bookingUserName",
  bookingUserEmail: "bookingUserEmail",
  bookingUserAvatarUrl: "bookingUserAvatarUrl",
  bookingAssignmentReason: "bookingAssignmentReason",
  bookingAssignmentReasonLowercase: "bookingAssignmentReasonLowercase",
  bookingStartTime: "bookingStartTime",
  bookingEndTime: "bookingEndTime",
  createdAt: "createdAt",
  utm_source: "utm_source",
  utm_medium: "utm_medium",
  utm_campaign: "utm_campaign",
  utm_term: "utm_term",
  utm_content: "utm_content",
} as const;

export type RoutingFormResponseScalarFieldEnum =
  (typeof RoutingFormResponseScalarFieldEnum)[keyof typeof RoutingFormResponseScalarFieldEnum];

export const BookingTimeStatusScalarFieldEnum = {
  id: "id",
  uid: "uid",
  eventTypeId: "eventTypeId",
  title: "title",
  description: "description",
  startTime: "startTime",
  endTime: "endTime",
  createdAt: "createdAt",
  location: "location",
  paid: "paid",
  status: "status",
  rescheduled: "rescheduled",
  userId: "userId",
  teamId: "teamId",
  eventLength: "eventLength",
  timeStatus: "timeStatus",
  eventParentId: "eventParentId",
  userEmail: "userEmail",
  username: "username",
  ratingFeedback: "ratingFeedback",
  rating: "rating",
  noShowHost: "noShowHost",
  isTeamBooking: "isTeamBooking",
} as const;

export type BookingTimeStatusScalarFieldEnum =
  (typeof BookingTimeStatusScalarFieldEnum)[keyof typeof BookingTimeStatusScalarFieldEnum];

export const BookingTimeStatusDenormalizedScalarFieldEnum = {
  id: "id",
  uid: "uid",
  eventTypeId: "eventTypeId",
  title: "title",
  description: "description",
  startTime: "startTime",
  endTime: "endTime",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  location: "location",
  paid: "paid",
  status: "status",
  rescheduled: "rescheduled",
  userId: "userId",
  teamId: "teamId",
  eventLength: "eventLength",
  eventParentId: "eventParentId",
  userEmail: "userEmail",
  userName: "userName",
  userUsername: "userUsername",
  ratingFeedback: "ratingFeedback",
  rating: "rating",
  noShowHost: "noShowHost",
  isTeamBooking: "isTeamBooking",
  timeStatus: "timeStatus",
} as const;

export type BookingTimeStatusDenormalizedScalarFieldEnum =
  (typeof BookingTimeStatusDenormalizedScalarFieldEnum)[keyof typeof BookingTimeStatusDenormalizedScalarFieldEnum];

export const SortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull,
} as const;

export type NullableJsonNullValueInput =
  (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

export const JsonNullValueInput = {
  JsonNull: JsonNull,
} as const;

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput];

export const QueryMode = {
  default: "default",
  insensitive: "insensitive",
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const NullsOrder = {
  first: "first",
  last: "last",
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull,
} as const;

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

/**
 * Field references
 */

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Int">;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Int[]">;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Boolean">;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "DateTime">;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "DateTime[]">;

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "String">;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "String[]">;

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Json">;

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "QueryMode">;

/**
 * Reference to a field of type 'PeriodType'
 */
export type EnumPeriodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "PeriodType">;

/**
 * Reference to a field of type 'PeriodType[]'
 */
export type ListEnumPeriodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "PeriodType[]">;

/**
 * Reference to a field of type 'SchedulingType'
 */
export type EnumSchedulingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "SchedulingType">;

/**
 * Reference to a field of type 'SchedulingType[]'
 */
export type ListEnumSchedulingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "SchedulingType[]"
>;

/**
 * Reference to a field of type 'IdentityProvider'
 */
export type EnumIdentityProviderFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "IdentityProvider"
>;

/**
 * Reference to a field of type 'IdentityProvider[]'
 */
export type ListEnumIdentityProviderFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "IdentityProvider[]"
>;

/**
 * Reference to a field of type 'UserPermissionRole'
 */
export type EnumUserPermissionRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "UserPermissionRole"
>;

/**
 * Reference to a field of type 'UserPermissionRole[]'
 */
export type ListEnumUserPermissionRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "UserPermissionRole[]"
>;

/**
 * Reference to a field of type 'SMSLockState'
 */
export type EnumSMSLockStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "SMSLockState">;

/**
 * Reference to a field of type 'SMSLockState[]'
 */
export type ListEnumSMSLockStateFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "SMSLockState[]"
>;

/**
 * Reference to a field of type 'CreationSource'
 */
export type EnumCreationSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "CreationSource">;

/**
 * Reference to a field of type 'CreationSource[]'
 */
export type ListEnumCreationSourceFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "CreationSource[]"
>;

/**
 * Reference to a field of type 'RRResetInterval'
 */
export type EnumRRResetIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "RRResetInterval"
>;

/**
 * Reference to a field of type 'RRResetInterval[]'
 */
export type ListEnumRRResetIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "RRResetInterval[]"
>;

/**
 * Reference to a field of type 'RRTimestampBasis'
 */
export type EnumRRTimestampBasisFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "RRTimestampBasis"
>;

/**
 * Reference to a field of type 'RRTimestampBasis[]'
 */
export type ListEnumRRTimestampBasisFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "RRTimestampBasis[]"
>;

/**
 * Reference to a field of type 'CreditType'
 */
export type EnumCreditTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "CreditType">;

/**
 * Reference to a field of type 'CreditType[]'
 */
export type ListEnumCreditTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "CreditType[]">;

/**
 * Reference to a field of type 'CreditUsageType'
 */
export type EnumCreditUsageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "CreditUsageType"
>;

/**
 * Reference to a field of type 'CreditUsageType[]'
 */
export type ListEnumCreditUsageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "CreditUsageType[]"
>;

/**
 * Reference to a field of type 'MembershipRole'
 */
export type EnumMembershipRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "MembershipRole">;

/**
 * Reference to a field of type 'MembershipRole[]'
 */
export type ListEnumMembershipRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "MembershipRole[]"
>;

/**
 * Reference to a field of type 'BookingStatus'
 */
export type EnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "BookingStatus">;

/**
 * Reference to a field of type 'BookingStatus[]'
 */
export type ListEnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "BookingStatus[]"
>;

/**
 * Reference to a field of type 'EventTypeCustomInputType'
 */
export type EnumEventTypeCustomInputTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "EventTypeCustomInputType"
>;

/**
 * Reference to a field of type 'EventTypeCustomInputType[]'
 */
export type ListEnumEventTypeCustomInputTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "EventTypeCustomInputType[]"
>;

/**
 * Reference to a field of type 'ReminderType'
 */
export type EnumReminderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "ReminderType">;

/**
 * Reference to a field of type 'ReminderType[]'
 */
export type ListEnumReminderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "ReminderType[]"
>;

/**
 * Reference to a field of type 'PaymentOption'
 */
export type EnumPaymentOptionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "PaymentOption">;

/**
 * Reference to a field of type 'PaymentOption[]'
 */
export type ListEnumPaymentOptionFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "PaymentOption[]"
>;

/**
 * Reference to a field of type 'WebhookTriggerEvents[]'
 */
export type ListEnumWebhookTriggerEventsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WebhookTriggerEvents[]"
>;

/**
 * Reference to a field of type 'WebhookTriggerEvents'
 */
export type EnumWebhookTriggerEventsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WebhookTriggerEvents"
>;

/**
 * Reference to a field of type 'TimeUnit'
 */
export type EnumTimeUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "TimeUnit">;

/**
 * Reference to a field of type 'TimeUnit[]'
 */
export type ListEnumTimeUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "TimeUnit[]">;

/**
 * Reference to a field of type 'AppCategories[]'
 */
export type ListEnumAppCategoriesFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "AppCategories[]"
>;

/**
 * Reference to a field of type 'AppCategories'
 */
export type EnumAppCategoriesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "AppCategories">;

/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Decimal">;

/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Decimal[]">;

/**
 * Reference to a field of type 'WorkflowActions'
 */
export type EnumWorkflowActionsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowActions"
>;

/**
 * Reference to a field of type 'WorkflowActions[]'
 */
export type ListEnumWorkflowActionsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowActions[]"
>;

/**
 * Reference to a field of type 'WorkflowTemplates'
 */
export type EnumWorkflowTemplatesFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowTemplates"
>;

/**
 * Reference to a field of type 'WorkflowTemplates[]'
 */
export type ListEnumWorkflowTemplatesFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowTemplates[]"
>;

/**
 * Reference to a field of type 'WorkflowTriggerEvents'
 */
export type EnumWorkflowTriggerEventsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowTriggerEvents"
>;

/**
 * Reference to a field of type 'WorkflowTriggerEvents[]'
 */
export type ListEnumWorkflowTriggerEventsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowTriggerEvents[]"
>;

/**
 * Reference to a field of type 'WorkflowType'
 */
export type EnumWorkflowTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "WorkflowType">;

/**
 * Reference to a field of type 'WorkflowType[]'
 */
export type ListEnumWorkflowTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowType[]"
>;

/**
 * Reference to a field of type 'WorkflowMethods'
 */
export type EnumWorkflowMethodsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowMethods"
>;

/**
 * Reference to a field of type 'WorkflowMethods[]'
 */
export type ListEnumWorkflowMethodsFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowMethods[]"
>;

/**
 * Reference to a field of type 'FeatureType'
 */
export type EnumFeatureTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "FeatureType">;

/**
 * Reference to a field of type 'FeatureType[]'
 */
export type ListEnumFeatureTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "FeatureType[]">;

/**
 * Reference to a field of type 'AccessScope[]'
 */
export type ListEnumAccessScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "AccessScope[]">;

/**
 * Reference to a field of type 'AccessScope'
 */
export type EnumAccessScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "AccessScope">;

/**
 * Reference to a field of type 'RedirectType'
 */
export type EnumRedirectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "RedirectType">;

/**
 * Reference to a field of type 'RedirectType[]'
 */
export type ListEnumRedirectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "RedirectType[]"
>;

/**
 * Reference to a field of type 'AttributeType'
 */
export type EnumAttributeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "AttributeType">;

/**
 * Reference to a field of type 'AttributeType[]'
 */
export type ListEnumAttributeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "AttributeType[]"
>;

/**
 * Reference to a field of type 'AssignmentReasonEnum'
 */
export type EnumAssignmentReasonEnumFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "AssignmentReasonEnum"
>;

/**
 * Reference to a field of type 'AssignmentReasonEnum[]'
 */
export type ListEnumAssignmentReasonEnumFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "AssignmentReasonEnum[]"
>;

/**
 * Reference to a field of type 'EventTypeAutoTranslatedField'
 */
export type EnumEventTypeAutoTranslatedFieldFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "EventTypeAutoTranslatedField"
>;

/**
 * Reference to a field of type 'EventTypeAutoTranslatedField[]'
 */
export type ListEnumEventTypeAutoTranslatedFieldFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "EventTypeAutoTranslatedField[]"
>;

/**
 * Reference to a field of type 'WatchlistType'
 */
export type EnumWatchlistTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "WatchlistType">;

/**
 * Reference to a field of type 'WatchlistType[]'
 */
export type ListEnumWatchlistTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WatchlistType[]"
>;

/**
 * Reference to a field of type 'WatchlistAction'
 */
export type EnumWatchlistActionFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WatchlistAction"
>;

/**
 * Reference to a field of type 'WatchlistAction[]'
 */
export type ListEnumWatchlistActionFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WatchlistAction[]"
>;

/**
 * Reference to a field of type 'WatchlistSource'
 */
export type EnumWatchlistSourceFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WatchlistSource"
>;

/**
 * Reference to a field of type 'WatchlistSource[]'
 */
export type ListEnumWatchlistSourceFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WatchlistSource[]"
>;

/**
 * Reference to a field of type 'BookingReportReason'
 */
export type EnumBookingReportReasonFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "BookingReportReason"
>;

/**
 * Reference to a field of type 'BookingReportReason[]'
 */
export type ListEnumBookingReportReasonFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "BookingReportReason[]"
>;

/**
 * Reference to a field of type 'BillingPeriod'
 */
export type EnumBillingPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "BillingPeriod">;

/**
 * Reference to a field of type 'BillingPeriod[]'
 */
export type ListEnumBillingPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "BillingPeriod[]"
>;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Float">;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Float[]">;

/**
 * Reference to a field of type 'IncompleteBookingActionType'
 */
export type EnumIncompleteBookingActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "IncompleteBookingActionType"
>;

/**
 * Reference to a field of type 'IncompleteBookingActionType[]'
 */
export type ListEnumIncompleteBookingActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "IncompleteBookingActionType[]"
>;

/**
 * Reference to a field of type 'FilterSegmentScope'
 */
export type EnumFilterSegmentScopeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "FilterSegmentScope"
>;

/**
 * Reference to a field of type 'FilterSegmentScope[]'
 */
export type ListEnumFilterSegmentScopeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "FilterSegmentScope[]"
>;

/**
 * Reference to a field of type 'WorkflowContactType'
 */
export type EnumWorkflowContactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowContactType"
>;

/**
 * Reference to a field of type 'WorkflowContactType[]'
 */
export type ListEnumWorkflowContactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "WorkflowContactType[]"
>;

/**
 * Reference to a field of type 'RoleType'
 */
export type EnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "RoleType">;

/**
 * Reference to a field of type 'RoleType[]'
 */
export type ListEnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "RoleType[]">;

/**
 * Reference to a field of type 'PhoneNumberSubscriptionStatus'
 */
export type EnumPhoneNumberSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "PhoneNumberSubscriptionStatus"
>;

/**
 * Reference to a field of type 'PhoneNumberSubscriptionStatus[]'
 */
export type ListEnumPhoneNumberSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "PhoneNumberSubscriptionStatus[]"
>;

/**
 * Reference to a field of type 'CalendarCacheEventStatus'
 */
export type EnumCalendarCacheEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "CalendarCacheEventStatus"
>;

/**
 * Reference to a field of type 'CalendarCacheEventStatus[]'
 */
export type ListEnumCalendarCacheEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "CalendarCacheEventStatus[]"
>;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number;
};

export type Datasource = {
  url?: string;
};
export type Datasources = {
  db?: Datasource;
};

export const defineExtension = runtime.Extensions
  .defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  "define",
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = "pretty" | "colorless" | "minimal";
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources;
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string;
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat;
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   *
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   *
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[];
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number;
    timeout?: number;
    isolationLevel?: TransactionIsolationLevel;
  };
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null;
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
  host?: Prisma.HostOmit;
  hostGroup?: Prisma.HostGroupOmit;
  calVideoSettings?: Prisma.CalVideoSettingsOmit;
  eventType?: Prisma.EventTypeOmit;
  credential?: Prisma.CredentialOmit;
  destinationCalendar?: Prisma.DestinationCalendarOmit;
  userPassword?: Prisma.UserPasswordOmit;
  travelSchedule?: Prisma.TravelScheduleOmit;
  user?: Prisma.UserOmit;
  notificationsSubscriptions?: Prisma.NotificationsSubscriptionsOmit;
  profile?: Prisma.ProfileOmit;
  team?: Prisma.TeamOmit;
  creditBalance?: Prisma.CreditBalanceOmit;
  creditPurchaseLog?: Prisma.CreditPurchaseLogOmit;
  creditExpenseLog?: Prisma.CreditExpenseLogOmit;
  organizationSettings?: Prisma.OrganizationSettingsOmit;
  membership?: Prisma.MembershipOmit;
  verificationToken?: Prisma.VerificationTokenOmit;
  instantMeetingToken?: Prisma.InstantMeetingTokenOmit;
  bookingReference?: Prisma.BookingReferenceOmit;
  attendee?: Prisma.AttendeeOmit;
  booking?: Prisma.BookingOmit;
  tracking?: Prisma.TrackingOmit;
  schedule?: Prisma.ScheduleOmit;
  availability?: Prisma.AvailabilityOmit;
  selectedCalendar?: Prisma.SelectedCalendarOmit;
  eventTypeCustomInput?: Prisma.EventTypeCustomInputOmit;
  resetPasswordRequest?: Prisma.ResetPasswordRequestOmit;
  reminderMail?: Prisma.ReminderMailOmit;
  payment?: Prisma.PaymentOmit;
  webhook?: Prisma.WebhookOmit;
  impersonations?: Prisma.ImpersonationsOmit;
  apiKey?: Prisma.ApiKeyOmit;
  rateLimit?: Prisma.RateLimitOmit;
  hashedLink?: Prisma.HashedLinkOmit;
  account?: Prisma.AccountOmit;
  session?: Prisma.SessionOmit;
  app?: Prisma.AppOmit;
  app_RoutingForms_Form?: Prisma.App_RoutingForms_FormOmit;
  app_RoutingForms_FormResponse?: Prisma.App_RoutingForms_FormResponseOmit;
  app_RoutingForms_QueuedFormResponse?: Prisma.App_RoutingForms_QueuedFormResponseOmit;
  routingFormResponseField?: Prisma.RoutingFormResponseFieldOmit;
  routingFormResponseDenormalized?: Prisma.RoutingFormResponseDenormalizedOmit;
  feedback?: Prisma.FeedbackOmit;
  workflowStep?: Prisma.WorkflowStepOmit;
  workflow?: Prisma.WorkflowOmit;
  aIPhoneCallConfiguration?: Prisma.AIPhoneCallConfigurationOmit;
  workflowsOnEventTypes?: Prisma.WorkflowsOnEventTypesOmit;
  workflowsOnRoutingForms?: Prisma.WorkflowsOnRoutingFormsOmit;
  workflowsOnTeams?: Prisma.WorkflowsOnTeamsOmit;
  deployment?: Prisma.DeploymentOmit;
  workflowReminder?: Prisma.WorkflowReminderOmit;
  webhookScheduledTriggers?: Prisma.WebhookScheduledTriggersOmit;
  bookingSeat?: Prisma.BookingSeatOmit;
  verifiedNumber?: Prisma.VerifiedNumberOmit;
  verifiedEmail?: Prisma.VerifiedEmailOmit;
  feature?: Prisma.FeatureOmit;
  userFeatures?: Prisma.UserFeaturesOmit;
  teamFeatures?: Prisma.TeamFeaturesOmit;
  selectedSlots?: Prisma.SelectedSlotsOmit;
  oAuthClient?: Prisma.OAuthClientOmit;
  accessCode?: Prisma.AccessCodeOmit;
  bookingDenormalized?: Prisma.BookingDenormalizedOmit;
  calendarCache?: Prisma.CalendarCacheOmit;
  tempOrgRedirect?: Prisma.TempOrgRedirectOmit;
  avatar?: Prisma.AvatarOmit;
  outOfOfficeEntry?: Prisma.OutOfOfficeEntryOmit;
  outOfOfficeReason?: Prisma.OutOfOfficeReasonOmit;
  platformOAuthClient?: Prisma.PlatformOAuthClientOmit;
  platformAuthorizationToken?: Prisma.PlatformAuthorizationTokenOmit;
  accessToken?: Prisma.AccessTokenOmit;
  refreshToken?: Prisma.RefreshTokenOmit;
  dSyncData?: Prisma.DSyncDataOmit;
  dSyncTeamGroupMapping?: Prisma.DSyncTeamGroupMappingOmit;
  secondaryEmail?: Prisma.SecondaryEmailOmit;
  task?: Prisma.TaskOmit;
  managedOrganization?: Prisma.ManagedOrganizationOmit;
  platformBilling?: Prisma.PlatformBillingOmit;
  attributeOption?: Prisma.AttributeOptionOmit;
  attribute?: Prisma.AttributeOmit;
  attributeToUser?: Prisma.AttributeToUserOmit;
  assignmentReason?: Prisma.AssignmentReasonOmit;
  delegationCredential?: Prisma.DelegationCredentialOmit;
  domainWideDelegation?: Prisma.DomainWideDelegationOmit;
  workspacePlatform?: Prisma.WorkspacePlatformOmit;
  eventTypeTranslation?: Prisma.EventTypeTranslationOmit;
  watchlist?: Prisma.WatchlistOmit;
  watchlistAudit?: Prisma.WatchlistAuditOmit;
  watchlistEventAudit?: Prisma.WatchlistEventAuditOmit;
  bookingReport?: Prisma.BookingReportOmit;
  organizationOnboarding?: Prisma.OrganizationOnboardingOmit;
  app_RoutingForms_IncompleteBookingActions?: Prisma.App_RoutingForms_IncompleteBookingActionsOmit;
  internalNotePreset?: Prisma.InternalNotePresetOmit;
  filterSegment?: Prisma.FilterSegmentOmit;
  userFilterSegmentPreference?: Prisma.UserFilterSegmentPreferenceOmit;
  bookingInternalNote?: Prisma.BookingInternalNoteOmit;
  workflowOptOutContact?: Prisma.WorkflowOptOutContactOmit;
  role?: Prisma.RoleOmit;
  rolePermission?: Prisma.RolePermissionOmit;
  agent?: Prisma.AgentOmit;
  calAiPhoneNumber?: Prisma.CalAiPhoneNumberOmit;
  teamBilling?: Prisma.TeamBillingOmit;
  organizationBilling?: Prisma.OrganizationBillingOmit;
  calendarCacheEvent?: Prisma.CalendarCacheEventOmit;
  routingFormResponse?: Prisma.RoutingFormResponseOmit;
  bookingTimeStatus?: Prisma.BookingTimeStatusOmit;
  bookingTimeStatusDenormalized?: Prisma.BookingTimeStatusDenormalizedOmit;
};

/* Types for Logging */
export type LogLevel = "info" | "query" | "warn" | "error";
export type LogDefinition = {
  level: LogLevel;
  emit: "stdout" | "event";
};

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<T extends LogDefinition ? T["level"] : T>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date;
  query: string;
  params: string;
  duration: number;
  target: string;
};

export type LogEvent = {
  timestamp: Date;
  message: string;
  target: string;
};
/* End Types for Logging */

export type PrismaAction =
  | "findUnique"
  | "findUniqueOrThrow"
  | "findMany"
  | "findFirst"
  | "findFirstOrThrow"
  | "create"
  | "createMany"
  | "createManyAndReturn"
  | "update"
  | "updateMany"
  | "updateManyAndReturn"
  | "upsert"
  | "delete"
  | "deleteMany"
  | "executeRaw"
  | "queryRaw"
  | "aggregate"
  | "count"
  | "runCommandRaw"
  | "findRaw"
  | "groupBy";

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>;
