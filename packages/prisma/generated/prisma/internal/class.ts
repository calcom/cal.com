/* !!! This is code generated by Prisma. Do not edit directly. !!! */

/* eslint-disable */
// @ts-nocheck

/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */
import * as runtime from "@prisma/client/runtime/client";

import type * as Prisma from "./prismaNamespace";

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client",
    },
    output: {
      value: "/home/ubuntu/repos/cal.com/packages/prisma/generated/prisma",
      fromEnvVar: null,
    },
    config: {
      importFileExtension: "",
      moduleFormat: "cjs",
      engineType: "client",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "debian-openssl-3.0.x",
        native: true,
      },
    ],
    previewFeatures: ["views"],
    sourceFilePath: "/home/ubuntu/repos/cal.com/packages/prisma/schema.prisma",
    isCustomOutput: true,
  },
  relativePath: "../..",
  clientVersion: "6.16.1",
  engineVersion: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  datasourceNames: ["db"],
  activeProvider: "postgresql",
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    '// This is your Prisma Schema file\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider  = "postgresql"\n  url       = env("DATABASE_URL")\n  directUrl = env("DATABASE_DIRECT_URL")\n}\n\ngenerator client {\n  provider            = "prisma-client"\n  previewFeatures     = ["views"]\n  output              = "./generated/prisma"\n  engineType          = "client"\n  moduleFormat        = "cjs"\n  importFileExtension = ""\n}\n\ngenerator zod {\n  provider                 = "zod-prisma-types"\n  output                   = "./zod"\n  useMultipleFiles         = true\n  createInputTypes         = false\n  addIncludeType           = false\n  addSelectType            = false\n  validateWhereUniqueInput = false\n  prismaClientPath         = "../../generated/prisma/client"\n  moduleFormat             = "cjs"\n  /// createRelationValuesTypes = true\n}\n\ngenerator kysely {\n  provider = "prisma-kysely"\n  output   = "../kysely"\n  fileName = "types.ts"\n}\n\ngenerator enums {\n  provider = "ts-node --transpile-only ./enum-generator.ts"\n}\n\nenum SchedulingType {\n  ROUND_ROBIN @map("roundRobin")\n  COLLECTIVE  @map("collective")\n  MANAGED     @map("managed")\n}\n\nenum PeriodType {\n  UNLIMITED      @map("unlimited")\n  ROLLING        @map("rolling")\n  ROLLING_WINDOW @map("rolling_window")\n  RANGE          @map("range")\n}\n\nenum CreationSource {\n  API_V1 @map("api_v1")\n  API_V2 @map("api_v2")\n  WEBAPP @map("webapp")\n}\n\nmodel Host {\n  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId           Int\n  eventType        EventType   @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  eventTypeId      Int\n  isFixed          Boolean     @default(false)\n  priority         Int?\n  weight           Int?\n  // weightAdjustment is deprecated. We not calculate the calibratino value on the spot. Plan to drop this column.\n  weightAdjustment Int?\n  schedule         Schedule?   @relation(fields: [scheduleId], references: [id])\n  scheduleId       Int?\n  createdAt        DateTime    @default(now())\n  group            HostGroup?  @relation(fields: [groupId], references: [id])\n  groupId          String?\n  memberId         Int?\n  member           Membership? @relation(fields: [memberId], references: [id], onDelete: Cascade)\n\n  @@id([userId, eventTypeId])\n  @@index([memberId])\n  @@index([userId])\n  @@index([eventTypeId])\n  @@index([scheduleId])\n}\n\nmodel HostGroup {\n  id          String     @id @default(uuid())\n  name        String\n  hosts       Host[]\n  eventType   EventType? @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  eventTypeId Int?\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n\n  @@index([name])\n  @@index([eventTypeId])\n}\n\nmodel CalVideoSettings {\n  eventTypeId Int       @id\n  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n\n  disableRecordingForOrganizer         Boolean  @default(false)\n  disableRecordingForGuests            Boolean  @default(false)\n  enableAutomaticTranscription         Boolean  @default(false)\n  enableAutomaticRecordingForOrganizer Boolean  @default(false)\n  redirectUrlOnExit                    String?\n  disableTranscriptionForGuests        Boolean  @default(false)\n  disableTranscriptionForOrganizer     Boolean  @default(false)\n  createdAt                            DateTime @default(now())\n  updatedAt                            DateTime @updatedAt\n}\n\nmodel EventType {\n  id                Int     @id @default(autoincrement())\n  /// @zod.string.min(1)\n  title             String\n  /// @zod.import(["import { eventTypeSlug } from \'../../zod-utils\'"]).custom.use(eventTypeSlug)\n  slug              String\n  description       String?\n  interfaceLanguage String?\n  position          Int     @default(0)\n  /// @zod.import(["import { eventTypeLocations } from \'../../zod-utils\'"]).custom.use(eventTypeLocations)\n  locations         Json?\n  /// @zod.number.min(1)\n  length            Int\n  offsetStart       Int     @default(0)\n  hidden            Boolean @default(false)\n  hosts             Host[]\n\n  users  User[] @relation("user_eventtype")\n  owner  User?  @relation("owner", fields: [userId], references: [id], onDelete: Cascade)\n  userId Int?\n\n  profileId Int?\n  profile   Profile? @relation(fields: [profileId], references: [id])\n\n  team                               Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId                             Int?\n  hashedLink                         HashedLink[]\n  bookings                           Booking[]\n  availability                       Availability[]\n  webhooks                           Webhook[]\n  destinationCalendar                DestinationCalendar?\n  useEventLevelSelectedCalendars     Boolean                @default(false)\n  eventName                          String?\n  customInputs                       EventTypeCustomInput[]\n  parentId                           Int?\n  parent                             EventType?             @relation("managed_eventtype", fields: [parentId], references: [id], onDelete: Cascade)\n  children                           EventType[]            @relation("managed_eventtype")\n  /// @zod.import(["import { eventTypeBookingFields } from \'../../zod-utils\'"]).custom.use(eventTypeBookingFields)\n  bookingFields                      Json?\n  timeZone                           String?\n  periodType                         PeriodType             @default(UNLIMITED)\n  /// @zod.import(["import { coerceToDate } from \'../../zod-utils\'"]).custom.use(coerceToDate)\n  periodStartDate                    DateTime?\n  /// @zod.import(["import { coerceToDate } from \'../../zod-utils\'"]).custom.use(coerceToDate)\n  periodEndDate                      DateTime?\n  periodDays                         Int?\n  periodCountCalendarDays            Boolean?\n  lockTimeZoneToggleOnBookingPage    Boolean                @default(false)\n  lockedTimeZone                     String?\n  requiresConfirmation               Boolean                @default(false)\n  requiresConfirmationWillBlockSlot  Boolean                @default(false)\n  requiresConfirmationForFreeEmail   Boolean                @default(false)\n  requiresBookerEmailVerification    Boolean                @default(false)\n  canSendCalVideoTranscriptionEmails Boolean                @default(true)\n\n  autoTranslateDescriptionEnabled          Boolean                   @default(false)\n  /// @zod.import(["import { recurringEventType } from \'../../zod-utils\'"]).custom.use(recurringEventType)\n  recurringEvent                           Json?\n  disableGuests                            Boolean                   @default(false)\n  hideCalendarNotes                        Boolean                   @default(false)\n  hideCalendarEventDetails                 Boolean                   @default(false)\n  /// @zod.number.min(0)\n  minimumBookingNotice                     Int                       @default(120)\n  beforeEventBuffer                        Int                       @default(0)\n  afterEventBuffer                         Int                       @default(0)\n  seatsPerTimeSlot                         Int?\n  onlyShowFirstAvailableSlot               Boolean                   @default(false)\n  showOptimizedSlots                       Boolean?                  @default(false)\n  disableCancelling                        Boolean?                  @default(false)\n  disableRescheduling                      Boolean?                  @default(false)\n  seatsShowAttendees                       Boolean?                  @default(false)\n  seatsShowAvailabilityCount               Boolean?                  @default(true)\n  schedulingType                           SchedulingType?\n  schedule                                 Schedule?                 @relation(fields: [scheduleId], references: [id])\n  scheduleId                               Int?\n  allowReschedulingCancelledBookings       Boolean?                  @default(false)\n  // price is deprecated. It has now moved to metadata.apps.stripe.price. Plan to drop this column.\n  price                                    Int                       @default(0)\n  // currency is deprecated. It has now moved to metadata.apps.stripe.currency. Plan to drop this column.\n  currency                                 String                    @default("usd")\n  slotInterval                             Int?\n  /// @zod.import(["import { EventTypeMetaDataSchema } from \'../../zod-utils\'"]).custom.use(EventTypeMetaDataSchema)\n  metadata                                 Json?\n  /// @zod.import(["import { successRedirectUrl } from \'../../zod-utils\'"]).custom.use(successRedirectUrl)\n  successRedirectUrl                       String?\n  forwardParamsSuccessRedirect             Boolean?                  @default(true)\n  workflows                                WorkflowsOnEventTypes[]\n  /// @zod.import(["import { intervalLimitsType } from \'../../zod-utils\'"]).custom.use(intervalLimitsType)\n  bookingLimits                            Json?\n  /// @zod.import(["import { intervalLimitsType } from \'../../zod-utils\'"]).custom.use(intervalLimitsType)\n  durationLimits                           Json?\n  isInstantEvent                           Boolean                   @default(false)\n  instantMeetingExpiryTimeOffsetInSeconds  Int                       @default(90)\n  instantMeetingScheduleId                 Int?\n  instantMeetingSchedule                   Schedule?                 @relation("InstantMeetingSchedule", fields: [instantMeetingScheduleId], references: [id])\n  instantMeetingParameters                 String[]\n  assignAllTeamMembers                     Boolean                   @default(false)\n  // It is applicable only when assignAllTeamMembers is true and it filters out all the team members using rrSegmentQueryValue\n  assignRRMembersUsingSegment              Boolean                   @default(false)\n  /// @zod.import(["import { rrSegmentQueryValueSchema } from \'../../zod-utils\'"]).custom.use(rrSegmentQueryValueSchema)\n  rrSegmentQueryValue                      Json?\n  useEventTypeDestinationCalendarEmail     Boolean                   @default(false)\n  aiPhoneCallConfig                        AIPhoneCallConfiguration?\n  isRRWeightsEnabled                       Boolean                   @default(false)\n  fieldTranslations                        EventTypeTranslation[]\n  maxLeadThreshold                         Int?\n  includeNoShowInRRCalculation             Boolean                   @default(false)\n  selectedCalendars                        SelectedCalendar[]\n  allowReschedulingPastBookings            Boolean                   @default(false)\n  hideOrganizerEmail                       Boolean                   @default(false)\n  maxActiveBookingsPerBooker               Int?\n  maxActiveBookingPerBookerOfferReschedule Boolean                   @default(false)\n  /// @zod.import(["import { emailSchema } from \'@calcom/lib/emailSchema\'"]).custom.use(emailSchema)\n  customReplyToEmail                       String?\n  calVideoSettings                         CalVideoSettings?\n\n  /// @zod.import(["import { eventTypeColor } from \'../../zod-utils\'"]).custom.use(eventTypeColor)\n  eventTypeColor                   Json?\n  rescheduleWithSameRoundRobinHost Boolean @default(false)\n\n  secondaryEmailId Int?\n  secondaryEmail   SecondaryEmail? @relation(fields: [secondaryEmailId], references: [id], onDelete: Cascade)\n\n  useBookerTimezone     Boolean     @default(false)\n  restrictionScheduleId Int?\n  restrictionSchedule   Schedule?   @relation("restrictionSchedule", fields: [restrictionScheduleId], references: [id])\n  hostGroups            HostGroup[]\n\n  bookingRequiresAuthentication Boolean @default(false)\n\n  createdAt DateTime? @default(now())\n  updatedAt DateTime? @updatedAt\n\n  @@unique([userId, slug])\n  @@unique([teamId, slug])\n  @@unique([userId, parentId])\n  @@index([userId])\n  @@index([teamId])\n  @@index([profileId])\n  @@index([scheduleId])\n  @@index([secondaryEmailId])\n  @@index([parentId])\n  @@index([restrictionScheduleId])\n}\n\nmodel Credential {\n  id     Int     @id @default(autoincrement())\n  // @@type is deprecated\n  type   String\n  key    Json\n  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId Int?\n  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId Int?\n  app    App?    @relation(fields: [appId], references: [slug], onDelete: Cascade)\n  // How to make it a required column?\n  appId  String?\n\n  // paid apps\n  subscriptionId    String?\n  paymentStatus     String?\n  billingCycleStart Int?\n\n  destinationCalendars   DestinationCalendar[]\n  selectedCalendars      SelectedCalendar[]\n  invalid                Boolean?              @default(false)\n  CalendarCache          CalendarCache[]\n  references             BookingReference[]\n  delegationCredentialId String?\n  delegationCredential   DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: Cascade)\n\n  @@index([appId])\n  @@index([subscriptionId])\n  @@index([invalid])\n  @@index([userId, delegationCredentialId])\n}\n\nenum IdentityProvider {\n  CAL\n  GOOGLE\n  SAML\n}\n\nmodel DestinationCalendar {\n  id                               Int                   @id @default(autoincrement())\n  integration                      String\n  externalId                       String\n  /// @zod.import(["import { emailSchema } from \'@calcom/lib/emailSchema\'"]).custom.use(emailSchema)\n  primaryEmail                     String?\n  user                             User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId                           Int?                  @unique\n  booking                          Booking[]\n  eventType                        EventType?            @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  eventTypeId                      Int?                  @unique\n  credentialId                     Int?\n  credential                       Credential?           @relation(fields: [credentialId], references: [id], onDelete: Cascade)\n  createdAt                        DateTime?             @default(now())\n  updatedAt                        DateTime?             @updatedAt\n  delegationCredential             DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: Cascade)\n  delegationCredentialId           String?\n  domainWideDelegation             DomainWideDelegation? @relation(fields: [domainWideDelegationCredentialId], references: [id], onDelete: Cascade)\n  domainWideDelegationCredentialId String?\n\n  @@index([userId])\n  @@index([eventTypeId])\n  @@index([credentialId])\n}\n\nenum UserPermissionRole {\n  USER\n  ADMIN\n}\n\n// It holds the password of a User, separate from the User model to avoid leaking the password hash\nmodel UserPassword {\n  hash   String\n  userId Int    @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel TravelSchedule {\n  id           Int       @id @default(autoincrement())\n  userId       Int\n  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  timeZone     String\n  startDate    DateTime\n  endDate      DateTime?\n  prevTimeZone String?\n\n  @@index([startDate])\n  @@index([endDate])\n}\n\n// It holds Personal Profiles of a User plus it has email, password and other core things..\nmodel User {\n  id                  Int                  @id @default(autoincrement())\n  username            String?\n  name                String?\n  /// @zod.import(["import { emailSchema } from \'@calcom/lib/emailSchema\'"]).custom.use(emailSchema)\n  email               String\n  emailVerified       DateTime?\n  password            UserPassword?\n  bio                 String?\n  avatarUrl           String?\n  timeZone            String               @default("Europe/London")\n  travelSchedules     TravelSchedule[]\n  weekStart           String               @default("Sunday")\n  // DEPRECATED - TO BE REMOVED\n  startTime           Int                  @default(0)\n  endTime             Int                  @default(1440)\n  // </DEPRECATED>\n  bufferTime          Int                  @default(0)\n  hideBranding        Boolean              @default(false)\n  // TODO: should be renamed since it only affects the booking page\n  theme               String?\n  appTheme            String?\n  createdDate         DateTime             @default(now()) @map(name: "created")\n  trialEndsAt         DateTime?\n  lastActiveAt        DateTime?\n  eventTypes          EventType[]          @relation("user_eventtype")\n  credentials         Credential[]\n  teams               Membership[]\n  bookings            Booking[]\n  schedules           Schedule[]\n  defaultScheduleId   Int?\n  selectedCalendars   SelectedCalendar[]\n  completedOnboarding Boolean              @default(false)\n  locale              String?\n  timeFormat          Int?                 @default(12)\n  twoFactorSecret     String?\n  twoFactorEnabled    Boolean              @default(false)\n  backupCodes         String?\n  identityProvider    IdentityProvider     @default(CAL)\n  identityProviderId  String?\n  availability        Availability[]\n  invitedTo           Int?\n  webhooks            Webhook[]\n  brandColor          String?\n  darkBrandColor      String?\n  // the location where the events will end up\n  destinationCalendar DestinationCalendar?\n  // participate in dynamic group booking or not\n  allowDynamicBooking Boolean?             @default(true)\n\n  // participate in SEO indexing or not\n  allowSEOIndexing Boolean? @default(true)\n\n  // receive monthly digest email for teams or not\n  receiveMonthlyDigestEmail       Boolean? @default(true)\n  // require email verification when someone books using your email\n  requiresBookerEmailVerification Boolean? @default(false)\n\n  /// @zod.import(["import { userMetadata } from \'../../zod-utils\'"]).custom.use(userMetadata)\n  metadata             Json?\n  verified             Boolean?                @default(false)\n  role                 UserPermissionRole      @default(USER)\n  disableImpersonation Boolean                 @default(false)\n  impersonatedUsers    Impersonations[]        @relation("impersonated_user")\n  impersonatedBy       Impersonations[]        @relation("impersonated_by_user")\n  apiKeys              ApiKey[]\n  accounts             Account[]\n  sessions             Session[]\n  Feedback             Feedback[]\n  ownedEventTypes      EventType[]             @relation("owner")\n  workflows            Workflow[]\n  routingForms         App_RoutingForms_Form[] @relation("routing-form")\n  updatedRoutingForms  App_RoutingForms_Form[] @relation("updated-routing-form")\n  verifiedNumbers      VerifiedNumber[]\n  verifiedEmails       VerifiedEmail[]\n  hosts                Host[]\n  // organizationId is deprecated. Instead, rely on the Profile to search profiles by organizationId and then get user from the profile.\n  organizationId       Int?\n  organization         Team?                   @relation("scope", fields: [organizationId], references: [id], onDelete: SetNull)\n  accessCodes          AccessCode[]\n  bookingRedirects     OutOfOfficeEntry[]\n  bookingRedirectsTo   OutOfOfficeEntry[]      @relation(name: "toUser")\n\n  // Used to lock the user account\n  locked                         Boolean                       @default(false)\n  platformOAuthClients           PlatformOAuthClient[]\n  AccessToken                    AccessToken[]\n  RefreshToken                   RefreshToken[]\n  PlatformAuthorizationToken     PlatformAuthorizationToken[]\n  profiles                       Profile[]\n  movedToProfileId               Int?\n  movedToProfile                 Profile?                      @relation("moved_to_profile", fields: [movedToProfileId], references: [id], onDelete: SetNull)\n  secondaryEmails                SecondaryEmail[]\n  isPlatformManaged              Boolean                       @default(false)\n  OutOfOfficeReasons             OutOfOfficeReason[]\n  smsLockState                   SMSLockState                  @default(UNLOCKED)\n  smsLockReviewedByAdmin         Boolean                       @default(false)\n  NotificationsSubscriptions     NotificationsSubscriptions[]\n  referralLinkId                 String?\n  features                       UserFeatures[]\n  reassignedBookings             Booking[]                     @relation("reassignByUser")\n  createdAttributeToUsers        AttributeToUser[]             @relation("createdBy")\n  updatedAttributeToUsers        AttributeToUser[]             @relation("updatedBy")\n  createdTranslations            EventTypeTranslation[]        @relation("CreatedEventTypeTranslations")\n  updatedTranslations            EventTypeTranslation[]        @relation("UpdatedEventTypeTranslations")\n  reportedBookings               BookingReport[]               @relation("ReportedBy")\n  BookingInternalNote            BookingInternalNote[]\n  creationSource                 CreationSource?\n  createdOrganizationOnboardings OrganizationOnboarding[]      @relation("CreatedOrganizationOnboardings")\n  filterSegments                 FilterSegment[]\n  filterSegmentPreferences       UserFilterSegmentPreference[]\n  creditBalance                  CreditBalance?\n  whitelistWorkflows             Boolean                       @default(false)\n  calAiPhoneNumbers              CalAiPhoneNumber[]\n  agents                         Agent[]\n\n  @@unique([email])\n  @@unique([email, username])\n  @@unique([username, organizationId])\n  @@unique([movedToProfileId])\n  @@index([username])\n  @@index([emailVerified])\n  @@index([identityProvider])\n  @@index([identityProviderId])\n  @@map(name: "users")\n}\n\nmodel NotificationsSubscriptions {\n  id           Int    @id @default(autoincrement())\n  userId       Int\n  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  subscription String\n\n  @@index([userId, subscription])\n}\n\n// It holds Organization Profiles as well as User Profiles for users that have been added to an organization\nmodel Profile {\n  id             Int         @id @default(autoincrement())\n  // uid allows us to set an identifier chosen by us which is helpful in migration when we create the Profile from User directly.\n  uid            String\n  userId         Int\n  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  organizationId Int\n  organization   Team        @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  username       String\n  eventTypes     EventType[]\n  movedFromUser  User?       @relation("moved_to_profile")\n  createdAt      DateTime    @default(now())\n  updatedAt      DateTime    @updatedAt\n\n  // A user can have multiple profiles in different organizations\n  @@unique([userId, organizationId])\n  // Allow username reuse only across different organizations\n  @@unique([username, organizationId])\n  @@index([uid])\n  @@index([userId])\n  @@index([organizationId])\n}\n\nmodel Team {\n  id                     Int                     @id @default(autoincrement())\n  /// @zod.string.min(1)\n  name                   String\n  // It is unique across teams and organizations. We don\'t have a strong reason for organization and team slug to be conflicting, could be fixed.\n  // Sub-teams could have same slug across different organizations but not within the same organization.\n  /// @zod.string.min(1)\n  slug                   String?\n  logoUrl                String?\n  calVideoLogo           String?\n  appLogo                String?\n  appIconLogo            String?\n  bio                    String?\n  hideBranding           Boolean                 @default(false)\n  hideTeamProfileLink    Boolean                 @default(false)\n  isPrivate              Boolean                 @default(false)\n  hideBookATeamMember    Boolean                 @default(false)\n  members                Membership[]\n  eventTypes             EventType[]\n  workflows              Workflow[]\n  createdAt              DateTime                @default(now())\n  /// @zod.import(["import { teamMetadataSchema } from \'../../zod-utils\'"]).custom.use(teamMetadataSchema)\n  metadata               Json?\n  theme                  String?\n  rrResetInterval        RRResetInterval?        @default(MONTH)\n  rrTimestampBasis       RRTimestampBasis        @default(CREATED_AT)\n  brandColor             String?\n  darkBrandColor         String?\n  verifiedNumbers        VerifiedNumber[]\n  verifiedEmails         VerifiedEmail[]\n  bannerUrl              String?\n  parentId               Int?\n  parent                 Team?                   @relation("organization", fields: [parentId], references: [id], onDelete: Cascade)\n  children               Team[]                  @relation("organization")\n  orgUsers               User[]                  @relation("scope")\n  inviteTokens           VerificationToken[]\n  webhooks               Webhook[]\n  timeFormat             Int?\n  timeZone               String                  @default("Europe/London")\n  weekStart              String                  @default("Sunday")\n  routingForms           App_RoutingForms_Form[]\n  apiKeys                ApiKey[]\n  credentials            Credential[]\n  accessCodes            AccessCode[]\n  isOrganization         Boolean                 @default(false)\n  organizationSettings   OrganizationSettings?\n  instantMeetingTokens   InstantMeetingToken[]\n  orgProfiles            Profile[]\n  pendingPayment         Boolean                 @default(false)\n  dsyncTeamGroupMapping  DSyncTeamGroupMapping[]\n  isPlatform             Boolean                 @default(false)\n  // Organization\'s OAuth clients. Organization has them but a team does not.\n  platformOAuthClient    PlatformOAuthClient[]\n  // OAuth client used to create team of an organization. Team has it but organization does not.\n  createdByOAuthClient   PlatformOAuthClient?    @relation("CreatedByOAuthClient", fields: [createdByOAuthClientId], references: [id], onDelete: Cascade)\n  createdByOAuthClientId String?\n  smsLockState           SMSLockState            @default(UNLOCKED)\n  platformBilling        PlatformBilling?\n  activeOrgWorkflows     WorkflowsOnTeams[]\n  attributes             Attribute[]\n  smsLockReviewedByAdmin Boolean                 @default(false)\n  // Available for Organization only\n  delegationCredentials  DelegationCredential[]\n  domainWideDelegations  DomainWideDelegation[]\n  roles                  Role[] // Added for Role relation\n  calAiPhoneNumbers      CalAiPhoneNumber[]\n  agents                 Agent[]\n  bookingReports         BookingReport[]\n\n  features TeamFeatures[]\n\n  /// @zod.import(["import { intervalLimitsType } from \'../../zod-utils\'"]).custom.use(intervalLimitsType)\n  bookingLimits                Json?\n  includeManagedEventsInLimits Boolean                 @default(false)\n  internalNotePresets          InternalNotePreset[]\n  creditBalance                CreditBalance?\n  organizationOnboarding       OrganizationOnboarding?\n\n  // note(Lauris): if a Team has parentId it is a team, if parentId is null it is an organization, but if parentId is null and managedOrganization is set,\n  // it means that it is an organization managed by another organization.\n  managedOrganization  ManagedOrganization?  @relation("ManagedOrganization")\n  managedOrganizations ManagedOrganization[] @relation("ManagerOrganization")\n  filterSegments       FilterSegment[]\n\n  teamBilling         TeamBilling?         @relation("TeamBilling")\n  organizationBilling OrganizationBilling? @relation("OrganizationBilling")\n\n  @@unique([slug, parentId])\n  @@index([parentId])\n}\n\nmodel CreditBalance {\n  id                String              @id @default(uuid())\n  team              Team?               @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId            Int?                @unique\n  // user credit balances will be supported in the future\n  user              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId            Int?                @unique\n  additionalCredits Int                 @default(0)\n  limitReachedAt    DateTime?\n  warningSentAt     DateTime?\n  expenseLogs       CreditExpenseLog[]\n  purchaseLogs      CreditPurchaseLog[]\n}\n\nmodel CreditPurchaseLog {\n  id              String        @id @default(uuid())\n  creditBalanceId String\n  creditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id], onDelete: Cascade)\n  credits         Int\n  createdAt       DateTime      @default(now())\n}\n\nenum CreditUsageType {\n  SMS\n  CAL_AI_PHONE_CALL\n}\n\nmodel CreditExpenseLog {\n  id              String           @id @default(uuid())\n  creditBalanceId String\n  creditBalance   CreditBalance    @relation(fields: [creditBalanceId], references: [id], onDelete: Cascade)\n  bookingUid      String?\n  booking         Booking?         @relation(fields: [bookingUid], references: [uid], onDelete: Cascade)\n  credits         Int?\n  creditType      CreditType\n  date            DateTime\n  smsSid          String?\n  smsSegments     Int?\n  phoneNumber     String?\n  email           String?\n  callDuration    Int?\n  creditFor       CreditUsageType?\n  externalRef     String?          @unique\n}\n\nenum CreditType {\n  MONTHLY\n  ADDITIONAL\n}\n\nmodel OrganizationSettings {\n  id                                  Int        @id @default(autoincrement())\n  organization                        Team       @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  organizationId                      Int        @unique\n  isOrganizationConfigured            Boolean    @default(false)\n  // It decides if new organization members can be auto-accepted or not\n  isOrganizationVerified              Boolean    @default(false)\n  // It is a domain e.g "acme.com". Any email with this domain might be auto-accepted\n  // Also, it is the domain to which the organization profile is redirected.\n  orgAutoAcceptEmail                  String\n  lockEventTypeCreationForUsers       Boolean    @default(false)\n  adminGetsNoSlotsNotification        Boolean    @default(false)\n  // It decides if instance ADMIN has reviewed the organization or not.\n  // It is used to allow super sensitive operations like \'impersonation of Org members by Org admin\'\n  isAdminReviewed                     Boolean    @default(false)\n  dSyncData                           DSyncData?\n  isAdminAPIEnabled                   Boolean    @default(false)\n  allowSEOIndexing                    Boolean    @default(false)\n  orgProfileRedirectsToVerifiedDomain Boolean    @default(false)\n  disablePhoneOnlySMSNotifications    Boolean    @default(false)\n}\n\nenum MembershipRole {\n  MEMBER\n  ADMIN\n  OWNER\n}\n\nmodel Membership {\n  id                   Int               @id @default(autoincrement())\n  teamId               Int\n  userId               Int\n  accepted             Boolean           @default(false)\n  role                 MembershipRole\n  customRoleId         String?\n  customRole           Role?             @relation(fields: [customRoleId], references: [id])\n  team                 Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)\n  disableImpersonation Boolean           @default(false)\n  AttributeToUser      AttributeToUser[]\n  createdAt            DateTime?         @default(now())\n  updatedAt            DateTime?         @updatedAt\n  Host                 Host[]\n\n  @@unique([userId, teamId])\n  @@index([teamId])\n  @@index([userId])\n  @@index([accepted])\n  @@index([role])\n  @@index([customRoleId])\n}\n\nmodel VerificationToken {\n  id               Int             @id @default(autoincrement())\n  identifier       String\n  token            String          @unique\n  expires          DateTime\n  expiresInDays    Int?\n  createdAt        DateTime        @default(now())\n  updatedAt        DateTime        @updatedAt\n  teamId           Int?\n  team             Team?           @relation(fields: [teamId], references: [id])\n  secondaryEmailId Int?\n  secondaryEmail   SecondaryEmail? @relation(fields: [secondaryEmailId], references: [id])\n\n  @@unique([identifier, token])\n  @@index([token])\n  @@index([teamId])\n  @@index([secondaryEmailId])\n}\n\nmodel InstantMeetingToken {\n  id        Int      @id @default(autoincrement())\n  token     String   @unique\n  expires   DateTime\n  teamId    Int\n  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  bookingId Int?     @unique\n  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([token])\n}\n\nmodel BookingReference {\n  id                         Int      @id @default(autoincrement())\n  /// @zod.string.min(1)\n  type                       String\n  /// @zod.string.min(1)\n  uid                        String\n  meetingId                  String?\n  thirdPartyRecurringEventId String?\n  meetingPassword            String?\n  meetingUrl                 String?\n  booking                    Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  bookingId                  Int?\n  externalCalendarId         String?\n  deleted                    Boolean?\n\n  credential                       Credential?           @relation(fields: [credentialId], references: [id], onDelete: SetNull)\n  credentialId                     Int?\n  delegationCredential             DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: SetNull)\n  delegationCredentialId           String?\n  domainWideDelegation             DomainWideDelegation? @relation(fields: [domainWideDelegationCredentialId], references: [id], onDelete: SetNull)\n  domainWideDelegationCredentialId String?\n\n  @@index([bookingId])\n  @@index([type])\n  @@index([uid])\n}\n\nmodel Attendee {\n  id          Int          @id @default(autoincrement())\n  email       String\n  name        String\n  timeZone    String\n  phoneNumber String?\n  locale      String?      @default("en")\n  booking     Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  bookingId   Int?\n  bookingSeat BookingSeat?\n  noShow      Boolean?     @default(false)\n\n  @@index([email])\n  @@index([bookingId])\n}\n\nenum BookingStatus {\n  CANCELLED     @map("cancelled")\n  ACCEPTED      @map("accepted")\n  REJECTED      @map("rejected")\n  PENDING       @map("pending")\n  AWAITING_HOST @map("awaiting_host")\n}\n\nmodel Booking {\n  id                           Int                               @id @default(autoincrement())\n  uid                          String                            @unique\n  // (optional) UID based on slot start/end time & email against duplicates\n  idempotencyKey               String?                           @unique\n  user                         User?                             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId                       Int?\n  // User\'s email at the time of booking\n  /// @zod.import(["import { emailSchema } from \'@calcom/lib/emailSchema\'"]).custom.use(emailSchema)\n  userPrimaryEmail             String?\n  references                   BookingReference[]\n  eventType                    EventType?                        @relation(fields: [eventTypeId], references: [id])\n  eventTypeId                  Int?\n  title                        String\n  description                  String?\n  customInputs                 Json?\n  /// @zod.import(["import { bookingResponses } from \'../../zod-utils\'"]).custom.use(bookingResponses)\n  responses                    Json?\n  startTime                    DateTime\n  endTime                      DateTime\n  attendees                    Attendee[]\n  location                     String?\n  createdAt                    DateTime                          @default(now())\n  updatedAt                    DateTime?                         @updatedAt\n  status                       BookingStatus                     @default(ACCEPTED)\n  paid                         Boolean                           @default(false)\n  payment                      Payment[]\n  destinationCalendar          DestinationCalendar?              @relation(fields: [destinationCalendarId], references: [id])\n  destinationCalendarId        Int?\n  cancellationReason           String?\n  rejectionReason              String?\n  reassignReason               String?\n  reassignBy                   User?                             @relation("reassignByUser", fields: [reassignById], references: [id])\n  reassignById                 Int?\n  dynamicEventSlugRef          String?\n  dynamicGroupSlugRef          String?\n  rescheduled                  Boolean?\n  fromReschedule               String?\n  recurringEventId             String?\n  smsReminderNumber            String?\n  workflowReminders            WorkflowReminder[]\n  scheduledJobs                String[] // scheduledJobs is deprecated, please use scheduledTriggers instead\n  seatsReferences              BookingSeat[]\n  /// @zod.import(["import { bookingMetadataSchema } from \'../../zod-utils\'"]).custom.use(bookingMetadataSchema)\n  metadata                     Json?\n  isRecorded                   Boolean                           @default(false)\n  iCalUID                      String?                           @default("")\n  iCalSequence                 Int                               @default(0)\n  instantMeetingToken          InstantMeetingToken?\n  rating                       Int?\n  ratingFeedback               String?\n  noShowHost                   Boolean?                          @default(false)\n  scheduledTriggers            WebhookScheduledTriggers[]\n  oneTimePassword              String?                           @unique @default(uuid())\n  /// @zod.import(["import { emailSchema } from \'@calcom/lib/emailSchema\'"]).custom.use(emailSchema)\n  cancelledBy                  String?\n  /// @zod.import(["import { emailSchema } from \'@calcom/lib/emailSchema\'"]).custom.use(emailSchema)\n  rescheduledBy                String?\n  // Ah, made a typo here. Should have been routedFromRoutingFormRe"s"ponse. Live with it :(\n  routedFromRoutingFormReponse App_RoutingForms_FormResponse?\n  assignmentReason             AssignmentReason[]\n  internalNote                 BookingInternalNote[]\n  creationSource               CreationSource?\n  tracking                     Tracking?\n  routingFormResponses         RoutingFormResponseDenormalized[]\n  expenseLogs                  CreditExpenseLog[]\n  report                       BookingReport?\n\n  @@index([eventTypeId])\n  @@index([userId])\n  @@index([destinationCalendarId])\n  @@index([recurringEventId])\n  @@index([uid])\n  @@index([status])\n  @@index([startTime, endTime, status])\n}\n\nmodel Tracking {\n  id           Int     @id @default(autoincrement())\n  bookingId    Int\n  booking      Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  utm_source   String?\n  utm_medium   String?\n  utm_campaign String?\n  utm_term     String?\n  utm_content  String?\n\n  @@unique([bookingId])\n}\n\nmodel Schedule {\n  id                   Int            @id @default(autoincrement())\n  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId               Int\n  eventType            EventType[]\n  instantMeetingEvents EventType[]    @relation("InstantMeetingSchedule")\n  restrictionSchedule  EventType[]    @relation("restrictionSchedule")\n  name                 String\n  timeZone             String?\n  availability         Availability[]\n  Host                 Host[]\n\n  @@index([userId])\n}\n\nmodel Availability {\n  id          Int        @id @default(autoincrement())\n  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int?\n  eventType   EventType? @relation(fields: [eventTypeId], references: [id])\n  eventTypeId Int?\n  days        Int[]\n  startTime   DateTime   @db.Time\n  endTime     DateTime   @db.Time\n  date        DateTime?  @db.Date\n  Schedule    Schedule?  @relation(fields: [scheduleId], references: [id])\n  scheduleId  Int?\n\n  @@index([userId])\n  @@index([eventTypeId])\n  @@index([scheduleId])\n}\n\nmodel SelectedCalendar {\n  id              String      @id @default(uuid())\n  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId          Int\n  integration     String\n  externalId      String\n  credential      Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)\n  credentialId    Int?\n  createdAt       DateTime?   @default(now())\n  updatedAt       DateTime?   @updatedAt\n  // Used to identify a watched calendar channel in Google Calendar\n  // @deprecated use channelId instead\n  googleChannelId String?\n\n  // @deprecated use channelKind instead\n  googleChannelKind String?\n\n  // @deprecated use channelResourceId instead\n  googleChannelResourceId String?\n\n  // @deprecated use channelResourceUri instead\n  googleChannelResourceUri String?\n\n  // @deprecated use channelExpoiration instead\n  googleChannelExpiration String?\n\n  // Used to identify a watched calendar\n  channelId          String?\n  channelKind        String?\n  channelResourceId  String?\n  channelResourceUri String?\n  channelExpiration  DateTime? @db.Timestamp(3)\n\n  // Used to calendar cache and sync\n  syncSubscribedAt DateTime? @db.Timestamp(3)\n  syncToken        String?\n  syncedAt         DateTime?\n  syncErrorAt      DateTime?\n  syncErrorCount   Int?      @default(0)\n\n  delegationCredential   DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: Cascade)\n  delegationCredentialId String?\n\n  // Deprecated and unused: Use delegationCredential instead\n  domainWideDelegationCredential   DomainWideDelegation? @relation(fields: [domainWideDelegationCredentialId], references: [id], onDelete: Cascade)\n  domainWideDelegationCredentialId String?\n  error                            String?\n  lastErrorAt                      DateTime?\n  watchAttempts                    Int                   @default(0)\n  unwatchAttempts                  Int                   @default(0)\n  maxAttempts                      Int                   @default(3)\n\n  eventTypeId Int?\n  eventType   EventType? @relation(fields: [eventTypeId], references: [id])\n\n  calendarCacheEvents CalendarCacheEvent[]\n\n  // It could still allow multiple user-level(eventTypeId is null) selected calendars for same userId, integration, externalId because NULL is not equal to NULL\n  // We currently ensure uniqueness by checking for the existence of the record before creating a new one\n  // Think about introducing a generated unique key ${userId}_${integration}_${externalId}_${eventTypeId}\n  @@unique([userId, integration, externalId, eventTypeId])\n  @@unique([googleChannelId, eventTypeId])\n  @@index([userId])\n  @@index([externalId])\n  @@index([eventTypeId])\n  @@index([credentialId])\n  // Composite indices to optimize calendar-cache queries\n  @@index([integration, googleChannelExpiration, error, watchAttempts, maxAttempts], name: "SelectedCalendar_watch_idx")\n  @@index([integration, googleChannelExpiration, error, unwatchAttempts, maxAttempts], name: "SelectedCalendar_unwatch_idx")\n}\n\nenum EventTypeCustomInputType {\n  TEXT     @map("text")\n  TEXTLONG @map("textLong")\n  NUMBER   @map("number")\n  BOOL     @map("bool")\n  RADIO    @map("radio")\n  PHONE    @map("phone")\n}\n\nmodel EventTypeCustomInput {\n  id          Int                      @id @default(autoincrement())\n  eventTypeId Int\n  eventType   EventType                @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  label       String\n  type        EventTypeCustomInputType\n  /// @zod.import(["import { customInputOptionSchema } from \'../../zod-utils\'"]).custom.use(customInputOptionSchema)\n  options     Json?\n  required    Boolean\n  placeholder String                   @default("")\n\n  @@index([eventTypeId])\n}\n\nmodel ResetPasswordRequest {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  email     String\n  expires   DateTime\n}\n\nenum ReminderType {\n  PENDING_BOOKING_CONFIRMATION\n}\n\nmodel ReminderMail {\n  id             Int          @id @default(autoincrement())\n  referenceId    Int\n  reminderType   ReminderType\n  elapsedMinutes Int\n  createdAt      DateTime     @default(now())\n\n  @@index([referenceId])\n  @@index([reminderType])\n}\n\nmodel Payment {\n  id            Int            @id @default(autoincrement())\n  uid           String         @unique\n  app           App?           @relation(fields: [appId], references: [slug], onDelete: Cascade)\n  appId         String?\n  bookingId     Int\n  booking       Booking?       @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  amount        Int\n  fee           Int\n  currency      String\n  success       Boolean\n  refunded      Boolean\n  data          Json\n  externalId    String         @unique\n  paymentOption PaymentOption? @default(ON_BOOKING)\n\n  @@index([bookingId])\n  @@index([externalId])\n}\n\nenum PaymentOption {\n  ON_BOOKING\n  HOLD\n}\n\nenum WebhookTriggerEvents {\n  BOOKING_CREATED\n  BOOKING_PAYMENT_INITIATED\n  BOOKING_PAID\n  BOOKING_RESCHEDULED\n  BOOKING_REQUESTED\n  BOOKING_CANCELLED\n  BOOKING_REJECTED\n  BOOKING_NO_SHOW_UPDATED\n  FORM_SUBMITTED\n  MEETING_ENDED\n  MEETING_STARTED\n  RECORDING_READY\n  INSTANT_MEETING\n  RECORDING_TRANSCRIPTION_GENERATED\n  OOO_CREATED\n  AFTER_HOSTS_CAL_VIDEO_NO_SHOW\n  AFTER_GUESTS_CAL_VIDEO_NO_SHOW\n  FORM_SUBMITTED_NO_EVENT\n}\n\nmodel Webhook {\n  id                    String                     @id @unique\n  userId                Int?\n  teamId                Int?\n  eventTypeId           Int?\n  platformOAuthClientId String?\n  /// @zod.string.url()\n  subscriberUrl         String\n  payloadTemplate       String?\n  createdAt             DateTime                   @default(now())\n  active                Boolean                    @default(true)\n  eventTriggers         WebhookTriggerEvents[]\n  user                  User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  team                  Team?                      @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  eventType             EventType?                 @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  platformOAuthClient   PlatformOAuthClient?       @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)\n  app                   App?                       @relation(fields: [appId], references: [slug], onDelete: Cascade)\n  appId                 String?\n  secret                String?\n  platform              Boolean                    @default(false)\n  scheduledTriggers     WebhookScheduledTriggers[]\n  time                  Int?\n  timeUnit              TimeUnit?\n\n  @@unique([userId, subscriberUrl], name: "courseIdentifier")\n  @@unique([platformOAuthClientId, subscriberUrl], name: "oauthclientwebhook")\n  @@index([active])\n}\n\nmodel Impersonations {\n  id                 Int      @id @default(autoincrement())\n  createdAt          DateTime @default(now())\n  impersonatedUser   User     @relation("impersonated_user", fields: [impersonatedUserId], references: [id], onDelete: Cascade)\n  impersonatedBy     User     @relation("impersonated_by_user", fields: [impersonatedById], references: [id], onDelete: Cascade)\n  impersonatedUserId Int\n  impersonatedById   Int\n\n  @@index([impersonatedUserId])\n  @@index([impersonatedById])\n}\n\nmodel ApiKey {\n  id         String      @id @unique @default(cuid())\n  userId     Int\n  teamId     Int?\n  note       String?\n  createdAt  DateTime    @default(now())\n  expiresAt  DateTime?\n  lastUsedAt DateTime?\n  hashedKey  String      @unique()\n  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  team       Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  app        App?        @relation(fields: [appId], references: [slug], onDelete: Cascade)\n  appId      String?\n  rateLimits RateLimit[]\n\n  @@index([userId])\n}\n\nmodel RateLimit {\n  id            String   @id @default(uuid())\n  name          String\n  apiKeyId      String\n  ttl           Int\n  limit         Int\n  blockDuration Int\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  apiKey ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)\n\n  @@index([apiKeyId])\n}\n\nmodel HashedLink {\n  id            Int       @id @default(autoincrement())\n  link          String    @unique\n  eventTypeId   Int\n  eventType     EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  expiresAt     DateTime?\n  maxUsageCount Int       @default(1)\n  usageCount    Int       @default(0)\n\n  @@index([eventTypeId])\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            Int\n  type              String\n  provider          String\n  providerAccountId String\n  providerEmail     String?\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n  @@index([type])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       Int\n  expires      DateTime\n  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\nenum AppCategories {\n  calendar\n  messaging\n  other\n  payment\n  video // deprecated, please use \'conferencing\' instead\n  web3 // deprecated, we should no longer have any web3 apps\n  automation\n  analytics\n  // Wherever video is in use, conferencing should also be used for legacy apps can have it.\n  conferencing\n  crm\n}\n\nmodel App {\n  // The slug for the app store public page inside `/apps/[slug]`\n  slug        String          @id @unique\n  // The directory name for `/packages/app-store/[dirName]`\n  dirName     String          @unique\n  // Needed API Keys\n  keys        Json?\n  // One or multiple categories to which this app belongs\n  categories  AppCategories[]\n  createdAt   DateTime        @default(now())\n  updatedAt   DateTime        @updatedAt\n  credentials Credential[]\n  payments    Payment[]\n  Webhook     Webhook[]\n  ApiKey      ApiKey[]\n  enabled     Boolean         @default(false)\n\n  @@index([enabled])\n}\n\nmodel App_RoutingForms_Form {\n  id                       String                                      @id @default(cuid())\n  description              String?\n  position                 Int                                         @default(0)\n  routes                   Json?\n  createdAt                DateTime                                    @default(now())\n  updatedAt                DateTime                                    @updatedAt\n  name                     String\n  fields                   Json?\n  user                     User                                        @relation("routing-form", fields: [userId], references: [id], onDelete: Cascade)\n  updatedBy                User?                                       @relation("updated-routing-form", fields: [updatedById], references: [id], onDelete: SetNull)\n  updatedById              Int?\n  // This is the user who created the form and also the user who has read-write access to the form\n  // If teamId is set, the members of the team would also have access to form readOnly or read-write depending on their permission level as team member.\n  userId                   Int\n  team                     Team?                                       @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId                   Int?\n  responses                App_RoutingForms_FormResponse[]\n  queuedResponses          App_RoutingForms_QueuedFormResponse[]\n  disabled                 Boolean                                     @default(false)\n  /// @zod.import(["import { RoutingFormSettings } from \'../../zod-utils\'"]).custom.use(RoutingFormSettings)\n  settings                 Json?\n  incompleteBookingActions App_RoutingForms_IncompleteBookingActions[]\n  workflows                WorkflowsOnRoutingForms[]\n\n  @@index([userId])\n  @@index([disabled])\n}\n\nmodel App_RoutingForms_FormResponse {\n  id           Int                   @id @default(autoincrement())\n  uuid         String?               @default(uuid())\n  formFillerId String                @default(cuid())\n  form         App_RoutingForms_Form @relation(fields: [formId], references: [id], onDelete: Cascade)\n  formId       String\n  response     Json\n  createdAt    DateTime              @default(now())\n  updatedAt    DateTime?             @updatedAt\n\n  routedToBookingUid        String?                              @unique\n  // We should not cascade delete the booking, because we want to keep the form response even if the routedToBooking is deleted\n  routedToBooking           Booking?                             @relation(fields: [routedToBookingUid], references: [uid])\n  chosenRouteId             String?\n  routingFormResponseFields RoutingFormResponseField[]\n  routingFormResponses      RoutingFormResponseDenormalized[]\n  queuedFormResponse        App_RoutingForms_QueuedFormResponse?\n\n  @@unique([formFillerId, formId])\n  @@index([formFillerId])\n  @@index([formId])\n  @@index([routedToBookingUid])\n}\n\nmodel App_RoutingForms_QueuedFormResponse {\n  id               String                         @id @default(cuid())\n  form             App_RoutingForms_Form          @relation(fields: [formId], references: [id], onDelete: Cascade)\n  formId           String\n  response         Json\n  chosenRouteId    String?\n  createdAt        DateTime                       @default(now())\n  updatedAt        DateTime?                      @updatedAt\n  actualResponseId Int?                           @unique\n  actualResponse   App_RoutingForms_FormResponse? @relation(fields: [actualResponseId], references: [id], onDelete: Cascade)\n}\n\nmodel RoutingFormResponseField {\n  id               Int                             @id @default(autoincrement())\n  responseId       Int\n  fieldId          String\n  valueString      String?\n  valueNumber      Decimal?\n  valueStringArray String[]\n  response         App_RoutingForms_FormResponse   @relation(fields: [responseId], references: [id], map: "RoutingFormResponseField_response_fkey", onDelete: Cascade)\n  denormalized     RoutingFormResponseDenormalized @relation("DenormalizedResponseToFields", fields: [responseId], references: [id], onDelete: Cascade)\n\n  @@index([responseId])\n  @@index([fieldId])\n  @@index([valueNumber])\n  @@index([valueStringArray], type: Gin)\n}\n\nview RoutingFormResponse {\n  id                               Int            @unique\n  response                         Json\n  responseLowercase                Json\n  formId                           String\n  formName                         String\n  formTeamId                       Int?\n  formUserId                       Int?\n  bookingUid                       String?\n  bookingStatus                    BookingStatus?\n  bookingStatusOrder               Int?\n  bookingCreatedAt                 DateTime?\n  bookingAttendees                 Json? // Array of {timeZone: string, email: string}\n  bookingUserId                    Int?\n  bookingUserName                  String?\n  bookingUserEmail                 String?\n  bookingUserAvatarUrl             String?\n  bookingAssignmentReason          String?\n  bookingAssignmentReasonLowercase String?\n  bookingStartTime                 DateTime?\n  bookingEndTime                   DateTime?\n  createdAt                        DateTime\n  utm_source                       String?\n  utm_medium                       String?\n  utm_campaign                     String?\n  utm_term                         String?\n  utm_content                      String?\n}\n\nmodel RoutingFormResponseDenormalized {\n  id                      Int                           @id\n  uuid                    String?\n  formId                  String\n  formName                String\n  formTeamId              Int?\n  formUserId              Int\n  booking                 Booking?                      @relation(fields: [bookingId], references: [id], onDelete: SetNull)\n  bookingUid              String?\n  bookingId               Int?\n  bookingStatus           BookingStatus?\n  bookingStatusOrder      Int?\n  bookingCreatedAt        DateTime?                     @db.Timestamp(3)\n  bookingStartTime        DateTime?                     @db.Timestamp(3)\n  bookingEndTime          DateTime?                     @db.Timestamp(3)\n  bookingUserId           Int?\n  bookingUserName         String?\n  bookingUserEmail        String?\n  bookingUserAvatarUrl    String?\n  bookingAssignmentReason String?\n  eventTypeId             Int?\n  eventTypeParentId       Int?\n  eventTypeSchedulingType String?\n  createdAt               DateTime                      @db.Timestamp(3)\n  utm_source              String?\n  utm_medium              String?\n  utm_campaign            String?\n  utm_term                String?\n  utm_content             String?\n  response                App_RoutingForms_FormResponse @relation(fields: [id], references: [id], onDelete: Cascade)\n  fields                  RoutingFormResponseField[]    @relation("DenormalizedResponseToFields")\n\n  @@index([formId])\n  @@index([formTeamId])\n  @@index([formUserId])\n  @@index([formId, createdAt])\n  @@index([bookingId])\n  @@index([bookingUserId])\n  @@index([eventTypeId, eventTypeParentId])\n}\n\nmodel Feedback {\n  id      Int      @id @default(autoincrement())\n  date    DateTime @default(now())\n  userId  Int\n  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  rating  String\n  comment String?\n\n  @@index([userId])\n  @@index([rating])\n}\n\nenum WorkflowTriggerEvents {\n  BEFORE_EVENT\n  EVENT_CANCELLED\n  NEW_EVENT\n  AFTER_EVENT\n  RESCHEDULE_EVENT\n  AFTER_HOSTS_CAL_VIDEO_NO_SHOW\n  AFTER_GUESTS_CAL_VIDEO_NO_SHOW\n  FORM_SUBMITTED\n  FORM_SUBMITTED_NO_EVENT\n  BOOKING_REJECTED\n  BOOKING_REQUESTED\n  BOOKING_PAYMENT_INITIATED\n  BOOKING_PAID\n  BOOKING_NO_SHOW_UPDATED\n}\n\nenum WorkflowActions {\n  EMAIL_HOST\n  EMAIL_ATTENDEE\n  SMS_ATTENDEE\n  SMS_NUMBER\n  EMAIL_ADDRESS\n  WHATSAPP_ATTENDEE\n  WHATSAPP_NUMBER\n  CAL_AI_PHONE_CALL\n}\n\nenum WorkflowType {\n  EVENT_TYPE\n  ROUTING_FORM\n}\n\nmodel WorkflowStep {\n  id                        Int                @id @default(autoincrement())\n  stepNumber                Int\n  action                    WorkflowActions\n  workflowId                Int\n  workflow                  Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)\n  sendTo                    String?\n  reminderBody              String?\n  emailSubject              String?\n  template                  WorkflowTemplates  @default(REMINDER)\n  workflowReminders         WorkflowReminder[]\n  numberRequired            Boolean?\n  sender                    String?\n  numberVerificationPending Boolean            @default(true)\n  includeCalendarEvent      Boolean            @default(false)\n  verifiedAt                DateTime?\n  agentId                   String?            @unique\n  agent                     Agent?             @relation(fields: [agentId], references: [id], onDelete: SetNull)\n\n  inboundAgentId String? @unique\n  inboundAgent   Agent?  @relation("WorkflowStepInboundAgent", fields: [inboundAgentId], references: [id], onDelete: SetNull)\n\n  @@index([workflowId])\n}\n\nmodel Workflow {\n  id                   Int                       @id @default(autoincrement())\n  position             Int                       @default(0)\n  name                 String\n  userId               Int?\n  user                 User?                     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  team                 Team?                     @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId               Int?\n  activeOn             WorkflowsOnEventTypes[]\n  activeOnTeams        WorkflowsOnTeams[]\n  activeOnRoutingForms WorkflowsOnRoutingForms[]\n  isActiveOnAll        Boolean                   @default(false)\n  trigger              WorkflowTriggerEvents\n  time                 Int?\n  timeUnit             TimeUnit?\n  steps                WorkflowStep[]\n  type                 WorkflowType              @default(EVENT_TYPE)\n\n  @@index([userId])\n  @@index([teamId])\n}\n\nmodel AIPhoneCallConfiguration {\n  id              Int       @id @default(autoincrement())\n  eventType       EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  eventTypeId     Int\n  templateType    String    @default("CUSTOM_TEMPLATE")\n  schedulerName   String?\n  generalPrompt   String?\n  yourPhoneNumber String\n  numberToCall    String\n  guestName       String?\n  guestEmail      String?\n  guestCompany    String?\n  enabled         Boolean   @default(false)\n  beginMessage    String?\n  llmId           String?\n\n  @@unique([eventTypeId])\n  @@index([eventTypeId])\n}\n\nmodel WorkflowsOnEventTypes {\n  id          Int       @id @default(autoincrement())\n  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)\n  workflowId  Int\n  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  eventTypeId Int\n\n  @@unique([workflowId, eventTypeId])\n  @@index([workflowId])\n  @@index([eventTypeId])\n}\n\nmodel WorkflowsOnRoutingForms {\n  id            Int                   @id @default(autoincrement())\n  workflow      Workflow              @relation(fields: [workflowId], references: [id], onDelete: Cascade)\n  workflowId    Int\n  routingForm   App_RoutingForms_Form @relation(fields: [routingFormId], references: [id], onDelete: Cascade)\n  routingFormId String\n\n  @@unique([workflowId, routingFormId])\n  @@index([workflowId])\n  @@index([routingFormId])\n}\n\nmodel WorkflowsOnTeams {\n  id         Int      @id @default(autoincrement())\n  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)\n  workflowId Int\n  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId     Int\n\n  @@unique([workflowId, teamId])\n  @@index([workflowId])\n  @@index([teamId])\n}\n\nmodel Deployment {\n  /// This is a single row table, so we use a fixed id\n  id                      Int       @id @default(1)\n  logo                    String?\n  /// @zod.import(["import { DeploymentTheme } from \'../../zod-utils\'"]).custom.use(DeploymentTheme)\n  theme                   Json?\n  licenseKey              String?\n  // We encrypt the signature token in the deployment table with the current calendso encryption key\n  signatureTokenEncrypted String?\n  agreedLicenseAt         DateTime?\n}\n\nenum TimeUnit {\n  DAY    @map("day")\n  HOUR   @map("hour")\n  MINUTE @map("minute")\n}\n\nmodel WorkflowReminder {\n  id                  Int             @id @default(autoincrement())\n  uuid                String?         @unique @default(uuid())\n  bookingUid          String?\n  booking             Booking?        @relation(fields: [bookingUid], references: [uid])\n  method              WorkflowMethods\n  scheduledDate       DateTime\n  referenceId         String?         @unique\n  scheduled           Boolean\n  workflowStepId      Int?\n  workflowStep        WorkflowStep?   @relation(fields: [workflowStepId], references: [id], onDelete: Cascade)\n  cancelled           Boolean?\n  seatReferenceId     String?\n  isMandatoryReminder Boolean?        @default(false)\n  retryCount          Int             @default(0)\n\n  @@index([bookingUid])\n  @@index([workflowStepId])\n  @@index([seatReferenceId])\n  @@index([method, scheduled, scheduledDate])\n  @@index([cancelled, scheduledDate])\n}\n\nmodel WebhookScheduledTriggers {\n  id            Int       @id @default(autoincrement())\n  jobName       String? // jobName is deprecated, not needed when webhook and booking is set\n  subscriberUrl String\n  payload       String\n  startAfter    DateTime\n  retryCount    Int       @default(0)\n  createdAt     DateTime? @default(now())\n  appId         String?\n  webhookId     String?\n  webhook       Webhook?  @relation(fields: [webhookId], references: [id], onDelete: Cascade)\n  bookingId     Int?\n  booking       Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n}\n\nenum WorkflowTemplates {\n  REMINDER\n  CUSTOM\n  CANCELLED\n  RESCHEDULED\n  COMPLETED\n  RATING\n}\n\nenum WorkflowMethods {\n  EMAIL\n  SMS\n  WHATSAPP\n  AI_PHONE_CALL\n}\n\nmodel BookingSeat {\n  id           Int      @id @default(autoincrement())\n  referenceUid String   @unique\n  bookingId    Int\n  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  attendeeId   Int      @unique\n  attendee     Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)\n  /// @zod.import(["import { bookingSeatDataSchema } from \'../../zod-utils\'"]).custom.use(bookingSeatDataSchema)\n  data         Json?\n  metadata     Json?\n\n  @@index([bookingId])\n  @@index([attendeeId])\n}\n\nmodel VerifiedNumber {\n  id          Int    @id @default(autoincrement())\n  userId      Int?\n  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)\n  teamId      Int?\n  team        Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  phoneNumber String\n\n  @@index([userId])\n  @@index([teamId])\n}\n\nmodel VerifiedEmail {\n  id     Int    @id @default(autoincrement())\n  userId Int?\n  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)\n  teamId Int?\n  team   Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  email  String\n\n  @@index([userId])\n  @@index([teamId])\n}\n\nmodel Feature {\n  // The feature slug, ex: \'v2-workflows\'\n  slug        String         @id @unique\n  // If the feature is currently enabled\n  enabled     Boolean        @default(false)\n  // A short description of the feature\n  description String?\n  // The type of feature flag\n  type        FeatureType?   @default(RELEASE)\n  // If the flag is considered stale\n  stale       Boolean?       @default(false)\n  lastUsedAt  DateTime?\n  createdAt   DateTime?      @default(now())\n  updatedAt   DateTime?      @default(now()) @updatedAt\n  updatedBy   Int?\n  users       UserFeatures[]\n  teams       TeamFeatures[]\n\n  @@index([enabled])\n  @@index([stale])\n}\n\nmodel UserFeatures {\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId     Int\n  feature    Feature  @relation(fields: [featureId], references: [slug], onDelete: Cascade)\n  featureId  String\n  assignedAt DateTime @default(now())\n  assignedBy String\n  updatedAt  DateTime @updatedAt\n\n  @@id([userId, featureId])\n  @@index([userId, featureId])\n}\n\nmodel TeamFeatures {\n  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId     Int\n  feature    Feature  @relation(fields: [featureId], references: [slug], onDelete: Cascade)\n  featureId  String\n  assignedAt DateTime @default(now())\n  assignedBy String\n  updatedAt  DateTime @updatedAt\n\n  @@id([teamId, featureId])\n  @@index([teamId, featureId])\n}\n\nenum FeatureType {\n  RELEASE\n  EXPERIMENT\n  OPERATIONAL\n  KILL_SWITCH\n  PERMISSION\n}\n\nenum RRResetInterval {\n  MONTH\n  DAY\n}\n\nenum RRTimestampBasis {\n  CREATED_AT\n  START_TIME\n}\n\nmodel SelectedSlots {\n  id               Int      @id @default(autoincrement())\n  eventTypeId      Int\n  userId           Int\n  slotUtcStartDate DateTime\n  slotUtcEndDate   DateTime\n  uid              String\n  releaseAt        DateTime\n  isSeat           Boolean  @default(false)\n\n  @@unique(fields: [userId, slotUtcStartDate, slotUtcEndDate, uid], name: "selectedSlotUnique")\n}\n\nmodel OAuthClient {\n  clientId     String       @id @unique\n  redirectUri  String\n  clientSecret String\n  name         String\n  logo         String?\n  accessCodes  AccessCode[]\n}\n\nmodel AccessCode {\n  id        Int           @id @default(autoincrement())\n  code      String\n  clientId  String?\n  client    OAuthClient?  @relation(fields: [clientId], references: [clientId], onDelete: Cascade)\n  expiresAt DateTime\n  scopes    AccessScope[]\n  userId    Int?\n  user      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)\n  teamId    Int?\n  team      Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)\n}\n\nenum AccessScope {\n  READ_BOOKING\n  READ_PROFILE\n}\n\nview BookingTimeStatus {\n  id             Int            @unique\n  uid            String?\n  eventTypeId    Int?\n  title          String?\n  description    String?\n  startTime      DateTime?\n  endTime        DateTime?\n  createdAt      DateTime?\n  location       String?\n  paid           Boolean?\n  status         BookingStatus?\n  rescheduled    Boolean?\n  userId         Int?\n  teamId         Int?\n  eventLength    Int?\n  timeStatus     String?\n  eventParentId  Int?\n  userEmail      String?\n  username       String?\n  ratingFeedback String?\n  rating         Int?\n  noShowHost     Boolean?\n  isTeamBooking  Boolean\n}\n\nmodel BookingDenormalized {\n  id             Int           @id @unique\n  uid            String\n  eventTypeId    Int?\n  title          String\n  description    String?\n  startTime      DateTime\n  endTime        DateTime\n  createdAt      DateTime\n  updatedAt      DateTime?\n  location       String?\n  paid           Boolean\n  status         BookingStatus\n  rescheduled    Boolean?\n  userId         Int?\n  teamId         Int?\n  eventLength    Int?\n  eventParentId  Int?\n  userEmail      String?\n  userName       String?\n  userUsername   String?\n  ratingFeedback String?\n  rating         Int?\n  noShowHost     Boolean?\n  isTeamBooking  Boolean\n\n  @@index([userId])\n  @@index([createdAt])\n  @@index([eventTypeId])\n  @@index([eventParentId])\n  @@index([teamId])\n  @@index([startTime])\n  @@index([endTime])\n  @@index([status])\n  @@index([teamId, isTeamBooking])\n  @@index([userId, isTeamBooking])\n  @@index([startTime, endTime])\n}\n\nview BookingTimeStatusDenormalized {\n  id             Int           @unique\n  uid            String\n  eventTypeId    Int?\n  title          String\n  description    String?\n  startTime      DateTime\n  endTime        DateTime\n  createdAt      DateTime\n  updatedAt      DateTime?\n  location       String?\n  paid           Boolean\n  status         BookingStatus\n  rescheduled    Boolean?\n  userId         Int?\n  teamId         Int?\n  eventLength    Int?\n  eventParentId  Int?\n  userEmail      String?\n  userName       String?\n  userUsername   String?\n  ratingFeedback String?\n  rating         Int?\n  noShowHost     Boolean?\n  isTeamBooking  Boolean\n  timeStatus     String? // this is the addition on top of BookingDenormalized\n}\n\nmodel CalendarCache {\n  // To be made required in a followup\n  id String? @default(uuid())\n\n  // The key would be the unique URL that is requested by the user\n  key          String\n  value        Json\n  expiresAt    DateTime\n  // Provide an initial value for legacy rows and future raw inserts\n  updatedAt    DateTime    @default(now()) @updatedAt\n  credentialId Int\n  userId       Int?\n  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)\n\n  @@id([credentialId, key])\n  @@unique([credentialId, key])\n  @@index([userId, key])\n}\n\nenum RedirectType {\n  UserEventType @map("user-event-type")\n  TeamEventType @map("team-event-type")\n  User          @map("user")\n  Team          @map("team")\n}\n\nmodel TempOrgRedirect {\n  id        Int          @id @default(autoincrement())\n  // Better would be to have fromOrgId and toOrgId as well and then we should have just to instead toUrl\n  from      String\n  // 0 would mean it is non org\n  fromOrgId Int\n  type      RedirectType\n  // It doesn\'t have any query params\n  toUrl     String\n  enabled   Boolean      @default(true)\n  createdAt DateTime     @default(now())\n  updatedAt DateTime     @updatedAt\n\n  @@unique([from, type, fromOrgId])\n}\n\nmodel Avatar {\n  // e.g. NULL(0), organization ID or team logo\n  teamId    Int    @default(0)\n  // Avatar, NULL(0) if team logo\n  userId    Int    @default(0)\n  // base64 string\n  data      String\n  // different every time to pop the cache.\n  objectKey String @unique\n\n  isBanner Boolean @default(false)\n\n  @@unique([teamId, userId, isBanner])\n  @@map(name: "avatars")\n}\n\nmodel OutOfOfficeEntry {\n  id       Int                @id @default(autoincrement())\n  uuid     String             @unique\n  start    DateTime\n  end      DateTime\n  notes    String?\n  userId   Int\n  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n  toUserId Int?\n  toUser   User?              @relation(name: "toUser", fields: [toUserId], references: [id], onDelete: Cascade)\n  reasonId Int?\n  reason   OutOfOfficeReason? @relation(fields: [reasonId], references: [id], onDelete: SetNull)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([uuid])\n  @@index([userId])\n  @@index([toUserId])\n  @@index([start, end])\n}\n\nmodel OutOfOfficeReason {\n  id      Int     @id @default(autoincrement())\n  emoji   String\n  reason  String  @unique\n  enabled Boolean @default(true)\n  userId  Int?\n  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  entries OutOfOfficeEntry[]\n}\n\n// Platform\nmodel PlatformOAuthClient {\n  id             String   @id @default(cuid())\n  name           String\n  secret         String\n  permissions    Int\n  users          User[]\n  logo           String?\n  redirectUris   String[]\n  organizationId Int\n  organization   Team     @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  teams          Team[]   @relation("CreatedByOAuthClient")\n\n  accessTokens        AccessToken[]\n  refreshToken        RefreshToken[]\n  authorizationTokens PlatformAuthorizationToken[]\n  webhook             Webhook[]\n\n  bookingRedirectUri           String?\n  bookingCancelRedirectUri     String?\n  bookingRescheduleRedirectUri String?\n  areEmailsEnabled             Boolean @default(false)\n  areDefaultEventTypesEnabled  Boolean @default(true)\n  areCalendarEventsEnabled     Boolean @default(true)\n\n  createdAt DateTime @default(now())\n}\n\nmodel PlatformAuthorizationToken {\n  id String @id @default(cuid())\n\n  owner  User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  client PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)\n\n  platformOAuthClientId String\n  userId                Int\n\n  createdAt DateTime @default(now())\n\n  @@unique([userId, platformOAuthClientId])\n}\n\nmodel AccessToken {\n  id Int @id @default(autoincrement())\n\n  secret    String   @unique\n  createdAt DateTime @default(now())\n  expiresAt DateTime\n\n  owner  User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  client PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)\n\n  platformOAuthClientId String\n  userId                Int\n}\n\nmodel RefreshToken {\n  id Int @id @default(autoincrement())\n\n  secret    String   @unique\n  createdAt DateTime @default(now())\n  expiresAt DateTime\n\n  owner  User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  client PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)\n\n  platformOAuthClientId String\n  userId                Int\n}\n\nmodel DSyncData {\n  id               Int                     @id @default(autoincrement())\n  directoryId      String                  @unique\n  tenant           String\n  organizationId   Int?                    @unique\n  org              OrganizationSettings?   @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)\n  teamGroupMapping DSyncTeamGroupMapping[]\n\n  createdAttributeToUsers AttributeToUser[] @relation("createdByDSync")\n  updatedAttributeToUsers AttributeToUser[] @relation("updatedByDSync")\n}\n\nmodel DSyncTeamGroupMapping {\n  id             Int       @id @default(autoincrement())\n  organizationId Int\n  teamId         Int\n  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  directoryId    String\n  directory      DSyncData @relation(fields: [directoryId], references: [directoryId], onDelete: Cascade)\n  groupName      String\n\n  @@unique([teamId, groupName])\n}\n\nmodel SecondaryEmail {\n  id                 Int                 @id @default(autoincrement())\n  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId             Int\n  email              String\n  emailVerified      DateTime?\n  verificationTokens VerificationToken[]\n  eventTypes         EventType[]\n\n  @@unique([email])\n  @@unique([userId, email])\n  @@index([userId])\n}\n\n// Needed to store tasks that need to be processed by a background worker or Tasker\nmodel Task {\n  id                  String    @id @unique @default(uuid())\n  createdAt           DateTime  @default(now())\n  updatedAt           DateTime  @updatedAt\n  // The time at which the task should be executed\n  scheduledAt         DateTime  @default(now())\n  // The time at which the task was successfully executed\n  succeededAt         DateTime?\n  // The task type to be executed. Left it as a freeform string to avoid more migrations for now. Will be enforced at type level.\n  type                String\n  // Generic payload for the task\n  payload             String\n  // The number of times the task has been attempted\n  attempts            Int       @default(0)\n  // The maximum number of times the task can be attempted\n  maxAttempts         Int       @default(3)\n  lastError           String?\n  lastFailedAttemptAt DateTime?\n  referenceUid        String?\n\n  // unique index on referenceUid,type to avoid duplicate tasks\n  @@unique([referenceUid, type])\n  // for finding succeeded tasks\n  @@index([succeededAt])\n  // for finding tasks that are scheduled to be executed\n  @@index([scheduledAt, succeededAt])\n}\n\nenum SMSLockState {\n  LOCKED\n  UNLOCKED\n  REVIEW_NEEDED\n}\n\nmodel ManagedOrganization {\n  managedOrganizationId Int  @unique\n  managedOrganization   Team @relation("ManagedOrganization", fields: [managedOrganizationId], references: [id], onDelete: Cascade)\n\n  managerOrganizationId Int\n  managerOrganization   Team @relation("ManagerOrganization", fields: [managerOrganizationId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n\n  @@unique([managerOrganizationId, managedOrganizationId])\n  @@index([managerOrganizationId])\n}\n\nmodel PlatformBilling {\n  id Int @id @unique // team id\n\n  customerId     String\n  subscriptionId String?\n  priceId        String?\n  plan           String  @default("none")\n\n  billingCycleStart Int?\n  billingCycleEnd   Int?\n  overdue           Boolean? @default(false)\n\n  // note(Lauris): in case of a platform managed organization\'s billing record this field points to the manager organization\'s billing record.\n  managerBillingId Int?\n  managerBilling   PlatformBilling?  @relation("PlatformManagedBilling", fields: [managerBillingId], references: [id])\n  // note(Lauris): in case of a manager organization\'s billing record this field points to billing records of its platform managed organizations.\n  managedBillings  PlatformBilling[] @relation("PlatformManagedBilling")\n\n  team Team @relation(fields: [id], references: [id], onDelete: Cascade)\n}\n\nenum AttributeType {\n  TEXT\n  NUMBER\n  SINGLE_SELECT\n  MULTI_SELECT\n}\n\nmodel AttributeOption {\n  id            String            @id @default(uuid())\n  attribute     Attribute         @relation(fields: [attributeId], references: [id], onDelete: Cascade)\n  attributeId   String\n  value         String\n  slug          String\n  isGroup       Boolean           @default(false)\n  // It is a list of AttributeOptions ids that are contained in the group option\n  // You could think of a person having the group option to actually have all the options in the contains list.\n  // We are not using relation here because it would be a many to many relation because a group option can contain many non-group options and a non-group option can be contained in many group options\n  // Such a relation would require its own table to be managed and we don\'t need it for now.\n  contains      String[]\n  assignedUsers AttributeToUser[]\n}\n\nmodel Attribute {\n  id String @id @default(uuid())\n\n  // This is organization\n  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)\n\n  // This is organizationId\n  teamId Int\n\n  type AttributeType\n\n  name    String\n  slug    String\n  enabled Boolean @default(true)\n\n  usersCanEditRelation Boolean @default(false)\n\n  createdAt        DateTime          @default(now())\n  updatedAt        DateTime          @updatedAt\n  options          AttributeOption[]\n  isWeightsEnabled Boolean           @default(false)\n  isLocked         Boolean           @default(false)\n\n  @@unique([teamId, slug])\n  @@index([teamId])\n}\n\nmodel AttributeToUser {\n  id String @id @default(uuid())\n\n  // This is the membership of the organization\n  member Membership @relation(fields: [memberId], references: [id], onDelete: Cascade)\n\n  // This is the membership id of the organization\n  memberId Int\n\n  attributeOption   AttributeOption @relation(fields: [attributeOptionId], references: [id], onDelete: Cascade)\n  attributeOptionId String\n\n  weight Int?\n\n  // We don\'t intentionally delete assignments on deletion of a user/directory sync\n  createdAt        DateTime   @default(now())\n  createdById      Int?\n  createdBy        User?      @relation("createdBy", fields: [createdById], references: [id], onDelete: SetNull)\n  createdByDSyncId String?\n  createdByDSync   DSyncData? @relation("createdByDSync", fields: [createdByDSyncId], references: [directoryId], onDelete: SetNull)\n\n  updatedAt        DateTime?  @updatedAt\n  updatedBy        User?      @relation("updatedBy", fields: [updatedById], references: [id], onDelete: SetNull)\n  updatedById      Int?\n  updatedByDSyncId String?\n  updatedByDSync   DSyncData? @relation("updatedByDSync", fields: [updatedByDSyncId], references: [directoryId], onDelete: SetNull)\n\n  @@unique([memberId, attributeOptionId])\n}\n\nenum AssignmentReasonEnum {\n  ROUTING_FORM_ROUTING\n  ROUTING_FORM_ROUTING_FALLBACK\n  REASSIGNED\n  RR_REASSIGNED\n  REROUTED\n  SALESFORCE_ASSIGNMENT\n}\n\nmodel AssignmentReason {\n  id           Int                  @id @unique @default(autoincrement())\n  createdAt    DateTime             @default(now())\n  bookingId    Int\n  booking      Booking              @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  reasonEnum   AssignmentReasonEnum\n  reasonString String\n\n  @@index([bookingId])\n}\n\nenum EventTypeAutoTranslatedField {\n  DESCRIPTION\n  TITLE\n}\n\nmodel DelegationCredential {\n  id                  String                @id @default(uuid())\n  workspacePlatform   WorkspacePlatform     @relation(fields: [workspacePlatformId], references: [id], onDelete: Cascade)\n  workspacePlatformId Int\n  // Provides possibility to have different service accounts for different organizations if the need arises, but normally they should be the same\n  /// @zod.import(["import { serviceAccountKeySchema } from \'../../zod-utils\'"]).custom.use(serviceAccountKeySchema)\n  serviceAccountKey   Json\n  enabled             Boolean               @default(false)\n  // lastEnabledAt is set when the delegation credential is enabled\n  lastEnabledAt       DateTime?\n  // lastDisabledAt is set when the delegation credential is disabled. So, lastDisabledAt could be earlier then lastEnabledAt if the delegation credential was enabled -> then disabled -> then enabled again.\n  lastDisabledAt      DateTime?\n  organizationId      Int\n  organization        Team                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  domain              String\n  selectedCalendars   SelectedCalendar[]\n  destinationCalendar DestinationCalendar[]\n  bookingReferences   BookingReference[]\n  createdAt           DateTime              @default(now())\n  updatedAt           DateTime              @updatedAt\n  credentials         Credential[]\n\n  // Should be fair to assume that one domain can be only on one workspace platform at a time. So, one can\'t have two different workspace platforms for the same domain\n  // Because we don\'t know which domain the organization might have, we couldn\'t make "domain" unique here as that would prevent an actual owner of the domain to be unable to use that domain if it is used by someone else.\n  @@unique([organizationId, domain])\n  @@index([enabled])\n}\n\n// Deprecated and probably unused - Use DelegationCredential instead\nmodel DomainWideDelegation {\n  id                  String                @id @default(uuid())\n  workspacePlatform   WorkspacePlatform     @relation(fields: [workspacePlatformId], references: [id], onDelete: Cascade)\n  workspacePlatformId Int\n  // Provides possibility to have different service accounts for different organizations if the need arises, but normally they should be the same\n  /// @zod.import(["import { serviceAccountKeySchema } from \'../../zod-utils\'"]).custom.use(serviceAccountKeySchema)\n  serviceAccountKey   Json\n  enabled             Boolean               @default(false)\n  organizationId      Int\n  organization        Team                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  domain              String\n  selectedCalendars   SelectedCalendar[]\n  destinationCalendar DestinationCalendar[]\n  bookingReferences   BookingReference[]\n  createdAt           DateTime              @default(now())\n  updatedAt           DateTime              @updatedAt\n\n  // Should be fair to assume that one domain can be only on one workspace platform at a time. So, one can\'t have two different workspace platforms for the same domain\n  // Because we don\'t know which domain the organization might have, we couldn\'t make "domain" unique here as that would prevent an actual owner of the domain to be unable to use that domain if it is used by someone else.\n  @@unique([organizationId, domain])\n}\n\n// It is for delegation credential\nmodel WorkspacePlatform {\n  id                       Int                    @id @default(autoincrement())\n  /// @zod.string.min(1)\n  slug                     String\n  /// @zod.string.min(1)\n  name                     String\n  description              String\n  /// @zod.import(["import { serviceAccountKeySchema } from \'../../zod-utils\'"]).custom.use(serviceAccountKeySchema)\n  defaultServiceAccountKey Json\n  createdAt                DateTime               @default(now())\n  updatedAt                DateTime               @updatedAt\n  enabled                  Boolean                @default(false)\n  delegationCredentials    DelegationCredential[]\n  domainWideDelegations    DomainWideDelegation[]\n\n  @@unique([slug])\n}\n\nmodel EventTypeTranslation {\n  uid            String                       @id @default(cuid())\n  eventType      EventType                    @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)\n  eventTypeId    Int\n  field          EventTypeAutoTranslatedField\n  sourceLocale   String\n  targetLocale   String\n  translatedText String                       @db.Text\n  createdAt      DateTime                     @default(now())\n  createdBy      Int\n  updatedAt      DateTime                     @updatedAt\n  updatedBy      Int?\n  creator        User                         @relation("CreatedEventTypeTranslations", fields: [createdBy], references: [id])\n  updater        User?                        @relation("UpdatedEventTypeTranslations", fields: [updatedBy], references: [id], onDelete: SetNull)\n\n  @@unique([eventTypeId, field, targetLocale])\n  @@index([eventTypeId, field, targetLocale])\n}\n\nenum WatchlistType {\n  EMAIL\n  DOMAIN\n  USERNAME\n}\n\nenum WatchlistAction {\n  REPORT\n  BLOCK\n  ALERT\n}\n\nenum WatchlistSource {\n  MANUAL\n  FREE_DOMAIN_POLICY\n}\n\nmodel Watchlist {\n  id             String          @id @default(uuid()) @db.Uuid\n  type           WatchlistType\n  value          String\n  description    String?\n  isGlobal       Boolean         @default(false)\n  organizationId Int?\n  action         WatchlistAction @default(REPORT)\n  source         WatchlistSource @default(MANUAL)\n  lastUpdatedAt  DateTime        @default(now())\n\n  bookingReports BookingReport[]\n  audits         WatchlistAudit[]\n\n  @@unique([type, value, organizationId])\n  @@index([type, value, organizationId, action])\n}\n\nmodel WatchlistAudit {\n  id          String        @id @default(uuid(7)) @db.Uuid\n  type        WatchlistType\n  value       String\n  description String?\n\n  action WatchlistAction @default(REPORT)\n\n  changedAt       DateTime @default(now())\n  changedByUserId Int?\n\n  watchlistId String     @db.Uuid\n  watchlist   Watchlist? @relation(fields: [watchlistId], references: [id], onDelete: Cascade)\n\n  @@index([watchlistId, changedAt])\n}\n\nmodel WatchlistEventAudit {\n  id          String          @id @default(uuid(7)) @db.Uuid\n  watchlistId String          @db.Uuid\n  eventTypeId Int\n  actionTaken WatchlistAction\n  timestamp   DateTime        @default(now())\n}\n\nenum BookingReportReason {\n  SPAM\n  DONT_KNOW_PERSON @map("dont_know_person")\n  OTHER\n}\n\nmodel BookingReport {\n  id             String              @id @default(uuid()) @db.Uuid\n  bookingUid     String              @unique\n  booking        Booking             @relation(fields: [bookingUid], references: [uid], onDelete: Cascade)\n  bookerEmail    String\n  reportedById   Int?\n  organizationId Int?\n  reason         BookingReportReason\n  description    String?\n  cancelled      Boolean             @default(false)\n  createdAt      DateTime            @default(now())\n  updatedAt      DateTime            @updatedAt\n\n  watchlistId String? @db.Uuid\n\n  reportedBy   User?      @relation("ReportedBy", fields: [reportedById], references: [id], onDelete: SetNull)\n  organization Team?      @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  watchlist    Watchlist? @relation(fields: [watchlistId], references: [id], onDelete: SetNull)\n\n  @@index([bookerEmail])\n  @@index([reportedById])\n  @@index([organizationId])\n  @@index([watchlistId])\n  @@index([createdAt])\n}\n\nenum BillingPeriod {\n  MONTHLY\n  ANNUALLY\n}\n\nmodel OrganizationOnboarding {\n  // TODO: Use uuid for id\n  id String @id @default(uuid())\n\n  // User who started the onboarding. It is different from orgOwnerEmail in case Cal.com admin is doing the onboarding for someone else.\n  createdBy   User     @relation("CreatedOrganizationOnboardings", fields: [createdById], references: [id], onDelete: Cascade)\n  createdById Int\n  createdAt   DateTime @default(now())\n\n  // We keep the email only here and don\'t need to connect it with user because on User deletion, we don\'t delete the entry here.\n  // It is unique because an email can be the owner of only one organization at a time.\n  orgOwnerEmail String  @unique\n  error         String?\n\n  updatedAt DateTime @updatedAt\n  // TODO: updatedBy to be added when we support marking updatedBy using webhook too, as webhook also updates it\n\n  // Set after organization payment is done and the organization is created\n  organizationId Int?  @unique\n  organization   Team? @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n\n  billingPeriod BillingPeriod\n  pricePerSeat  Float\n  seats         Int\n\n  isPlatform Boolean @default(false)\n\n  // Organization info\n  name               String\n  // We don\'t keep it unique because we don\'t want self-serve flows to block a slug if it isn\'t paid for yet.\n  slug               String\n  logo               String?\n  bio                String?\n  brandColor         String?\n  bannerUrl          String?\n  isDomainConfigured Boolean @default(false)\n\n  // Set when payment intent is there.\n  stripeCustomerId         String? @unique\n  // TODO: Can we make it required\n  stripeSubscriptionId     String?\n  stripeSubscriptionItemId String?\n\n  /// @zod.import(["import { orgOnboardingInvitedMembersSchema } from \'../../zod-utils\'"]).custom.use(orgOnboardingInvitedMembersSchema)\n  invitedMembers Json @default("[]")\n\n  /// @zod.import(["import { orgOnboardingTeamsSchema } from \'../../zod-utils\'"]).custom.use(orgOnboardingTeamsSchema)\n  teams Json @default("[]")\n\n  // Completion status\n  isComplete Boolean @default(false)\n\n  @@index([orgOwnerEmail])\n  @@index([stripeCustomerId])\n}\n\nenum IncompleteBookingActionType {\n  SALESFORCE\n}\n\nmodel App_RoutingForms_IncompleteBookingActions {\n  id           Int                         @id @default(autoincrement())\n  form         App_RoutingForms_Form       @relation(fields: [formId], references: [id], onDelete: Cascade)\n  formId       String\n  actionType   IncompleteBookingActionType\n  data         Json\n  enabled      Boolean                     @default(true)\n  credentialId Int?\n}\n\nmodel InternalNotePreset {\n  id                 Int     @id @default(autoincrement())\n  name               String\n  cancellationReason String?\n  team               Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId             Int\n\n  createdAt           DateTime              @default(now())\n  BookingInternalNote BookingInternalNote[]\n\n  @@unique([teamId, name])\n  @@index([teamId])\n}\n\nenum FilterSegmentScope {\n  USER\n  TEAM\n}\n\nmodel FilterSegment {\n  id               Int                           @id @default(autoincrement())\n  name             String\n  // Identifies which data table this segment belongs to (e.g. "organization_members", "team_members", "bookings", etc.)\n  tableIdentifier  String\n  scope            FilterSegmentScope\n  // Filter configuration\n  activeFilters    Json?\n  sorting          Json?\n  columnVisibility Json?\n  columnSizing     Json?\n  perPage          Int\n  searchTerm       String?                       @db.Text\n  createdAt        DateTime                      @default(now())\n  updatedAt        DateTime                      @updatedAt\n  // Creator of the segment\n  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId           Int\n  // Team scope - optional, only set when scope is TEAM\n  team             Team?                         @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  teamId           Int?\n  userPreferences  UserFilterSegmentPreference[]\n\n  // For user-scoped segments: scope + userId + tableIdentifier\n  @@index([scope, userId, tableIdentifier])\n  // For team-scoped segments: scope + teamId + tableIdentifier\n  @@index([scope, teamId, tableIdentifier])\n}\n\nmodel UserFilterSegmentPreference {\n  id              Int            @id @default(autoincrement())\n  userId          Int\n  tableIdentifier String\n  segmentId       Int?\n  systemSegmentId String?\n  createdAt       DateTime       @default(now())\n  updatedAt       DateTime       @updatedAt\n  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  segment         FilterSegment? @relation(fields: [segmentId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, tableIdentifier])\n  @@index([userId])\n  @@index([segmentId])\n}\n\nmodel BookingInternalNote {\n  id Int @id @default(autoincrement())\n\n  notePreset   InternalNotePreset? @relation(fields: [notePresetId], references: [id], onDelete: Cascade)\n  notePresetId Int?\n  text         String?\n\n  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  bookingId Int\n\n  createdBy   User @relation(fields: [createdById], references: [id])\n  createdById Int\n\n  createdAt DateTime @default(now())\n\n  @@unique([bookingId, notePresetId])\n  @@index([bookingId])\n}\n\nenum WorkflowContactType {\n  PHONE\n  EMAIL\n}\n\nmodel WorkflowOptOutContact {\n  id        Int                 @id @default(autoincrement())\n  type      WorkflowContactType\n  value     String\n  optedOut  Boolean\n  createdAt DateTime            @default(now())\n  updatedAt DateTime            @updatedAt\n\n  @@unique([type, value])\n}\n\nenum RoleType {\n  SYSTEM\n  CUSTOM\n}\n\nmodel Role {\n  id          String           @id @default(cuid())\n  name        String\n  color       String?\n  description String?\n  teamId      Int? // null for global roles\n  team        Team?            @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  permissions RolePermission[]\n  memberships Membership[]\n  createdAt   DateTime         @default(now())\n  updatedAt   DateTime         @updatedAt\n  type        RoleType         @default(CUSTOM)\n\n  @@unique([name, teamId])\n  @@index([teamId])\n}\n\nmodel RolePermission {\n  id        String   @id @default(uuid())\n  roleId    String\n  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)\n  resource  String\n  action    String\n  createdAt DateTime @default(now())\n\n  @@unique([roleId, resource, action])\n  @@index([roleId])\n  // TODO: come back to this with indexs.\n  @@index([action])\n}\n\nenum PhoneNumberSubscriptionStatus {\n  ACTIVE\n  PAST_DUE\n  CANCELLED\n  INCOMPLETE\n  INCOMPLETE_EXPIRED\n  TRIALING\n  UNPAID\n}\n\n// Cal AI Voice Agent\nmodel Agent {\n  id   String @id @default(uuid())\n  name String\n\n  // Either user-owned OR team-owned\n  userId Int?\n  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)\n  teamId Int?\n  team   Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)\n\n  // Provider-specific agent ID (e.g., Retell AI agent ID)\n  providerAgentId String @unique\n\n  // Event type association for inbound agents\n  inboundEventTypeId Int?\n\n  enabled   Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  inboundPhoneNumbers  CalAiPhoneNumber[] @relation("InboundAgent")\n  outboundPhoneNumbers CalAiPhoneNumber[] @relation("OutboundAgent")\n  workflowStep         WorkflowStep?\n  inboundWorkflowStep  WorkflowStep?      @relation("WorkflowStepInboundAgent")\n\n  @@index([userId])\n  @@index([teamId])\n  @@index([inboundEventTypeId])\n}\n\nmodel CalAiPhoneNumber {\n  id Int @id @default(autoincrement())\n\n  // Either user-owned OR team-owned\n  userId Int?\n  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)\n  teamId Int?\n  team   Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)\n\n  phoneNumber String @unique\n  provider    String\n\n  // Provider-specific phone number ID (e.g., Retell phone number ID)\n  providerPhoneNumberId String? @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  stripeCustomerId     String?\n  stripeSubscriptionId String?                        @unique\n  subscriptionStatus   PhoneNumberSubscriptionStatus?\n\n  // Agent associations\n  inboundAgentId  String?\n  inboundAgent    Agent?  @relation("InboundAgent", fields: [inboundAgentId], references: [id], onDelete: SetNull)\n  outboundAgentId String?\n  outboundAgent   Agent?  @relation("OutboundAgent", fields: [outboundAgentId], references: [id], onDelete: SetNull)\n\n  @@index([userId])\n  @@index([teamId])\n  @@index([inboundAgentId])\n  @@index([outboundAgentId])\n}\n\nmodel TeamBilling {\n  id     String @id @default(uuid())\n  teamId Int    @unique\n  team   Team?  @relation("TeamBilling", fields: [teamId], references: [id], onDelete: Cascade)\n\n  subscriptionId       String    @unique\n  subscriptionItemId   String\n  customerId           String\n  status               String\n  planName             String\n  subscriptionStart    DateTime?\n  subscriptionTrialEnd DateTime?\n  subscriptionEnd      DateTime?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel OrganizationBilling {\n  id     String @id @default(uuid())\n  teamId Int    @unique\n  team   Team   @relation("OrganizationBilling", fields: [teamId], references: [id], onDelete: Cascade)\n\n  subscriptionId       String    @unique\n  subscriptionItemId   String\n  customerId           String\n  status               String\n  planName             String\n  subscriptionStart    DateTime?\n  subscriptionTrialEnd DateTime?\n  subscriptionEnd      DateTime?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nenum CalendarCacheEventStatus {\n  confirmed @map("confirmed")\n  tentative @map("tentative")\n  cancelled @map("cancelled")\n}\n\nmodel CalendarCacheEvent {\n  id                 String  @id @default(uuid())\n  selectedCalendarId String\n  externalId         String\n  externalEtag       String\n  iCalUID            String?\n  iCalSequence       Int     @default(0)\n\n  // Event details\n  summary           String?\n  description       String?\n  location          String?\n  start             DateTime\n  end               DateTime\n  isAllDay          Boolean                  @default(false)\n  timeZone          String?\n  status            CalendarCacheEventStatus @default(confirmed)\n  recurringEventId  String?\n  originalStartTime DateTime?\n\n  createdAt         DateTime  @default(now())\n  updatedAt         DateTime  @updatedAt\n  externalCreatedAt DateTime?\n  externalUpdatedAt DateTime?\n\n  selectedCalendar SelectedCalendar @relation(fields: [selectedCalendarId], references: [id], onDelete: Cascade)\n\n  @@unique([selectedCalendarId, externalId])\n  @@index([start, end, status])\n  @@index([selectedCalendarId, iCalUID])\n}\n',
  inlineSchemaHash: "10956cf0b515e9c08b00863df140f5a9fefaca434e3d480b8a76d85631035ec5",
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: "",
};

config.runtimeDataModel = JSON.parse(
  '{"models":{"Host":{"fields":[{"name":"user","kind":"object","type":"User","relationName":"HostToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToHost"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"isFixed","kind":"scalar","type":"Boolean"},{"name":"priority","kind":"scalar","type":"Int"},{"name":"weight","kind":"scalar","type":"Int"},{"name":"weightAdjustment","kind":"scalar","type":"Int"},{"name":"schedule","kind":"object","type":"Schedule","relationName":"HostToSchedule"},{"name":"scheduleId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"group","kind":"object","type":"HostGroup","relationName":"HostToHostGroup"},{"name":"groupId","kind":"scalar","type":"String"},{"name":"memberId","kind":"scalar","type":"Int"},{"name":"member","kind":"object","type":"Membership","relationName":"HostToMembership"}],"dbName":null},"HostGroup":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"hosts","kind":"object","type":"Host","relationName":"HostToHostGroup"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToHostGroup"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"CalVideoSettings":{"fields":[{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"CalVideoSettingsToEventType"},{"name":"disableRecordingForOrganizer","kind":"scalar","type":"Boolean"},{"name":"disableRecordingForGuests","kind":"scalar","type":"Boolean"},{"name":"enableAutomaticTranscription","kind":"scalar","type":"Boolean"},{"name":"enableAutomaticRecordingForOrganizer","kind":"scalar","type":"Boolean"},{"name":"redirectUrlOnExit","kind":"scalar","type":"String"},{"name":"disableTranscriptionForGuests","kind":"scalar","type":"Boolean"},{"name":"disableTranscriptionForOrganizer","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"EventType":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"interfaceLanguage","kind":"scalar","type":"String"},{"name":"position","kind":"scalar","type":"Int"},{"name":"locations","kind":"scalar","type":"Json"},{"name":"length","kind":"scalar","type":"Int"},{"name":"offsetStart","kind":"scalar","type":"Int"},{"name":"hidden","kind":"scalar","type":"Boolean"},{"name":"hosts","kind":"object","type":"Host","relationName":"EventTypeToHost"},{"name":"users","kind":"object","type":"User","relationName":"user_eventtype"},{"name":"owner","kind":"object","type":"User","relationName":"owner"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"profileId","kind":"scalar","type":"Int"},{"name":"profile","kind":"object","type":"Profile","relationName":"EventTypeToProfile"},{"name":"team","kind":"object","type":"Team","relationName":"EventTypeToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"hashedLink","kind":"object","type":"HashedLink","relationName":"EventTypeToHashedLink"},{"name":"bookings","kind":"object","type":"Booking","relationName":"BookingToEventType"},{"name":"availability","kind":"object","type":"Availability","relationName":"AvailabilityToEventType"},{"name":"webhooks","kind":"object","type":"Webhook","relationName":"EventTypeToWebhook"},{"name":"destinationCalendar","kind":"object","type":"DestinationCalendar","relationName":"DestinationCalendarToEventType"},{"name":"useEventLevelSelectedCalendars","kind":"scalar","type":"Boolean"},{"name":"eventName","kind":"scalar","type":"String"},{"name":"customInputs","kind":"object","type":"EventTypeCustomInput","relationName":"EventTypeToEventTypeCustomInput"},{"name":"parentId","kind":"scalar","type":"Int"},{"name":"parent","kind":"object","type":"EventType","relationName":"managed_eventtype"},{"name":"children","kind":"object","type":"EventType","relationName":"managed_eventtype"},{"name":"bookingFields","kind":"scalar","type":"Json"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"periodType","kind":"enum","type":"PeriodType"},{"name":"periodStartDate","kind":"scalar","type":"DateTime"},{"name":"periodEndDate","kind":"scalar","type":"DateTime"},{"name":"periodDays","kind":"scalar","type":"Int"},{"name":"periodCountCalendarDays","kind":"scalar","type":"Boolean"},{"name":"lockTimeZoneToggleOnBookingPage","kind":"scalar","type":"Boolean"},{"name":"lockedTimeZone","kind":"scalar","type":"String"},{"name":"requiresConfirmation","kind":"scalar","type":"Boolean"},{"name":"requiresConfirmationWillBlockSlot","kind":"scalar","type":"Boolean"},{"name":"requiresConfirmationForFreeEmail","kind":"scalar","type":"Boolean"},{"name":"requiresBookerEmailVerification","kind":"scalar","type":"Boolean"},{"name":"canSendCalVideoTranscriptionEmails","kind":"scalar","type":"Boolean"},{"name":"autoTranslateDescriptionEnabled","kind":"scalar","type":"Boolean"},{"name":"recurringEvent","kind":"scalar","type":"Json"},{"name":"disableGuests","kind":"scalar","type":"Boolean"},{"name":"hideCalendarNotes","kind":"scalar","type":"Boolean"},{"name":"hideCalendarEventDetails","kind":"scalar","type":"Boolean"},{"name":"minimumBookingNotice","kind":"scalar","type":"Int"},{"name":"beforeEventBuffer","kind":"scalar","type":"Int"},{"name":"afterEventBuffer","kind":"scalar","type":"Int"},{"name":"seatsPerTimeSlot","kind":"scalar","type":"Int"},{"name":"onlyShowFirstAvailableSlot","kind":"scalar","type":"Boolean"},{"name":"showOptimizedSlots","kind":"scalar","type":"Boolean"},{"name":"disableCancelling","kind":"scalar","type":"Boolean"},{"name":"disableRescheduling","kind":"scalar","type":"Boolean"},{"name":"seatsShowAttendees","kind":"scalar","type":"Boolean"},{"name":"seatsShowAvailabilityCount","kind":"scalar","type":"Boolean"},{"name":"schedulingType","kind":"enum","type":"SchedulingType"},{"name":"schedule","kind":"object","type":"Schedule","relationName":"EventTypeToSchedule"},{"name":"scheduleId","kind":"scalar","type":"Int"},{"name":"allowReschedulingCancelledBookings","kind":"scalar","type":"Boolean"},{"name":"price","kind":"scalar","type":"Int"},{"name":"currency","kind":"scalar","type":"String"},{"name":"slotInterval","kind":"scalar","type":"Int"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"successRedirectUrl","kind":"scalar","type":"String"},{"name":"forwardParamsSuccessRedirect","kind":"scalar","type":"Boolean"},{"name":"workflows","kind":"object","type":"WorkflowsOnEventTypes","relationName":"EventTypeToWorkflowsOnEventTypes"},{"name":"bookingLimits","kind":"scalar","type":"Json"},{"name":"durationLimits","kind":"scalar","type":"Json"},{"name":"isInstantEvent","kind":"scalar","type":"Boolean"},{"name":"instantMeetingExpiryTimeOffsetInSeconds","kind":"scalar","type":"Int"},{"name":"instantMeetingScheduleId","kind":"scalar","type":"Int"},{"name":"instantMeetingSchedule","kind":"object","type":"Schedule","relationName":"InstantMeetingSchedule"},{"name":"instantMeetingParameters","kind":"scalar","type":"String"},{"name":"assignAllTeamMembers","kind":"scalar","type":"Boolean"},{"name":"assignRRMembersUsingSegment","kind":"scalar","type":"Boolean"},{"name":"rrSegmentQueryValue","kind":"scalar","type":"Json"},{"name":"useEventTypeDestinationCalendarEmail","kind":"scalar","type":"Boolean"},{"name":"aiPhoneCallConfig","kind":"object","type":"AIPhoneCallConfiguration","relationName":"AIPhoneCallConfigurationToEventType"},{"name":"isRRWeightsEnabled","kind":"scalar","type":"Boolean"},{"name":"fieldTranslations","kind":"object","type":"EventTypeTranslation","relationName":"EventTypeToEventTypeTranslation"},{"name":"maxLeadThreshold","kind":"scalar","type":"Int"},{"name":"includeNoShowInRRCalculation","kind":"scalar","type":"Boolean"},{"name":"selectedCalendars","kind":"object","type":"SelectedCalendar","relationName":"EventTypeToSelectedCalendar"},{"name":"allowReschedulingPastBookings","kind":"scalar","type":"Boolean"},{"name":"hideOrganizerEmail","kind":"scalar","type":"Boolean"},{"name":"maxActiveBookingsPerBooker","kind":"scalar","type":"Int"},{"name":"maxActiveBookingPerBookerOfferReschedule","kind":"scalar","type":"Boolean"},{"name":"customReplyToEmail","kind":"scalar","type":"String"},{"name":"calVideoSettings","kind":"object","type":"CalVideoSettings","relationName":"CalVideoSettingsToEventType"},{"name":"eventTypeColor","kind":"scalar","type":"Json"},{"name":"rescheduleWithSameRoundRobinHost","kind":"scalar","type":"Boolean"},{"name":"secondaryEmailId","kind":"scalar","type":"Int"},{"name":"secondaryEmail","kind":"object","type":"SecondaryEmail","relationName":"EventTypeToSecondaryEmail"},{"name":"useBookerTimezone","kind":"scalar","type":"Boolean"},{"name":"restrictionScheduleId","kind":"scalar","type":"Int"},{"name":"restrictionSchedule","kind":"object","type":"Schedule","relationName":"restrictionSchedule"},{"name":"hostGroups","kind":"object","type":"HostGroup","relationName":"EventTypeToHostGroup"},{"name":"bookingRequiresAuthentication","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Credential":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"type","kind":"scalar","type":"String"},{"name":"key","kind":"scalar","type":"Json"},{"name":"user","kind":"object","type":"User","relationName":"CredentialToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"CredentialToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"app","kind":"object","type":"App","relationName":"AppToCredential"},{"name":"appId","kind":"scalar","type":"String"},{"name":"subscriptionId","kind":"scalar","type":"String"},{"name":"paymentStatus","kind":"scalar","type":"String"},{"name":"billingCycleStart","kind":"scalar","type":"Int"},{"name":"destinationCalendars","kind":"object","type":"DestinationCalendar","relationName":"CredentialToDestinationCalendar"},{"name":"selectedCalendars","kind":"object","type":"SelectedCalendar","relationName":"CredentialToSelectedCalendar"},{"name":"invalid","kind":"scalar","type":"Boolean"},{"name":"CalendarCache","kind":"object","type":"CalendarCache","relationName":"CalendarCacheToCredential"},{"name":"references","kind":"object","type":"BookingReference","relationName":"BookingReferenceToCredential"},{"name":"delegationCredentialId","kind":"scalar","type":"String"},{"name":"delegationCredential","kind":"object","type":"DelegationCredential","relationName":"CredentialToDelegationCredential"}],"dbName":null},"DestinationCalendar":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"integration","kind":"scalar","type":"String"},{"name":"externalId","kind":"scalar","type":"String"},{"name":"primaryEmail","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"DestinationCalendarToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToDestinationCalendar"},{"name":"eventType","kind":"object","type":"EventType","relationName":"DestinationCalendarToEventType"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"credentialId","kind":"scalar","type":"Int"},{"name":"credential","kind":"object","type":"Credential","relationName":"CredentialToDestinationCalendar"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"delegationCredential","kind":"object","type":"DelegationCredential","relationName":"DelegationCredentialToDestinationCalendar"},{"name":"delegationCredentialId","kind":"scalar","type":"String"},{"name":"domainWideDelegation","kind":"object","type":"DomainWideDelegation","relationName":"DestinationCalendarToDomainWideDelegation"},{"name":"domainWideDelegationCredentialId","kind":"scalar","type":"String"}],"dbName":null},"UserPassword":{"fields":[{"name":"hash","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserPassword"}],"dbName":null},"TravelSchedule":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"TravelScheduleToUser"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"startDate","kind":"scalar","type":"DateTime"},{"name":"endDate","kind":"scalar","type":"DateTime"},{"name":"prevTimeZone","kind":"scalar","type":"String"}],"dbName":null},"User":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"username","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"DateTime"},{"name":"password","kind":"object","type":"UserPassword","relationName":"UserToUserPassword"},{"name":"bio","kind":"scalar","type":"String"},{"name":"avatarUrl","kind":"scalar","type":"String"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"travelSchedules","kind":"object","type":"TravelSchedule","relationName":"TravelScheduleToUser"},{"name":"weekStart","kind":"scalar","type":"String"},{"name":"startTime","kind":"scalar","type":"Int"},{"name":"endTime","kind":"scalar","type":"Int"},{"name":"bufferTime","kind":"scalar","type":"Int"},{"name":"hideBranding","kind":"scalar","type":"Boolean"},{"name":"theme","kind":"scalar","type":"String"},{"name":"appTheme","kind":"scalar","type":"String"},{"name":"createdDate","kind":"scalar","type":"DateTime","dbName":"created"},{"name":"trialEndsAt","kind":"scalar","type":"DateTime"},{"name":"lastActiveAt","kind":"scalar","type":"DateTime"},{"name":"eventTypes","kind":"object","type":"EventType","relationName":"user_eventtype"},{"name":"credentials","kind":"object","type":"Credential","relationName":"CredentialToUser"},{"name":"teams","kind":"object","type":"Membership","relationName":"MembershipToUser"},{"name":"bookings","kind":"object","type":"Booking","relationName":"BookingToUser"},{"name":"schedules","kind":"object","type":"Schedule","relationName":"ScheduleToUser"},{"name":"defaultScheduleId","kind":"scalar","type":"Int"},{"name":"selectedCalendars","kind":"object","type":"SelectedCalendar","relationName":"SelectedCalendarToUser"},{"name":"completedOnboarding","kind":"scalar","type":"Boolean"},{"name":"locale","kind":"scalar","type":"String"},{"name":"timeFormat","kind":"scalar","type":"Int"},{"name":"twoFactorSecret","kind":"scalar","type":"String"},{"name":"twoFactorEnabled","kind":"scalar","type":"Boolean"},{"name":"backupCodes","kind":"scalar","type":"String"},{"name":"identityProvider","kind":"enum","type":"IdentityProvider"},{"name":"identityProviderId","kind":"scalar","type":"String"},{"name":"availability","kind":"object","type":"Availability","relationName":"AvailabilityToUser"},{"name":"invitedTo","kind":"scalar","type":"Int"},{"name":"webhooks","kind":"object","type":"Webhook","relationName":"UserToWebhook"},{"name":"brandColor","kind":"scalar","type":"String"},{"name":"darkBrandColor","kind":"scalar","type":"String"},{"name":"destinationCalendar","kind":"object","type":"DestinationCalendar","relationName":"DestinationCalendarToUser"},{"name":"allowDynamicBooking","kind":"scalar","type":"Boolean"},{"name":"allowSEOIndexing","kind":"scalar","type":"Boolean"},{"name":"receiveMonthlyDigestEmail","kind":"scalar","type":"Boolean"},{"name":"requiresBookerEmailVerification","kind":"scalar","type":"Boolean"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"verified","kind":"scalar","type":"Boolean"},{"name":"role","kind":"enum","type":"UserPermissionRole"},{"name":"disableImpersonation","kind":"scalar","type":"Boolean"},{"name":"impersonatedUsers","kind":"object","type":"Impersonations","relationName":"impersonated_user"},{"name":"impersonatedBy","kind":"object","type":"Impersonations","relationName":"impersonated_by_user"},{"name":"apiKeys","kind":"object","type":"ApiKey","relationName":"ApiKeyToUser"},{"name":"accounts","kind":"object","type":"Account","relationName":"AccountToUser"},{"name":"sessions","kind":"object","type":"Session","relationName":"SessionToUser"},{"name":"Feedback","kind":"object","type":"Feedback","relationName":"FeedbackToUser"},{"name":"ownedEventTypes","kind":"object","type":"EventType","relationName":"owner"},{"name":"workflows","kind":"object","type":"Workflow","relationName":"UserToWorkflow"},{"name":"routingForms","kind":"object","type":"App_RoutingForms_Form","relationName":"routing-form"},{"name":"updatedRoutingForms","kind":"object","type":"App_RoutingForms_Form","relationName":"updated-routing-form"},{"name":"verifiedNumbers","kind":"object","type":"VerifiedNumber","relationName":"UserToVerifiedNumber"},{"name":"verifiedEmails","kind":"object","type":"VerifiedEmail","relationName":"UserToVerifiedEmail"},{"name":"hosts","kind":"object","type":"Host","relationName":"HostToUser"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"scope"},{"name":"accessCodes","kind":"object","type":"AccessCode","relationName":"AccessCodeToUser"},{"name":"bookingRedirects","kind":"object","type":"OutOfOfficeEntry","relationName":"OutOfOfficeEntryToUser"},{"name":"bookingRedirectsTo","kind":"object","type":"OutOfOfficeEntry","relationName":"toUser"},{"name":"locked","kind":"scalar","type":"Boolean"},{"name":"platformOAuthClients","kind":"object","type":"PlatformOAuthClient","relationName":"PlatformOAuthClientToUser"},{"name":"AccessToken","kind":"object","type":"AccessToken","relationName":"AccessTokenToUser"},{"name":"RefreshToken","kind":"object","type":"RefreshToken","relationName":"RefreshTokenToUser"},{"name":"PlatformAuthorizationToken","kind":"object","type":"PlatformAuthorizationToken","relationName":"PlatformAuthorizationTokenToUser"},{"name":"profiles","kind":"object","type":"Profile","relationName":"ProfileToUser"},{"name":"movedToProfileId","kind":"scalar","type":"Int"},{"name":"movedToProfile","kind":"object","type":"Profile","relationName":"moved_to_profile"},{"name":"secondaryEmails","kind":"object","type":"SecondaryEmail","relationName":"SecondaryEmailToUser"},{"name":"isPlatformManaged","kind":"scalar","type":"Boolean"},{"name":"OutOfOfficeReasons","kind":"object","type":"OutOfOfficeReason","relationName":"OutOfOfficeReasonToUser"},{"name":"smsLockState","kind":"enum","type":"SMSLockState"},{"name":"smsLockReviewedByAdmin","kind":"scalar","type":"Boolean"},{"name":"NotificationsSubscriptions","kind":"object","type":"NotificationsSubscriptions","relationName":"NotificationsSubscriptionsToUser"},{"name":"referralLinkId","kind":"scalar","type":"String"},{"name":"features","kind":"object","type":"UserFeatures","relationName":"UserToUserFeatures"},{"name":"reassignedBookings","kind":"object","type":"Booking","relationName":"reassignByUser"},{"name":"createdAttributeToUsers","kind":"object","type":"AttributeToUser","relationName":"createdBy"},{"name":"updatedAttributeToUsers","kind":"object","type":"AttributeToUser","relationName":"updatedBy"},{"name":"createdTranslations","kind":"object","type":"EventTypeTranslation","relationName":"CreatedEventTypeTranslations"},{"name":"updatedTranslations","kind":"object","type":"EventTypeTranslation","relationName":"UpdatedEventTypeTranslations"},{"name":"reportedBookings","kind":"object","type":"BookingReport","relationName":"ReportedBy"},{"name":"BookingInternalNote","kind":"object","type":"BookingInternalNote","relationName":"BookingInternalNoteToUser"},{"name":"creationSource","kind":"enum","type":"CreationSource"},{"name":"createdOrganizationOnboardings","kind":"object","type":"OrganizationOnboarding","relationName":"CreatedOrganizationOnboardings"},{"name":"filterSegments","kind":"object","type":"FilterSegment","relationName":"FilterSegmentToUser"},{"name":"filterSegmentPreferences","kind":"object","type":"UserFilterSegmentPreference","relationName":"UserToUserFilterSegmentPreference"},{"name":"creditBalance","kind":"object","type":"CreditBalance","relationName":"CreditBalanceToUser"},{"name":"whitelistWorkflows","kind":"scalar","type":"Boolean"},{"name":"calAiPhoneNumbers","kind":"object","type":"CalAiPhoneNumber","relationName":"CalAiPhoneNumberToUser"},{"name":"agents","kind":"object","type":"Agent","relationName":"AgentToUser"}],"dbName":"users"},"NotificationsSubscriptions":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"NotificationsSubscriptionsToUser"},{"name":"subscription","kind":"scalar","type":"String"}],"dbName":null},"Profile":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uid","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"ProfileToUser"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"ProfileToTeam"},{"name":"username","kind":"scalar","type":"String"},{"name":"eventTypes","kind":"object","type":"EventType","relationName":"EventTypeToProfile"},{"name":"movedFromUser","kind":"object","type":"User","relationName":"moved_to_profile"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Team":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"logoUrl","kind":"scalar","type":"String"},{"name":"calVideoLogo","kind":"scalar","type":"String"},{"name":"appLogo","kind":"scalar","type":"String"},{"name":"appIconLogo","kind":"scalar","type":"String"},{"name":"bio","kind":"scalar","type":"String"},{"name":"hideBranding","kind":"scalar","type":"Boolean"},{"name":"hideTeamProfileLink","kind":"scalar","type":"Boolean"},{"name":"isPrivate","kind":"scalar","type":"Boolean"},{"name":"hideBookATeamMember","kind":"scalar","type":"Boolean"},{"name":"members","kind":"object","type":"Membership","relationName":"MembershipToTeam"},{"name":"eventTypes","kind":"object","type":"EventType","relationName":"EventTypeToTeam"},{"name":"workflows","kind":"object","type":"Workflow","relationName":"TeamToWorkflow"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"theme","kind":"scalar","type":"String"},{"name":"rrResetInterval","kind":"enum","type":"RRResetInterval"},{"name":"rrTimestampBasis","kind":"enum","type":"RRTimestampBasis"},{"name":"brandColor","kind":"scalar","type":"String"},{"name":"darkBrandColor","kind":"scalar","type":"String"},{"name":"verifiedNumbers","kind":"object","type":"VerifiedNumber","relationName":"TeamToVerifiedNumber"},{"name":"verifiedEmails","kind":"object","type":"VerifiedEmail","relationName":"TeamToVerifiedEmail"},{"name":"bannerUrl","kind":"scalar","type":"String"},{"name":"parentId","kind":"scalar","type":"Int"},{"name":"parent","kind":"object","type":"Team","relationName":"organization"},{"name":"children","kind":"object","type":"Team","relationName":"organization"},{"name":"orgUsers","kind":"object","type":"User","relationName":"scope"},{"name":"inviteTokens","kind":"object","type":"VerificationToken","relationName":"TeamToVerificationToken"},{"name":"webhooks","kind":"object","type":"Webhook","relationName":"TeamToWebhook"},{"name":"timeFormat","kind":"scalar","type":"Int"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"weekStart","kind":"scalar","type":"String"},{"name":"routingForms","kind":"object","type":"App_RoutingForms_Form","relationName":"App_RoutingForms_FormToTeam"},{"name":"apiKeys","kind":"object","type":"ApiKey","relationName":"ApiKeyToTeam"},{"name":"credentials","kind":"object","type":"Credential","relationName":"CredentialToTeam"},{"name":"accessCodes","kind":"object","type":"AccessCode","relationName":"AccessCodeToTeam"},{"name":"isOrganization","kind":"scalar","type":"Boolean"},{"name":"organizationSettings","kind":"object","type":"OrganizationSettings","relationName":"OrganizationSettingsToTeam"},{"name":"instantMeetingTokens","kind":"object","type":"InstantMeetingToken","relationName":"InstantMeetingTokenToTeam"},{"name":"orgProfiles","kind":"object","type":"Profile","relationName":"ProfileToTeam"},{"name":"pendingPayment","kind":"scalar","type":"Boolean"},{"name":"dsyncTeamGroupMapping","kind":"object","type":"DSyncTeamGroupMapping","relationName":"DSyncTeamGroupMappingToTeam"},{"name":"isPlatform","kind":"scalar","type":"Boolean"},{"name":"platformOAuthClient","kind":"object","type":"PlatformOAuthClient","relationName":"PlatformOAuthClientToTeam"},{"name":"createdByOAuthClient","kind":"object","type":"PlatformOAuthClient","relationName":"CreatedByOAuthClient"},{"name":"createdByOAuthClientId","kind":"scalar","type":"String"},{"name":"smsLockState","kind":"enum","type":"SMSLockState"},{"name":"platformBilling","kind":"object","type":"PlatformBilling","relationName":"PlatformBillingToTeam"},{"name":"activeOrgWorkflows","kind":"object","type":"WorkflowsOnTeams","relationName":"TeamToWorkflowsOnTeams"},{"name":"attributes","kind":"object","type":"Attribute","relationName":"AttributeToTeam"},{"name":"smsLockReviewedByAdmin","kind":"scalar","type":"Boolean"},{"name":"delegationCredentials","kind":"object","type":"DelegationCredential","relationName":"DelegationCredentialToTeam"},{"name":"domainWideDelegations","kind":"object","type":"DomainWideDelegation","relationName":"DomainWideDelegationToTeam"},{"name":"roles","kind":"object","type":"Role","relationName":"RoleToTeam"},{"name":"calAiPhoneNumbers","kind":"object","type":"CalAiPhoneNumber","relationName":"CalAiPhoneNumberToTeam"},{"name":"agents","kind":"object","type":"Agent","relationName":"AgentToTeam"},{"name":"bookingReports","kind":"object","type":"BookingReport","relationName":"BookingReportToTeam"},{"name":"features","kind":"object","type":"TeamFeatures","relationName":"TeamToTeamFeatures"},{"name":"bookingLimits","kind":"scalar","type":"Json"},{"name":"includeManagedEventsInLimits","kind":"scalar","type":"Boolean"},{"name":"internalNotePresets","kind":"object","type":"InternalNotePreset","relationName":"InternalNotePresetToTeam"},{"name":"creditBalance","kind":"object","type":"CreditBalance","relationName":"CreditBalanceToTeam"},{"name":"organizationOnboarding","kind":"object","type":"OrganizationOnboarding","relationName":"OrganizationOnboardingToTeam"},{"name":"managedOrganization","kind":"object","type":"ManagedOrganization","relationName":"ManagedOrganization"},{"name":"managedOrganizations","kind":"object","type":"ManagedOrganization","relationName":"ManagerOrganization"},{"name":"filterSegments","kind":"object","type":"FilterSegment","relationName":"FilterSegmentToTeam"},{"name":"teamBilling","kind":"object","type":"TeamBilling","relationName":"TeamBilling"},{"name":"organizationBilling","kind":"object","type":"OrganizationBilling","relationName":"OrganizationBilling"}],"dbName":null},"CreditBalance":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"team","kind":"object","type":"Team","relationName":"CreditBalanceToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"CreditBalanceToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"additionalCredits","kind":"scalar","type":"Int"},{"name":"limitReachedAt","kind":"scalar","type":"DateTime"},{"name":"warningSentAt","kind":"scalar","type":"DateTime"},{"name":"expenseLogs","kind":"object","type":"CreditExpenseLog","relationName":"CreditBalanceToCreditExpenseLog"},{"name":"purchaseLogs","kind":"object","type":"CreditPurchaseLog","relationName":"CreditBalanceToCreditPurchaseLog"}],"dbName":null},"CreditPurchaseLog":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"creditBalanceId","kind":"scalar","type":"String"},{"name":"creditBalance","kind":"object","type":"CreditBalance","relationName":"CreditBalanceToCreditPurchaseLog"},{"name":"credits","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"CreditExpenseLog":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"creditBalanceId","kind":"scalar","type":"String"},{"name":"creditBalance","kind":"object","type":"CreditBalance","relationName":"CreditBalanceToCreditExpenseLog"},{"name":"bookingUid","kind":"scalar","type":"String"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToCreditExpenseLog"},{"name":"credits","kind":"scalar","type":"Int"},{"name":"creditType","kind":"enum","type":"CreditType"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"smsSid","kind":"scalar","type":"String"},{"name":"smsSegments","kind":"scalar","type":"Int"},{"name":"phoneNumber","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"callDuration","kind":"scalar","type":"Int"},{"name":"creditFor","kind":"enum","type":"CreditUsageType"},{"name":"externalRef","kind":"scalar","type":"String"}],"dbName":null},"OrganizationSettings":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"OrganizationSettingsToTeam"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"isOrganizationConfigured","kind":"scalar","type":"Boolean"},{"name":"isOrganizationVerified","kind":"scalar","type":"Boolean"},{"name":"orgAutoAcceptEmail","kind":"scalar","type":"String"},{"name":"lockEventTypeCreationForUsers","kind":"scalar","type":"Boolean"},{"name":"adminGetsNoSlotsNotification","kind":"scalar","type":"Boolean"},{"name":"isAdminReviewed","kind":"scalar","type":"Boolean"},{"name":"dSyncData","kind":"object","type":"DSyncData","relationName":"DSyncDataToOrganizationSettings"},{"name":"isAdminAPIEnabled","kind":"scalar","type":"Boolean"},{"name":"allowSEOIndexing","kind":"scalar","type":"Boolean"},{"name":"orgProfileRedirectsToVerifiedDomain","kind":"scalar","type":"Boolean"},{"name":"disablePhoneOnlySMSNotifications","kind":"scalar","type":"Boolean"}],"dbName":null},"Membership":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"accepted","kind":"scalar","type":"Boolean"},{"name":"role","kind":"enum","type":"MembershipRole"},{"name":"customRoleId","kind":"scalar","type":"String"},{"name":"customRole","kind":"object","type":"Role","relationName":"MembershipToRole"},{"name":"team","kind":"object","type":"Team","relationName":"MembershipToTeam"},{"name":"user","kind":"object","type":"User","relationName":"MembershipToUser"},{"name":"disableImpersonation","kind":"scalar","type":"Boolean"},{"name":"AttributeToUser","kind":"object","type":"AttributeToUser","relationName":"AttributeToUserToMembership"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"Host","kind":"object","type":"Host","relationName":"HostToMembership"}],"dbName":null},"VerificationToken":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"identifier","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"expiresInDays","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"TeamToVerificationToken"},{"name":"secondaryEmailId","kind":"scalar","type":"Int"},{"name":"secondaryEmail","kind":"object","type":"SecondaryEmail","relationName":"SecondaryEmailToVerificationToken"}],"dbName":null},"InstantMeetingToken":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"token","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"InstantMeetingTokenToTeam"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToInstantMeetingToken"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"BookingReference":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"type","kind":"scalar","type":"String"},{"name":"uid","kind":"scalar","type":"String"},{"name":"meetingId","kind":"scalar","type":"String"},{"name":"thirdPartyRecurringEventId","kind":"scalar","type":"String"},{"name":"meetingPassword","kind":"scalar","type":"String"},{"name":"meetingUrl","kind":"scalar","type":"String"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToBookingReference"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"externalCalendarId","kind":"scalar","type":"String"},{"name":"deleted","kind":"scalar","type":"Boolean"},{"name":"credential","kind":"object","type":"Credential","relationName":"BookingReferenceToCredential"},{"name":"credentialId","kind":"scalar","type":"Int"},{"name":"delegationCredential","kind":"object","type":"DelegationCredential","relationName":"BookingReferenceToDelegationCredential"},{"name":"delegationCredentialId","kind":"scalar","type":"String"},{"name":"domainWideDelegation","kind":"object","type":"DomainWideDelegation","relationName":"BookingReferenceToDomainWideDelegation"},{"name":"domainWideDelegationCredentialId","kind":"scalar","type":"String"}],"dbName":null},"Attendee":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"email","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"phoneNumber","kind":"scalar","type":"String"},{"name":"locale","kind":"scalar","type":"String"},{"name":"booking","kind":"object","type":"Booking","relationName":"AttendeeToBooking"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"bookingSeat","kind":"object","type":"BookingSeat","relationName":"AttendeeToBookingSeat"},{"name":"noShow","kind":"scalar","type":"Boolean"}],"dbName":null},"Booking":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uid","kind":"scalar","type":"String"},{"name":"idempotencyKey","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"BookingToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"userPrimaryEmail","kind":"scalar","type":"String"},{"name":"references","kind":"object","type":"BookingReference","relationName":"BookingToBookingReference"},{"name":"eventType","kind":"object","type":"EventType","relationName":"BookingToEventType"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"customInputs","kind":"scalar","type":"Json"},{"name":"responses","kind":"scalar","type":"Json"},{"name":"startTime","kind":"scalar","type":"DateTime"},{"name":"endTime","kind":"scalar","type":"DateTime"},{"name":"attendees","kind":"object","type":"Attendee","relationName":"AttendeeToBooking"},{"name":"location","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"status","kind":"enum","type":"BookingStatus"},{"name":"paid","kind":"scalar","type":"Boolean"},{"name":"payment","kind":"object","type":"Payment","relationName":"BookingToPayment"},{"name":"destinationCalendar","kind":"object","type":"DestinationCalendar","relationName":"BookingToDestinationCalendar"},{"name":"destinationCalendarId","kind":"scalar","type":"Int"},{"name":"cancellationReason","kind":"scalar","type":"String"},{"name":"rejectionReason","kind":"scalar","type":"String"},{"name":"reassignReason","kind":"scalar","type":"String"},{"name":"reassignBy","kind":"object","type":"User","relationName":"reassignByUser"},{"name":"reassignById","kind":"scalar","type":"Int"},{"name":"dynamicEventSlugRef","kind":"scalar","type":"String"},{"name":"dynamicGroupSlugRef","kind":"scalar","type":"String"},{"name":"rescheduled","kind":"scalar","type":"Boolean"},{"name":"fromReschedule","kind":"scalar","type":"String"},{"name":"recurringEventId","kind":"scalar","type":"String"},{"name":"smsReminderNumber","kind":"scalar","type":"String"},{"name":"workflowReminders","kind":"object","type":"WorkflowReminder","relationName":"BookingToWorkflowReminder"},{"name":"scheduledJobs","kind":"scalar","type":"String"},{"name":"seatsReferences","kind":"object","type":"BookingSeat","relationName":"BookingToBookingSeat"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"isRecorded","kind":"scalar","type":"Boolean"},{"name":"iCalUID","kind":"scalar","type":"String"},{"name":"iCalSequence","kind":"scalar","type":"Int"},{"name":"instantMeetingToken","kind":"object","type":"InstantMeetingToken","relationName":"BookingToInstantMeetingToken"},{"name":"rating","kind":"scalar","type":"Int"},{"name":"ratingFeedback","kind":"scalar","type":"String"},{"name":"noShowHost","kind":"scalar","type":"Boolean"},{"name":"scheduledTriggers","kind":"object","type":"WebhookScheduledTriggers","relationName":"BookingToWebhookScheduledTriggers"},{"name":"oneTimePassword","kind":"scalar","type":"String"},{"name":"cancelledBy","kind":"scalar","type":"String"},{"name":"rescheduledBy","kind":"scalar","type":"String"},{"name":"routedFromRoutingFormReponse","kind":"object","type":"App_RoutingForms_FormResponse","relationName":"App_RoutingForms_FormResponseToBooking"},{"name":"assignmentReason","kind":"object","type":"AssignmentReason","relationName":"AssignmentReasonToBooking"},{"name":"internalNote","kind":"object","type":"BookingInternalNote","relationName":"BookingToBookingInternalNote"},{"name":"creationSource","kind":"enum","type":"CreationSource"},{"name":"tracking","kind":"object","type":"Tracking","relationName":"BookingToTracking"},{"name":"routingFormResponses","kind":"object","type":"RoutingFormResponseDenormalized","relationName":"BookingToRoutingFormResponseDenormalized"},{"name":"expenseLogs","kind":"object","type":"CreditExpenseLog","relationName":"BookingToCreditExpenseLog"},{"name":"report","kind":"object","type":"BookingReport","relationName":"BookingToBookingReport"}],"dbName":null},"Tracking":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToTracking"},{"name":"utm_source","kind":"scalar","type":"String"},{"name":"utm_medium","kind":"scalar","type":"String"},{"name":"utm_campaign","kind":"scalar","type":"String"},{"name":"utm_term","kind":"scalar","type":"String"},{"name":"utm_content","kind":"scalar","type":"String"}],"dbName":null},"Schedule":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"ScheduleToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToSchedule"},{"name":"instantMeetingEvents","kind":"object","type":"EventType","relationName":"InstantMeetingSchedule"},{"name":"restrictionSchedule","kind":"object","type":"EventType","relationName":"restrictionSchedule"},{"name":"name","kind":"scalar","type":"String"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"availability","kind":"object","type":"Availability","relationName":"AvailabilityToSchedule"},{"name":"Host","kind":"object","type":"Host","relationName":"HostToSchedule"}],"dbName":null},"Availability":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"AvailabilityToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"AvailabilityToEventType"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"days","kind":"scalar","type":"Int"},{"name":"startTime","kind":"scalar","type":"DateTime"},{"name":"endTime","kind":"scalar","type":"DateTime"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"Schedule","kind":"object","type":"Schedule","relationName":"AvailabilityToSchedule"},{"name":"scheduleId","kind":"scalar","type":"Int"}],"dbName":null},"SelectedCalendar":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"SelectedCalendarToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"integration","kind":"scalar","type":"String"},{"name":"externalId","kind":"scalar","type":"String"},{"name":"credential","kind":"object","type":"Credential","relationName":"CredentialToSelectedCalendar"},{"name":"credentialId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"googleChannelId","kind":"scalar","type":"String"},{"name":"googleChannelKind","kind":"scalar","type":"String"},{"name":"googleChannelResourceId","kind":"scalar","type":"String"},{"name":"googleChannelResourceUri","kind":"scalar","type":"String"},{"name":"googleChannelExpiration","kind":"scalar","type":"String"},{"name":"channelId","kind":"scalar","type":"String"},{"name":"channelKind","kind":"scalar","type":"String"},{"name":"channelResourceId","kind":"scalar","type":"String"},{"name":"channelResourceUri","kind":"scalar","type":"String"},{"name":"channelExpiration","kind":"scalar","type":"DateTime"},{"name":"syncSubscribedAt","kind":"scalar","type":"DateTime"},{"name":"syncToken","kind":"scalar","type":"String"},{"name":"syncedAt","kind":"scalar","type":"DateTime"},{"name":"syncErrorAt","kind":"scalar","type":"DateTime"},{"name":"syncErrorCount","kind":"scalar","type":"Int"},{"name":"delegationCredential","kind":"object","type":"DelegationCredential","relationName":"DelegationCredentialToSelectedCalendar"},{"name":"delegationCredentialId","kind":"scalar","type":"String"},{"name":"domainWideDelegationCredential","kind":"object","type":"DomainWideDelegation","relationName":"DomainWideDelegationToSelectedCalendar"},{"name":"domainWideDelegationCredentialId","kind":"scalar","type":"String"},{"name":"error","kind":"scalar","type":"String"},{"name":"lastErrorAt","kind":"scalar","type":"DateTime"},{"name":"watchAttempts","kind":"scalar","type":"Int"},{"name":"unwatchAttempts","kind":"scalar","type":"Int"},{"name":"maxAttempts","kind":"scalar","type":"Int"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToSelectedCalendar"},{"name":"calendarCacheEvents","kind":"object","type":"CalendarCacheEvent","relationName":"CalendarCacheEventToSelectedCalendar"}],"dbName":null},"EventTypeCustomInput":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToEventTypeCustomInput"},{"name":"label","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"EventTypeCustomInputType"},{"name":"options","kind":"scalar","type":"Json"},{"name":"required","kind":"scalar","type":"Boolean"},{"name":"placeholder","kind":"scalar","type":"String"}],"dbName":null},"ResetPasswordRequest":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"email","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"}],"dbName":null},"ReminderMail":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"referenceId","kind":"scalar","type":"Int"},{"name":"reminderType","kind":"enum","type":"ReminderType"},{"name":"elapsedMinutes","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Payment":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uid","kind":"scalar","type":"String"},{"name":"app","kind":"object","type":"App","relationName":"AppToPayment"},{"name":"appId","kind":"scalar","type":"String"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToPayment"},{"name":"amount","kind":"scalar","type":"Int"},{"name":"fee","kind":"scalar","type":"Int"},{"name":"currency","kind":"scalar","type":"String"},{"name":"success","kind":"scalar","type":"Boolean"},{"name":"refunded","kind":"scalar","type":"Boolean"},{"name":"data","kind":"scalar","type":"Json"},{"name":"externalId","kind":"scalar","type":"String"},{"name":"paymentOption","kind":"enum","type":"PaymentOption"}],"dbName":null},"Webhook":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"platformOAuthClientId","kind":"scalar","type":"String"},{"name":"subscriberUrl","kind":"scalar","type":"String"},{"name":"payloadTemplate","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"active","kind":"scalar","type":"Boolean"},{"name":"eventTriggers","kind":"enum","type":"WebhookTriggerEvents"},{"name":"user","kind":"object","type":"User","relationName":"UserToWebhook"},{"name":"team","kind":"object","type":"Team","relationName":"TeamToWebhook"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToWebhook"},{"name":"platformOAuthClient","kind":"object","type":"PlatformOAuthClient","relationName":"PlatformOAuthClientToWebhook"},{"name":"app","kind":"object","type":"App","relationName":"AppToWebhook"},{"name":"appId","kind":"scalar","type":"String"},{"name":"secret","kind":"scalar","type":"String"},{"name":"platform","kind":"scalar","type":"Boolean"},{"name":"scheduledTriggers","kind":"object","type":"WebhookScheduledTriggers","relationName":"WebhookToWebhookScheduledTriggers"},{"name":"time","kind":"scalar","type":"Int"},{"name":"timeUnit","kind":"enum","type":"TimeUnit"}],"dbName":null},"Impersonations":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"impersonatedUser","kind":"object","type":"User","relationName":"impersonated_user"},{"name":"impersonatedBy","kind":"object","type":"User","relationName":"impersonated_by_user"},{"name":"impersonatedUserId","kind":"scalar","type":"Int"},{"name":"impersonatedById","kind":"scalar","type":"Int"}],"dbName":null},"ApiKey":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"note","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"lastUsedAt","kind":"scalar","type":"DateTime"},{"name":"hashedKey","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"ApiKeyToUser"},{"name":"team","kind":"object","type":"Team","relationName":"ApiKeyToTeam"},{"name":"app","kind":"object","type":"App","relationName":"ApiKeyToApp"},{"name":"appId","kind":"scalar","type":"String"},{"name":"rateLimits","kind":"object","type":"RateLimit","relationName":"ApiKeyToRateLimit"}],"dbName":null},"RateLimit":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"apiKeyId","kind":"scalar","type":"String"},{"name":"ttl","kind":"scalar","type":"Int"},{"name":"limit","kind":"scalar","type":"Int"},{"name":"blockDuration","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"apiKey","kind":"object","type":"ApiKey","relationName":"ApiKeyToRateLimit"}],"dbName":null},"HashedLink":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"link","kind":"scalar","type":"String"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToHashedLink"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"maxUsageCount","kind":"scalar","type":"Int"},{"name":"usageCount","kind":"scalar","type":"Int"}],"dbName":null},"Account":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"type","kind":"scalar","type":"String"},{"name":"provider","kind":"scalar","type":"String"},{"name":"providerAccountId","kind":"scalar","type":"String"},{"name":"providerEmail","kind":"scalar","type":"String"},{"name":"refresh_token","kind":"scalar","type":"String"},{"name":"access_token","kind":"scalar","type":"String"},{"name":"expires_at","kind":"scalar","type":"Int"},{"name":"token_type","kind":"scalar","type":"String"},{"name":"scope","kind":"scalar","type":"String"},{"name":"id_token","kind":"scalar","type":"String"},{"name":"session_state","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AccountToUser"}],"dbName":null},"Session":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"sessionToken","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"user","kind":"object","type":"User","relationName":"SessionToUser"}],"dbName":null},"App":{"fields":[{"name":"slug","kind":"scalar","type":"String"},{"name":"dirName","kind":"scalar","type":"String"},{"name":"keys","kind":"scalar","type":"Json"},{"name":"categories","kind":"enum","type":"AppCategories"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"credentials","kind":"object","type":"Credential","relationName":"AppToCredential"},{"name":"payments","kind":"object","type":"Payment","relationName":"AppToPayment"},{"name":"Webhook","kind":"object","type":"Webhook","relationName":"AppToWebhook"},{"name":"ApiKey","kind":"object","type":"ApiKey","relationName":"ApiKeyToApp"},{"name":"enabled","kind":"scalar","type":"Boolean"}],"dbName":null},"App_RoutingForms_Form":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"position","kind":"scalar","type":"Int"},{"name":"routes","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"name","kind":"scalar","type":"String"},{"name":"fields","kind":"scalar","type":"Json"},{"name":"user","kind":"object","type":"User","relationName":"routing-form"},{"name":"updatedBy","kind":"object","type":"User","relationName":"updated-routing-form"},{"name":"updatedById","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"App_RoutingForms_FormToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"responses","kind":"object","type":"App_RoutingForms_FormResponse","relationName":"App_RoutingForms_FormToApp_RoutingForms_FormResponse"},{"name":"queuedResponses","kind":"object","type":"App_RoutingForms_QueuedFormResponse","relationName":"App_RoutingForms_FormToApp_RoutingForms_QueuedFormResponse"},{"name":"disabled","kind":"scalar","type":"Boolean"},{"name":"settings","kind":"scalar","type":"Json"},{"name":"incompleteBookingActions","kind":"object","type":"App_RoutingForms_IncompleteBookingActions","relationName":"App_RoutingForms_FormToApp_RoutingForms_IncompleteBookingActions"},{"name":"workflows","kind":"object","type":"WorkflowsOnRoutingForms","relationName":"App_RoutingForms_FormToWorkflowsOnRoutingForms"}],"dbName":null},"App_RoutingForms_FormResponse":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uuid","kind":"scalar","type":"String"},{"name":"formFillerId","kind":"scalar","type":"String"},{"name":"form","kind":"object","type":"App_RoutingForms_Form","relationName":"App_RoutingForms_FormToApp_RoutingForms_FormResponse"},{"name":"formId","kind":"scalar","type":"String"},{"name":"response","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"routedToBookingUid","kind":"scalar","type":"String"},{"name":"routedToBooking","kind":"object","type":"Booking","relationName":"App_RoutingForms_FormResponseToBooking"},{"name":"chosenRouteId","kind":"scalar","type":"String"},{"name":"routingFormResponseFields","kind":"object","type":"RoutingFormResponseField","relationName":"App_RoutingForms_FormResponseToRoutingFormResponseField"},{"name":"routingFormResponses","kind":"object","type":"RoutingFormResponseDenormalized","relationName":"App_RoutingForms_FormResponseToRoutingFormResponseDenormalized"},{"name":"queuedFormResponse","kind":"object","type":"App_RoutingForms_QueuedFormResponse","relationName":"App_RoutingForms_FormResponseToApp_RoutingForms_QueuedFormResponse"}],"dbName":null},"App_RoutingForms_QueuedFormResponse":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"form","kind":"object","type":"App_RoutingForms_Form","relationName":"App_RoutingForms_FormToApp_RoutingForms_QueuedFormResponse"},{"name":"formId","kind":"scalar","type":"String"},{"name":"response","kind":"scalar","type":"Json"},{"name":"chosenRouteId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"actualResponseId","kind":"scalar","type":"Int"},{"name":"actualResponse","kind":"object","type":"App_RoutingForms_FormResponse","relationName":"App_RoutingForms_FormResponseToApp_RoutingForms_QueuedFormResponse"}],"dbName":null},"RoutingFormResponseField":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"responseId","kind":"scalar","type":"Int"},{"name":"fieldId","kind":"scalar","type":"String"},{"name":"valueString","kind":"scalar","type":"String"},{"name":"valueNumber","kind":"scalar","type":"Decimal"},{"name":"valueStringArray","kind":"scalar","type":"String"},{"name":"response","kind":"object","type":"App_RoutingForms_FormResponse","relationName":"App_RoutingForms_FormResponseToRoutingFormResponseField"},{"name":"denormalized","kind":"object","type":"RoutingFormResponseDenormalized","relationName":"DenormalizedResponseToFields"}],"dbName":null},"RoutingFormResponseDenormalized":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uuid","kind":"scalar","type":"String"},{"name":"formId","kind":"scalar","type":"String"},{"name":"formName","kind":"scalar","type":"String"},{"name":"formTeamId","kind":"scalar","type":"Int"},{"name":"formUserId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToRoutingFormResponseDenormalized"},{"name":"bookingUid","kind":"scalar","type":"String"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"bookingStatus","kind":"enum","type":"BookingStatus"},{"name":"bookingStatusOrder","kind":"scalar","type":"Int"},{"name":"bookingCreatedAt","kind":"scalar","type":"DateTime"},{"name":"bookingStartTime","kind":"scalar","type":"DateTime"},{"name":"bookingEndTime","kind":"scalar","type":"DateTime"},{"name":"bookingUserId","kind":"scalar","type":"Int"},{"name":"bookingUserName","kind":"scalar","type":"String"},{"name":"bookingUserEmail","kind":"scalar","type":"String"},{"name":"bookingUserAvatarUrl","kind":"scalar","type":"String"},{"name":"bookingAssignmentReason","kind":"scalar","type":"String"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"eventTypeParentId","kind":"scalar","type":"Int"},{"name":"eventTypeSchedulingType","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"utm_source","kind":"scalar","type":"String"},{"name":"utm_medium","kind":"scalar","type":"String"},{"name":"utm_campaign","kind":"scalar","type":"String"},{"name":"utm_term","kind":"scalar","type":"String"},{"name":"utm_content","kind":"scalar","type":"String"},{"name":"response","kind":"object","type":"App_RoutingForms_FormResponse","relationName":"App_RoutingForms_FormResponseToRoutingFormResponseDenormalized"},{"name":"fields","kind":"object","type":"RoutingFormResponseField","relationName":"DenormalizedResponseToFields"}],"dbName":null},"Feedback":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"FeedbackToUser"},{"name":"rating","kind":"scalar","type":"String"},{"name":"comment","kind":"scalar","type":"String"}],"dbName":null},"WorkflowStep":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"stepNumber","kind":"scalar","type":"Int"},{"name":"action","kind":"enum","type":"WorkflowActions"},{"name":"workflowId","kind":"scalar","type":"Int"},{"name":"workflow","kind":"object","type":"Workflow","relationName":"WorkflowToWorkflowStep"},{"name":"sendTo","kind":"scalar","type":"String"},{"name":"reminderBody","kind":"scalar","type":"String"},{"name":"emailSubject","kind":"scalar","type":"String"},{"name":"template","kind":"enum","type":"WorkflowTemplates"},{"name":"workflowReminders","kind":"object","type":"WorkflowReminder","relationName":"WorkflowReminderToWorkflowStep"},{"name":"numberRequired","kind":"scalar","type":"Boolean"},{"name":"sender","kind":"scalar","type":"String"},{"name":"numberVerificationPending","kind":"scalar","type":"Boolean"},{"name":"includeCalendarEvent","kind":"scalar","type":"Boolean"},{"name":"verifiedAt","kind":"scalar","type":"DateTime"},{"name":"agentId","kind":"scalar","type":"String"},{"name":"agent","kind":"object","type":"Agent","relationName":"AgentToWorkflowStep"},{"name":"inboundAgentId","kind":"scalar","type":"String"},{"name":"inboundAgent","kind":"object","type":"Agent","relationName":"WorkflowStepInboundAgent"}],"dbName":null},"Workflow":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"position","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"UserToWorkflow"},{"name":"team","kind":"object","type":"Team","relationName":"TeamToWorkflow"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"activeOn","kind":"object","type":"WorkflowsOnEventTypes","relationName":"WorkflowToWorkflowsOnEventTypes"},{"name":"activeOnTeams","kind":"object","type":"WorkflowsOnTeams","relationName":"WorkflowToWorkflowsOnTeams"},{"name":"activeOnRoutingForms","kind":"object","type":"WorkflowsOnRoutingForms","relationName":"WorkflowToWorkflowsOnRoutingForms"},{"name":"isActiveOnAll","kind":"scalar","type":"Boolean"},{"name":"trigger","kind":"enum","type":"WorkflowTriggerEvents"},{"name":"time","kind":"scalar","type":"Int"},{"name":"timeUnit","kind":"enum","type":"TimeUnit"},{"name":"steps","kind":"object","type":"WorkflowStep","relationName":"WorkflowToWorkflowStep"},{"name":"type","kind":"enum","type":"WorkflowType"}],"dbName":null},"AIPhoneCallConfiguration":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"AIPhoneCallConfigurationToEventType"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"templateType","kind":"scalar","type":"String"},{"name":"schedulerName","kind":"scalar","type":"String"},{"name":"generalPrompt","kind":"scalar","type":"String"},{"name":"yourPhoneNumber","kind":"scalar","type":"String"},{"name":"numberToCall","kind":"scalar","type":"String"},{"name":"guestName","kind":"scalar","type":"String"},{"name":"guestEmail","kind":"scalar","type":"String"},{"name":"guestCompany","kind":"scalar","type":"String"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"beginMessage","kind":"scalar","type":"String"},{"name":"llmId","kind":"scalar","type":"String"}],"dbName":null},"WorkflowsOnEventTypes":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"workflow","kind":"object","type":"Workflow","relationName":"WorkflowToWorkflowsOnEventTypes"},{"name":"workflowId","kind":"scalar","type":"Int"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToWorkflowsOnEventTypes"},{"name":"eventTypeId","kind":"scalar","type":"Int"}],"dbName":null},"WorkflowsOnRoutingForms":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"workflow","kind":"object","type":"Workflow","relationName":"WorkflowToWorkflowsOnRoutingForms"},{"name":"workflowId","kind":"scalar","type":"Int"},{"name":"routingForm","kind":"object","type":"App_RoutingForms_Form","relationName":"App_RoutingForms_FormToWorkflowsOnRoutingForms"},{"name":"routingFormId","kind":"scalar","type":"String"}],"dbName":null},"WorkflowsOnTeams":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"workflow","kind":"object","type":"Workflow","relationName":"WorkflowToWorkflowsOnTeams"},{"name":"workflowId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"TeamToWorkflowsOnTeams"},{"name":"teamId","kind":"scalar","type":"Int"}],"dbName":null},"Deployment":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"logo","kind":"scalar","type":"String"},{"name":"theme","kind":"scalar","type":"Json"},{"name":"licenseKey","kind":"scalar","type":"String"},{"name":"signatureTokenEncrypted","kind":"scalar","type":"String"},{"name":"agreedLicenseAt","kind":"scalar","type":"DateTime"}],"dbName":null},"WorkflowReminder":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uuid","kind":"scalar","type":"String"},{"name":"bookingUid","kind":"scalar","type":"String"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToWorkflowReminder"},{"name":"method","kind":"enum","type":"WorkflowMethods"},{"name":"scheduledDate","kind":"scalar","type":"DateTime"},{"name":"referenceId","kind":"scalar","type":"String"},{"name":"scheduled","kind":"scalar","type":"Boolean"},{"name":"workflowStepId","kind":"scalar","type":"Int"},{"name":"workflowStep","kind":"object","type":"WorkflowStep","relationName":"WorkflowReminderToWorkflowStep"},{"name":"cancelled","kind":"scalar","type":"Boolean"},{"name":"seatReferenceId","kind":"scalar","type":"String"},{"name":"isMandatoryReminder","kind":"scalar","type":"Boolean"},{"name":"retryCount","kind":"scalar","type":"Int"}],"dbName":null},"WebhookScheduledTriggers":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"jobName","kind":"scalar","type":"String"},{"name":"subscriberUrl","kind":"scalar","type":"String"},{"name":"payload","kind":"scalar","type":"String"},{"name":"startAfter","kind":"scalar","type":"DateTime"},{"name":"retryCount","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"appId","kind":"scalar","type":"String"},{"name":"webhookId","kind":"scalar","type":"String"},{"name":"webhook","kind":"object","type":"Webhook","relationName":"WebhookToWebhookScheduledTriggers"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToWebhookScheduledTriggers"}],"dbName":null},"BookingSeat":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"referenceUid","kind":"scalar","type":"String"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToBookingSeat"},{"name":"attendeeId","kind":"scalar","type":"Int"},{"name":"attendee","kind":"object","type":"Attendee","relationName":"AttendeeToBookingSeat"},{"name":"data","kind":"scalar","type":"Json"},{"name":"metadata","kind":"scalar","type":"Json"}],"dbName":null},"VerifiedNumber":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"UserToVerifiedNumber"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"TeamToVerifiedNumber"},{"name":"phoneNumber","kind":"scalar","type":"String"}],"dbName":null},"VerifiedEmail":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"UserToVerifiedEmail"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"TeamToVerifiedEmail"},{"name":"email","kind":"scalar","type":"String"}],"dbName":null},"Feature":{"fields":[{"name":"slug","kind":"scalar","type":"String"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"description","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"FeatureType"},{"name":"stale","kind":"scalar","type":"Boolean"},{"name":"lastUsedAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"updatedBy","kind":"scalar","type":"Int"},{"name":"users","kind":"object","type":"UserFeatures","relationName":"FeatureToUserFeatures"},{"name":"teams","kind":"object","type":"TeamFeatures","relationName":"FeatureToTeamFeatures"}],"dbName":null},"UserFeatures":{"fields":[{"name":"user","kind":"object","type":"User","relationName":"UserToUserFeatures"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"feature","kind":"object","type":"Feature","relationName":"FeatureToUserFeatures"},{"name":"featureId","kind":"scalar","type":"String"},{"name":"assignedAt","kind":"scalar","type":"DateTime"},{"name":"assignedBy","kind":"scalar","type":"String"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"TeamFeatures":{"fields":[{"name":"team","kind":"object","type":"Team","relationName":"TeamToTeamFeatures"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"feature","kind":"object","type":"Feature","relationName":"FeatureToTeamFeatures"},{"name":"featureId","kind":"scalar","type":"String"},{"name":"assignedAt","kind":"scalar","type":"DateTime"},{"name":"assignedBy","kind":"scalar","type":"String"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"SelectedSlots":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"slotUtcStartDate","kind":"scalar","type":"DateTime"},{"name":"slotUtcEndDate","kind":"scalar","type":"DateTime"},{"name":"uid","kind":"scalar","type":"String"},{"name":"releaseAt","kind":"scalar","type":"DateTime"},{"name":"isSeat","kind":"scalar","type":"Boolean"}],"dbName":null},"OAuthClient":{"fields":[{"name":"clientId","kind":"scalar","type":"String"},{"name":"redirectUri","kind":"scalar","type":"String"},{"name":"clientSecret","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"logo","kind":"scalar","type":"String"},{"name":"accessCodes","kind":"object","type":"AccessCode","relationName":"AccessCodeToOAuthClient"}],"dbName":null},"AccessCode":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"code","kind":"scalar","type":"String"},{"name":"clientId","kind":"scalar","type":"String"},{"name":"client","kind":"object","type":"OAuthClient","relationName":"AccessCodeToOAuthClient"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"scopes","kind":"enum","type":"AccessScope"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"AccessCodeToUser"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"AccessCodeToTeam"}],"dbName":null},"BookingDenormalized":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uid","kind":"scalar","type":"String"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"startTime","kind":"scalar","type":"DateTime"},{"name":"endTime","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"location","kind":"scalar","type":"String"},{"name":"paid","kind":"scalar","type":"Boolean"},{"name":"status","kind":"enum","type":"BookingStatus"},{"name":"rescheduled","kind":"scalar","type":"Boolean"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"eventLength","kind":"scalar","type":"Int"},{"name":"eventParentId","kind":"scalar","type":"Int"},{"name":"userEmail","kind":"scalar","type":"String"},{"name":"userName","kind":"scalar","type":"String"},{"name":"userUsername","kind":"scalar","type":"String"},{"name":"ratingFeedback","kind":"scalar","type":"String"},{"name":"rating","kind":"scalar","type":"Int"},{"name":"noShowHost","kind":"scalar","type":"Boolean"},{"name":"isTeamBooking","kind":"scalar","type":"Boolean"}],"dbName":null},"CalendarCache":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"key","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"Json"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"credentialId","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"credential","kind":"object","type":"Credential","relationName":"CalendarCacheToCredential"}],"dbName":null},"TempOrgRedirect":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"from","kind":"scalar","type":"String"},{"name":"fromOrgId","kind":"scalar","type":"Int"},{"name":"type","kind":"enum","type":"RedirectType"},{"name":"toUrl","kind":"scalar","type":"String"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Avatar":{"fields":[{"name":"teamId","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"data","kind":"scalar","type":"String"},{"name":"objectKey","kind":"scalar","type":"String"},{"name":"isBanner","kind":"scalar","type":"Boolean"}],"dbName":"avatars"},"OutOfOfficeEntry":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uuid","kind":"scalar","type":"String"},{"name":"start","kind":"scalar","type":"DateTime"},{"name":"end","kind":"scalar","type":"DateTime"},{"name":"notes","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"OutOfOfficeEntryToUser"},{"name":"toUserId","kind":"scalar","type":"Int"},{"name":"toUser","kind":"object","type":"User","relationName":"toUser"},{"name":"reasonId","kind":"scalar","type":"Int"},{"name":"reason","kind":"object","type":"OutOfOfficeReason","relationName":"OutOfOfficeEntryToOutOfOfficeReason"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"OutOfOfficeReason":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"emoji","kind":"scalar","type":"String"},{"name":"reason","kind":"scalar","type":"String"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"OutOfOfficeReasonToUser"},{"name":"entries","kind":"object","type":"OutOfOfficeEntry","relationName":"OutOfOfficeEntryToOutOfOfficeReason"}],"dbName":null},"PlatformOAuthClient":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"secret","kind":"scalar","type":"String"},{"name":"permissions","kind":"scalar","type":"Int"},{"name":"users","kind":"object","type":"User","relationName":"PlatformOAuthClientToUser"},{"name":"logo","kind":"scalar","type":"String"},{"name":"redirectUris","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"PlatformOAuthClientToTeam"},{"name":"teams","kind":"object","type":"Team","relationName":"CreatedByOAuthClient"},{"name":"accessTokens","kind":"object","type":"AccessToken","relationName":"AccessTokenToPlatformOAuthClient"},{"name":"refreshToken","kind":"object","type":"RefreshToken","relationName":"PlatformOAuthClientToRefreshToken"},{"name":"authorizationTokens","kind":"object","type":"PlatformAuthorizationToken","relationName":"PlatformAuthorizationTokenToPlatformOAuthClient"},{"name":"webhook","kind":"object","type":"Webhook","relationName":"PlatformOAuthClientToWebhook"},{"name":"bookingRedirectUri","kind":"scalar","type":"String"},{"name":"bookingCancelRedirectUri","kind":"scalar","type":"String"},{"name":"bookingRescheduleRedirectUri","kind":"scalar","type":"String"},{"name":"areEmailsEnabled","kind":"scalar","type":"Boolean"},{"name":"areDefaultEventTypesEnabled","kind":"scalar","type":"Boolean"},{"name":"areCalendarEventsEnabled","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PlatformAuthorizationToken":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"owner","kind":"object","type":"User","relationName":"PlatformAuthorizationTokenToUser"},{"name":"client","kind":"object","type":"PlatformOAuthClient","relationName":"PlatformAuthorizationTokenToPlatformOAuthClient"},{"name":"platformOAuthClientId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"AccessToken":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"secret","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"owner","kind":"object","type":"User","relationName":"AccessTokenToUser"},{"name":"client","kind":"object","type":"PlatformOAuthClient","relationName":"AccessTokenToPlatformOAuthClient"},{"name":"platformOAuthClientId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"}],"dbName":null},"RefreshToken":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"secret","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"owner","kind":"object","type":"User","relationName":"RefreshTokenToUser"},{"name":"client","kind":"object","type":"PlatformOAuthClient","relationName":"PlatformOAuthClientToRefreshToken"},{"name":"platformOAuthClientId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"}],"dbName":null},"DSyncData":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"directoryId","kind":"scalar","type":"String"},{"name":"tenant","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"org","kind":"object","type":"OrganizationSettings","relationName":"DSyncDataToOrganizationSettings"},{"name":"teamGroupMapping","kind":"object","type":"DSyncTeamGroupMapping","relationName":"DSyncDataToDSyncTeamGroupMapping"},{"name":"createdAttributeToUsers","kind":"object","type":"AttributeToUser","relationName":"createdByDSync"},{"name":"updatedAttributeToUsers","kind":"object","type":"AttributeToUser","relationName":"updatedByDSync"}],"dbName":null},"DSyncTeamGroupMapping":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"DSyncTeamGroupMappingToTeam"},{"name":"directoryId","kind":"scalar","type":"String"},{"name":"directory","kind":"object","type":"DSyncData","relationName":"DSyncDataToDSyncTeamGroupMapping"},{"name":"groupName","kind":"scalar","type":"String"}],"dbName":null},"SecondaryEmail":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"SecondaryEmailToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"email","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"DateTime"},{"name":"verificationTokens","kind":"object","type":"VerificationToken","relationName":"SecondaryEmailToVerificationToken"},{"name":"eventTypes","kind":"object","type":"EventType","relationName":"EventTypeToSecondaryEmail"}],"dbName":null},"Task":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"scheduledAt","kind":"scalar","type":"DateTime"},{"name":"succeededAt","kind":"scalar","type":"DateTime"},{"name":"type","kind":"scalar","type":"String"},{"name":"payload","kind":"scalar","type":"String"},{"name":"attempts","kind":"scalar","type":"Int"},{"name":"maxAttempts","kind":"scalar","type":"Int"},{"name":"lastError","kind":"scalar","type":"String"},{"name":"lastFailedAttemptAt","kind":"scalar","type":"DateTime"},{"name":"referenceUid","kind":"scalar","type":"String"}],"dbName":null},"ManagedOrganization":{"fields":[{"name":"managedOrganizationId","kind":"scalar","type":"Int"},{"name":"managedOrganization","kind":"object","type":"Team","relationName":"ManagedOrganization"},{"name":"managerOrganizationId","kind":"scalar","type":"Int"},{"name":"managerOrganization","kind":"object","type":"Team","relationName":"ManagerOrganization"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PlatformBilling":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"customerId","kind":"scalar","type":"String"},{"name":"subscriptionId","kind":"scalar","type":"String"},{"name":"priceId","kind":"scalar","type":"String"},{"name":"plan","kind":"scalar","type":"String"},{"name":"billingCycleStart","kind":"scalar","type":"Int"},{"name":"billingCycleEnd","kind":"scalar","type":"Int"},{"name":"overdue","kind":"scalar","type":"Boolean"},{"name":"managerBillingId","kind":"scalar","type":"Int"},{"name":"managerBilling","kind":"object","type":"PlatformBilling","relationName":"PlatformManagedBilling"},{"name":"managedBillings","kind":"object","type":"PlatformBilling","relationName":"PlatformManagedBilling"},{"name":"team","kind":"object","type":"Team","relationName":"PlatformBillingToTeam"}],"dbName":null},"AttributeOption":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"attribute","kind":"object","type":"Attribute","relationName":"AttributeToAttributeOption"},{"name":"attributeId","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"isGroup","kind":"scalar","type":"Boolean"},{"name":"contains","kind":"scalar","type":"String"},{"name":"assignedUsers","kind":"object","type":"AttributeToUser","relationName":"AttributeOptionToAttributeToUser"}],"dbName":null},"Attribute":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"team","kind":"object","type":"Team","relationName":"AttributeToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"type","kind":"enum","type":"AttributeType"},{"name":"name","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"usersCanEditRelation","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"options","kind":"object","type":"AttributeOption","relationName":"AttributeToAttributeOption"},{"name":"isWeightsEnabled","kind":"scalar","type":"Boolean"},{"name":"isLocked","kind":"scalar","type":"Boolean"}],"dbName":null},"AttributeToUser":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"member","kind":"object","type":"Membership","relationName":"AttributeToUserToMembership"},{"name":"memberId","kind":"scalar","type":"Int"},{"name":"attributeOption","kind":"object","type":"AttributeOption","relationName":"AttributeOptionToAttributeToUser"},{"name":"attributeOptionId","kind":"scalar","type":"String"},{"name":"weight","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdById","kind":"scalar","type":"Int"},{"name":"createdBy","kind":"object","type":"User","relationName":"createdBy"},{"name":"createdByDSyncId","kind":"scalar","type":"String"},{"name":"createdByDSync","kind":"object","type":"DSyncData","relationName":"createdByDSync"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"updatedBy","kind":"object","type":"User","relationName":"updatedBy"},{"name":"updatedById","kind":"scalar","type":"Int"},{"name":"updatedByDSyncId","kind":"scalar","type":"String"},{"name":"updatedByDSync","kind":"object","type":"DSyncData","relationName":"updatedByDSync"}],"dbName":null},"AssignmentReason":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"booking","kind":"object","type":"Booking","relationName":"AssignmentReasonToBooking"},{"name":"reasonEnum","kind":"enum","type":"AssignmentReasonEnum"},{"name":"reasonString","kind":"scalar","type":"String"}],"dbName":null},"DelegationCredential":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"workspacePlatform","kind":"object","type":"WorkspacePlatform","relationName":"DelegationCredentialToWorkspacePlatform"},{"name":"workspacePlatformId","kind":"scalar","type":"Int"},{"name":"serviceAccountKey","kind":"scalar","type":"Json"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"lastEnabledAt","kind":"scalar","type":"DateTime"},{"name":"lastDisabledAt","kind":"scalar","type":"DateTime"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"DelegationCredentialToTeam"},{"name":"domain","kind":"scalar","type":"String"},{"name":"selectedCalendars","kind":"object","type":"SelectedCalendar","relationName":"DelegationCredentialToSelectedCalendar"},{"name":"destinationCalendar","kind":"object","type":"DestinationCalendar","relationName":"DelegationCredentialToDestinationCalendar"},{"name":"bookingReferences","kind":"object","type":"BookingReference","relationName":"BookingReferenceToDelegationCredential"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"credentials","kind":"object","type":"Credential","relationName":"CredentialToDelegationCredential"}],"dbName":null},"DomainWideDelegation":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"workspacePlatform","kind":"object","type":"WorkspacePlatform","relationName":"DomainWideDelegationToWorkspacePlatform"},{"name":"workspacePlatformId","kind":"scalar","type":"Int"},{"name":"serviceAccountKey","kind":"scalar","type":"Json"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"DomainWideDelegationToTeam"},{"name":"domain","kind":"scalar","type":"String"},{"name":"selectedCalendars","kind":"object","type":"SelectedCalendar","relationName":"DomainWideDelegationToSelectedCalendar"},{"name":"destinationCalendar","kind":"object","type":"DestinationCalendar","relationName":"DestinationCalendarToDomainWideDelegation"},{"name":"bookingReferences","kind":"object","type":"BookingReference","relationName":"BookingReferenceToDomainWideDelegation"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"WorkspacePlatform":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"slug","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"defaultServiceAccountKey","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"delegationCredentials","kind":"object","type":"DelegationCredential","relationName":"DelegationCredentialToWorkspacePlatform"},{"name":"domainWideDelegations","kind":"object","type":"DomainWideDelegation","relationName":"DomainWideDelegationToWorkspacePlatform"}],"dbName":null},"EventTypeTranslation":{"fields":[{"name":"uid","kind":"scalar","type":"String"},{"name":"eventType","kind":"object","type":"EventType","relationName":"EventTypeToEventTypeTranslation"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"field","kind":"enum","type":"EventTypeAutoTranslatedField"},{"name":"sourceLocale","kind":"scalar","type":"String"},{"name":"targetLocale","kind":"scalar","type":"String"},{"name":"translatedText","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"Int"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"updatedBy","kind":"scalar","type":"Int"},{"name":"creator","kind":"object","type":"User","relationName":"CreatedEventTypeTranslations"},{"name":"updater","kind":"object","type":"User","relationName":"UpdatedEventTypeTranslations"}],"dbName":null},"Watchlist":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"WatchlistType"},{"name":"value","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"isGlobal","kind":"scalar","type":"Boolean"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"action","kind":"enum","type":"WatchlistAction"},{"name":"source","kind":"enum","type":"WatchlistSource"},{"name":"lastUpdatedAt","kind":"scalar","type":"DateTime"},{"name":"bookingReports","kind":"object","type":"BookingReport","relationName":"BookingReportToWatchlist"},{"name":"audits","kind":"object","type":"WatchlistAudit","relationName":"WatchlistToWatchlistAudit"}],"dbName":null},"WatchlistAudit":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"WatchlistType"},{"name":"value","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"action","kind":"enum","type":"WatchlistAction"},{"name":"changedAt","kind":"scalar","type":"DateTime"},{"name":"changedByUserId","kind":"scalar","type":"Int"},{"name":"watchlistId","kind":"scalar","type":"String"},{"name":"watchlist","kind":"object","type":"Watchlist","relationName":"WatchlistToWatchlistAudit"}],"dbName":null},"WatchlistEventAudit":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"watchlistId","kind":"scalar","type":"String"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"actionTaken","kind":"enum","type":"WatchlistAction"},{"name":"timestamp","kind":"scalar","type":"DateTime"}],"dbName":null},"BookingReport":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"bookingUid","kind":"scalar","type":"String"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToBookingReport"},{"name":"bookerEmail","kind":"scalar","type":"String"},{"name":"reportedById","kind":"scalar","type":"Int"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"reason","kind":"enum","type":"BookingReportReason"},{"name":"description","kind":"scalar","type":"String"},{"name":"cancelled","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"watchlistId","kind":"scalar","type":"String"},{"name":"reportedBy","kind":"object","type":"User","relationName":"ReportedBy"},{"name":"organization","kind":"object","type":"Team","relationName":"BookingReportToTeam"},{"name":"watchlist","kind":"object","type":"Watchlist","relationName":"BookingReportToWatchlist"}],"dbName":null},"OrganizationOnboarding":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"CreatedOrganizationOnboardings"},{"name":"createdById","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"orgOwnerEmail","kind":"scalar","type":"String"},{"name":"error","kind":"scalar","type":"String"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"organizationId","kind":"scalar","type":"Int"},{"name":"organization","kind":"object","type":"Team","relationName":"OrganizationOnboardingToTeam"},{"name":"billingPeriod","kind":"enum","type":"BillingPeriod"},{"name":"pricePerSeat","kind":"scalar","type":"Float"},{"name":"seats","kind":"scalar","type":"Int"},{"name":"isPlatform","kind":"scalar","type":"Boolean"},{"name":"name","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"logo","kind":"scalar","type":"String"},{"name":"bio","kind":"scalar","type":"String"},{"name":"brandColor","kind":"scalar","type":"String"},{"name":"bannerUrl","kind":"scalar","type":"String"},{"name":"isDomainConfigured","kind":"scalar","type":"Boolean"},{"name":"stripeCustomerId","kind":"scalar","type":"String"},{"name":"stripeSubscriptionId","kind":"scalar","type":"String"},{"name":"stripeSubscriptionItemId","kind":"scalar","type":"String"},{"name":"invitedMembers","kind":"scalar","type":"Json"},{"name":"teams","kind":"scalar","type":"Json"},{"name":"isComplete","kind":"scalar","type":"Boolean"}],"dbName":null},"App_RoutingForms_IncompleteBookingActions":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"form","kind":"object","type":"App_RoutingForms_Form","relationName":"App_RoutingForms_FormToApp_RoutingForms_IncompleteBookingActions"},{"name":"formId","kind":"scalar","type":"String"},{"name":"actionType","kind":"enum","type":"IncompleteBookingActionType"},{"name":"data","kind":"scalar","type":"Json"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"credentialId","kind":"scalar","type":"Int"}],"dbName":null},"InternalNotePreset":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"cancellationReason","kind":"scalar","type":"String"},{"name":"team","kind":"object","type":"Team","relationName":"InternalNotePresetToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"BookingInternalNote","kind":"object","type":"BookingInternalNote","relationName":"BookingInternalNoteToInternalNotePreset"}],"dbName":null},"FilterSegment":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"tableIdentifier","kind":"scalar","type":"String"},{"name":"scope","kind":"enum","type":"FilterSegmentScope"},{"name":"activeFilters","kind":"scalar","type":"Json"},{"name":"sorting","kind":"scalar","type":"Json"},{"name":"columnVisibility","kind":"scalar","type":"Json"},{"name":"columnSizing","kind":"scalar","type":"Json"},{"name":"perPage","kind":"scalar","type":"Int"},{"name":"searchTerm","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"user","kind":"object","type":"User","relationName":"FilterSegmentToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"FilterSegmentToTeam"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"userPreferences","kind":"object","type":"UserFilterSegmentPreference","relationName":"FilterSegmentToUserFilterSegmentPreference"}],"dbName":null},"UserFilterSegmentPreference":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"tableIdentifier","kind":"scalar","type":"String"},{"name":"segmentId","kind":"scalar","type":"Int"},{"name":"systemSegmentId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserFilterSegmentPreference"},{"name":"segment","kind":"object","type":"FilterSegment","relationName":"FilterSegmentToUserFilterSegmentPreference"}],"dbName":null},"BookingInternalNote":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"notePreset","kind":"object","type":"InternalNotePreset","relationName":"BookingInternalNoteToInternalNotePreset"},{"name":"notePresetId","kind":"scalar","type":"Int"},{"name":"text","kind":"scalar","type":"String"},{"name":"booking","kind":"object","type":"Booking","relationName":"BookingToBookingInternalNote"},{"name":"bookingId","kind":"scalar","type":"Int"},{"name":"createdBy","kind":"object","type":"User","relationName":"BookingInternalNoteToUser"},{"name":"createdById","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"WorkflowOptOutContact":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"type","kind":"enum","type":"WorkflowContactType"},{"name":"value","kind":"scalar","type":"String"},{"name":"optedOut","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Role":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"color","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"RoleToTeam"},{"name":"permissions","kind":"object","type":"RolePermission","relationName":"RoleToRolePermission"},{"name":"memberships","kind":"object","type":"Membership","relationName":"MembershipToRole"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"type","kind":"enum","type":"RoleType"}],"dbName":null},"RolePermission":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"roleId","kind":"scalar","type":"String"},{"name":"role","kind":"object","type":"Role","relationName":"RoleToRolePermission"},{"name":"resource","kind":"scalar","type":"String"},{"name":"action","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Agent":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"AgentToUser"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"AgentToTeam"},{"name":"providerAgentId","kind":"scalar","type":"String"},{"name":"inboundEventTypeId","kind":"scalar","type":"Int"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"inboundPhoneNumbers","kind":"object","type":"CalAiPhoneNumber","relationName":"InboundAgent"},{"name":"outboundPhoneNumbers","kind":"object","type":"CalAiPhoneNumber","relationName":"OutboundAgent"},{"name":"workflowStep","kind":"object","type":"WorkflowStep","relationName":"AgentToWorkflowStep"},{"name":"inboundWorkflowStep","kind":"object","type":"WorkflowStep","relationName":"WorkflowStepInboundAgent"}],"dbName":null},"CalAiPhoneNumber":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"CalAiPhoneNumberToUser"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"CalAiPhoneNumberToTeam"},{"name":"phoneNumber","kind":"scalar","type":"String"},{"name":"provider","kind":"scalar","type":"String"},{"name":"providerPhoneNumberId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"stripeCustomerId","kind":"scalar","type":"String"},{"name":"stripeSubscriptionId","kind":"scalar","type":"String"},{"name":"subscriptionStatus","kind":"enum","type":"PhoneNumberSubscriptionStatus"},{"name":"inboundAgentId","kind":"scalar","type":"String"},{"name":"inboundAgent","kind":"object","type":"Agent","relationName":"InboundAgent"},{"name":"outboundAgentId","kind":"scalar","type":"String"},{"name":"outboundAgent","kind":"object","type":"Agent","relationName":"OutboundAgent"}],"dbName":null},"TeamBilling":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"TeamBilling"},{"name":"subscriptionId","kind":"scalar","type":"String"},{"name":"subscriptionItemId","kind":"scalar","type":"String"},{"name":"customerId","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"planName","kind":"scalar","type":"String"},{"name":"subscriptionStart","kind":"scalar","type":"DateTime"},{"name":"subscriptionTrialEnd","kind":"scalar","type":"DateTime"},{"name":"subscriptionEnd","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"OrganizationBilling":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"team","kind":"object","type":"Team","relationName":"OrganizationBilling"},{"name":"subscriptionId","kind":"scalar","type":"String"},{"name":"subscriptionItemId","kind":"scalar","type":"String"},{"name":"customerId","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"planName","kind":"scalar","type":"String"},{"name":"subscriptionStart","kind":"scalar","type":"DateTime"},{"name":"subscriptionTrialEnd","kind":"scalar","type":"DateTime"},{"name":"subscriptionEnd","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"CalendarCacheEvent":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"selectedCalendarId","kind":"scalar","type":"String"},{"name":"externalId","kind":"scalar","type":"String"},{"name":"externalEtag","kind":"scalar","type":"String"},{"name":"iCalUID","kind":"scalar","type":"String"},{"name":"iCalSequence","kind":"scalar","type":"Int"},{"name":"summary","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"location","kind":"scalar","type":"String"},{"name":"start","kind":"scalar","type":"DateTime"},{"name":"end","kind":"scalar","type":"DateTime"},{"name":"isAllDay","kind":"scalar","type":"Boolean"},{"name":"timeZone","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"CalendarCacheEventStatus"},{"name":"recurringEventId","kind":"scalar","type":"String"},{"name":"originalStartTime","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"externalCreatedAt","kind":"scalar","type":"DateTime"},{"name":"externalUpdatedAt","kind":"scalar","type":"DateTime"},{"name":"selectedCalendar","kind":"object","type":"SelectedCalendar","relationName":"CalendarCacheEventToSelectedCalendar"}],"dbName":null},"RoutingFormResponse":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"response","kind":"scalar","type":"Json"},{"name":"responseLowercase","kind":"scalar","type":"Json"},{"name":"formId","kind":"scalar","type":"String"},{"name":"formName","kind":"scalar","type":"String"},{"name":"formTeamId","kind":"scalar","type":"Int"},{"name":"formUserId","kind":"scalar","type":"Int"},{"name":"bookingUid","kind":"scalar","type":"String"},{"name":"bookingStatus","kind":"enum","type":"BookingStatus"},{"name":"bookingStatusOrder","kind":"scalar","type":"Int"},{"name":"bookingCreatedAt","kind":"scalar","type":"DateTime"},{"name":"bookingAttendees","kind":"scalar","type":"Json"},{"name":"bookingUserId","kind":"scalar","type":"Int"},{"name":"bookingUserName","kind":"scalar","type":"String"},{"name":"bookingUserEmail","kind":"scalar","type":"String"},{"name":"bookingUserAvatarUrl","kind":"scalar","type":"String"},{"name":"bookingAssignmentReason","kind":"scalar","type":"String"},{"name":"bookingAssignmentReasonLowercase","kind":"scalar","type":"String"},{"name":"bookingStartTime","kind":"scalar","type":"DateTime"},{"name":"bookingEndTime","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"utm_source","kind":"scalar","type":"String"},{"name":"utm_medium","kind":"scalar","type":"String"},{"name":"utm_campaign","kind":"scalar","type":"String"},{"name":"utm_term","kind":"scalar","type":"String"},{"name":"utm_content","kind":"scalar","type":"String"}],"dbName":null},"BookingTimeStatus":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uid","kind":"scalar","type":"String"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"startTime","kind":"scalar","type":"DateTime"},{"name":"endTime","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"location","kind":"scalar","type":"String"},{"name":"paid","kind":"scalar","type":"Boolean"},{"name":"status","kind":"enum","type":"BookingStatus"},{"name":"rescheduled","kind":"scalar","type":"Boolean"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"eventLength","kind":"scalar","type":"Int"},{"name":"timeStatus","kind":"scalar","type":"String"},{"name":"eventParentId","kind":"scalar","type":"Int"},{"name":"userEmail","kind":"scalar","type":"String"},{"name":"username","kind":"scalar","type":"String"},{"name":"ratingFeedback","kind":"scalar","type":"String"},{"name":"rating","kind":"scalar","type":"Int"},{"name":"noShowHost","kind":"scalar","type":"Boolean"},{"name":"isTeamBooking","kind":"scalar","type":"Boolean"}],"dbName":null},"BookingTimeStatusDenormalized":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"uid","kind":"scalar","type":"String"},{"name":"eventTypeId","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"startTime","kind":"scalar","type":"DateTime"},{"name":"endTime","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"location","kind":"scalar","type":"String"},{"name":"paid","kind":"scalar","type":"Boolean"},{"name":"status","kind":"enum","type":"BookingStatus"},{"name":"rescheduled","kind":"scalar","type":"Boolean"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"teamId","kind":"scalar","type":"Int"},{"name":"eventLength","kind":"scalar","type":"Int"},{"name":"eventParentId","kind":"scalar","type":"Int"},{"name":"userEmail","kind":"scalar","type":"String"},{"name":"userName","kind":"scalar","type":"String"},{"name":"userUsername","kind":"scalar","type":"String"},{"name":"ratingFeedback","kind":"scalar","type":"String"},{"name":"rating","kind":"scalar","type":"Int"},{"name":"noShowHost","kind":"scalar","type":"Boolean"},{"name":"isTeamBooking","kind":"scalar","type":"Boolean"},{"name":"timeStatus","kind":"scalar","type":"String"}],"dbName":null}},"enums":{},"types":{}}'
);
config.engineWasm = undefined;

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import("node:buffer");
  const wasmArray = Buffer.from(wasmBase64, "base64");
  return new WebAssembly.Module(wasmArray);
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.js"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.js");
    return await decodeBase64AsWasm(wasm);
  },
};

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> = "log" extends keyof ClientOptions
  ? ClientOptions["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
    ? Prisma.GetEvents<ClientOptions["log"]>
    : never
  : never;

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Hosts
   * const hosts = await prisma.host.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions["omit"] = Options extends { omit: infer U }
      ? U
      : Prisma.PrismaClientOptions["omit"],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(
    options?: Prisma.Subset<Options, Prisma.PrismaClientOptions>
  ): PrismaClient<LogOpts, OmitOpts, ExtArgs>;
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Hosts
 * const hosts = await prisma.host.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions["omit"] = Prisma.PrismaClientOptions["omit"],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["other"] };

  $on<V extends LogOpts>(
    eventType: V,
    callback: (event: V extends "query" ? Prisma.QueryEvent : Prisma.LogEvent) => void
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel }
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: Prisma.TransactionIsolationLevel }
  ): runtime.Types.Utils.JsPromise<R>;

  $extends: runtime.Types.Extensions.ExtendsHook<
    "extends",
    Prisma.TypeMapCb<OmitOpts>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<OmitOpts>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.host`: Exposes CRUD operations for the **Host** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Hosts
   * const hosts = await prisma.host.findMany()
   * ```
   */
  get host(): Prisma.HostDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.hostGroup`: Exposes CRUD operations for the **HostGroup** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more HostGroups
   * const hostGroups = await prisma.hostGroup.findMany()
   * ```
   */
  get hostGroup(): Prisma.HostGroupDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.calVideoSettings`: Exposes CRUD operations for the **CalVideoSettings** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CalVideoSettings
   * const calVideoSettings = await prisma.calVideoSettings.findMany()
   * ```
   */
  get calVideoSettings(): Prisma.CalVideoSettingsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.eventType`: Exposes CRUD operations for the **EventType** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more EventTypes
   * const eventTypes = await prisma.eventType.findMany()
   * ```
   */
  get eventType(): Prisma.EventTypeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.credential`: Exposes CRUD operations for the **Credential** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Credentials
   * const credentials = await prisma.credential.findMany()
   * ```
   */
  get credential(): Prisma.CredentialDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.destinationCalendar`: Exposes CRUD operations for the **DestinationCalendar** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more DestinationCalendars
   * const destinationCalendars = await prisma.destinationCalendar.findMany()
   * ```
   */
  get destinationCalendar(): Prisma.DestinationCalendarDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userPassword`: Exposes CRUD operations for the **UserPassword** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserPasswords
   * const userPasswords = await prisma.userPassword.findMany()
   * ```
   */
  get userPassword(): Prisma.UserPasswordDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.travelSchedule`: Exposes CRUD operations for the **TravelSchedule** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TravelSchedules
   * const travelSchedules = await prisma.travelSchedule.findMany()
   * ```
   */
  get travelSchedule(): Prisma.TravelScheduleDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.notificationsSubscriptions`: Exposes CRUD operations for the **NotificationsSubscriptions** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more NotificationsSubscriptions
   * const notificationsSubscriptions = await prisma.notificationsSubscriptions.findMany()
   * ```
   */
  get notificationsSubscriptions(): Prisma.NotificationsSubscriptionsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   */
  get profile(): Prisma.ProfileDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Teams
   * const teams = await prisma.team.findMany()
   * ```
   */
  get team(): Prisma.TeamDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.creditBalance`: Exposes CRUD operations for the **CreditBalance** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CreditBalances
   * const creditBalances = await prisma.creditBalance.findMany()
   * ```
   */
  get creditBalance(): Prisma.CreditBalanceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.creditPurchaseLog`: Exposes CRUD operations for the **CreditPurchaseLog** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CreditPurchaseLogs
   * const creditPurchaseLogs = await prisma.creditPurchaseLog.findMany()
   * ```
   */
  get creditPurchaseLog(): Prisma.CreditPurchaseLogDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.creditExpenseLog`: Exposes CRUD operations for the **CreditExpenseLog** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CreditExpenseLogs
   * const creditExpenseLogs = await prisma.creditExpenseLog.findMany()
   * ```
   */
  get creditExpenseLog(): Prisma.CreditExpenseLogDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organizationSettings`: Exposes CRUD operations for the **OrganizationSettings** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrganizationSettings
   * const organizationSettings = await prisma.organizationSettings.findMany()
   * ```
   */
  get organizationSettings(): Prisma.OrganizationSettingsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **Membership** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Memberships
   * const memberships = await prisma.membership.findMany()
   * ```
   */
  get membership(): Prisma.MembershipDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more VerificationTokens
   * const verificationTokens = await prisma.verificationToken.findMany()
   * ```
   */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.instantMeetingToken`: Exposes CRUD operations for the **InstantMeetingToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InstantMeetingTokens
   * const instantMeetingTokens = await prisma.instantMeetingToken.findMany()
   * ```
   */
  get instantMeetingToken(): Prisma.InstantMeetingTokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingReference`: Exposes CRUD operations for the **BookingReference** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingReferences
   * const bookingReferences = await prisma.bookingReference.findMany()
   * ```
   */
  get bookingReference(): Prisma.BookingReferenceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attendee`: Exposes CRUD operations for the **Attendee** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Attendees
   * const attendees = await prisma.attendee.findMany()
   * ```
   */
  get attendee(): Prisma.AttendeeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Bookings
   * const bookings = await prisma.booking.findMany()
   * ```
   */
  get booking(): Prisma.BookingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.tracking`: Exposes CRUD operations for the **Tracking** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Trackings
   * const trackings = await prisma.tracking.findMany()
   * ```
   */
  get tracking(): Prisma.TrackingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Schedules
   * const schedules = await prisma.schedule.findMany()
   * ```
   */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.availability`: Exposes CRUD operations for the **Availability** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Availabilities
   * const availabilities = await prisma.availability.findMany()
   * ```
   */
  get availability(): Prisma.AvailabilityDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.selectedCalendar`: Exposes CRUD operations for the **SelectedCalendar** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SelectedCalendars
   * const selectedCalendars = await prisma.selectedCalendar.findMany()
   * ```
   */
  get selectedCalendar(): Prisma.SelectedCalendarDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.eventTypeCustomInput`: Exposes CRUD operations for the **EventTypeCustomInput** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more EventTypeCustomInputs
   * const eventTypeCustomInputs = await prisma.eventTypeCustomInput.findMany()
   * ```
   */
  get eventTypeCustomInput(): Prisma.EventTypeCustomInputDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.resetPasswordRequest`: Exposes CRUD operations for the **ResetPasswordRequest** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ResetPasswordRequests
   * const resetPasswordRequests = await prisma.resetPasswordRequest.findMany()
   * ```
   */
  get resetPasswordRequest(): Prisma.ResetPasswordRequestDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.reminderMail`: Exposes CRUD operations for the **ReminderMail** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ReminderMails
   * const reminderMails = await prisma.reminderMail.findMany()
   * ```
   */
  get reminderMail(): Prisma.ReminderMailDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Payments
   * const payments = await prisma.payment.findMany()
   * ```
   */
  get payment(): Prisma.PaymentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.webhook`: Exposes CRUD operations for the **Webhook** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Webhooks
   * const webhooks = await prisma.webhook.findMany()
   * ```
   */
  get webhook(): Prisma.WebhookDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.impersonations`: Exposes CRUD operations for the **Impersonations** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Impersonations
   * const impersonations = await prisma.impersonations.findMany()
   * ```
   */
  get impersonations(): Prisma.ImpersonationsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ApiKeys
   * const apiKeys = await prisma.apiKey.findMany()
   * ```
   */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.rateLimit`: Exposes CRUD operations for the **RateLimit** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RateLimits
   * const rateLimits = await prisma.rateLimit.findMany()
   * ```
   */
  get rateLimit(): Prisma.RateLimitDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.hashedLink`: Exposes CRUD operations for the **HashedLink** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more HashedLinks
   * const hashedLinks = await prisma.hashedLink.findMany()
   * ```
   */
  get hashedLink(): Prisma.HashedLinkDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   */
  get account(): Prisma.AccountDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   */
  get session(): Prisma.SessionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.app`: Exposes CRUD operations for the **App** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Apps
   * const apps = await prisma.app.findMany()
   * ```
   */
  get app(): Prisma.AppDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.app_RoutingForms_Form`: Exposes CRUD operations for the **App_RoutingForms_Form** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more App_RoutingForms_Forms
   * const app_RoutingForms_Forms = await prisma.app_RoutingForms_Form.findMany()
   * ```
   */
  get app_RoutingForms_Form(): Prisma.App_RoutingForms_FormDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.app_RoutingForms_FormResponse`: Exposes CRUD operations for the **App_RoutingForms_FormResponse** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more App_RoutingForms_FormResponses
   * const app_RoutingForms_FormResponses = await prisma.app_RoutingForms_FormResponse.findMany()
   * ```
   */
  get app_RoutingForms_FormResponse(): Prisma.App_RoutingForms_FormResponseDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.app_RoutingForms_QueuedFormResponse`: Exposes CRUD operations for the **App_RoutingForms_QueuedFormResponse** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more App_RoutingForms_QueuedFormResponses
   * const app_RoutingForms_QueuedFormResponses = await prisma.app_RoutingForms_QueuedFormResponse.findMany()
   * ```
   */
  get app_RoutingForms_QueuedFormResponse(): Prisma.App_RoutingForms_QueuedFormResponseDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.routingFormResponseField`: Exposes CRUD operations for the **RoutingFormResponseField** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RoutingFormResponseFields
   * const routingFormResponseFields = await prisma.routingFormResponseField.findMany()
   * ```
   */
  get routingFormResponseField(): Prisma.RoutingFormResponseFieldDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.routingFormResponseDenormalized`: Exposes CRUD operations for the **RoutingFormResponseDenormalized** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RoutingFormResponseDenormalizeds
   * const routingFormResponseDenormalizeds = await prisma.routingFormResponseDenormalized.findMany()
   * ```
   */
  get routingFormResponseDenormalized(): Prisma.RoutingFormResponseDenormalizedDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Feedbacks
   * const feedbacks = await prisma.feedback.findMany()
   * ```
   */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflowStep`: Exposes CRUD operations for the **WorkflowStep** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkflowSteps
   * const workflowSteps = await prisma.workflowStep.findMany()
   * ```
   */
  get workflowStep(): Prisma.WorkflowStepDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflow`: Exposes CRUD operations for the **Workflow** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Workflows
   * const workflows = await prisma.workflow.findMany()
   * ```
   */
  get workflow(): Prisma.WorkflowDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.aIPhoneCallConfiguration`: Exposes CRUD operations for the **AIPhoneCallConfiguration** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AIPhoneCallConfigurations
   * const aIPhoneCallConfigurations = await prisma.aIPhoneCallConfiguration.findMany()
   * ```
   */
  get aIPhoneCallConfiguration(): Prisma.AIPhoneCallConfigurationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflowsOnEventTypes`: Exposes CRUD operations for the **WorkflowsOnEventTypes** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkflowsOnEventTypes
   * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findMany()
   * ```
   */
  get workflowsOnEventTypes(): Prisma.WorkflowsOnEventTypesDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflowsOnRoutingForms`: Exposes CRUD operations for the **WorkflowsOnRoutingForms** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkflowsOnRoutingForms
   * const workflowsOnRoutingForms = await prisma.workflowsOnRoutingForms.findMany()
   * ```
   */
  get workflowsOnRoutingForms(): Prisma.WorkflowsOnRoutingFormsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflowsOnTeams`: Exposes CRUD operations for the **WorkflowsOnTeams** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkflowsOnTeams
   * const workflowsOnTeams = await prisma.workflowsOnTeams.findMany()
   * ```
   */
  get workflowsOnTeams(): Prisma.WorkflowsOnTeamsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.deployment`: Exposes CRUD operations for the **Deployment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Deployments
   * const deployments = await prisma.deployment.findMany()
   * ```
   */
  get deployment(): Prisma.DeploymentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflowReminder`: Exposes CRUD operations for the **WorkflowReminder** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkflowReminders
   * const workflowReminders = await prisma.workflowReminder.findMany()
   * ```
   */
  get workflowReminder(): Prisma.WorkflowReminderDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.webhookScheduledTriggers`: Exposes CRUD operations for the **WebhookScheduledTriggers** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WebhookScheduledTriggers
   * const webhookScheduledTriggers = await prisma.webhookScheduledTriggers.findMany()
   * ```
   */
  get webhookScheduledTriggers(): Prisma.WebhookScheduledTriggersDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingSeat`: Exposes CRUD operations for the **BookingSeat** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingSeats
   * const bookingSeats = await prisma.bookingSeat.findMany()
   * ```
   */
  get bookingSeat(): Prisma.BookingSeatDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verifiedNumber`: Exposes CRUD operations for the **VerifiedNumber** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more VerifiedNumbers
   * const verifiedNumbers = await prisma.verifiedNumber.findMany()
   * ```
   */
  get verifiedNumber(): Prisma.VerifiedNumberDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.verifiedEmail`: Exposes CRUD operations for the **VerifiedEmail** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more VerifiedEmails
   * const verifiedEmails = await prisma.verifiedEmail.findMany()
   * ```
   */
  get verifiedEmail(): Prisma.VerifiedEmailDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.feature`: Exposes CRUD operations for the **Feature** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Features
   * const features = await prisma.feature.findMany()
   * ```
   */
  get feature(): Prisma.FeatureDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userFeatures`: Exposes CRUD operations for the **UserFeatures** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserFeatures
   * const userFeatures = await prisma.userFeatures.findMany()
   * ```
   */
  get userFeatures(): Prisma.UserFeaturesDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.teamFeatures`: Exposes CRUD operations for the **TeamFeatures** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TeamFeatures
   * const teamFeatures = await prisma.teamFeatures.findMany()
   * ```
   */
  get teamFeatures(): Prisma.TeamFeaturesDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.selectedSlots`: Exposes CRUD operations for the **SelectedSlots** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SelectedSlots
   * const selectedSlots = await prisma.selectedSlots.findMany()
   * ```
   */
  get selectedSlots(): Prisma.SelectedSlotsDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.oAuthClient`: Exposes CRUD operations for the **OAuthClient** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OAuthClients
   * const oAuthClients = await prisma.oAuthClient.findMany()
   * ```
   */
  get oAuthClient(): Prisma.OAuthClientDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.accessCode`: Exposes CRUD operations for the **AccessCode** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AccessCodes
   * const accessCodes = await prisma.accessCode.findMany()
   * ```
   */
  get accessCode(): Prisma.AccessCodeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingDenormalized`: Exposes CRUD operations for the **BookingDenormalized** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingDenormalizeds
   * const bookingDenormalizeds = await prisma.bookingDenormalized.findMany()
   * ```
   */
  get bookingDenormalized(): Prisma.BookingDenormalizedDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.calendarCache`: Exposes CRUD operations for the **CalendarCache** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CalendarCaches
   * const calendarCaches = await prisma.calendarCache.findMany()
   * ```
   */
  get calendarCache(): Prisma.CalendarCacheDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.tempOrgRedirect`: Exposes CRUD operations for the **TempOrgRedirect** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TempOrgRedirects
   * const tempOrgRedirects = await prisma.tempOrgRedirect.findMany()
   * ```
   */
  get tempOrgRedirect(): Prisma.TempOrgRedirectDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.avatar`: Exposes CRUD operations for the **Avatar** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Avatars
   * const avatars = await prisma.avatar.findMany()
   * ```
   */
  get avatar(): Prisma.AvatarDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.outOfOfficeEntry`: Exposes CRUD operations for the **OutOfOfficeEntry** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OutOfOfficeEntries
   * const outOfOfficeEntries = await prisma.outOfOfficeEntry.findMany()
   * ```
   */
  get outOfOfficeEntry(): Prisma.OutOfOfficeEntryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.outOfOfficeReason`: Exposes CRUD operations for the **OutOfOfficeReason** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OutOfOfficeReasons
   * const outOfOfficeReasons = await prisma.outOfOfficeReason.findMany()
   * ```
   */
  get outOfOfficeReason(): Prisma.OutOfOfficeReasonDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.platformOAuthClient`: Exposes CRUD operations for the **PlatformOAuthClient** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PlatformOAuthClients
   * const platformOAuthClients = await prisma.platformOAuthClient.findMany()
   * ```
   */
  get platformOAuthClient(): Prisma.PlatformOAuthClientDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.platformAuthorizationToken`: Exposes CRUD operations for the **PlatformAuthorizationToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PlatformAuthorizationTokens
   * const platformAuthorizationTokens = await prisma.platformAuthorizationToken.findMany()
   * ```
   */
  get platformAuthorizationToken(): Prisma.PlatformAuthorizationTokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.accessToken`: Exposes CRUD operations for the **AccessToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AccessTokens
   * const accessTokens = await prisma.accessToken.findMany()
   * ```
   */
  get accessToken(): Prisma.AccessTokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RefreshTokens
   * const refreshTokens = await prisma.refreshToken.findMany()
   * ```
   */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.dSyncData`: Exposes CRUD operations for the **DSyncData** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more DSyncData
   * const dSyncData = await prisma.dSyncData.findMany()
   * ```
   */
  get dSyncData(): Prisma.DSyncDataDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.dSyncTeamGroupMapping`: Exposes CRUD operations for the **DSyncTeamGroupMapping** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more DSyncTeamGroupMappings
   * const dSyncTeamGroupMappings = await prisma.dSyncTeamGroupMapping.findMany()
   * ```
   */
  get dSyncTeamGroupMapping(): Prisma.DSyncTeamGroupMappingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.secondaryEmail`: Exposes CRUD operations for the **SecondaryEmail** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SecondaryEmails
   * const secondaryEmails = await prisma.secondaryEmail.findMany()
   * ```
   */
  get secondaryEmail(): Prisma.SecondaryEmailDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tasks
   * const tasks = await prisma.task.findMany()
   * ```
   */
  get task(): Prisma.TaskDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.managedOrganization`: Exposes CRUD operations for the **ManagedOrganization** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ManagedOrganizations
   * const managedOrganizations = await prisma.managedOrganization.findMany()
   * ```
   */
  get managedOrganization(): Prisma.ManagedOrganizationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.platformBilling`: Exposes CRUD operations for the **PlatformBilling** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PlatformBillings
   * const platformBillings = await prisma.platformBilling.findMany()
   * ```
   */
  get platformBilling(): Prisma.PlatformBillingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attributeOption`: Exposes CRUD operations for the **AttributeOption** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AttributeOptions
   * const attributeOptions = await prisma.attributeOption.findMany()
   * ```
   */
  get attributeOption(): Prisma.AttributeOptionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attribute`: Exposes CRUD operations for the **Attribute** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Attributes
   * const attributes = await prisma.attribute.findMany()
   * ```
   */
  get attribute(): Prisma.AttributeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.attributeToUser`: Exposes CRUD operations for the **AttributeToUser** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AttributeToUsers
   * const attributeToUsers = await prisma.attributeToUser.findMany()
   * ```
   */
  get attributeToUser(): Prisma.AttributeToUserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.assignmentReason`: Exposes CRUD operations for the **AssignmentReason** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more AssignmentReasons
   * const assignmentReasons = await prisma.assignmentReason.findMany()
   * ```
   */
  get assignmentReason(): Prisma.AssignmentReasonDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.delegationCredential`: Exposes CRUD operations for the **DelegationCredential** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more DelegationCredentials
   * const delegationCredentials = await prisma.delegationCredential.findMany()
   * ```
   */
  get delegationCredential(): Prisma.DelegationCredentialDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.domainWideDelegation`: Exposes CRUD operations for the **DomainWideDelegation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more DomainWideDelegations
   * const domainWideDelegations = await prisma.domainWideDelegation.findMany()
   * ```
   */
  get domainWideDelegation(): Prisma.DomainWideDelegationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workspacePlatform`: Exposes CRUD operations for the **WorkspacePlatform** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkspacePlatforms
   * const workspacePlatforms = await prisma.workspacePlatform.findMany()
   * ```
   */
  get workspacePlatform(): Prisma.WorkspacePlatformDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.eventTypeTranslation`: Exposes CRUD operations for the **EventTypeTranslation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more EventTypeTranslations
   * const eventTypeTranslations = await prisma.eventTypeTranslation.findMany()
   * ```
   */
  get eventTypeTranslation(): Prisma.EventTypeTranslationDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.watchlist`: Exposes CRUD operations for the **Watchlist** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Watchlists
   * const watchlists = await prisma.watchlist.findMany()
   * ```
   */
  get watchlist(): Prisma.WatchlistDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.watchlistAudit`: Exposes CRUD operations for the **WatchlistAudit** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WatchlistAudits
   * const watchlistAudits = await prisma.watchlistAudit.findMany()
   * ```
   */
  get watchlistAudit(): Prisma.WatchlistAuditDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.watchlistEventAudit`: Exposes CRUD operations for the **WatchlistEventAudit** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WatchlistEventAudits
   * const watchlistEventAudits = await prisma.watchlistEventAudit.findMany()
   * ```
   */
  get watchlistEventAudit(): Prisma.WatchlistEventAuditDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingReport`: Exposes CRUD operations for the **BookingReport** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingReports
   * const bookingReports = await prisma.bookingReport.findMany()
   * ```
   */
  get bookingReport(): Prisma.BookingReportDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organizationOnboarding`: Exposes CRUD operations for the **OrganizationOnboarding** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrganizationOnboardings
   * const organizationOnboardings = await prisma.organizationOnboarding.findMany()
   * ```
   */
  get organizationOnboarding(): Prisma.OrganizationOnboardingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.app_RoutingForms_IncompleteBookingActions`: Exposes CRUD operations for the **App_RoutingForms_IncompleteBookingActions** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more App_RoutingForms_IncompleteBookingActions
   * const app_RoutingForms_IncompleteBookingActions = await prisma.app_RoutingForms_IncompleteBookingActions.findMany()
   * ```
   */
  get app_RoutingForms_IncompleteBookingActions(): Prisma.App_RoutingForms_IncompleteBookingActionsDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;

  /**
   * `prisma.internalNotePreset`: Exposes CRUD operations for the **InternalNotePreset** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InternalNotePresets
   * const internalNotePresets = await prisma.internalNotePreset.findMany()
   * ```
   */
  get internalNotePreset(): Prisma.InternalNotePresetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.filterSegment`: Exposes CRUD operations for the **FilterSegment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FilterSegments
   * const filterSegments = await prisma.filterSegment.findMany()
   * ```
   */
  get filterSegment(): Prisma.FilterSegmentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.userFilterSegmentPreference`: Exposes CRUD operations for the **UserFilterSegmentPreference** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserFilterSegmentPreferences
   * const userFilterSegmentPreferences = await prisma.userFilterSegmentPreference.findMany()
   * ```
   */
  get userFilterSegmentPreference(): Prisma.UserFilterSegmentPreferenceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingInternalNote`: Exposes CRUD operations for the **BookingInternalNote** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingInternalNotes
   * const bookingInternalNotes = await prisma.bookingInternalNote.findMany()
   * ```
   */
  get bookingInternalNote(): Prisma.BookingInternalNoteDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workflowOptOutContact`: Exposes CRUD operations for the **WorkflowOptOutContact** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more WorkflowOptOutContacts
   * const workflowOptOutContacts = await prisma.workflowOptOutContact.findMany()
   * ```
   */
  get workflowOptOutContact(): Prisma.WorkflowOptOutContactDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Roles
   * const roles = await prisma.role.findMany()
   * ```
   */
  get role(): Prisma.RoleDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RolePermissions
   * const rolePermissions = await prisma.rolePermission.findMany()
   * ```
   */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Agents
   * const agents = await prisma.agent.findMany()
   * ```
   */
  get agent(): Prisma.AgentDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.calAiPhoneNumber`: Exposes CRUD operations for the **CalAiPhoneNumber** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CalAiPhoneNumbers
   * const calAiPhoneNumbers = await prisma.calAiPhoneNumber.findMany()
   * ```
   */
  get calAiPhoneNumber(): Prisma.CalAiPhoneNumberDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.teamBilling`: Exposes CRUD operations for the **TeamBilling** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TeamBillings
   * const teamBillings = await prisma.teamBilling.findMany()
   * ```
   */
  get teamBilling(): Prisma.TeamBillingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.organizationBilling`: Exposes CRUD operations for the **OrganizationBilling** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrganizationBillings
   * const organizationBillings = await prisma.organizationBilling.findMany()
   * ```
   */
  get organizationBilling(): Prisma.OrganizationBillingDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.calendarCacheEvent`: Exposes CRUD operations for the **CalendarCacheEvent** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CalendarCacheEvents
   * const calendarCacheEvents = await prisma.calendarCacheEvent.findMany()
   * ```
   */
  get calendarCacheEvent(): Prisma.CalendarCacheEventDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.routingFormResponse`: Exposes CRUD operations for the **RoutingFormResponse** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more RoutingFormResponses
   * const routingFormResponses = await prisma.routingFormResponse.findMany()
   * ```
   */
  get routingFormResponse(): Prisma.RoutingFormResponseDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingTimeStatus`: Exposes CRUD operations for the **BookingTimeStatus** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingTimeStatuses
   * const bookingTimeStatuses = await prisma.bookingTimeStatus.findMany()
   * ```
   */
  get bookingTimeStatus(): Prisma.BookingTimeStatusDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.bookingTimeStatusDenormalized`: Exposes CRUD operations for the **BookingTimeStatusDenormalized** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more BookingTimeStatusDenormalizeds
   * const bookingTimeStatusDenormalizeds = await prisma.bookingTimeStatusDenormalized.findMany()
   * ```
   */
  get bookingTimeStatusDenormalized(): Prisma.BookingTimeStatusDenormalizedDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname;
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor;
}
