// Simple script to generate lazy loading metadata
const fs = require('fs');
const path = require('path');

const APP_STORE_PATH = path.join(__dirname, '../app-store');

console.log('Generating lazy loading metadata...');

// Function to create lazy-loaded metadata
function generateLazyMetadataFile() {
  const apps = [];
  const templates = [];

  // Read all directories in the app store
  const dirs = fs.readdirSync(APP_STORE_PATH);

  for (const dir of dirs) {
    if (dir === 'ee' || dir === 'templates') {
      const subPath = path.join(APP_STORE_PATH, dir);
      if (fs.statSync(subPath).isDirectory()) {
        const subDirs = fs.readdirSync(subPath);
        for (const subDir of subDirs) {
          if (fs.statSync(path.join(subPath, subDir)).isDirectory()) {
            if (dir === 'templates') {
              templates.push({ name: subDir, path: path.join(dir, subDir) });
            } else {
              apps.push({ name: subDir, path: path.join(dir, subDir) });
            }
          }
        }
      }
    } else if (fs.statSync(path.join(APP_STORE_PATH, dir)).isDirectory()) {
      apps.push({ name: dir, path: dir });
    }
  }

  // Generate the lazy loading code
  let output = `/**
    This file is autogenerated using the command \`yarn app-store:build --watch\`.
    Don't modify this file manually.
**/
// Lazy loading version - imports are now dynamic

// Function to create lazy-loaded metadata
const createLazyMetadata = (importPath: string, isMetadata = false) => {
  return async () => {
    try {
      if (isMetadata) {
        const module = await import(importPath);
        return module.metadata;
      }
      return import(importPath);
    } catch (error) {
      console.warn(\`Failed to load metadata for \${importPath}:\`, error);
      return null;
    }
  };
};

`;

  // Generate lazy loading functions for each app
  const allApps = [...apps, ...templates];

  for (const app of allApps) {
    const configPath = path.join(APP_STORE_PATH, app.path, 'config.json');
    const metadataPath = path.join(APP_STORE_PATH, app.path, '_metadata.ts');

    let isMetadata = false;
    let importPath = '';

    if (fs.existsSync(metadataPath)) {
      importPath = `./${app.path}/_metadata`;
      isMetadata = true;
    } else if (fs.existsSync(configPath)) {
      importPath = `./${app.path}/config.json`;
      isMetadata = false;
    } else {
      continue; // Skip if neither exists
    }

    const varName = app.name.replace(/[-.]/g, '_');
    output += `const ${varName} = createLazyMetadata("${importPath}", ${isMetadata});\n`;
  }

  // Generate the export object
  output += '\n// Export lazy-loaded promises\n';
  output += 'export const appStoreMetadata = {\n';

  for (const app of allApps) {
    const configPath = path.join(APP_STORE_PATH, app.path, 'config.json');
    const metadataPath = path.join(APP_STORE_PATH, app.path, '_metadata.ts');

    if (fs.existsSync(metadataPath) || fs.existsSync(configPath)) {
      const varName = app.name.replace(/[-.]/g, '_');
      output += `  "${app.name}": ${varName},\n`;
    }
  }

  output += '};\n';

  // Write to file
  const outputPath = path.join(APP_STORE_PATH, 'apps.metadata.generated.ts');
  fs.writeFileSync(outputPath, output, 'utf8');

  console.log(`Generated ${outputPath}`);
}

generateLazyMetadataFile();
