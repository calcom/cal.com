@@ -1,73 +0,0 @@
-import type z from "zod";
-
-import { zodNonRouterField } from "@calcom/app-store/routing-forms/zod";
-import { routingFormResponseInDbSchema } from "@calcom/app-store/routing-forms/zod";
-import logger from "@calcom/lib/logger";
-
-import { RoutingFormResponseRepository } from "../../repository/routingFormResponse.repository";
-
-export class RoutingFormResponseService {
-  private response: z.infer<typeof routingFormResponseInDbSchema>;
-  private fields: z.infer<typeof zodNonRouterField>[];
-  private log: typeof logger;
-
-  constructor(data: {
-    response: z.infer<typeof routingFormResponseInDbSchema>;
-    fields: z.infer<typeof zodNonRouterField>[];
-    log: typeof logger;
-  }) {
-    this.response = data.response;
-    this.fields = data.fields;
-    this.log = data.log;
-  }
-
-  static async create({ bookingUid, responseId }: { bookingUid?: string; responseId?: number }) {
-    const log = logger.getSubLogger({ prefix: ["[routingFormFieldService]", { bookingUid, responseId }] });
-    if (!bookingUid && !responseId) {
-      log.error("No bookingUid or responseId provided");
-      throw new Error("No bookingUid or responseId provided");
-    }
-
-    let formResponse;
-    if (responseId) {
-      formResponse = await RoutingFormResponseRepository.findById(responseId);
-    } else if (bookingUid) {
-      formResponse = await RoutingFormResponseRepository.findByBookingUid(bookingUid);
-    }
-
-    if (!formResponse) {
-      log.error("Form response not found");
-      throw new Error("Form response not found");
-    }
-
-    const response = routingFormResponseInDbSchema.safeParse(formResponse.response);
-
-    if (!response.success) {
-      log.error("Form response not found");
-      throw new Error("Form response not found");
-    }
-
-    const fields = zodNonRouterField.array().safeParse(formResponse.form.fields);
-
-    if (!fields.success) {
-      log.error("Form fields not found");
-      throw new Error("Form fields not found");
-    }
-
-    return new RoutingFormResponseService({ response: response.data, fields: fields.data, log });
-  }
-
-  async findFieldValueByIdentifier(identifier: string) {
-    // Find the field id based on the identifier that's passed
-    const field = this.fields.find((field) => field.identifier === identifier);
-
-    if (!field) {
-      this.log.error(`Field with identifier ${identifier} not found`);
-      throw new Error(`Field with identifier ${identifier} not found`);
-    }
-
-    const fieldValue = this.response[field.id].value;
-
-    return fieldValue;
-  }
-}
